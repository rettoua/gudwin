<?xml version="1.0" encoding="utf-8"?>
<Global xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" Name="Global">
  <Packages>
    <Package Name="Ext" Path="Ext">
      <Packages>
        <Package Name="chart" Path="chart" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="Axis" FullName="Ext.chart.Axis" Package="chart" DefinedIn="widgets\chart\Chart.js" Subclasses="Ext.chart.CategoryAxis,Ext.chart.NumericAxis,Ext.chart.TimeAxis">
              <Summary><![CDATA[Defines a CartesianChart's vertical or horizontal axis.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="hideOverlappingLabels">
                  <Summary><![CDATA[If true, labels that overlap previously drawn labels on the axis will be hidden.]]></Summary>
                </Property>
                <Property Name="labelFunction">
                  <Summary><![CDATA[A string reference to the globally-accessible function that may be called to
determine each of the label values for this axis.]]></Summary>
                </Property>
                <Property Name="orientation">
                  <Summary><![CDATA[The direction in which the axis is drawn. May be "horizontal" or "vertical".]]></Summary>
                </Property>
                <Property Name="reverse">
                  <Summary><![CDATA[If true, the items on the axis will be drawn in opposite direction.]]></Summary>
                </Property>
                <Property Name="type">
                  <Summary><![CDATA[The type of axis.]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="BarChart" FullName="Ext.chart.BarChart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="barchart" Extends="Ext.chart.CartesianChart">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="BarSeries" FullName="Ext.chart.BarSeries" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.CartesianSeries">
              <Summary><![CDATA[BarSeries class for the charts widget.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="CartesianChart" FullName="Ext.chart.CartesianChart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="cartesianchart" Extends="Ext.chart.Chart" Subclasses="Ext.chart.BarChart,Ext.chart.ColumnChart,Ext.chart.LineChart,Ext.chart.StackedBarChart,Ext.chart.StackedColumnChart">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="CartesianSeries" FullName="Ext.chart.CartesianSeries" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.Series" Subclasses="Ext.chart.BarSeries,Ext.chart.ColumnSeries,Ext.chart.LineSeries">
              <Summary><![CDATA[CartesianSeries class for the charts widget.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="xField">
                  <Summary><![CDATA[The field used to access the x-axis value from the items from the data source.]]></Summary>
                </Property>
                <Property Name="yField">
                  <Summary><![CDATA[The field used to access the y-axis value from the items from the data source.]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="CategoryAxis" FullName="Ext.chart.CategoryAxis" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.Axis">
              <Summary><![CDATA[A type of axis that displays items in categories.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="categoryNames">
                  <Summary><![CDATA[A list of category names to display along this axis.]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="Chart" FullName="Ext.chart.Chart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="chart" Extends="Ext.FlashComponent" Subclasses="Ext.chart.CartesianChart,Ext.chart.PieChart">
              <Summary><![CDATA[The Ext.chart package provides the capability to visualize data with flash based charting.
Each chart binds directly to an Ext.data.Store enabling automatic updates of the chart.]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="chartStyle" Type="Object">
                  <Summary><![CDATA[Sets styles for this chart. Contains a number of default values. Modifying this property will override
the base styles on the chart.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disableCaching" Type="Boolean">
                  <Summary><![CDATA[True to add a "cache buster" to the end of the chart url. Defaults to true for Opera and IE.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="extraStyle" Type="Object">
                  <Summary><![CDATA[Contains extra styles that will be added or overwritten to the default chartStyle. Defaults to <tt>null</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="url" Type="String">
                  <Summary><![CDATA[The url to load the chart from. This defaults to Ext.chart.Chart.CHART_URL, which should
be modified to point to the local charts resource.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="CHART_URL" Static="true">
                  <Summary><![CDATA[Sets the url to load the chart from. This should be set to a local resource.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="bindStore">
                  <Summary><![CDATA[Changes the data store bound to this chart and refreshes it.]]></Summary>
                  <Parameters>
                    <Param Name="store" Type="Store">
                      <Summary><![CDATA[The store to bind to this chart]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setSeriesStyles">
                  <Summary><![CDATA[Sets the styles on all series in the Chart.]]></Summary>
                  <Parameters>
                    <Param Name="styleslizer" Type="Array} Initi">
                      <Summary><![CDATA[for all Chart series styles.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setStyle">
                  <Summary><![CDATA[Sets a single style value on the Chart instance.]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String} Nam">
                      <Summary><![CDATA[of the Chart style value to change.]]></Summary>
                    </Param>
                    <Param Name="valuealue" Type="Object} New ">
                      <Summary><![CDATA[to pass to the Chart style.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setStyles">
                  <Summary><![CDATA[Resets all styles on the Chart instance.]]></Summary>
                  <Parameters>
                    <Param Name="styleslizer" Type="Object} Initi">
                      <Summary><![CDATA[for all Chart styles.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="ColumnChart" FullName="Ext.chart.ColumnChart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="columnchart" Extends="Ext.chart.CartesianChart">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="ColumnSeries" FullName="Ext.chart.ColumnSeries" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.CartesianSeries">
              <Summary><![CDATA[ColumnSeries class for the charts widget.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="LineChart" FullName="Ext.chart.LineChart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="linechart" Extends="Ext.chart.CartesianChart">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="LineSeries" FullName="Ext.chart.LineSeries" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.CartesianSeries">
              <Summary><![CDATA[LineSeries class for the charts widget.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="NumericAxis" FullName="Ext.chart.NumericAxis" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.Axis">
              <Summary><![CDATA[A type of axis whose units are measured in numeric values.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="alwaysShowZero">
                  <Summary><![CDATA[If true, and the bounds are calculated automatically, either the minimum or
maximum will be set to zero.]]></Summary>
                </Property>
                <Property Name="majorUnit">
                  <Summary><![CDATA[The spacing between major intervals on this axis.]]></Summary>
                </Property>
                <Property Name="maximum">
                  <Summary><![CDATA[The maximum value drawn by the axis. If not set explicitly, the axis maximum
will be calculated automatically.]]></Summary>
                </Property>
                <Property Name="minimum">
                  <Summary><![CDATA[The minimum value drawn by the axis. If not set explicitly, the axis minimum
will be calculated automatically.]]></Summary>
                </Property>
                <Property Name="minorUnit">
                  <Summary><![CDATA[The spacing between minor intervals on this axis.]]></Summary>
                </Property>
                <Property Name="scale">
                  <Summary><![CDATA[The scaling algorithm to use on this axis. May be "linear" or "logarithmic".]]></Summary>
                </Property>
                <Property Name="snapToUnits">
                  <Summary><![CDATA[If true, the labels, ticks, gridlines, and other objects will snap to
the nearest major or minor unit. If false, their position will be based
on the minimum value.]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="PieChart" FullName="Ext.chart.PieChart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="piechart" Extends="Ext.chart.Chart">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="PieSeries" FullName="Ext.chart.PieSeries" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.Series">
              <Summary><![CDATA[PieSeries class for the charts widget.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Series" FullName="Ext.chart.Series" Package="chart" DefinedIn="widgets\chart\Chart.js" Subclasses="Ext.chart.CartesianSeries,Ext.chart.PieSeries">
              <Summary><![CDATA[Series class for the charts widget.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="displayName">
                  <Summary><![CDATA[The human-readable name of the series.]]></Summary>
                </Property>
                <Property Name="type">
                  <Summary><![CDATA[The type of series.]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="StackedBarChart" FullName="Ext.chart.StackedBarChart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="stackedbarchart" Extends="Ext.chart.CartesianChart">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="StackedColumnChart" FullName="Ext.chart.StackedColumnChart" Package="chart" DefinedIn="widgets\chart\Chart.js" Xtype="stackedcolumnchart" Extends="Ext.chart.CartesianChart">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="TimeAxis" FullName="Ext.chart.TimeAxis" Package="chart" DefinedIn="widgets\chart\Chart.js" Extends="Ext.chart.Axis">
              <Summary><![CDATA[A type of axis whose units are measured in time-based values.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="majorTimeUnit">
                  <Summary><![CDATA[The time unit used by the majorUnit.]]></Summary>
                </Property>
                <Property Name="majorUnit">
                  <Summary><![CDATA[The spacing between major intervals on this axis.]]></Summary>
                </Property>
                <Property Name="maximum">
                  <Summary><![CDATA[The maximum value drawn by the axis. If not set explicitly, the axis maximum
will be calculated automatically.]]></Summary>
                </Property>
                <Property Name="minimum">
                  <Summary><![CDATA[The minimum value drawn by the axis. If not set explicitly, the axis minimum
will be calculated automatically.]]></Summary>
                </Property>
                <Property Name="snapToUnits">
                  <Summary><![CDATA[If true, the labels, ticks, gridlines, and other objects will snap to
the nearest major or minor unit. If false, their position will be based
on the minimum value.]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="data" Path="data" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="Api" FullName="Ext.data.Api" Package="data" DefinedIn="data\Api.js" Extends="Object" Singleton="true">
              <Summary><![CDATA[Ext.data.Api is a singleton designed to manage the data API including methods
for validating a developer's DataProxy API.  Defines variables for CRUD actions
create, read, update and destroy in addition to a mapping of RESTful HTTP methods
GET, POST, PUT and DELETE to CRUD actions.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="actions">
                  <Summary><![CDATA[Defined actions corresponding to remote actions:
<pre><code>
actions: {
create  : 'create',  // Text representing the remote-action to create records on server.
read    : 'read',    // Text representing the remote-action to read/load data from server.
update  : 'update',  // Text representing the remote-action to update records on server.
destroy : 'destroy'  // Text representing the remote-action to destroy records on server.
}
</code></pre>]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getVerb">
                  <Summary><![CDATA[Returns the actual CRUD action KEY "create", "read", "update" or "destroy" from the supplied action-name.  This method is used internally and shouldn't generally
need to be used directly.  The key/value pair of Ext.data.Api.actions will often be identical but this is not necessarily true.  A developer can override this naming
convention if desired.  However, the framework internally calls methods based upon the KEY so a way of retreiving the the words "create", "read", "update" and "destroy" is
required.  This method will cache discovered KEYS into the private validActions hash.]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The runtime name of the action.
@nodoc]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String||null">
                    <Summary><![CDATA[returns the action-key, or verb of the user-action or null if invalid.]]></Summary>
                  </Return>
                </Method>
                <Method Name="hasUniqueUrl">
                  <Summary><![CDATA[Returns true if the supplied verb upon the supplied proxy points to a unique url in that none of the other api-actions
point to the same url.  The question is important for deciding whether to insert the "xaction" HTTP parameter within an
Ajax request.  This method is used internally and shouldn't generally need to be called directly.]]></Summary>
                  <Parameters>
                    <Param Name="proxy" Type="Ext.data.DataProxy" />
                    <Param Name="verb" Type="String" />
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isAction">
                  <Summary><![CDATA[Returns true if supplied action-name is a valid API action defined in <code>{@link #actions}</code> constants]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String" />
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isValid">
                  <Summary><![CDATA[Returns true if the supplied API is valid; that is, check that all keys match defined actions
otherwise returns an array of mistakes.]]></Summary>
                  <Parameters />
                  <Return Type="String[]||true" />
                </Method>
                <Method Name="prepare">
                  <Summary><![CDATA[This method is used internally by <tt>{@link Ext.data.DataProxy DataProxy}</tt> and should not generally need to be used directly.
Each action of a DataProxy api can be initially defined as either a String or an Object.  When specified as an object,
one can explicitly define the HTTP method (GET|POST) to use for each CRUD action.  This method will prepare the supplied API, setting
each action to the Object form.  If your API-actions do not explicitly define the HTTP method, the "method" configuration-parameter will
be used.  If the method configuration parameter is not specified, POST will be used.
         <pre><code>
new Ext.data.HttpProxy({
    method: "POST",     // <-- default HTTP method when not specified.
    api: {
        create: 'create.php',
        load: 'read.php',
        save: 'save.php',
        destroy: 'destroy.php'
    }
});

// Alternatively, one can use the object-form to specify the API
new Ext.data.HttpProxy({
    api: {
        load: {url: 'read.php', method: 'GET'},
        create: 'create.php',
        destroy: 'destroy.php',
        save: 'update.php'
    }
});
        </code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="proxy" Type="Ext.data.DataProxy" />
                  </Parameters>
                </Method>
                <Method Name="Response">
                  <Summary><![CDATA[Ext.data.Response
Experimental.  Do not use directly.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="restify">
                  <Summary><![CDATA[Prepares a supplied Proxy to be RESTful.  Sets the HTTP method for each api-action to be one of
GET, POST, PUT, DELETE according to the defined {@link #restActions}.]]></Summary>
                  <Parameters>
                    <Param Name="proxy" Type="Ext.data.DataProxy" />
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="Api.Error" FullName="Ext.data.Api.Error" Package="data" DefinedIn="data\Api.js" Extends="Ext.Error">
              <Summary><![CDATA[Error class for Ext.data.Api errors]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="ArrayReader" FullName="Ext.data.ArrayReader" Package="data" DefinedIn="data\ArrayReader.js" Extends="Ext.data.JsonReader">
              <Summary><![CDATA[<p>Data reader class to create an Array of {@link Ext.data.Record} objects from an Array.
Each element of that Array represents a row of data fields. The
fields are pulled into a Record object using as a subscript, the <code>mapping</code> property
of the field definition if it exists, or the field's ordinal position in the definition.</p>
<p>Example code:</p>
<pre><code>
var Employee = Ext.data.Record.create([
   {name: 'name', mapping: 1},         // "mapping" only needed if an "id" field is present which
   {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.
]);
var myReader = new Ext.data.ArrayReader({
   {@link #idIndex}: 0
}, Employee);
</code></pre>
<p>This would consume an Array like this:</p>
<pre><code>
[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]
</code></pre>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new ArrayReader.]]></Summary>
                <Parameters>
                  <Param Name="meta" Type="Object">
                    <Summary><![CDATA[Metadata configuration options.]]></Summary>
                  </Param>
                  <Param Name="recordType" Type="Array/Object">
                    <Summary><![CDATA[ <p>Either an Array of {@link Ext.data.Field Field} definition objects (which will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record} constructor created from {@link Ext.data.Record#create}.</p>]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="id" Type="Number">
                  <Summary><![CDATA[Deprecated. Use {@link #idIndex} instead.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="idIndex" Type="Number" />
                <ConfigOption Name="successProperty" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="readRecords">
                  <Summary><![CDATA[Create a data block containing Ext.data.Records from an Array.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[An Array of row objects which represents the dataset.
a cache of Ext.data.Records.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[data A data block which is used by an Ext.data.Store object as]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="ArrayStore" FullName="Ext.data.ArrayStore" Package="data" DefinedIn="data\ArrayStore.js" Xtype="arraystore" Extends="Ext.data.Store">
              <Summary><![CDATA[<p>Formerly known as "SimpleStore".</p>
<p>Small helper class to make creating {@link Ext.data.Store}s from Array data easier.
An ArrayStore will be automatically configured with a {@link Ext.data.ArrayReader}.</p>
<p>A store configuration would be something like:<pre><code>
var store = new Ext.data.ArrayStore({
    // store configs
    autoDestroy: true,
    storeId: 'myStore',
    // reader configs
    idIndex: 0,  
    fields: [
       'company',
      {name: 'price', type: 'float'},
      {name: 'change', type: 'float'},
      {name: 'pctChange', type: 'float'},
      {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}
    ]
});
</code></pre></p>
<p>This store is configured to consume a returned object of the form:<pre><code>
var myData = [
    ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],
    ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],
    ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],
    ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],
    ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']
];
</code></pre>
An object literal of this form could also be used as the {@link #data} config option.</p>
<p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
<b>{@link Ext.data.ArrayReader ArrayReader}</b>.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="reader" Type="Ext.data.DataReader" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Connection" FullName="Ext.data.Connection" Package="data" DefinedIn="data\core\Connection.js" Extends="Ext.util.Observable" Subclasses="Ext.Ajax">
              <Summary><![CDATA[<p>The class encapsulates a connection to the page's originating domain, allowing requests to be made
either to a configured URL, or to a URL specified at request time.</p>
<p>Requests made by this class are asynchronous, and will return immediately. No data from
the server will be available to the statement immediately following the {@link #request} call.
To process returned data, use a
<a href="#request-option-success" ext:member="request-option-success" ext:cls="Ext.data.Connection">success callback</a>
in the request options object,
or an {@link #requestcomplete event listener}.</p>
<p><h3>File Uploads</h3><a href="#request-option-isUpload" ext:member="request-option-isUpload" ext:cls="Ext.data.Connection">File uploads</a> are not performed using normal "Ajax" techniques, that
is they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard
manner with the DOM <tt>&lt;form></tt> element temporarily modified to have its
<a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
but removed after the return data has been gathered.</p>
<p>The server response is parsed by the browser to create the document for the IFRAME. If the
server is using JSON to send the return object, then the
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
<p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
"&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
<p>The response text is retrieved from the document, and a fake XMLHttpRequest object
is created containing a <tt>responseText</tt> property in order to conform to the
requirements of event handlers and callbacks.</p>
<p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[a configuration object.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoAbort" Type="Boolean">
                  <Summary><![CDATA[@type Boolean]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultHeaders" Type="Object">
                  <Summary><![CDATA[to each request made by this object. (defaults to undefined)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disableCaching" Type="Boolean">
                  <Summary><![CDATA[@type Boolean]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disableCachingParam" Type="String">
                  <Summary><![CDATA[through a cache buster. Defaults to '_dc'
@type String]]></Summary>
                </ConfigOption>
                <ConfigOption Name="extraParams" Type="Object">
                  <Summary><![CDATA[extra parameters to each request made by this object. (defaults to undefined)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="method" Type="String">
                  <Summary><![CDATA[(defaults to undefined; if not set, but {@link #request} params are present, POST will be used;
otherwise, GET will be used.)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="timeout" Type="Number" />
                <ConfigOption Name="url" Type="String">
                  <Summary><![CDATA[<p>The <code>url</code> config may be a function which <i>returns</i> the URL to use for the Ajax request. The scope
(<code><b>this</b></code> reference) of the function is the <code>scope</code> option passed to the {@link #request} method.</p>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="abort">
                  <Summary><![CDATA[Aborts any outstanding request.]]></Summary>
                  <Parameters>
                    <Param Name="transactionId" Type="Number" Optional="true">
                      <Summary><![CDATA[defaults to the last transaction]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="isLoading">
                  <Summary><![CDATA[Determine whether this object has a request outstanding.]]></Summary>
                  <Parameters>
                    <Param Name="transactionId" Type="Number" Optional="true">
                      <Summary><![CDATA[defaults to the last transaction]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if there is an outstanding request.]]></Summary>
                  </Return>
                </Method>
                <Method Name="request">
                  <Summary><![CDATA[<p>Sends an HTTP request to a remote server.</p>
<p><b>Important:</b> Ajax server requests are asynchronous, and this call will
return before the response has been received. Process any returned data
in a callback function.</p>
<pre><code>
Ext.Ajax.request({
   url: 'ajax_demo/sample.json',
   success: function (response, opts) {
      var obj = Ext.decode(response.responseText);
      console.dir(obj);
   },
   failure: function (response, opts) {
      console.log('server-side failure with status code ' + response.status);
   }
});
</code></pre>
<p>To execute a callback function in the correct scope, use the <tt>scope</tt> option.</p>]]></Summary>
                  <Parameters>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[An object which may contain the following properties:<ul>
<li><b>url</b> : String/Function (Optional)<div class="sub-desc">The URL to
which to send the request, or a function to call which returns a URL string. The scope of the
function is specified by the <tt>scope</tt> option. Defaults to the configured
<tt>{@link #url}</tt>.</div></li>
<li><b>params</b> : Object/String/Function (Optional)<div class="sub-desc">
An object containing properties which are used as parameters to the
request, a url encoded string or a function to call to get either. The scope of the function
is specified by the <tt>scope</tt> option.</div></li>
<li><b>method</b> : String (Optional)<div class="sub-desc">The HTTP method to use
for the request. Defaults to the configured method, or if no method was configured,
"GET" if no parameters are being sent, and "POST" if parameters are being sent.  Note that
the method name is case-sensitive and should be all caps.</div></li>
<li><b>callback</b> : Function (Optional)<div class="sub-desc">The
function to be called upon receipt of the HTTP response. The callback is
called regardless of success or failure and is passed the following
parameters:<ul>
<li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
<li><b>success</b> : Boolean<div class="sub-desc">True if the request succeeded.</div></li>
<li><b>response</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.
See <a href="http://www.w3.org/TR/XMLHttpRequest/">http://www.w3.org/TR/XMLHttpRequest/</a> for details about
accessing elements of the response.</div></li>
</ul></div></li>
<li><a id="request-option-success"></a><b>success</b> : Function (Optional)<div class="sub-desc">The function
to be called upon success of the request. The callback is passed the following
parameters:<ul>
<li><b>response</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.</div></li>
<li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
</ul></div></li>
<li><b>failure</b> : Function (Optional)<div class="sub-desc">The function
to be called upon failure of the request. The callback is passed the
following parameters:<ul>
<li><b>response</b> : Object<div class="sub-desc">The XMLHttpRequest object containing the response data.</div></li>
<li><b>options</b> : Object<div class="sub-desc">The parameter to the request call.</div></li>
</ul></div></li>
<li><b>scope</b> : Object (Optional)<div class="sub-desc">The scope in
which to execute the callbacks: The "this" object for the callback function. If the <tt>url</tt>, or <tt>params</tt> options were
specified as functions from which to draw values, then this also serves as the scope for those function calls.
Defaults to the browser window.</div></li>
<li><b>timeout</b> : Number (Optional)<div class="sub-desc">The timeout in milliseconds to be used for this request. Defaults to 30 seconds.</div></li>
<li><b>form</b> : Element/HTMLElement/String (Optional)<div class="sub-desc">The <tt>&lt;form&gt;</tt>
Element or the id of the <tt>&lt;form&gt;</tt> to pull parameters from.</div></li>
<li><a id="request-option-isUpload"></a><b>isUpload</b> : Boolean (Optional)<div class="sub-desc"><b>Only meaningful when used
with the <tt>form</tt> option</b>.
<p>True if the form object is a file upload (will be set automatically if the form was
configured with <b><tt>enctype</tt></b> "multipart/form-data").</p>
<p>File uploads are not performed using normal "Ajax" techniques, that is they are <b>not</b>
performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
DOM <tt>&lt;form></tt> element temporarily modified to have its
<a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
but removed after the return data has been gathered.</p>
<p>The server response is parsed by the browser to create the document for the IFRAME. If the
server is using JSON to send the return object, then the
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
<p>The response text is retrieved from the document, and a fake XMLHttpRequest object
is created containing a <tt>responseText</tt> property in order to conform to the
requirements of event handlers and callbacks.</p>
<p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</p>
</div></li>
<li><b>headers</b> : Object (Optional)<div class="sub-desc">Request
headers to set for the request.</div></li>
<li><b>xmlData</b> : Object (Optional)<div class="sub-desc">XML document
to use for the post. Note: This will be used instead of params for the post
data. Any params will be appended to the URL.</div></li>
<li><b>jsonData</b> : Object/String (Optional)<div class="sub-desc">JSON
data to use as the post. Note: This will be used instead of params for the post
data. Any params will be appended to the URL.</div></li>
<li><b>disableCaching</b> : Boolean (Optional)<div class="sub-desc">True
to add a unique cache-buster param to GET requests.</div></li>
</ul></p>
<p>The options object may also contain any other property which might be needed to perform
postprocessing in a callback because it is passed to callback functions.</p>
to cancel the request.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[transactionId The id of the server transaction. This may be used]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforerequest">
                  <Summary><![CDATA[Fires before a network request is made to retrieve a data object.]]></Summary>
                  <Parameters>
                    <Param Name="conn" Type="Connection">
                      <Summary><![CDATA[This Connection object.]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The options config object passed to the {@link #request} method.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="requestcomplete">
                  <Summary><![CDATA[Fires if the request was successfully completed. See <a href="http://www.w3.org/TR/XMLHttpRequest/">The XMLHttpRequest Object</a> for details.]]></Summary>
                  <Parameters>
                    <Param Name="conn" Type="Connection">
                      <Summary><![CDATA[This Connection object.]]></Summary>
                    </Param>
                    <Param Name="response" Type="Object">
                      <Summary><![CDATA[The XHR object containing the response data.]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The options config object passed to the {@link #request} method.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="requestexception">
                  <Summary><![CDATA[Fires if an error HTTP status was returned from the server. See <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP Status Code Definitions</a> for details of HTTP status codes. See <a href="http://www.w3.org/TR/XMLHttpRequest/">The XMLHttpRequest Object</a> for details.]]></Summary>
                  <Parameters>
                    <Param Name="conn" Type="Connection">
                      <Summary><![CDATA[This Connection object.]]></Summary>
                    </Param>
                    <Param Name="response" Type="Object">
                      <Summary><![CDATA[The XHR object containing the response data.]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The options config object passed to the {@link #request} method.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DataProxy" FullName="Ext.data.DataProxy" Package="data" DefinedIn="data\DataProxy.js" Extends="Ext.util.Observable" Subclasses="Ext.data.DirectProxy,Ext.data.HttpProxy,Ext.data.MemoryProxy,Ext.data.ScriptTagProxy">
              <Summary><![CDATA[<p>Abstract base class for implementations which provide retrieval of unformatted data objects.
This class is intended to be extended and should not be created directly. For existing implementations,
see {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and
{@link Ext.data.MemoryProxy}.</p>
<p>DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}
(of the appropriate type which knows how to parse the data object) to provide a block of
{@link Ext.data.Records} to an {@link Ext.data.Store}.</p>
<p>The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the
config object to an {@link Ext.data.Connection}.</p>
<p>Custom implementations must implement either the <code><b>doRequest</b></code> method (preferred) or the
<code>load</code> method (deprecated). See
{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or
{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.</p>
<p><b><u>Example 1</u></b></p>
<pre><code>
proxy: new Ext.data.ScriptTagProxy({
   {@link Ext.data.Connection#url url}: 'http://extjs.com/forum/topics-remote.php'
}),
</code></pre>
<p><b><u>Example 2</u></b></p>
<pre><code>
proxy : new Ext.data.HttpProxy({
   {@link Ext.data.Connection#method method}: 'GET',
   {@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,
   {@link Ext.data.Connection#url url}: 'local/default.php', // see options parameter for {@link Ext.Ajax#request}
   {@link #api}: {
        // all actions except the following will use above url
        create  : 'local/new.php',
        update  : 'local/update.php'
    }
}),
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="api" Type="Object">
                  <Summary><![CDATA[Specific urls to call on CRUD action methods "read", "create", "update" and "destroy".
Defaults to:<pre><code>
api: {
    read    : undefined,
    create  : undefined,
    update  : undefined,
    destroy : undefined
}
</code></pre>
<p>The url is built based upon the action being executed <tt>[load|create|save|destroy]</tt>
using the commensurate <tt>{@link #api}</tt> property, or if undefined default to the
configured {@link Ext.data.Store}.{@link Ext.data.Store#url url}.</p><br>
<p>For example:</p>
<pre><code>
api: {
    load :    '/controller/load',
    create :  '/controller/new',  // Server MUST return idProperty of new record
    save :    '/controller/update',
    destroy : '/controller/destroy_action'
}

// Alternatively, one can use the object-form to specify each API-action
api: {
    load: {url: 'read.php', method: 'GET'},
    create: 'create.php',
    destroy: 'destroy.php',
    save: 'update.php'
}
</code></pre>
<p>If the specific URL for a given CRUD action is undefined, the CRUD action request
will be directed to the configured <tt>{@link Ext.data.Connection#url url}</tt>.</p>
<br><p><b>Note</b>: To modify the URL for an action dynamically the appropriate API
property should be modified before the action is requested using the corresponding before
action event.  For example to modify the URL associated with the load action:
<pre><code>
// modify the url for the action
myStore.on({
    beforeload: {
        fn: function (store, options) {
            // use <tt>{@link Ext.data.HttpProxy#setUrl setUrl}</tt> to change the URL for *just* this request.
            store.proxy.setUrl('changed1.php');

            // set optional second parameter to true to make this URL change
            // permanent, applying this URL for all subsequent requests.
            store.proxy.setUrl('changed1.php', true);

            // Altering the proxy API should be done using the public
            // method <tt>{@link Ext.data.DataProxy#setApi setApi}</tt>.
            store.proxy.setApi('read', 'changed2.php');

            // Or set the entire API with a config-object.
            // When using the config-object option, you must redefine the <b>entire</b>
            // API -- not just a specific action of it.
            store.proxy.setApi({
                read    : 'changed_read.php',
                create  : 'changed_create.php',
                update  : 'changed_update.php',
                destroy : 'changed_destroy.php'
            });
        }
    }
});
</code></pre>
</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="restful" Type="Boolean">
                  <Summary><![CDATA[<p>Defaults to <tt>false</tt>.  Set to <tt>true</tt> to operate in a RESTful manner.</p>
<br><p> Note: this parameter will automatically be set to <tt>true</tt> if the
{@link Ext.data.Store} it is plugged into is set to <code>restful: true</code>. If the
Store is RESTful, there is no need to set this option on the proxy.</p>
<br><p>RESTful implementations enable the serverside framework to automatically route
actions sent to one url based upon the HTTP method, for example:
<pre><code>
store: new Ext.data.Store({
    restful: true,
    proxy: new Ext.data.HttpProxy({url:'/users'}); // all requests sent to /users
    ...
)}
</code></pre>
If there is no <code>{@link #api}</code> specified in the configuration of the proxy,
all requests will be marshalled to a single RESTful url (/users) so the serverside
framework can inspect the HTTP Method and act accordingly:
<pre>
<u>Method</u>   <u>url</u>        <u>action</u>
POST     /users     create
GET      /users     read
PUT      /users/23  update
DESTROY  /users/23  delete
</pre></p>
<p>If set to <tt>true</tt>, a {@link Ext.data.Record#phantom non-phantom} record's
{@link Ext.data.Record#id id} will be appended to the url. Some MVC (e.g., Ruby on Rails,
Merb and Django) support segment based urls where the segments in the URL follow the
Model-View-Controller approach:<pre><code>
someSite.com/controller/action/id
</code></pre>
Where the segments in the url are typically:<div class="mdetail-params"><ul>
<li>The first segment : represents the controller class that should be invoked.</li>
<li>The second segment : represents the class function, or method, that should be called.</li>
<li>The third segment : represents the ID (a variable typically passed to the method).</li>
</ul></div></p>
<br><p>Refer to <code>{@link Ext.data.DataProxy#api}</code> for additional information.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="doRequest" Type="Function">
                  <Summary><![CDATA[(e.g.: {@link Ext.data.HttpProxy#doRequest HttpProxy.doRequest},
{@link Ext.data.DirectProxy#doRequest DirectProxy.doRequest}).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="setApi">
                  <Summary><![CDATA[<p>Redefines the Proxy's API or a single action of an API. Can be called with two method signatures.</p>
<p>If called with an object as the only parameter, the object should redefine the <b>entire</b> API, e.g.:</p><pre><code>
proxy.setApi({
    read    : '/users/read',
    create  : '/users/create',
    update  : '/users/update',
    destroy : '/users/destroy'
});
</code></pre>
<p>If called with two parameters, the first parameter should be a string specifying the API action to
redefine and the second parameter should be the URL (or function if using DirectProxy) to call for that action, e.g.:</p><pre><code>
proxy.setApi(Ext.data.Api.actions.read, '/users/new_load_url');
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="api" Type="String/Object">
                      <Summary><![CDATA[An API specification object, or the name of an action.]]></Summary>
                    </Param>
                    <Param Name="url" Type="String/Function">
                      <Summary><![CDATA[The URL (or function if using DirectProxy) to call for the action.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="isApiAction">
                  <Summary><![CDATA[Returns true if the specified action is defined as a unique action in the api-config.
request.  If all API-actions are routed to unique urls, the xaction parameter is unecessary.  However, if no api is defined
and all Proxy actions are routed to DataProxy#url, the server-side will require the xaction parameter to perform a switch to
the corresponding code for CRUD action.]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String [Ext.data.Api.CREATE|READ|UPDATE|DESTROY]" />
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="request">
                  <Summary><![CDATA[All proxy actions are executed through this method.  Automatically fires the "before" + action event]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[Name of the action]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Ext.data.Record/Ext.data.Record[]/null">
                      <Summary><![CDATA[Will be null when action is 'load']]></Summary>
                    </Param>
                    <Param Name="params" Type="Object" />
                    <Param Name="reader" Type="Ext.data.DataReader" />
                    <Param Name="callback" Type="Function" />
                    <Param Name="scope" Type="Object">
                      <Summary><![CDATA[Scope with which to call the callback (defaults to the Proxy object)]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[Any options specified for the action (e.g. see {@link Ext.data.Store#load}.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="exception">
                  <Summary><![CDATA[<p>Fires if an exception occurs in the Proxy during a remote request. This event is relayed through a corresponding {@link Ext.data.Store}.{@link Ext.data.Store#exception exception}, so any Store instance may observe this event. This event can be fired for one of two reasons:</p> <div class="mdetail-params"><ul> <li>remote-request <b>failed</b> : <div class="sub-desc"> The server did not return status === 200. </div></li> <li>remote-request <b>succeeded</b> : <div class="sub-desc"> The remote-request succeeded but the reader could not read the response. This means the server returned data, but the configured Reader threw an error while reading the response. In this case, this event will be raised and the caught error will be passed along into this event. </div></li> </ul></div> <br><p>This event fires with two different contexts based upon the 2nd parameter <tt>type [remote|response]</tt>. The first four parameters are identical between the two contexts -- only the final two parameters differ.</p> <p>The value of this parameter will be either <tt>'response'</tt> or <tt>'remote'</tt>.</p> <div class="mdetail-params"><ul> <li><b><tt>'response'</tt></b> : <div class="sub-desc"> <p>An <b>invalid</b> response from the server was returned: either 404, 500 or the response meta-data does not match that defined in the DataReader (e.g.: root, idProperty, successProperty).</p> </div></li> <li><b><tt>'remote'</tt></b> : <div class="sub-desc"> <p>A <b>valid</b> response was returned from the server having successProperty === false. This response might contain an error-message sent from the server. For example, the user may have failed authentication/authorization or a database validation error occurred.</p> </div></li> </ul></div> <p>The value of this parameter depends on the value of the <code>type</code> parameter:</p> <div class="mdetail-params"><ul> <li><b><tt>'response'</tt></b> : <div class="sub-desc"> <p>The raw browser response object (e.g.: XMLHttpRequest)</p> </div></li> <li><b><tt>'remote'</tt></b> : <div class="sub-desc"> <p>The decoded response object sent from the server.</p> </div></li> </ul></div> <p>The type and value of this parameter depends on the value of the <code>type</code> parameter:</p> <div class="mdetail-params"><ul> <li><b><tt>'response'</tt></b> : Error<div class="sub-desc"> <p>The JavaScript Error object caught if the configured Reader could not read the data. If the remote request returns success===false, this parameter will be null.</p> </div></li> <li><b><tt>'remote'</tt></b> : Record/Record[]<div class="sub-desc"> <p>This parameter will only exist if the <tt>action</tt> was a <b>write</b> action (Ext.data.Api.actions.create|update|destroy).</p> </div></li> </ul></div>.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="DataProxy">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="type" Type="String" />
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[Name of the action (see {@link Ext.data.Api#actions}.]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The options for the action that were specified in the {@link #request}.]]></Summary>
                    </Param>
                    <Param Name="response" Type="Object" />
                    <Param Name="arg" Type="Mixed" />
                  </Parameters>
                </Event>
                <Event Name="beforeload">
                  <Summary><![CDATA[Fires before a request to retrieve a data object.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="DataProxy">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="params" Type="Object">
                      <Summary><![CDATA[The params object passed to the {@link #request} function]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="load">
                  <Summary><![CDATA[Fires before the load method's callback is called.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="DataProxy">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The request transaction object]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The callback's <tt>options</tt> property as passed to the {@link #request} function]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="loadexception">
                  <Summary><![CDATA[<p>This event is <b>deprecated</b>. The signature of the loadexception event varies depending on the proxy, use the catch-all {@link #exception} event instead. This event will fire in addition to the {@link #exception} event.</p> @deprecated.]]></Summary>
                  <Parameters>
                    <Param Name="misc" Type="misc">
                      <Summary><![CDATA[See {@link #exception}.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforewrite">
                  <Summary><![CDATA[Fires before a request is generated for one of the actions Ext.data.Api.actions.create|update|destroy.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="DataProxy">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[Ext.data.Api.actions.create|update|destroy]]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Record/Array[Record]">
                      <Summary><![CDATA[The Record(s) to create|update|destroy.]]></Summary>
                    </Param>
                    <Param Name="params" Type="Object">
                      <Summary><![CDATA[The request <code>params</code> object.  Edit <code>params</code> to add parameters to the request.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="write">
                  <Summary><![CDATA[Fires before the request-callback is called.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="DataProxy">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[Ext.data.Api.actions.create|upate|destroy]]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[The data object extracted from the server-response]]></Summary>
                    </Param>
                    <Param Name="response" Type="Object">
                      <Summary><![CDATA[The decoded response from server]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Record/Record{}">
                      <Summary><![CDATA[The records from Store]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The callback's <tt>options</tt> property as passed to the {@link #request} function]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DataProxy.Error" FullName="Ext.data.DataProxy.Error" Package="data" DefinedIn="data\DataProxy.js" Extends="Ext.Error">
              <Summary><![CDATA[DataProxy Error extension.
constructor]]></Summary>
              <Constructor>
                <Parameters />
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="DataReader" FullName="Ext.data.DataReader" Package="data" DefinedIn="data\DataReader.js" Subclasses="Ext.data.JsonReader,Ext.data.XmlReader">
              <Summary><![CDATA[Abstract base class for reading structured data from a data source and converting
it into an object containing {@link Ext.data.Record} objects and metadata for use
by an {@link Ext.data.Store}.  This class is intended to be extended and should not
be created directly. For existing implementations, see {@link Ext.data.ArrayReader},
{@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="meta" Type="Object">
                    <Summary><![CDATA[Metadata configuration options (implementation-specific).]]></Summary>
                  </Param>
                  <Param Name="recordType" Type="Array/Object">
                    <Summary><![CDATA[ <p>Either an Array of {@link Ext.data.Field Field} definition objects (which will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record} constructor created using {@link Ext.data.Record#create}.</p>]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="fields" Type="Array/Object">
                  <Summary><![CDATA[<p>Either an Array of {@link Ext.data.Field Field} definition objects (which
will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}
constructor created from {@link Ext.data.Record#create}.</p>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="meta">
                  <Summary><![CDATA[This DataReader's configured metadata as passed to the constructor.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="isData">
                  <Summary><![CDATA[Returns true if the supplied data-hash <b>looks</b> and quacks like data.  Checks to see if it has a key
corresponding to idProperty defined in your DataReader config containing non-empty pk.]]></Summary>
                  <Parameters>
                    <Param Name="data" Type="Object" />
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="realize">
                  <Summary><![CDATA[Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.
You <b>must</b> return at least the database pk using the idProperty defined in your DataReader configuration.  The incoming
data from server will be merged with the data in the local record.
In addition, you <b>must</b> return record-data from the server in the same order received.
Will perform a commit as well, un-marking dirty-fields.  Store's "update" event will be suppressed.]]></Summary>
                  <Parameters>
                    <Param Name="record" Type="Record/Record[]">
                      <Summary><![CDATA[The phantom record to be realized.]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object/Object[]">
                      <Summary><![CDATA[The new record data to apply.  Must include the primary-key from database defined in idProperty field.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="update">
                  <Summary><![CDATA[Used for updating a non-phantom or "real" record's data with fresh data from server after remote-save.
If returning data from multiple-records after a batch-update, you <b>must</b> return record-data from the server in
the same order received.  Will perform a commit as well, un-marking dirty-fields.  Store's "update" event will be
suppressed as the record receives fresh new data-hash]]></Summary>
                  <Parameters>
                    <Param Name="rs" Type="Record/Record[]" />
                    <Param Name="data" Type="Object/Object[]" />
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DataReader.Error" FullName="Ext.data.DataReader.Error" Package="data" DefinedIn="data\DataReader.js" Extends="Ext.Error">
              <Summary><![CDATA[General error class for Ext.data.DataReader]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="DataWriter" FullName="Ext.data.DataWriter" Package="data" DefinedIn="data\DataWriter.js" Subclasses="Ext.data.JsonWriter,Ext.data.XmlWriter">
              <Summary><![CDATA[<p>Ext.data.DataWriter facilitates create, update, and destroy actions between
an Ext.data.Store and a server-side framework. A Writer enabled Store will
automatically manage the Ajax requests to perform CRUD actions on a Store.</p>
<p>Ext.data.DataWriter is an abstract base class which is intended to be extended
and should not be created directly. For existing implementations, see
{@link Ext.data.JsonWriter}.</p>
<p>Creating a writer is simple:</p>
<pre><code>
var writer = new Ext.data.JsonWriter();
</code></pre>
<p>The proxy for a writer enabled store can be configured with a simple <code>url</code>:</p>
<pre><code>
// Create a standard HttpProxy instance.
var proxy = new Ext.data.HttpProxy({
    url: 'app.php/users'
});
</code></pre>
<p>For finer grained control, the proxy may also be configured with an <code>api</code>:</p>
<pre><code>
// Use the api specification
var proxy = new Ext.data.HttpProxy({
    api: {
        read    : 'app.php/users/read',
        create  : 'app.php/users/create',
        update  : 'app.php/users/update',
        destroy : 'app.php/users/destroy'
    }
});
</code></pre>
<p>Creating a Writer enabled store:</p>
<pre><code>
var store = new Ext.data.Store({
    proxy: proxy,
    reader: reader,
    writer: writer
});
</code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="meta" Type="Object">
                    <Summary><![CDATA[Metadata configuration options (implementation-specific)]]></Summary>
                  </Param>
                  <Param Name="recordType" Type="Object">
                    <Summary><![CDATA[Either an Array of field definition objects as specified in {@link Ext.data.Record#create}, or an {@link Ext.data.Record} object created using {@link Ext.data.Record#create}.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="writeAllFields" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt> by default.  Set <tt>true</tt> to have DataWriter return ALL fields of a modified
record -- not just those that changed.
<tt>false</tt> to have DataWriter only request modified fields from a record.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="listful" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt> by default.  Set <tt>true</tt> to have the DataWriter <b>always</b> write HTTP params as a list,
even when acting upon a single record.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="meta">
                  <Summary><![CDATA[This DataWriter's configured metadata as passed to the constructor.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="write">
                  <Summary><![CDATA[Writes data in preparation for server-write action.  Simply proxies to DataWriter#update, DataWriter#create
DataWriter#destroy.]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[CREATE|UPDATE|DESTROY]]]></Summary>
                    </Param>
                    <Param Name="params" Type="Object">
                      <Summary><![CDATA[The params-hash to write-to]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Record/Record[]">
                      <Summary><![CDATA[The recordset write.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DirectProxy" FullName="Ext.data.DirectProxy" Package="data" DefinedIn="data\DirectProxy.js" Extends="Ext.data.DataProxy">
              <ConfigOptions>
                <ConfigOption Name="paramOrder" Type="Array/String">
                  <Summary><![CDATA[server side.  Specify the params in the order in which they must be executed on the server-side
as either (1) an Array of String values, or (2) a String of params delimited by either whitespace,
comma, or pipe. For example,
any of the following would be acceptable:<pre><code>
paramOrder: ['param1','param2','param3']
paramOrder: 'param1 param2 param3'
paramOrder: 'param1,param2,param3'
paramOrder: 'param1|param2|param'
     </code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="paramsAsHash" Type="Boolean">
                  <Summary><![CDATA[Send parameters as a collection of named arguments (defaults to <tt>true</tt>). Providing a
<tt>{@link #paramOrder}</tt> nullifies this configuration.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="directFn" Type="Function">
                  <Summary><![CDATA[Function to call when executing a request.  directFn is a simple alternative to defining the api configuration-parameter
for Store's which will not implement a full CRUD api.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="DirectStore" FullName="Ext.data.DirectStore" Package="data" DefinedIn="data\DirectStore.js" Xtype="directstore" Extends="Ext.data.Store">
              <Summary><![CDATA[<p>Small helper class to create an {@link Ext.data.Store} configured with an
{@link Ext.data.DirectProxy} and {@link Ext.data.JsonReader} to make interacting
with an {@link Ext.Direct} Server-side {@link Ext.direct.Provider Provider} easier.
To create a different proxy/reader combination create a basic {@link Ext.data.Store}
configured as needed.</p>

<p><b>*Note:</b> Although they are not listed, this class inherits all of the config options of:</p>
<div><ul class="mdetail-params">
<li><b>{@link Ext.data.Store Store}</b></li>
<div class="sub-desc"><ul class="mdetail-params">

</ul></div>
<li><b>{@link Ext.data.JsonReader JsonReader}</b></li>
<div class="sub-desc"><ul class="mdetail-params">
<li><tt><b>{@link Ext.data.JsonReader#root root}</b></tt></li>
<li><tt><b>{@link Ext.data.JsonReader#idProperty idProperty}</b></tt></li>
<li><tt><b>{@link Ext.data.JsonReader#totalProperty totalProperty}</b></tt></li>
</ul></div>

<li><b>{@link Ext.data.DirectProxy DirectProxy}</b></li>
<div class="sub-desc"><ul class="mdetail-params">
<li><tt><b>{@link Ext.data.DirectProxy#directFn directFn}</b></tt></li>
<li><tt><b>{@link Ext.data.DirectProxy#paramOrder paramOrder}</b></tt></li>
<li><tt><b>{@link Ext.data.DirectProxy#paramsAsHash paramsAsHash}</b></tt></li>
</ul></div>
</ul></div>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Field" FullName="Ext.data.Field" Package="data" DefinedIn="data\DataField.js">
              <Summary><![CDATA[<p>This class encapsulates the field definition information specified in the field definition objects
passed to {@link Ext.data.Record#create}.</p>
<p>Developers do not need to instantiate this class. Instances are created by {@link Ext.data.Record.create}
and cached in the {@link Ext.data.Record#fields fields} property of the created Record constructor's <b>prototype.</b></p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="allowBlank" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Used for validating a {@link Ext.data.Record record}, defaults to <tt>true</tt>.
An empty value here will cause {@link Ext.data.Record}.{@link Ext.data.Record#isValid isValid}
to evaluate to <tt>false</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="convert" Type="Function" Optional="true">
                  <Summary><![CDATA[A function which converts the value provided by the Reader into an object that will be stored
in the Record. It is passed the following parameters:<div class="mdetail-params"><ul>
<li><b>v</b> : Mixed<div class="sub-desc">The data value as read by the Reader, if undefined will use
the configured <tt>{@link Ext.data.Field#defaultValue defaultValue}</tt>.</div></li>
<li><b>rec</b> : Mixed<div class="sub-desc">The data object containing the row as read by the Reader.
Depending on the Reader type, this could be an Array ({@link Ext.data.ArrayReader ArrayReader}), an object
({@link Ext.data.JsonReader JsonReader}), or an XML element ({@link Ext.data.XMLReader XMLReader}).</div></li>
</ul></div>
<pre><code>
// example of convert function
function fullName(v, record) {
    return record.name.last + ', ' + record.name.first;
}

function location(v, record) {
    return !record.city ? '' : (record.city + ', ' + record.state);
}

var Dude = Ext.data.Record.create([
   {name: 'fullname',  convert: fullName},
   {name: 'firstname', mapping: 'name.first'},
   {name: 'lastname',  mapping: 'name.last'},
   {name: 'city', defaultValue: 'homeless'},
    'state',
   {name: 'location',  convert: location}
]);

// create the data store
var store = new Ext.data.Store({
    reader: new Ext.data.JsonReader(
       {
            idProperty: 'key',
            root: 'daRoot',  
            totalProperty: 'total'
        },
        Dude  // recordType
    )
});

var myData = [
   { key: 1,
      name: { first: 'Fat',    last:  'Albert' }
      // notice no city, state provided in data object
    },
   { key: 2,
      name: { first: 'Barney', last:  'Rubble' },
      city: 'Bedrock', state: 'Stoneridge'
    },
   { key: 3,
      name: { first: 'Cliff',  last:  'Claven' },
      city: 'Boston',  state: 'MA'
    }
];
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dateFormat" Type="String" Optional="true">
                  <Summary><![CDATA[A format string for the {@link Date#parseDate Date.parseDate} function, or "timestamp" if the
value provided by the Reader is a UNIX timestamp, or "time" if the value provided by the Reader is a
javascript millisecond timestamp.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultValue" Type="Mixed" Optional="true">
                  <Summary><![CDATA[The default value used <b>when a Record is being created by a {@link Ext.data.Reader Reader}</b>
when the item referenced by the <tt>{@link Ext.data.Field#mapping mapping}</tt> does not exist in the data
object (i.e. undefined). (defaults to "")]]></Summary>
                </ConfigOption>
                <ConfigOption Name="mapping" Type="String/Number" Optional="true">
                  <Summary><![CDATA[<p>A path expression for use by the {@link Ext.data.DataReader} implementation
that is creating the {@link Ext.data.Record Record} to extract the Field value from the data object.
If the path expression is the same as the field name, the mapping may be omitted.</p>
<p>The form of the mapping expression depends on the Reader being used.</p>
<div class="mdetail-params"><ul>
<li>{@link Ext.data.JsonReader}<div class="sub-desc">The mapping is a string containing the javascript
expression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>
<li>{@link Ext.data.XmlReader}<div class="sub-desc">The mapping is an {@link Ext.DomQuery} path to the data
item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>
<li>{@link Ext.data.ArrayReader}<div class="sub-desc">The mapping is a number indicating the Array index
of the field's value. Defaults to the field specification's Array position.</div></li>
</ul></div>
<p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}
function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to
return the desired data.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="name" Type="String">
                  <Summary><![CDATA[The name by which the field is referenced within the Record. This is referenced by, for example,
the <tt>dataIndex</tt> property in column definition objects passed to {@link Ext.grid.ColumnModel}.
<p>Note: In the simplest case, if no properties other than <tt>name</tt> are required, a field
definition may consist of just a String for the field name.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortDir" Type="String" Optional="true">
                  <Summary><![CDATA[Initial direction to sort (<tt>"ASC"</tt> or  <tt>"DESC"</tt>).  Defaults to
<tt>"ASC"</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortType" Type="Function" Optional="true">
                  <Summary><![CDATA[A function which converts a Field's value to a comparable value in order to ensure
correct sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom
sort example:<pre><code>
// current sort     after sort we want
// +-+------+          +-+------+
// |1|First |          |1|First |
// |2|Last  |          |3|Second|
// |3|Second|          |2|Last  |
// +-+------+          +-+------+

sortType: function (value) {
   switch (value.toLowerCase()) // native toLowerCase():
  {
      case 'first': return 1;
      case 'second': return 2;
      default: return 3;
   }
}
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="type" Type="String" Optional="true">
                  <Summary><![CDATA[The data type for conversion to displayable value if <tt>{@link Ext.data.Field#convert convert}</tt>
has not been specified. Possible values are
<div class="mdetail-params"><ul>
<li>auto (Default, implies no conversion)</li>
<li>string</li>
<li>int</li>
<li>float</li>
<li>boolean</li>
<li>date</li></ul></div>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="GroupingStore" FullName="Ext.data.GroupingStore" Package="data" DefinedIn="data\GroupingStore.js" Xtype="groupingstore" Extends="Ext.data.Store">
              <Summary><![CDATA[A specialized store implementation that provides for grouping records by one of the available fields. This
is usually used in conjunction with an {@link Ext.grid.GroupingView} to proved the data model for
a grouped GridPanel.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new GroupingStore.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[A config object containing the objects needed for the Store to access data, and read the data into Records.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="groupField" Type="String">
                  <Summary><![CDATA[The field name by which to sort the store's data (defaults to '').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="groupOnSort" Type="Boolean">
                  <Summary><![CDATA[True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the
existing sort info (defaults to false).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="remoteGroup" Type="Boolean">
                  <Summary><![CDATA[True if the grouping should apply on the server side, false if it is local only (defaults to false).  If the
grouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a
helper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="clearGrouping">
                  <Summary><![CDATA[Clears any existing grouping and refreshes the data using the default sort.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="groupBy">
                  <Summary><![CDATA[Groups the data by the specified field.]]></Summary>
                  <Parameters>
                    <Param Name="field" Type="String">
                      <Summary><![CDATA[The field name by which to sort the store's data]]></Summary>
                    </Param>
                    <Param Name="forceRegroup" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to force the group to be refreshed even if the field passed
in is the same as the current grouping field, false to skip grouping on the same field (defaults to false)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="HttpProxy" FullName="Ext.data.HttpProxy" Package="data" DefinedIn="data\HttpProxy.js" Extends="Ext.data.DataProxy">
              <Summary><![CDATA[<p>An implementation of {@link Ext.data.DataProxy} that processes data requests within the same
domain of the originating page.</p>
<p><b>Note</b>: this class cannot be used to retrieve data from a domain other
than the domain from which the running page was served. For cross-domain requests, use a
{@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>
<p>Be aware that to enable the browser to parse an XML document, the server must set
the Content-Type header in the HTTP response to "<tt>text/xml</tt>".</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="conn" Type="Object">
                    <Summary><![CDATA[ An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}. <p>Note that if this HttpProxy is being used by a (@link Ext.data.Store Store}, then the Store's call to {@link #load} will override any specified <tt>callback</tt> and <tt>params</tt> options. In this case, use the Store's {@link Ext.data.Store#events events} to modify parameters, or react to loading events. The Store's {@link Ext.data.Store#baseParams baseParams} may also be used to pass parameters known at instantiation time.</p> <p>If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make the request.</p>]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="conn">
                  <Summary><![CDATA[The Connection object (Or options parameter to {@link Ext.Ajax#request}) which this HttpProxy
uses to make requests to the server. Properties of this object may be changed dynamically to
change the way data is requested.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getConnection">
                  <Summary><![CDATA[Return the {@link Ext.data.Connection} object being used by this Proxy.
a finer-grained basis than the DataProxy events.]]></Summary>
                  <Parameters />
                  <Return Type="Connection">
                    <Summary><![CDATA[The Connection object. This object may be used to subscribe to events on]]></Summary>
                  </Return>
                </Method>
                <Method Name="setUrl">
                  <Summary><![CDATA[Used for overriding the url used for a single request.  Designed to be called during a beforeaction event.  Calling setUrl
will override any urls set via the api configuration parameter.  Set the optional parameter makePermanent to set the url for
all subsequent requests.  If not set to makePermanent, the next request will use the same url or api configuration defined
in the initial proxy configuration.]]></Summary>
                  <Parameters>
                    <Param Name="url" Type="String" />
                    <Param Name="makePermanent" Type="Boolean" Optional="true">
                      <Summary><![CDATA[[false]

(e.g.: beforeload, beforesave, etc).]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="doRequest">
                  <Summary><![CDATA[HttpProxy implementation of DataProxy#doRequest]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[The crud action type (create, read, update, destroy)]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Ext.data.Record/Ext.data.Record[]">
                      <Summary><![CDATA[If action is load, rs will be null]]></Summary>
                    </Param>
                    <Param Name="params" Type="Object">
                      <Summary><![CDATA[An object containing properties which are to be used as HTTP parameters
for the request to the remote server.]]></Summary>
                    </Param>
                    <Param Name="reader" Type="Ext.data.DataReader">
                      <Summary><![CDATA[The Reader object which converts the data
object into a block of Ext.data.Records.]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function">
                      <Summary><![CDATA[
<div class="sub-desc"><p>A function to be called after the request.
The <tt>callback</tt> is passed the following arguments:<ul>
<li><tt>r</tt> : Ext.data.Record[] The block of Ext.data.Records.</li>
<li><tt>options</tt>: Options object from the action request</li>
<li><tt>success</tt>: Boolean success indicator</li></ul></p></div>]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object">
                      <Summary><![CDATA[The scope in which to call the callback]]></Summary>
                    </Param>
                    <Param Name="arg" Type="Object">
                      <Summary><![CDATA[An optional argument which is passed to the callback as its second parameter.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="JsonReader" FullName="Ext.data.JsonReader" Package="data" DefinedIn="data\JsonReader.js" Extends="Ext.data.DataReader" Subclasses="Ext.data.ArrayReader">
              <Summary><![CDATA[<p>Data reader class to create an Array of {@link Ext.data.Record} objects
from a JSON packet based on mappings in a provided {@link Ext.data.Record}
constructor.</p>
<p>Example code:</p>
<pre><code>
var myReader = new Ext.data.JsonReader({
    // metadata configuration options:
   {@link #idProperty}: 'id'          
   {@link #root}: 'rows',             
   {@link #totalProperty}: 'results', 
    
    // the fields config option will internally create an {@link Ext.data.Record}
    // constructor that provides mapping for reading the record data objects
   {@link Ext.data.DataReader#fields fields}: [
        // map Record&#39;s 'firstname' field to data object&#39;s key of same name    
       {name: 'name'},
        // map Record&#39;s 'job' field to data object&#39;s 'occupation' key
       {name: 'job', mapping: 'occupation'}
    ]    
});
</code></pre>
<p>This would consume a JSON data object of the form:</p><pre><code>
{
    results: 2000, // Reader&#39;s configured {@link #totalProperty}
    rows: [        // Reader&#39;s configured {@link #root}
        // record data objects:
       { {@link #idProperty id}: 1, firstname: 'Bill', occupation: 'Gardener' },         
       { {@link #idProperty id}: 2, firstname: 'Ben' , occupation: 'Horticulturalist' },
        ...
    ]
}
</code></pre>
<p><b><u>Automatic configuration using metaData</u></b></p>
<p>It is possible to change a JsonReader's metadata at any time by including
a <b><tt>metaData</tt></b> property in the JSON data object. If the JSON data
object has a <b><tt>metaData</tt></b> property, a {@link Ext.data.Store Store}
object using this Reader will reconfigure itself to use the newly provided
field definition and fire its {@link Ext.data.Store#metachange metachange}
event. The metachange event handler may interrogate the <b><tt>metaData</tt></b>
property to perform any configuration required.</p>
<p>Note that reconfiguring a Store potentially invalidates objects which may
refer to Fields or Records which no longer exist.</p>
<p>To use this facility you would create the JsonReader like this:</p><pre><code>
var myReader = new Ext.data.JsonReader();
</code></pre>
<p>The first data packet from the server would configure the reader by
containing a <b><tt>metaData</tt></b> property <b>and</b> the data. For
example, the JSON data object might take the form:</p><pre><code>
{
    metaData: {
        "{@link #idProperty}": "id",
        "{@link #root}": "rows",
        "{@link #totalProperty}": "results"
        "{@link #successProperty}": "success",
        "{@link Ext.data.DataReader#fields fields}": [
           {"name": "name"},
           {"name": "job", "mapping": "occupation"}
        ],
        // used by store to set its sortInfo
        "sortInfo":{
           "field": "name",
           "direction": "ASC"
        },
        // {@link Ext.PagingToolbar paging data} (if applicable)
        "start": 0,
        "limit": 2,
        // custom property 
        "foo": "bar" 
    },
    // Reader&#39;s configured {@link #successProperty}
    "success": true,
    // Reader&#39;s configured {@link #totalProperty}
    "results": 2000, 
    // Reader&#39;s configured {@link #root}
    // (this data simulates 2 results {@link Ext.PagingToolbar per page})
    "rows": [ // <b>*Note:</b> this must be an Array 
       { "id": 1, "name": "Bill", "occupation": "Gardener" },
       { "id": 2, "name":  "Ben", "occupation": "Horticulturalist" }
    ]
}
</code></pre>
<p>The <b><tt>metaData</tt></b> property in the JSON data object should contain:</p>
<div class="mdetail-params"><ul>
<li>any of the configuration options for this class</li>
<li>a <b><tt>{@link Ext.data.Record#fields fields}</tt></b> property which
the JsonReader will use as an argument to the
{@link Ext.data.Record#create data Record create method} in order to
configure the layout of the Records it will produce.</li>
<li>a <b><tt>{@link Ext.data.Store#sortInfo sortInfo}</tt></b> property
which the JsonReader will use to set the {@link Ext.data.Store}'s
{@link Ext.data.Store#sortInfo sortInfo} property</li>
<li>any custom properties needed</li>
</ul></div>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new JsonReader.]]></Summary>
                <Parameters>
                  <Param Name="meta" Type="Object">
                    <Summary><![CDATA[Metadata configuration options.]]></Summary>
                  </Param>
                  <Param Name="recordType" Type="Array/Object">
                    <Summary><![CDATA[ <p>Either an Array of {@link Ext.data.Field Field} definition objects (which will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record} constructor created from {@link Ext.data.Record#create}.</p>]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="idProperty" Type="String">
                  <Summary><![CDATA[that contains a record identifier value.  Defaults to <tt>id</tt>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="root" Type="String">
                  <Summary><![CDATA[which contains the Array of row objects.  Defaults to <tt>undefined</tt>.
An exception will be thrown if the root property is undefined. The data
packet value for this property should be an empty array to clear the data
or show no data.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="successProperty" Type="String">
                  <Summary><![CDATA[retrieve the success attribute. Defaults to <tt>success</tt>.  See
{@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}
for additional information.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="totalProperty" Type="String">
                  <Summary><![CDATA[retrieve the total number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is being paged from
the remote server.  Defaults to <tt>total</tt>.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="jsonData">
                  <Summary><![CDATA[After any data loads, the raw JSON data is available for further custom processing.  If no data is
loaded or there is a load exception this property will be undefined.]]></Summary>
                </Property>
                <Property Name="meta">
                  <Summary><![CDATA[This JsonReader's metadata as passed to the constructor, or as passed in
the last data packet's <b><tt>metaData</tt></b> property.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="read">
                  <Summary><![CDATA[This method is only used by a DataProxy which has retrieved data from a remote server.]]></Summary>
                  <Parameters>
                    <Param Name="response" Type="Object">
                      <Summary><![CDATA[The XHR object which contains the JSON data in its responseText.
a cache of Ext.data.Records.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[data A data block which is used by an Ext.data.Store object as]]></Summary>
                  </Return>
                </Method>
                <Method Name="readRecords">
                  <Summary><![CDATA[Create a data block containing Ext.data.Records from a JSON object.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[An object which contains an Array of row objects in the property specified
in the config as 'root, and optionally a property, specified in the config as 'totalProperty'
which contains the total size of the dataset.
a cache of Ext.data.Records.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[data A data block which is used by an Ext.data.Store object as]]></Summary>
                  </Return>
                </Method>
                <Method Name="readResponse">
                  <Summary><![CDATA[Decode a json response from server.]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[Ext.data.Api.actions.create|read|update|destroy]]]></Summary>
                    </Param>
                    <Param Name="response" Type="Object" />
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="JsonReader.Error" FullName="Ext.data.JsonReader.Error" Package="data" DefinedIn="data\JsonReader.js">
              <Summary><![CDATA[Error class for JsonReader]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="JsonStore" FullName="Ext.data.JsonStore" Package="data" DefinedIn="data\JsonStore.js" Xtype="jsonstore" Extends="Ext.data.Store">
              <Summary><![CDATA[<p>Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.
A JsonStore will be automatically configured with a {@link Ext.data.JsonReader}.</p>
<p>A store configuration would be something like:<pre><code>
var store = new Ext.data.JsonStore({
    // store configs
    autoDestroy: true,
    url: 'get-images.php',
    storeId: 'myStore',
    // reader configs
    root: 'images',
    idProperty: 'name',
    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]
});
</code></pre></p>
<p>This store is configured to consume a returned object of the form:<pre><code>
{
    images: [
       {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},
       {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}
    ]
}
</code></pre>
An object literal of this form could also be used as the {@link #data} config option.</p>
<p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of
<b>{@link Ext.data.JsonReader JsonReader}</b>.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="reader" Type="Ext.data.DataReader" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="JsonWriter" FullName="Ext.data.JsonWriter" Package="data" DefinedIn="data\JsonWriter.js" Extends="Ext.data.DataWriter">
              <Summary><![CDATA[DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action.]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="encode" Type="Boolean">
                  <Summary><![CDATA[{@link Ext.data.DataWriter#toHash hashed data}. Defaults to <tt>true</tt>.  When using
{@link Ext.data.DirectProxy}, set this to <tt>false</tt> since Ext.Direct.JsonProvider will perform
its own json-encoding.  In addition, if you're using {@link Ext.data.HttpProxy}, setting to <tt>false</tt>
will cause HttpProxy to transmit data using the <b>jsonData</b> configuration-params of {@link Ext.Ajax#request}
instead of <b>params</b>.  When using a {@link Ext.data.Store#restful} Store, some serverside frameworks are
tuned to expect data through the jsonData mechanism.  In those cases, one will want to set <b>encode: <tt>false</tt></b>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="returnJson" Type="Boolean" />
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="createRecord">
                  <Summary><![CDATA[createRecord
@protected]]></Summary>
                  <Parameters>
                    <Param Name="rec" Type="Ext.data.Record" />
                  </Parameters>
                </Method>
                <Method Name="destroyRecord">
                  <Summary><![CDATA[destroyRecord
@protected]]></Summary>
                  <Parameters>
                    <Param Name="rec" Type="Ext.data.Record" />
                  </Parameters>
                </Method>
                <Method Name="render">
                  <Summary><![CDATA[Final action of a write event.  Apply the written data-object to params.]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[Ext.data.Api.actions.create|read|update|destroy]]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Record[]" />
                    <Param Name="http" Type="Object">
                      <Summary><![CDATA[params]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[object populated according to DataReader meta-data "root" and "idProperty"]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="updateRecord">
                  <Summary><![CDATA[updateRecord
@protected]]></Summary>
                  <Parameters>
                    <Param Name="rec" Type="Ext.data.Record" />
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="MemoryProxy" FullName="Ext.data.MemoryProxy" Package="data" DefinedIn="data\MemoryProxy.js" Extends="Ext.data.DataProxy">
              <Summary><![CDATA[An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor
to the Reader when its load method is called.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="data" Type="Object">
                    <Summary><![CDATA[The data object which the Reader uses to construct a block of Ext.data.Records.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="doRequest">
                  <Summary><![CDATA[MemoryProxy implementation of DataProxy#doRequest]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String" />
                    <Param Name="rs" Type="Ext.data.Record/Ext.data.Record[]">
                      <Summary><![CDATA[If action is load, rs will be null]]></Summary>
                    </Param>
                    <Param Name="params" Type="Object">
                      <Summary><![CDATA[An object containing properties which are to be used as HTTP parameters
for the request to the remote server.]]></Summary>
                    </Param>
                    <Param Name="reader" Type="Ext.data.DataReader">
                      <Summary><![CDATA[The Reader object which converts the data
object into a block of Ext.data.Records.]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function">
                      <Summary><![CDATA[The function into which to pass the block of Ext.data.Records.
The function must be passed <ul>
<li>The Record block object</li>
<li>The "arg" argument from the load function</li>
<li>A boolean success indicator</li>
</ul>]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object">
                      <Summary><![CDATA[The scope in which to call the callback]]></Summary>
                    </Param>
                    <Param Name="arg" Type="Object">
                      <Summary><![CDATA[An optional argument which is passed to the callback as its second parameter.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="loadexception">
                  <Summary><![CDATA[Fires if an exception occurs in the Proxy during data loading. Note that this event is also relayed through {@link Ext.data.Store}, so you can listen for it directly on any Store instance.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="arg" Type="Object">
                      <Summary><![CDATA[The callback's arg object passed to the {@link #load} function]]></Summary>
                    </Param>
                    <Param Name="null" Type="Object">
                      <Summary><![CDATA[This parameter does not apply and will always be null for MemoryProxy]]></Summary>
                    </Param>
                    <Param Name="e" Type="Error">
                      <Summary><![CDATA[The JavaScript Error object caught if the configured Reader could not read the data]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Node" FullName="Ext.data.Node" Package="data" DefinedIn="data\Tree.js" Extends="Ext.util.Observable" Subclasses="Ext.tree.TreeNode">
              <Summary><![CDATA[@cfg {Boolean} leaf true if this node is a leaf and does not have children
@cfg {String} id The id for this node. If one is not specified, one is generated.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="attributes" Type="Object">
                    <Summary><![CDATA[The attributes/config for the node]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="attributes" Type="Object">
                  <Summary><![CDATA[The attributes supplied for the node. You can use this property to access any custom attributes you supplied.]]></Summary>
                </Property>
                <Property Name="childNodes">
                  <Summary><![CDATA[All child nodes of this node. @type Array]]></Summary>
                </Property>
                <Property Name="firstChild">
                  <Summary><![CDATA[The first direct child node of this node, or null if this node has no child nodes. @type Node]]></Summary>
                </Property>
                <Property Name="id">
                  <Summary><![CDATA[The node id. @type String]]></Summary>
                </Property>
                <Property Name="lastChild">
                  <Summary><![CDATA[The last direct child node of this node, or null if this node has no child nodes. @type Node]]></Summary>
                </Property>
                <Property Name="nextSibling">
                  <Summary><![CDATA[The node immediately following this node in the tree, or null if there is no sibling node. @type Node]]></Summary>
                </Property>
                <Property Name="parentNode">
                  <Summary><![CDATA[The parent node for this node. @type Node]]></Summary>
                </Property>
                <Property Name="previousSibling">
                  <Summary><![CDATA[The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="appendChild">
                  <Summary><![CDATA[Insert node(s) as the last child node of this node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node/Array">
                      <Summary><![CDATA[The node or Array of nodes to append]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Node">
                    <Summary><![CDATA[The appended node if single append, or null if an array was passed]]></Summary>
                  </Return>
                </Method>
                <Method Name="bubble">
                  <Summary><![CDATA[Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the bubble is stopped.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to call]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope of the function (defaults to current node)]]></Summary>
                    </Param>
                    <Param Name="args" Type="Array" Optional="true">
                      <Summary><![CDATA[The args to call the function with (default to passing the current node)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="cascade">
                  <Summary><![CDATA[Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the cascade is stopped on that branch.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to call]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope of the function (defaults to current node)]]></Summary>
                    </Param>
                    <Param Name="args" Type="Array" Optional="true">
                      <Summary><![CDATA[The args to call the function with (default to passing the current node)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="contains">
                  <Summary><![CDATA[Returns true if this node is an ancestor (at any point) of the passed node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node" />
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="eachChild">
                  <Summary><![CDATA[Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of
function call will be the scope provided or the current node. The arguments to the function
will be the args provided or the current node. If the function returns false at any point,
the iteration stops.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to call]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope of the function (defaults to current node)]]></Summary>
                    </Param>
                    <Param Name="args" Type="Array" Optional="true">
                      <Summary><![CDATA[The args to call the function with (default to passing the current node)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="findChild">
                  <Summary><![CDATA[Finds the first child that has the attribute with the specified value.]]></Summary>
                  <Parameters>
                    <Param Name="attribute" Type="String">
                      <Summary><![CDATA[The attribute name]]></Summary>
                    </Param>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The value to search for]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Node">
                    <Summary><![CDATA[The found child or null if none was found]]></Summary>
                  </Return>
                </Method>
                <Method Name="findChildBy">
                  <Summary><![CDATA[Finds the first child by a custom function. The child matches if the function passed
returns true.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function" />
                    <Param Name="scope" Type="Object" Optional="true" />
                  </Parameters>
                  <Return Type="Node">
                    <Summary><![CDATA[The found child or null if none was found]]></Summary>
                  </Return>
                </Method>
                <Method Name="getDepth">
                  <Summary><![CDATA[Returns depth of this node (the root node has a depth of 0)]]></Summary>
                  <Parameters />
                  <Return Type="Number" />
                </Method>
                <Method Name="getOwnerTree">
                  <Summary><![CDATA[Returns the tree this node is in.]]></Summary>
                  <Parameters />
                  <Return Type="Tree" />
                </Method>
                <Method Name="getPath">
                  <Summary><![CDATA[Returns the path for this node. The path can be used to expand or select this node programmatically.]]></Summary>
                  <Parameters>
                    <Param Name="attr" Type="String" Optional="true">
                      <Summary><![CDATA[The attr to use for the path (defaults to the node's id)]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The path]]></Summary>
                  </Return>
                </Method>
                <Method Name="hasChildNodes">
                  <Summary><![CDATA[Returns true if this node has one or more child nodes, else false.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="indexOf">
                  <Summary><![CDATA[Returns the index of a child node]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node" />
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The index of the node or -1 if it was not found]]></Summary>
                  </Return>
                </Method>
                <Method Name="insertBefore">
                  <Summary><![CDATA[Inserts the first node before the second node in this nodes childNodes collection.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node to insert]]></Summary>
                    </Param>
                    <Param Name="refNode" Type="Node">
                      <Summary><![CDATA[The node to insert before (if null the node is appended)]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Node">
                    <Summary><![CDATA[The inserted node]]></Summary>
                  </Return>
                </Method>
                <Method Name="isAncestor">
                  <Summary><![CDATA[Returns true if the passed node is an ancestor (at any point) of this node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node" />
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isExpandable">
                  <Summary><![CDATA[Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>
node attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isFirst">
                  <Summary><![CDATA[Returns true if this node is the first child of its parent]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isLast">
                  <Summary><![CDATA[Returns true if this node is the last child of its parent]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isLeaf">
                  <Summary><![CDATA[Returns true if this node is a leaf]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="item">
                  <Summary><![CDATA[Returns the child node at the specified index.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number" />
                  </Parameters>
                  <Return Type="Node" />
                </Method>
                <Method Name="remove">
                  <Summary><![CDATA[Removes this node from its parent]]></Summary>
                  <Parameters />
                  <Return Type="Node">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="removeChild">
                  <Summary><![CDATA[Removes a child node from this node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node to remove]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Node">
                    <Summary><![CDATA[The removed node]]></Summary>
                  </Return>
                </Method>
                <Method Name="replaceChild">
                  <Summary><![CDATA[Replaces one child node in this node with another.]]></Summary>
                  <Parameters>
                    <Param Name="newChild" Type="Node">
                      <Summary><![CDATA[The replacement node]]></Summary>
                    </Param>
                    <Param Name="oldChild" Type="Node">
                      <Summary><![CDATA[The node to replace]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Node">
                    <Summary><![CDATA[The replaced node]]></Summary>
                  </Return>
                </Method>
                <Method Name="setId">
                  <Summary><![CDATA[Changes the id of this node.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The new id for the node.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="sort">
                  <Summary><![CDATA[Sorts this nodes children using the supplied sort function]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function" />
                    <Param Name="scope" Type="Object" Optional="true" />
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="append">
                  <Summary><![CDATA[Fires when a new child node is appended.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The newly appended node]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the newly appended node]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeappend">
                  <Summary><![CDATA[Fires before a new child is appended, return false to cancel the append.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be appended]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeinsert">
                  <Summary><![CDATA[Fires before a new child is inserted, return false to cancel the insert.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be inserted]]></Summary>
                    </Param>
                    <Param Name="refNode" Type="Node">
                      <Summary><![CDATA[The child node the node is being inserted before]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforemove">
                  <Summary><![CDATA[Fires before this node is moved to a new location in the tree. Return false to cancel the move.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="oldParent" Type="Node">
                      <Summary><![CDATA[The parent of this node]]></Summary>
                    </Param>
                    <Param Name="newParent" Type="Node">
                      <Summary><![CDATA[The new parent this node is moving to]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index it is being moved to]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeremove">
                  <Summary><![CDATA[Fires before a child is removed, return false to cancel the remove.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="insert">
                  <Summary><![CDATA[Fires when a new child node is inserted.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node inserted]]></Summary>
                    </Param>
                    <Param Name="refNode" Type="Node">
                      <Summary><![CDATA[The child node the node was inserted before]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="move">
                  <Summary><![CDATA[Fires when this node is moved to a new location in the tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="oldParent" Type="Node">
                      <Summary><![CDATA[The old parent of this node]]></Summary>
                    </Param>
                    <Param Name="newParent" Type="Node">
                      <Summary><![CDATA[The new parent of this node]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index it was moved to]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="remove">
                  <Summary><![CDATA[Fires when a child node is removed.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The removed node]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Record" FullName="Ext.data.Record" Package="data" DefinedIn="data\Record.js">
              <Summary><![CDATA[<p>Instances of this class encapsulate both Record <em>definition</em> information, and Record
<em>value</em> information for use in {@link Ext.data.Store} objects, or any code which needs
to access Records cached in an {@link Ext.data.Store} object.</p>
<p>Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.
Instances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data
objects.</p>
<p>Note that an instance of a Record class may only belong to one {@link Ext.data.Store Store} at a time.
In order to copy data from one Store to another, use the {@link #copy} method to create an exact
copy of the Record, and insert the new instance into the other Store.</p>
<p>When serializing a Record for submission to the server, be aware that it contains many private
properties, and also a reference to its owning Store which in turn holds references to its Records.
This means that a whole Record may not be encoded using {@link Ext.util.JSON.encode}. Instead, use the
<code>{@link #data}</code> and <code>{@link #id}</code> properties.</p>
<p>Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below.</p>]]></Summary>
              <Constructor>
                <Summary><![CDATA[<p>This constructor should not be used to create Record objects. Instead, use {@link #create} to
generate a subclass of Ext.data.Record configured with information about its constituent fields.<p>
<p><b>The generated constructor has the same signature as this constructor.</b></p>.]]></Summary>
                <Parameters>
                  <Param Name="data" Type="Object" Optional="true">
                    <Summary><![CDATA[An object, the properties of which provide values for the new Record's fields. If not specified the <code>{@link Ext.data.Field#defaultValue defaultValue}</code> for each field will be assigned.]]></Summary>
                  </Param>
                  <Param Name="id" Type="Object" Optional="true">
                    <Summary><![CDATA[The id of the Record. This id should be unique, and is used by the {@link Ext.data.Store} object which owns the Record to index its collection of Records. If an <code>id</code> is not specified a <b><code>{@link #phantom}</code></b> Record will be created with an {@link #Record.id automatically generated id}.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="data" Type="Object">
                  <Summary><![CDATA[An object hash representing the data for this Record. Every field name in the Record definition
is represented by a property of that name in this object. Note that unless you specified a field
with {@link Ext.data.Field#name name} "id" in the Record definition, this will <b>not</b> contain
an <tt>id</tt> property.]]></Summary>
                </Property>
                <Property Name="fields">
                  <Summary><![CDATA[<p><b>This property is stored in the Record definition's <u>prototype</u></b></p>
A MixedCollection containing the defined {@link Ext.data.Field Field}s for this Record.  Read-only.]]></Summary>
                </Property>
                <Property Name="id" Type="Object">
                  <Summary><![CDATA[The unique ID of the Record {@link #Record as specified at construction time}.]]></Summary>
                </Property>
                <Property Name="modified" Type="Object">
                  <Summary><![CDATA[This object contains a key and value storing the original values of all modified
fields or is null if no fields have been modified.]]></Summary>
                </Property>
                <Property Name="phantom" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt> when the record does not yet exist in a server-side database (see
{@link #markDirty}).  Any record which has a real database pk set as its id property
is NOT a phantom -- it's real.]]></Summary>
                </Property>
                <Property Name="store" Type="Ext.data.Store">
                  <Summary><![CDATA[The {@link Ext.data.Store} to which this Record belongs.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="beginEdit">
                  <Summary><![CDATA[Begin an edit. While in edit mode, no events (e.g.. the <code>update</code> event)
are relayed to the containing store.
See also: <code>{@link #endEdit}</code> and <code>{@link #cancelEdit}</code>.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="cancelEdit">
                  <Summary><![CDATA[Cancels all changes made in the current edit operation.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="commit">
                  <Summary><![CDATA[Usually called by the {@link Ext.data.Store} which owns the Record.
Commits all changes made to the Record since either creation, or the last commit operation.
<p>Developers should subscribe to the {@link Ext.data.Store#update} event
to have their code notified of commit operations.</p>]]></Summary>
                  <Parameters>
                    <Param Name="silent" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to skip notification of the owning
store of the change (defaults to false)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="copy">
                  <Summary><![CDATA[Creates a copy of this Record.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String" Optional="true">
                      <Summary><![CDATA[A new Record id, defaults to {@link #Record.id autogenerating an id}.
Note: if an <code>id</code> is not specified the copy created will be a
<code>{@link #phantom}</code> Record.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Record" />
                </Method>
                <Method Name="create">
                  <Summary><![CDATA[Generate a constructor for a specific Record layout.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Array">
                      <Summary><![CDATA[An Array of <b>{@link Ext.data.Field Field}</b> definition objects.
The constructor generated by this method may be used to create new Record instances. The data
object must contain properties named after the {@link Ext.data.Field field}
<b><tt>{@link Ext.data.Field#name}s</tt></b>.  Example usage:<pre><code>
// create a Record constructor from a description of the fields
var TopicRecord = Ext.data.Record.create([ // creates a subclass of Ext.data.Record
{{@link Ext.data.Field#name name}: 'title', {@link Ext.data.Field#mapping mapping}: 'topic_title'},
{name: 'author', mapping: 'username', allowBlank: false},
{name: 'totalPosts', mapping: 'topic_replies', type: 'int'},
{name: 'lastPost', mapping: 'post_time', type: 'date'},
{name: 'lastPoster', mapping: 'user2'},
{name: 'excerpt', mapping: 'post_text', allowBlank: false},
// In the simplest case, if no properties other than <tt>name</tt> are required,
// a field definition may consist of just a String for the field name.
'signature'
]);

// create Record instance
var myNewRecord = new TopicRecord(
{
title: 'Do my job please',
author: 'noobie',
totalPosts: 1,
lastPost: new Date(),
lastPoster: 'Animal',
excerpt: 'No way dude!',
signature: ''
},
id // optionally specify the id of the record otherwise {@link #Record.id one is auto-assigned}
);
myStore.{@link Ext.data.Store#add add}(myNewRecord);
</code></pre>
to the definition. The constructor has the same signature as {@link #Record}.
@static]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="function">
                    <Summary><![CDATA[A constructor which is used to create new Records according]]></Summary>
                  </Return>
                </Method>
                <Method Name="endEdit">
                  <Summary><![CDATA[End an edit. If any data was modified, the containing store is notified
(ie, the store's <code>update</code> event will fire).]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="get">
                  <Summary><![CDATA[Get the value of the {@link Ext.data.Field#name named field}.]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The {@link Ext.data.Field#name name of the field} to get the value of.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The value of the field.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getChanges">
                  <Summary><![CDATA[Gets a hash of only the fields that have been modified since this Record was created or commited.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="id">
                  <Summary><![CDATA[Generates a sequential id. This method is typically called when a record is {@link #create}d
and {@link #Record no id has been specified}. The returned id takes the form:
<tt>&#123;PREFIX}-&#123;AUTO_ID}</tt>.<div class="mdetail-params"><ul>
<li><b><tt>PREFIX</tt></b> : String<p class="sub-desc"><tt>Ext.data.Record.PREFIX</tt>
(defaults to <tt>'ext-record'</tt>)</p></li>
<li><b><tt>AUTO_ID</tt></b> : String<p class="sub-desc"><tt>Ext.data.Record.AUTO_ID</tt>
(defaults to <tt>1</tt> initially)</p></li>
</ul></div>]]></Summary>
                  <Parameters>
                    <Param Name="rec" Type="Record">
                      <Summary><![CDATA[The record being created.  The record does not exist, it's a {@link #phantom}.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[auto-generated string id, <tt>"ext-record-i++'</tt>;]]></Summary>
                  </Return>
                </Method>
                <Method Name="isModified">
                  <Summary><![CDATA[Returns <tt>true</tt> if the passed field name has been <code>{@link #modified}</code>
since the load or last commit.]]></Summary>
                  <Parameters>
                    <Param Name="fieldName" Type="String">
                      <Summary><![CDATA[{@link Ext.data.Field.{@link Ext.data.Field#name}]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isValid">
                  <Summary><![CDATA[By default returns <tt>false</tt> if any {@link Ext.data.Field field} within the
record configured with <tt>{@link Ext.data.Field#allowBlank} = false</tt> returns
<tt>true</tt> from an {@link Ext}.{@link Ext#isEmpty isempty} test.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="markDirty">
                  <Summary><![CDATA[<p>Marks this <b>Record</b> as <code>{@link #dirty}</code>.  This method
is used interally when adding <code>{@link #phantom}</code> records to a
{@link Ext.data.Store#writer writer enabled store}.</p>
<br><p>Marking a record <code>{@link #dirty}</code> causes the phantom to
be returned by {@link Ext.data.Store#getModifiedRecords} where it will
have a create action composed for it during {@link Ext.data.Store#save store save}
operations.</p>]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="reject">
                  <Summary><![CDATA[Usually called by the {@link Ext.data.Store} which owns the Record.
Rejects all changes made to the Record since either creation, or the last commit operation.
Modified fields are reverted to their original values.
<p>Developers should subscribe to the {@link Ext.data.Store#update} event
to have their code notified of reject operations.</p>]]></Summary>
                  <Parameters>
                    <Param Name="silent" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to skip notification of the owning
store of the change (defaults to false)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="set">
                  <Summary><![CDATA[Set the {@link Ext.data.Field#name named field} to the specified value.  For example:
<pre><code>
// record has a field named 'firstname'
var Employee = Ext.data.Record.{@link #create}([
   {name: 'firstname'},
    ...
]);

// update the 2nd record in the store:
var rec = myStore.{@link Ext.data.Store#getAt getAt}(1);

// set the value (shows dirty flag):
rec.set('firstname', 'Betty');

// commit the change (removes dirty flag):
rec.{@link #commit}();

// update the record in the store, bypass setting dirty flag,
// and do not store the change in the {@link Ext.data.Store#getModifiedRecords modified records}
rec.{@link #data}['firstname'] = 'Wilma'); // updates record, but not the view
rec.{@link #commit}(); // updates the view
</code></pre>
<b>Notes</b>:<div class="mdetail-params"><ul>
<li>If the store has a writer and <code>autoSave=true</code>, each set()
will execute an XHR to the server.</li>
<li>Use <code>{@link #beginEdit}</code> to prevent the store's <code>update</code>
event firing while using set().</li>
<li>Use <code>{@link #endEdit}</code> to have the store's <code>update</code>
event fire.</li>
</ul></div>]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The {@link Ext.data.Field#name name of the field} to set.]]></Summary>
                    </Param>
                    <Param Name="value" Type="String/Object/Array">
                      <Summary><![CDATA[The value to set the field to.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="ScriptTagProxy" FullName="Ext.data.ScriptTagProxy" Package="data" DefinedIn="data\ScriptTagProxy.js" Extends="Ext.data.DataProxy">
              <Summary><![CDATA[An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain
other than the originating domain of the running page.<br>
<p>
<b>Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain
of the running page, you must use this class, rather than HttpProxy.</b><br>
<p>
The content passed back from a server resource requested by a ScriptTagProxy <b>must</b> be executable JavaScript
source code because it is used as the source inside a &lt;script> tag.<br>
<p>
In order for the browser to process the returned data, the server must wrap the data object
with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.
Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy
depending on whether the callback name was passed:
<p>
<pre><code>
boolean scriptTag = false;
String cb = request.getParameter("callback");
if (cb != null) {
    scriptTag = true;
    response.setContentType("text/javascript");
} else {
    response.setContentType("application/x-json");
}
Writer out = response.getWriter();
if (scriptTag) {
    out.write(cb + "(");
}
out.print(dataBlock.toJsonString());
if (scriptTag) {
    out.write(");");
}
</code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[A configuration object.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="url" Type="String" />
                <ConfigOption Name="timeout" Type="Number" />
                <ConfigOption Name="callbackParam" Type="String">
                  <Summary><![CDATA[the server the name of the callback function set up by the load call to process the returned data object.
Defaults to "callback".<p>The server-side processing must read this parameter value, and generate
javascript output which calls this named function passing the data object as its only parameter.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="nocache" Type="Boolean">
                  <Summary><![CDATA[name to the request.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="doRequest">
                  <Summary><![CDATA[HttpProxy implementation of DataProxy#doRequest]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String" />
                    <Param Name="rs" Type="Ext.data.Record/Ext.data.Record[]">
                      <Summary><![CDATA[If action is <tt>read</tt>, rs will be null]]></Summary>
                    </Param>
                    <Param Name="params" Type="Object">
                      <Summary><![CDATA[An object containing properties which are to be used as HTTP parameters
for the request to the remote server.]]></Summary>
                    </Param>
                    <Param Name="reader" Type="Ext.data.DataReader">
                      <Summary><![CDATA[The Reader object which converts the data
object into a block of Ext.data.Records.]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function">
                      <Summary><![CDATA[The function into which to pass the block of Ext.data.Records.
The function must be passed <ul>
<li>The Record block object</li>
<li>The "arg" argument from the load function</li>
<li>A boolean success indicator</li>
</ul>]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object">
                      <Summary><![CDATA[The scope in which to call the callback]]></Summary>
                    </Param>
                    <Param Name="arg" Type="Object">
                      <Summary><![CDATA[An optional argument which is passed to the callback as its second parameter.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="loadexception">
                  <Summary><![CDATA[<b>Deprecated</b> in favor of 'exception' event. Fires if an exception occurs in the Proxy during data loading. This event can be fired for one of two reasons: <ul><li><b>The load call timed out.</b> This means the load callback did not execute within the time limit specified by {@link #timeout}. In this case, this event will be raised and the fourth parameter (read error) will be null.</li> <li><b>The load succeeded but the reader could not read the response.</b> This means the server returned data, but the configured Reader threw an error while reading the data. In this case, this event will be raised and the caught error will be passed along as the fourth parameter of this event.</li></ul> Note that this event is also relayed through {@link Ext.data.Store}, so you can listen for it directly on any Store instance. call timed out, this parameter will be null. If the remote request returns success: false, this parameter will be null.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The loading options that were specified (see {@link #load} for details).  If the load]]></Summary>
                    </Param>
                    <Param Name="arg" Type="Object">
                      <Summary><![CDATA[The callback's arg object passed to the {@link #load} function]]></Summary>
                    </Param>
                    <Param Name="e" Type="Error">
                      <Summary><![CDATA[The JavaScript Error object caught if the configured Reader could not read the data.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="SortTypes" FullName="Ext.data.SortTypes" Package="data" DefinedIn="data\SortTypes.js" Singleton="true">
              <Summary><![CDATA[Defines the default sorting (casting?) comparison functions used when sorting data.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="stripTagsRE" Type="RegExp">
                  <Summary><![CDATA[The regular expression used to strip tags]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="asDate">
                  <Summary><![CDATA[Date sorting]]></Summary>
                  <Parameters>
                    <Param Name="s" Type="Mixed">
                      <Summary><![CDATA[The value being converted]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The comparison value]]></Summary>
                  </Return>
                </Method>
                <Method Name="asFloat">
                  <Summary><![CDATA[Float sorting]]></Summary>
                  <Parameters>
                    <Param Name="s" Type="Mixed">
                      <Summary><![CDATA[The value being converted]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Float">
                    <Summary><![CDATA[The comparison value]]></Summary>
                  </Return>
                </Method>
                <Method Name="asInt">
                  <Summary><![CDATA[Integer sorting]]></Summary>
                  <Parameters>
                    <Param Name="s" Type="Mixed">
                      <Summary><![CDATA[The value being converted]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The comparison value]]></Summary>
                  </Return>
                </Method>
                <Method Name="asText">
                  <Summary><![CDATA[Strips all HTML tags to sort on text only]]></Summary>
                  <Parameters>
                    <Param Name="s" Type="Mixed">
                      <Summary><![CDATA[The value being converted]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The comparison value]]></Summary>
                  </Return>
                </Method>
                <Method Name="asUCString">
                  <Summary><![CDATA[Case insensitive string]]></Summary>
                  <Parameters>
                    <Param Name="s" Type="Mixed">
                      <Summary><![CDATA[The value being converted]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The comparison value]]></Summary>
                  </Return>
                </Method>
                <Method Name="asUCText">
                  <Summary><![CDATA[Strips all HTML tags to sort on text only - Case insensitive]]></Summary>
                  <Parameters>
                    <Param Name="s" Type="Mixed">
                      <Summary><![CDATA[The value being converted]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The comparison value]]></Summary>
                  </Return>
                </Method>
                <Method Name="none">
                  <Summary><![CDATA[Default sort that does nothing]]></Summary>
                  <Parameters>
                    <Param Name="s" Type="Mixed">
                      <Summary><![CDATA[The value being converted]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Mixed">
                    <Summary><![CDATA[The comparison value]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="Store" FullName="Ext.data.Store" Package="data" DefinedIn="data\Store.js" Xtype="store" Extends="Ext.util.Observable" Subclasses="Ext.data.ArrayStore,Ext.data.DirectStore,Ext.data.GroupingStore,Ext.data.JsonStore,Ext.data.XmlStore">
              <Summary><![CDATA[<p>The Store class encapsulates a client side cache of {@link Ext.data.Record Record}
objects which provide input data for Components such as the {@link Ext.grid.GridPanel GridPanel},
the {@link Ext.form.ComboBox ComboBox}, or the {@link Ext.DataView DataView}.</p>
<p><u>Retrieving Data</u></p>
<p>A Store object may access a data object using:<div class="mdetail-params"><ul>
<li>{@link #proxy configured implementation} of {@link Ext.data.DataProxy DataProxy}</li>
<li>{@link #data} to automatically pass in data</li>
<li>{@link #loadData} to manually pass in data</li>
</ul></div></p>
<p><u>Reading Data</u></p>
<p>A Store object has no inherent knowledge of the format of the data object (it could be
an Array, XML, or JSON). A Store object uses an appropriate {@link #reader configured implementation}
of a {@link Ext.data.DataReader DataReader} to create {@link Ext.data.Record Record} instances from the data
object.</p>
<p><u>Store Types</u></p>
<p>There are several implementations of Store available which are customized for use with
a specific DataReader implementation.  Here is an example using an ArrayStore which implicitly
creates a reader commensurate to an Array data object.</p>
<pre><code>
var myStore = new Ext.data.ArrayStore({
    fields: ['fullname', 'first'],
    idIndex: 0 // id for each record will be the first element
});
</code></pre>
<p>For custom implementations create a basic {@link Ext.data.Store} configured as needed:</p>
<pre><code>
// create a {@link Ext.data.Record Record} constructor:
var rt = Ext.data.Record.create([
   {name: 'fullname'},
   {name: 'first'}
]);
var myStore = new Ext.data.Store({
    // explicitly create reader
    reader: new Ext.data.ArrayReader(
       {
            idIndex: 0  // id for each record will be the first element
        },
        rt // recordType
    )
});
</code></pre>
<p>Load some data into store (note the data object is an array which corresponds to the reader):</p>
<pre><code>
var myData = [
    [1, 'Fred Flintstone', 'Fred'],  // note that id for the record is the first element
    [2, 'Barney Rubble', 'Barney']
];
myStore.loadData(myData);
</code></pre>
<p>Records are cached and made available through accessor functions.  An example of adding
a record to the store:</p>
<pre><code>
var defaultData = {
    fullname: 'Full Name',
    first: 'First Name'
};
var recId = 100; // provide unique id for the record
var r = new myStore.recordType(defaultData, ++recId); // create new record
myStore.{@link #insert}(0, r); // insert a new record into the store (also see {@link #add})
</code></pre>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new Store.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[A config object containing the objects needed for the Store to access data, and read the data into Records.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="storeId" Type="String">
                  <Summary><![CDATA[<p><b>Note</b>: if a (deprecated) <tt>{@link #id}</tt> is specified it will supersede the <tt>storeId</tt>
assignment.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="url" Type="String">
                  <Summary><![CDATA[implicitly configure a {@link Ext.data.HttpProxy HttpProxy} if an <tt>url</tt> is specified.
Typically this option, or the <code>{@link #data}</code> option will be specified.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoLoad" Type="Boolean/Object">
                  <Summary><![CDATA[is <tt>true</tt> or an <tt>Object</tt>, this store's {@link #load} method is automatically called
after creation. If the value of <tt>autoLoad</tt> is an <tt>Object</tt>, this <tt>Object</tt> will
be passed to the store's {@link #load} method.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="proxy" Type="Ext.data.DataProxy">
                  <Summary><![CDATA[access to a data object.  See <code>{@link #url}</code>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="data" Type="Array">
                  <Summary><![CDATA[Typically this option, or the <code>{@link #url}</code> option will be specified.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="reader" Type="Ext.data.DataReader">
                  <Summary><![CDATA[data object and returns an Array of {@link Ext.data.Record} objects which are cached keyed by their
<b><tt>{@link Ext.data.Record#id id}</tt></b> property.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="writer" Type="Ext.data.DataWriter">
                  <Summary><![CDATA[<p>The {@link Ext.data.DataWriter Writer} object which processes a record object for being written
to the server-side database.</p>
<br><p>When a writer is installed into a Store the {@link #add}, {@link #remove}, and {@link #update}
events on the store are monitored in order to remotely {@link #createRecords create records},
{@link #destroyRecord destroy records}, or {@link #updateRecord update records}.</p>
<br><p>The proxy for this store will relay any {@link #writexception} events to this store.</p>
<br><p>Sample implementation:
<pre><code>
var writer = new {@link Ext.data.JsonWriter}({
    encode: true,
    writeAllFields: true // write all fields, not just those that changed
});

// Typical Store collecting the Proxy, Reader and Writer together.
var store = new Ext.data.Store({
    storeId: 'user',
    root: 'records',
    proxy: proxy,
    reader: reader,
    writer: writer,     // <-- plug a DataWriter into the store just as you would a Reader
    paramsAsHash: true,
    autoSave: false    // <-- false to delay executing create, update, destroy requests
                        //     until specifically told to do so.
});
</code></pre></p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="baseParams" Type="Object">
                  <Summary><![CDATA[<p>An object containing properties which are to be sent as parameters
for <i>every</i> HTTP request.</p>
<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>
<p><b>Note</b>: <code>baseParams</code> may be superseded by any <code>params</code>
specified in a <code>{@link #load}</code> request, see <code>{@link #load}</code>
for more details.</p>
This property may be modified after creation using the <code>{@link #setBaseParam}</code>
method.
@property]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortInfo" Type="Object">
                  <Summary><![CDATA[{@link #load} operation.  Note that for local sorting, the <tt>direction</tt> property is
case-sensitive. See also {@link #remoteSort} and {@link #paramNames}.
For example:<pre><code>
sortInfo: {
    field: 'fieldName',
    direction: 'ASC' // or 'DESC' (case sensitive for local sorting)
}
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="remoteSort" Type="boolean">
                  <Summary><![CDATA[to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache
in place (defaults to <tt>false</tt>).
<p>If <tt>remoteSort</tt> is <tt>true</tt>, then clicking on a {@link Ext.grid.Column Grid Column}'s
{@link Ext.grid.Column#header header} causes the current page to be requested from the server appending
the following two parameters to the <b><tt>{@link #load params}</tt></b>:<div class="mdetail-params"><ul>
<li><b><tt>sort</tt></b> : String<p class="sub-desc">The <tt>name</tt> (as specified in the Record's
{@link Ext.data.Field Field definition}) of the field to sort on.</p></li>
<li><b><tt>dir</tt></b> : String<p class="sub-desc">The direction of the sort, 'ASC' or 'DESC' (case-sensitive).</p></li>
</ul></div></p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoDestroy" Type="Boolean">
                  <Summary><![CDATA[to is destroyed (defaults to <tt>false</tt>).
<p><b>Note</b>: this should be set to true when using stores that are bound to only 1 component.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="pruneModifiedRecords" Type="Boolean">
                  <Summary><![CDATA[the store is loaded or when a record is removed (defaults to <tt>false</tt>). See {@link #getModifiedRecords}
for the accessor method to retrieve the modified records.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoSave" Type="Boolean">
                  <Summary><![CDATA[<p>Defaults to <tt>true</tt> causing the store to automatically {@link #save} records to
the server when a record is modified (ie: becomes 'dirty'). Specify <tt>false</tt> to manually call {@link #save}
to send all modifiedRecords to the server.</p>
<br><p><b>Note</b>: each CRUD action will be sent as a separate request.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="batch" Type="Boolean">
                  <Summary><![CDATA[<p>Defaults to <tt>true</tt> (unless <code>{@link #restful}:true</code>). Multiple
requests for each CRUD action (CREATE, READ, UPDATE and DESTROY) will be combined
and sent as one transaction. Only applies when <code>{@link #autoSave}</code> is set
to <tt>false</tt>.</p>
<br><p>If Store is RESTful, the DataProxy is also RESTful, and a unique transaction is
generated for each record.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="restful" Type="Boolean">
                  <Summary><![CDATA[Defaults to <tt>false</tt>.  Set to <tt>true</tt> to have the Store and the set
Proxy operate in a RESTful manner. The store will automatically generate GET, POST,
PUT and DELETE requests to the server. The HTTP method used for any given CRUD
action is described in {@link Ext.data.Api#restActions}.  For additional information
see {@link Ext.data.DataProxy#restful}.
<p><b>Note</b>: if <code>{@link #restful}:true</code> <code>batch</code> will
internally be set to <tt>false</tt>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="paramNames" Type="Object">
                  <Summary><![CDATA[<p>An object containing properties which specify the names of the paging and
sorting parameters passed to remote servers when loading blocks of data. By default, this
object takes the following form:</p><pre><code>
{
    start : 'start',  // The parameter name which specifies the start row
    limit : 'limit',  // The parameter name which specifies number of rows to return
    sort : 'sort',    // The parameter name which specifies the column to sort on
    dir : 'dir'       // The parameter name which specifies the sort direction
}
</code></pre>
<p>The server must produce the requested data block upon receipt of these parameter names.
If different parameter names are required, this property can be overriden using a configuration
property.</p>
<p>A {@link Ext.PagingToolbar PagingToolbar} bound to this Store uses this property to determine
the parameter names to use in its {@link #load requests}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultParamNames" Type="Object">
                  <Summary><![CDATA[Provides the default values for the {@link #paramNames} property. To globally modify the parameters
for all stores, this object should be changed on the store prototype.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="baseParams">
                  <Summary><![CDATA[See the <code>{@link #baseParams corresponding configuration option}</code>
for a description of this property.
To modify this property see <code>{@link #setBaseParam}</code>.]]></Summary>
                </Property>
                <Property Name="recordType">
                  <Summary><![CDATA[The {@link Ext.data.Record Record} constructor as supplied to (or created by) the
{@link Ext.data.DataReader Reader}. Read-only.
<p>If the Reader was constructed by passing in an Array of {@link Ext.data.Field} definition objects,
instead of a Record constructor, it will implicitly create a Record constructor from that Array (see
{@link Ext.data.Record}.{@link Ext.data.Record#create create} for additional details).</p>
<p>This property may be used to create new Records of the type held in this Store, for example:</p><pre><code>
// create the data store
var store = new Ext.data.ArrayStore({
autoDestroy: true,
fields: [
{name: 'company'},
{name: 'price', type: 'float'},
{name: 'change', type: 'float'},
{name: 'pctChange', type: 'float'},
{name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}
]
});
store.loadData(myData);

// create the Grid
var grid = new Ext.grid.EditorGridPanel({
store: store,
colModel: new Ext.grid.ColumnModel({
columns: [
{id:'company', header: 'Company', width: 160, dataIndex: 'company'},
{header: 'Price', renderer: 'usMoney', dataIndex: 'price'},
{header: 'Change', renderer: change, dataIndex: 'change'},
{header: '% Change', renderer: pctChange, dataIndex: 'pctChange'},
{header: 'Last Updated', width: 85,
renderer: Ext.util.Format.dateRenderer('m/d/Y'),
dataIndex: 'lastChange'}
],
defaults: {
sortable: true,
width: 75
}
}),
autoExpandColumn: 'company', // match the id specified in the column model
height:350,
width:600,
title:'Array Grid',
tbar: [{
text: 'Add Record',
handler : function () {
var defaultData = {
change: 0,
company: 'New Company',
lastChange: (new Date()).clearTime(),
pctChange: 0,
price: 10
};
var recId = 3; // provide unique id
var p = new store.recordType(defaultData, recId); // create new record
grid.stopEditing();
store.{@link #insert}(0, p); // insert a new record into the store (also see {@link #add})
grid.startEditing(0, 0);
}
}]
});
</code></pre>]]></Summary>
                </Property>
                <Property Name="fields">
                  <Summary><![CDATA[A {@link Ext.util.MixedCollection MixedCollection} containing the defined {@link Ext.data.Field Field}s
for the {@link Ext.data.Record Records} stored in this Store. Read-only.]]></Summary>
                </Property>
                <Property Name="lastOptions">
                  <Summary><![CDATA[Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}
for the details of what this may contain. This may be useful for accessing any params which were used
to load the current Record cache.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="destroy">
                  <Summary><![CDATA[Destroys the store.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="add">
                  <Summary><![CDATA[Add Records to the Store and fires the {@link #add} event.  To add Records
to the store from a remote source use <code>{@link #load}({add:true})</code>.
See also <code>{@link #recordType}</code> and <code>{@link #insert}</code>.]]></Summary>
                  <Parameters>
                    <Param Name="records" Type="Ext.data.Record[]">
                      <Summary><![CDATA[An Array of Ext.data.Record objects
to add to the cache. See {@link #recordType}.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="addSorted">
                  <Summary><![CDATA[(Local sort only) Inserts the passed Record into the Store at the index where it
should go based on the current sort information.]]></Summary>
                  <Parameters>
                    <Param Name="record" Type="Ext.data.Record" />
                  </Parameters>
                </Method>
                <Method Name="remove">
                  <Summary><![CDATA[Remove a Record from the Store and fires the {@link #remove} event.]]></Summary>
                  <Parameters>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The Ext.data.Record object to remove from the cache.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="removeAt">
                  <Summary><![CDATA[Remove a Record from the Store at the specified index. Fires the {@link #remove} event.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the record to remove.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="removeAll">
                  <Summary><![CDATA[Remove all Records from the Store and fires the {@link #clear} event.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="insert">
                  <Summary><![CDATA[Inserts Records into the Store at the given index and fires the {@link #add} event.
See also <code>{@link #add}</code> and <code>{@link #addSorted}</code>.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The start index at which to insert the passed Records.]]></Summary>
                    </Param>
                    <Param Name="records" Type="Ext.data.Record[]">
                      <Summary><![CDATA[An Array of Ext.data.Record objects to add to the cache.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="indexOf">
                  <Summary><![CDATA[Get the index within the cache of the passed Record.]]></Summary>
                  <Parameters>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The Ext.data.Record object to find.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The index of the passed Record. Returns -1 if not found.]]></Summary>
                  </Return>
                </Method>
                <Method Name="indexOfId">
                  <Summary><![CDATA[Get the index within the cache of the Record with the passed id.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the Record to find.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The index of the Record. Returns -1 if not found.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getById">
                  <Summary><![CDATA[Get the Record with the specified id.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the Record to find.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.data.Record">
                    <Summary><![CDATA[The Record with the passed id. Returns undefined if not found.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getAt">
                  <Summary><![CDATA[Get the Record at the specified index.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the Record to find.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.data.Record">
                    <Summary><![CDATA[The Record at the passed index. Returns undefined if not found.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getRange">
                  <Summary><![CDATA[Returns a range of Records between specified indices.]]></Summary>
                  <Parameters>
                    <Param Name="startIndex" Type="Number" Optional="true">
                      <Summary><![CDATA[The starting index (defaults to 0)]]></Summary>
                    </Param>
                    <Param Name="endIndex" Type="Number" Optional="true">
                      <Summary><![CDATA[The ending index (defaults to the last Record in the Store)]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.data.Record[]">
                    <Summary><![CDATA[An array of Records]]></Summary>
                  </Return>
                </Method>
                <Method Name="load">
                  <Summary><![CDATA[<p>Loads the Record cache from the configured <tt>{@link #proxy}</tt> using the configured <tt>{@link #reader}</tt>.</p>
<br><p>Notes:</p><div class="mdetail-params"><ul>
<li><b><u>Important</u></b>: loading is asynchronous! This call will return before the new data has been
loaded. To perform any post-processing where information from the load call is required, specify
the <tt>callback</tt> function to be called, or use a {@link Ext.util.Observable#listeners a 'load' event handler}.</li>
<li>If using {@link Ext.PagingToolbar remote paging}, the first load call must specify the <tt>start</tt> and <tt>limit</tt>
properties in the <code>options.params</code> property to establish the initial position within the
dataset, and the number of Records to cache on each read from the Proxy.</li>
<li>If using {@link #remoteSort remote sorting}, the configured <code>{@link #sortInfo}</code>
will be automatically included with the posted parameters according to the specified
<code>{@link #paramNames}</code>.</li>
</ul></div>]]></Summary>
                  <Parameters>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[An object containing properties which control loading options:<ul>
<li><b><tt>params</tt></b> :Object<div class="sub-desc"><p>An object containing properties to pass as HTTP
parameters to a remote data source. <b>Note</b>: <code>params</code> will override any
<code>{@link #baseParams}</code> of the same name.</p>
<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p></div></li>
<li><b><tt>callback</tt></b> : Function<div class="sub-desc"><p>A function to be called after the Records
have been loaded. The <tt>callback</tt> is called after the load event and is passed the following arguments:<ul>
<li><tt>r</tt> : Ext.data.Record[]</li>
<li><tt>options</tt>: Options object from the load call</li>
<li><tt>success</tt>: Boolean success indicator</li></ul></p></div></li>
<li><b><tt>scope</tt></b> : Object<div class="sub-desc"><p>Scope with which to call the callback (defaults
to the Store object)</p></div></li>
<li><b><tt>add</tt></b> : Boolean<div class="sub-desc"><p>Indicator to append loaded records rather than
replace the current cache.  <b>Note</b>: see note for <tt>{@link #loadData}</tt></p></div></li>
</ul>
<tt>false</tt>, the load call will abort and will return <tt>false</tt>; otherwise will return <tt>true</tt>.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean} If the &lt;i&gt;developer&lt;/i&gt; provided &lt;tt&gt;{@link #beforeload">
                    <Summary><![CDATA[</tt> event handler returns]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="datachanged">
                  <Summary><![CDATA[Fires when the data cache has changed in a bulk manner (e.g., it has been sorted, filtered, etc.) and a widget that is using this Store as a Record cache should refresh its view.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="metachange">
                  <Summary><![CDATA[Fires when this store's reader provides new metadata (fields). This is currently only supported for JsonReaders.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="meta" Type="Object">
                      <Summary><![CDATA[The JSON metadata]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="add">
                  <Summary><![CDATA[Fires when Records have been {@link #add}ed to the Store.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="records" Type="Ext.data.Record[]">
                      <Summary><![CDATA[The array of Records added]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index at which the record(s) were added]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="remove">
                  <Summary><![CDATA[Fires when a Record has been {@link #remove}d from the Store.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The Record that was removed]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index at which the record was removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="update">
                  <Summary><![CDATA[Fires when a Record has been updated <pre><code> Ext.data.Record.EDIT Ext.data.Record.REJECT Ext.data.Record.COMMIT </code></pre>.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The Record that was updated]]></Summary>
                    </Param>
                    <Param Name="operation" Type="String">
                      <Summary><![CDATA[The update operation being performed.  Value may be one of:]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="clear">
                  <Summary><![CDATA[Fires when the data cache has been cleared.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="exception">
                  <Summary><![CDATA[<p>Fires if an exception occurs in the Proxy during a remote request. This event is relayed through the corresponding {@link Ext.data.DataProxy}. See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception} for additional details. for description.]]></Summary>
                  <Parameters>
                    <Param Name="misc" Type="misc">
                      <Summary><![CDATA[See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeload">
                  <Summary><![CDATA[Fires before a request is made for a new data object. If the beforeload handler returns <tt>false</tt> the {@link #load} action will be canceled.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The loading options that were specified (see {@link #load} for details)]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="load">
                  <Summary><![CDATA[Fires after a new set of Records has been loaded.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Store">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="records" Type="Ext.data.Record[]">
                      <Summary><![CDATA[The Records that were loaded]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The loading options that were specified (see {@link #load} for details)]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="loadexception">
                  <Summary><![CDATA[<p>This event is <b>deprecated</b> in favor of the catch-all <b><code>{@link #exception}</code></b> event instead.</p> <p>This event is relayed through the corresponding {@link Ext.data.DataProxy}. See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#loadexception loadexception} for additional details. for description.]]></Summary>
                  <Parameters>
                    <Param Name="misc" Type="misc">
                      <Summary><![CDATA[See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#loadexception loadexception}]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforewrite">
                  <Parameters>
                    <Param Name="store" Type="Ext.data.Store" />
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[Ext.data.Api.actions.create|update|destroy]]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Record/Array[Record]" />
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The loading options that were specified. Edit <code>options.params</code> to add Http parameters to the request.  (see {@link #save} for details)]]></Summary>
                    </Param>
                    <Param Name="arg" Type="Object">
                      <Summary><![CDATA[The callback's arg object passed to the {@link #request} function]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="write">
                  <Summary><![CDATA[Fires if the server returns 200 after an Ext.data.Api.actions CRUD action. Success or failure of the action is available in the <code>result['successProperty']</code> property. The server-code might set the <code>successProperty</code> to <tt>false</tt> if a database validation failed, for example.]]></Summary>
                  <Parameters>
                    <Param Name="store" Type="Ext.data.Store" />
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[Ext.data.Api.actions.create|update|destroy]]]></Summary>
                    </Param>
                    <Param Name="result" Type="Object">
                      <Summary><![CDATA[The 'data' picked-out out of the response for convenience.]]></Summary>
                    </Param>
                    <Param Name="res" Type="Ext.Direct.Transaction" />
                    <Param Name="rs" Type="Record/Record[]">
                      <Summary><![CDATA[Store's records, the subject(s) of the write-action]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Store.Error" FullName="Ext.data.Store.Error" Package="data" DefinedIn="data\Store.js" Extends="Ext.Error">
              <Summary><![CDATA[Store Error extension.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="name" Type="String" />
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Tree" FullName="Ext.data.Tree" Package="data" DefinedIn="data\Tree.js" Extends="Ext.util.Observable">
              <Summary><![CDATA[Represents a tree data structure and bubbles all the events for its nodes. The nodes
in the tree have most standard DOM functionality.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="root" Type="Node" Optional="true">
                    <Summary><![CDATA[The root node]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="pathSeparator" Type="String">
                  <Summary><![CDATA[The token used to separate paths in node ids (defaults to '/').]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="root">
                  <Summary><![CDATA[The root node for this tree]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getNodeById">
                  <Summary><![CDATA[Gets a node in this tree by its id.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String" />
                  </Parameters>
                  <Return Type="Node" />
                </Method>
                <Method Name="getRootNode">
                  <Summary><![CDATA[Returns the root node for this tree.]]></Summary>
                  <Parameters />
                  <Return Type="Node" />
                </Method>
                <Method Name="setRootNode">
                  <Summary><![CDATA[Sets the root node for this tree.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node" />
                  </Parameters>
                  <Return Type="Node" />
                </Method>
              </Methods>
              <Events>
                <Event Name="append">
                  <Summary><![CDATA[Fires when a new child node is appended to a node in this tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The newly appended node]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the newly appended node]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeappend">
                  <Summary><![CDATA[Fires before a new child is appended to a node in this tree, return false to cancel the append.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be appended]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeinsert">
                  <Summary><![CDATA[Fires before a new child is inserted in a node in this tree, return false to cancel the insert.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be inserted]]></Summary>
                    </Param>
                    <Param Name="refNode" Type="Node">
                      <Summary><![CDATA[The child node the node is being inserted before]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforemove">
                  <Summary><![CDATA[Fires before a node is moved to a new location in the tree. Return false to cancel the move.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node being moved]]></Summary>
                    </Param>
                    <Param Name="oldParent" Type="Node">
                      <Summary><![CDATA[The parent of the node]]></Summary>
                    </Param>
                    <Param Name="newParent" Type="Node">
                      <Summary><![CDATA[The new parent the node is moving to]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index it is being moved to]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeremove">
                  <Summary><![CDATA[Fires before a child is removed from a node in this tree, return false to cancel the remove.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="insert">
                  <Summary><![CDATA[Fires when a new child node is inserted in a node in this tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node inserted]]></Summary>
                    </Param>
                    <Param Name="refNode" Type="Node">
                      <Summary><![CDATA[The child node the node was inserted before]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="move">
                  <Summary><![CDATA[Fires when a node is moved to a new location in the tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node moved]]></Summary>
                    </Param>
                    <Param Name="oldParent" Type="Node">
                      <Summary><![CDATA[The old parent of this node]]></Summary>
                    </Param>
                    <Param Name="newParent" Type="Node">
                      <Summary><![CDATA[The new parent of this node]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index it was moved to]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="remove">
                  <Summary><![CDATA[Fires when a child node is removed from a node in this tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="XmlReader" FullName="Ext.data.XmlReader" Package="data" DefinedIn="data\XmlReader.js" Extends="Ext.data.DataReader">
              <Summary><![CDATA[<p>Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document
based on mappings in a provided {@link Ext.data.Record} constructor.</p>
<p><b>Note</b>: that in order for the browser to parse a returned XML document, the Content-Type
header in the HTTP response must be set to "text/xml" or "application/xml".</p>
<p>Example code:</p>
<pre><code>
var Employee = Ext.data.Record.create([
  {name: 'name', mapping: 'name'},     // "mapping" property not needed if it is the same as "name"
  {name: 'occupation'}                 // This field will use "occupation" as the mapping.
]);
var myReader = new Ext.data.XmlReader({
   totalRecords: "results", // The element which contains the total dataset size (optional)
   record: "row",           // The repeated element which contains row information
   id: "id"                 // The element within the row that provides an ID for the record (optional)
}, Employee);
</code></pre>
<p>
This would consume an XML file like this:
<pre><code>
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;dataset>
 &lt;results>2&lt;/results>
 &lt;row>
   &lt;id>1&lt;/id>
   &lt;name>Bill&lt;/name>
   &lt;occupation>Gardener&lt;/occupation>
 &lt;/row>
 &lt;row>
   &lt;id>2&lt;/id>
   &lt;name>Ben&lt;/name>
   &lt;occupation>Horticulturalist&lt;/occupation>
 &lt;/row>
&lt;/dataset>
</code></pre>
@cfg {String} totalRecords The DomQuery path from which to retrieve the total number of records
in the dataset. This is only needed if the whole dataset is not passed in one go, but is being
paged from the remote server.
@cfg {String} record The DomQuery path to the repeated element which contains record information.
@cfg {String} success The DomQuery path to the success attribute used by forms.
@cfg {String} idPath The DomQuery path relative from the record element to the element that contains
a record identifier value.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new XmlReader.]]></Summary>
                <Parameters>
                  <Param Name="meta" Type="Object">
                    <Summary><![CDATA[Metadata configuration options]]></Summary>
                  </Param>
                  <Param Name="recordType" Type="Object">
                    <Summary><![CDATA[Either an Array of field definition objects as passed to {@link Ext.data.Record#create}, or a Record constructor object created using {@link Ext.data.Record#create}.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="xmlData">
                  <Summary><![CDATA[After any data loads/reads, the raw XML Document is available for further custom processing.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="read">
                  <Summary><![CDATA[This method is only used by a DataProxy which has retrieved data from a remote server.]]></Summary>
                  <Parameters>
                    <Param Name="response" Type="Object">
                      <Summary><![CDATA[The XHR object which contains the parsed XML document.  The response is expected
to contain a property called <tt>responseXML</tt> which refers to an XML document object.
a cache of Ext.data.Records.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object} records A data block which is used by an {@link Ext.data.Store">
                    <Summary><![CDATA[as]]></Summary>
                  </Return>
                </Method>
                <Method Name="readRecords">
                  <Summary><![CDATA[Create a data block containing Ext.data.Records from an XML document.]]></Summary>
                  <Parameters>
                    <Param Name="doc" Type="Object">
                      <Summary><![CDATA[A parsed XML document.
a cache of Ext.data.Records.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object} records A data block which is used by an {@link Ext.data.Store">
                    <Summary><![CDATA[as]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="XmlStore" FullName="Ext.data.XmlStore" Package="data" DefinedIn="data\XmlStore.js" Xtype="xmlstore" Extends="Ext.data.Store">
              <Summary><![CDATA[<p>Small helper class to make creating {@link Ext.data.Store}s from XML data easier.
A XmlStore will be automatically configured with a {@link Ext.data.XmlReader}.</p>
<p>A store configuration would be something like:<pre><code>
var store = new Ext.data.XmlStore({
    // store configs
    autoDestroy: true,
    storeId: 'myStore',
    url: 'sheldon.xml', // automatically configures a HttpProxy
    // reader configs
    record: 'Item', // records will have an "Item" tag
    idPath: 'ASIN',
    totalRecords: '@TotalResults'
    fields: [
        // set up the fields mapping into the xml doc
        // The first needs mapping, the others are very basic
       {name: 'Author', mapping: 'ItemAttributes > Author'},
        'Title', 'Manufacturer', 'ProductGroup'
    ]
});
</code></pre></p>
<p>This store is configured to consume a returned object of the form:<pre><code>
&#60?xml version="1.0" encoding="UTF-8"?>
&#60ItemSearchResponse xmlns="http://webservices.amazon.com/AWSECommerceService/2009-05-15">
    &#60Items>
        &#60Request>
            &#60IsValid>True&#60/IsValid>
            &#60ItemSearchRequest>
                &#60Author>Sidney Sheldon&#60/Author>
                &#60SearchIndex>Books&#60/SearchIndex>
            &#60/ItemSearchRequest>
        &#60/Request>
        &#60TotalResults>203&#60/TotalResults>
        &#60TotalPages>21&#60/TotalPages>
        &#60Item>
            &#60ASIN>0446355453&#60/ASIN>
            &#60DetailPageURL>
                http://www.amazon.com/
            &#60/DetailPageURL>
            &#60ItemAttributes>
                &#60Author>Sidney Sheldon&#60/Author>
                &#60Manufacturer>Warner Books&#60/Manufacturer>
                &#60ProductGroup>Book&#60/ProductGroup>
                &#60Title>Master of the Game&#60/Title>
            &#60/ItemAttributes>
        &#60/Item>
    &#60/Items>
&#60/ItemSearchResponse>
</code></pre>
An object literal of this form could also be used as the {@link #data} config option.</p>
<p><b>Note:</b> Although not listed here, this class accepts all of the configuration options of
<b>{@link Ext.data.XmlReader XmlReader}</b>.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="reader" Type="Ext.data.DataReader" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="XmlWriter" FullName="Ext.data.XmlWriter" Package="data" DefinedIn="data\XmlWriter.js" Extends="Ext.data.DataWriter">
              <Summary><![CDATA[DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="createRecord">
                  <Summary><![CDATA[createRecord]]></Summary>
                  <Parameters>
                    <Param Name="rec" Type="Ext.data.Record" />
                  </Parameters>
                </Method>
                <Method Name="destroyRecord">
                  <Summary><![CDATA[destroyRecord]]></Summary>
                  <Parameters>
                    <Param Name="rec" Type="Ext.data.Record" />
                  </Parameters>
                </Method>
                <Method Name="render">
                  <Summary><![CDATA[Final action of a write event.  Apply the written data-object to params.]]></Summary>
                  <Parameters>
                    <Param Name="action" Type="String">
                      <Summary><![CDATA[[Ext.data.Api.create|read|update|destroy]]]></Summary>
                    </Param>
                    <Param Name="rs" Type="Record[]" />
                    <Param Name="http" Type="Object">
                      <Summary><![CDATA[params]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[object populated according to DataReader meta-data "root" and "idProperty"]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="updateRecord">
                  <Summary><![CDATA[updateRecord]]></Summary>
                  <Parameters>
                    <Param Name="rec" Type="Ext.data.Record" />
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="dd" Path="dd" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="DD" FullName="Ext.dd.DD" Package="dd" DefinedIn="dd\DDCore.js" Extends="Ext.dd.DragDrop" Subclasses="Ext.dd.DDProxy">
              <Summary><![CDATA[A DragDrop implementation where the linked element follows the
mouse cursor during a drag.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="id" Type="String">
                    <Summary><![CDATA[the id of the linked element]]></Summary>
                  </Param>
                  <Param Name="sGroup" Type="String">
                    <Summary><![CDATA[the group of related DragDrop items]]></Summary>
                  </Param>
                  <Param Name="config" Type="object">
                    <Summary><![CDATA[an object containing configurable attributes Valid properties for DD: scroll]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="scroll">
                  <Summary><![CDATA[When set to true, the utility automatically tries to scroll the browser
window when a drag and drop element is dragged near the viewport boundary.
Defaults to true.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="autoOffset">
                  <Summary><![CDATA[Sets the pointer offset to the distance between the linked element's top
left corner and the location the element was clicked]]></Summary>
                  <Parameters>
                    <Param Name="iPageX" Type="int">
                      <Summary><![CDATA[the X coordinate of the click]]></Summary>
                    </Param>
                    <Param Name="iPageY" Type="int">
                      <Summary><![CDATA[the Y coordinate of the click]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setDelta">
                  <Summary><![CDATA[Sets the pointer offset.  You can call this directly to force the
offset to be in a particular location (e.g., pass in 0,0 to set it
to the center of the object)]]></Summary>
                  <Parameters>
                    <Param Name="iDeltaX" Type="int">
                      <Summary><![CDATA[the distance from the left]]></Summary>
                    </Param>
                    <Param Name="iDeltaY" Type="int">
                      <Summary><![CDATA[the distance from the top]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setDragElPos">
                  <Summary><![CDATA[Sets the drag element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.]]></Summary>
                  <Parameters>
                    <Param Name="iPageX" Type="int">
                      <Summary><![CDATA[the X coordinate of the mousedown or drag event]]></Summary>
                    </Param>
                    <Param Name="iPageY" Type="int">
                      <Summary><![CDATA[the Y coordinate of the mousedown or drag event]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="alignElWithMouse">
                  <Summary><![CDATA[Sets the element to the location of the mousedown or click event,
maintaining the cursor location relative to the location on the element
that was clicked.  Override this if you want to place the element in a
location other than where the cursor is.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HTMLElement">
                      <Summary><![CDATA[the element to move]]></Summary>
                    </Param>
                    <Param Name="iPageX" Type="int">
                      <Summary><![CDATA[the X coordinate of the mousedown or drag event]]></Summary>
                    </Param>
                    <Param Name="iPageY" Type="int">
                      <Summary><![CDATA[the Y coordinate of the mousedown or drag event]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="cachePosition">
                  <Summary><![CDATA[Saves the most recent position so that we can reset the constraints and
tick marks on-demand.  We need to know this so that we can calculate the
number of pixels the element is offset from its original position.]]></Summary>
                  <Parameters>
                    <Param Name="iPageX">
                      <Summary><![CDATA[the current x position (optional, this just makes it so we
don't have to look it up again)]]></Summary>
                    </Param>
                    <Param Name="iPageY">
                      <Summary><![CDATA[the current y position (optional, this just makes it so we
don't have to look it up again)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DDProxy" FullName="Ext.dd.DDProxy" Package="dd" DefinedIn="dd\DDCore.js" Extends="Ext.dd.DD" Subclasses="Ext.dd.DragSource">
              <Summary><![CDATA[A DragDrop implementation that inserts an empty, bordered div into
the document that follows the cursor during drag operations.  At the time of
the click, the frame div is resized to the dimensions of the linked html
element, and moved to the exact location of the linked element.

References to the "frame" element refer to the single proxy element that
was created to be dragged in place of all DDProxy elements on the
page.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="id" Type="String">
                    <Summary><![CDATA[the id of the linked html element]]></Summary>
                  </Param>
                  <Param Name="sGroup" Type="String">
                    <Summary><![CDATA[the group of related DragDrop objects]]></Summary>
                  </Param>
                  <Param Name="config" Type="object">
                    <Summary><![CDATA[an object containing configurable attributes Valid properties for DDProxy in addition to those in DragDrop: resizeFrame, centerFrame, dragElId]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="Ext.dd.DDProxy.dragElId" Static="true">
                  <Summary><![CDATA[The default drag frame div id]]></Summary>
                </Property>
                <Property Name="resizeFrame">
                  <Summary><![CDATA[By default we resize the drag frame to be the same size as the element
we want to drag (this is to get the frame effect).  We can turn it off
if we want a different behavior.]]></Summary>
                </Property>
                <Property Name="centerFrame">
                  <Summary><![CDATA[By default the frame is positioned exactly where the drag element is, so
we use the cursor offset provided by Ext.dd.DD.  Another option that works only if
you do not have constraints on the obj is to have the drag frame centered
around the cursor.  Set centerFrame to true for this effect.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="createFrame">
                  <Summary><![CDATA[Creates the proxy element if it does not yet exist]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="initFrame">
                  <Summary><![CDATA[Initialization for the drag frame element.  Must be called in the
constructor of all subclasses]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DDTarget" FullName="Ext.dd.DDTarget" Package="dd" DefinedIn="dd\DDCore.js" Extends="Ext.dd.DragDrop" Subclasses="Ext.dd.DropTarget">
              <Summary><![CDATA[A DragDrop implementation that does not move, but can be a drop
target.  You would get the same result by simply omitting implementation
for the event callbacks, but this way we reduce the processing cost of the
event listener and the callbacks.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="id" Type="String">
                    <Summary><![CDATA[the id of the element that is a drop target]]></Summary>
                  </Param>
                  <Param Name="sGroup" Type="String">
                    <Summary><![CDATA[the group of related DragDrop objects]]></Summary>
                  </Param>
                  <Param Name="config" Type="object">
                    <Summary><![CDATA[an object containing configurable attributes Valid properties for DDTarget in addition to those in DragDrop: none]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="DragDrop" FullName="Ext.dd.DragDrop" Package="dd" DefinedIn="dd\DDCore.js" Subclasses="Ext.dd.DD,Ext.dd.DDTarget">
              <Summary><![CDATA[Defines the interface and base operation of items that that can be
dragged or can be drop targets.  It was designed to be extended, overriding
the event handlers for startDrag, onDrag, onDragOver and onDragOut.
Up to three html elements can be associated with a DragDrop instance:
<ul>
<li>linked element: the element that is passed into the constructor.
This is the element which defines the boundaries for interaction with
other DragDrop objects.</li>
<li>handle element(s): The drag operation only occurs if the element that
was clicked matches a handle element.  By default this is the linked
element, but there are times that you will want only a portion of the
linked element to initiate the drag operation, and the setHandleElId()
method provides a way to define this.</li>
<li>drag element: this represents the element that would be moved along
with the cursor during a drag operation.  By default, this is the linked
element itself as in {@link Ext.dd.DD}.  setDragElId() lets you define
a separate element that would be moved, as in {@link Ext.dd.DDProxy}.
</li>
</ul>
This class should not be instantiated until the onload event to ensure that
the associated elements are available.
The following would define a DragDrop obj that would interact with any
other DragDrop obj in the "group1" group:
<pre>
dd = new Ext.dd.DragDrop("div1", "group1");
</pre>
Since none of the event handlers have been implemented, nothing would
actually happen if you were to run the code above.  Normally you would
override this class or one of the default implementations, but you can
also override the methods you want on an instance of the class...
<pre>
dd.onDragDrop = function (e, id) {
&nbsp;&nbsp;alert("dd was dropped on " + id);
}
</pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="id" Type="String">
                    <Summary><![CDATA[of the element that is linked to this instance]]></Summary>
                  </Param>
                  <Param Name="sGroup" Type="String">
                    <Summary><![CDATA[the group of related DragDrop objects]]></Summary>
                  </Param>
                  <Param Name="config" Type="object">
                    <Summary><![CDATA[an object containing configurable attributes Valid properties for DragDrop: padding, isTarget, maintainOffset, primaryButtonOnly]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="ignoreSelf">
                  <Summary><![CDATA[Set to false to enable a DragDrop object to fire drag events while dragging
over its own Element. Defaults to true - DragDrop objects do not by default
fire drag events to themselves.]]></Summary>
                </Property>
                <Property Name="id">
                  <Summary><![CDATA[The id of the element associated with this object.  This is what we
refer to as the "linked element" because the size and position of
this element is used to determine when the drag and drop objects have
interacted.]]></Summary>
                </Property>
                <Property Name="config">
                  <Summary><![CDATA[Configuration attributes passed into the constructor]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="DragDropMgr" FullName="Ext.dd.DragDropMgr" Package="dd" DefinedIn="dd\DDCore.js" Singleton="true">
              <Summary><![CDATA[DragDropMgr is a singleton that tracks the element interaction for
all DragDrop items in the window.  Generally, you will not call
this class directly, but it does have helper methods that could
be useful in your DragDrop implementations.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="DragSource" FullName="Ext.dd.DragSource" Package="dd" DefinedIn="dd\DragSource.js" Extends="Ext.dd.DDProxy" Subclasses="Ext.dd.DragZone">
              <Summary><![CDATA[A simple class that provides the basic implementation needed to make any element draggable.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="el" Type="Mixed">
                    <Summary><![CDATA[The container element]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="ddGroup" Type="String">
                  <Summary><![CDATA[A named drag drop group to which this object belongs.  If a group is specified, then this object will only
interact with other drag drop objects in the same group (defaults to undefined).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dropAllowed" Type="String">
                  <Summary><![CDATA[The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dropNotAllowed" Type="String">
                  <Summary><![CDATA[The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="afterDragDrop">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action
after a valid drag drop has occurred by providing an implementation.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dropped element]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="afterDragEnter">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action
when the dragged item enters the drop target by providing an implementation.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="afterDragOut">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action
after the dragged item is dragged out of the target without dropping.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="afterDragOver">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the drop target by providing an implementation.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="afterInvalidDrop">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action
after a valid drop has occurred by providing an implementation.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Object">
                      <Summary><![CDATA[The target DD]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dropped element]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="beforeDragDrop">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action before the dragged
item is dropped onto the target and optionally cancel the onDragDrop.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[isValid True if the drag drop event is valid, else false to cancel]]></Summary>
                  </Return>
                </Method>
                <Method Name="beforeDragEnter">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action
before the dragged item enters the drop target and optionally cancel the onDragEnter.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[isValid True if the drag event is valid, else false to cancel]]></Summary>
                  </Return>
                </Method>
                <Method Name="beforeDragOut">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action before the dragged
item is dragged out of the target without dropping, and optionally cancel the onDragOut.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[isValid True if the drag event is valid, else false to cancel]]></Summary>
                  </Return>
                </Method>
                <Method Name="beforeDragOver">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action
while the dragged item is over the drop target and optionally cancel the onDragOver.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[isValid True if the drag event is valid, else false to cancel]]></Summary>
                  </Return>
                </Method>
                <Method Name="beforeInvalidDrop">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action after an invalid
drop has occurred.]]></Summary>
                  <Parameters>
                    <Param Name="target" Type="Ext.dd.DragDrop">
                      <Summary><![CDATA[The drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the dragged element]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[isValid True if the invalid drop should proceed, else false to cancel]]></Summary>
                  </Return>
                </Method>
                <Method Name="getDragData">
                  <Summary><![CDATA[Returns the data object associated with this drag source]]></Summary>
                  <Parameters />
                  <Return Type="Object">
                    <Summary><![CDATA[data An object containing arbitrary data]]></Summary>
                  </Return>
                </Method>
                <Method Name="getProxy">
                  <Summary><![CDATA[Returns the drag source's underlying {@link Ext.dd.StatusProxy}]]></Summary>
                  <Parameters />
                  <Return Type="Ext.dd.StatusProxy">
                    <Summary><![CDATA[proxy The StatusProxy]]></Summary>
                  </Return>
                </Method>
                <Method Name="hideProxy">
                  <Summary><![CDATA[Hides the drag source's {@link Ext.dd.StatusProxy}]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="onBeforeDrag">
                  <Summary><![CDATA[An empty function by default, but provided so that you can perform a custom action before the initial
drag event begins and optionally cancel it.]]></Summary>
                  <Parameters>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data to be shared with drop targets]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[isValid True if the drag event is valid, else false to cancel]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DragTracker" FullName="Ext.dd.DragTracker" Package="dd" DefinedIn="dd\DragTracker.js" Extends="Ext.util.Observable">
              <ConfigOptions>
                <ConfigOption Name="active" Type="Boolean">
                  <Summary><![CDATA[Defaults to <tt>false</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoStart" Type="Boolean/Number">
                  <Summary><![CDATA[Defaults to <tt>false</tt>. Specify <tt>true</tt> to defer trigger start by 1000 ms.
Specify a Number for the number of milliseconds to defer trigger start.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tolerance" Type="Number">
                  <Summary><![CDATA[Defaults to <tt>5</tt>.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events>
                <Event Name="drag">
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="dragend">
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="dragstart">
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="startXY" Type="Object">
                      <Summary><![CDATA[the page coordinates of the event]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="mousedown">
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="mousemove">
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="mouseup">
                  <Parameters>
                    <Param Name="el" Type="Object">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DragZone" FullName="Ext.dd.DragZone" Package="dd" DefinedIn="dd\DragZone.js" Extends="Ext.dd.DragSource" Subclasses="Ext.grid.GridDragZone,Ext.tree.TreeDragZone">
              <Summary><![CDATA[<p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>
<p>This class does not move the drag target nodes, but a proxy element which may contain
any DOM structure you wish. The DOM element to show in the proxy is provided by either a
provided implementation of {@link #getDragData}, or by registered draggables registered with {@link Ext.dd.Registry}</p>
<p>If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some
application object (For example nodes in a {@link Ext.DataView DataView}) then use of this class
is the most efficient way to "activate" those nodes.</p>
<p>By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}.
However a simpler way to allow a DragZone to manage any number of draggable elements is to configure
the DragZone with  an implementation of the {@link #getDragData} method which interrogates the passed
mouse event to see if it has taken place within an element, or class of elements. This is easily done
by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
{@link Ext.DomQuery} selector. For example, to make the nodes of a DataView draggable, use the following
technique. Knowledge of the use of the DataView is required:</p><pre><code>
myDataView.on('render', function () {
    myDataView.dragZone = new Ext.dd.DragZone(myDataView.getEl(), {

//      On receipt of a mousedown event, see if it is within a DataView node.
//      Return a drag data object if so.
        getDragData: function (e) {

//          Use the DataView's own itemSelector (a mandatory property) to
//          test if the mousedown is within one of the DataView's nodes.
            var sourceEl = e.getTarget(myDataView.itemSelector, 10);

//          If the mousedown is within a DataView node, clone the node to produce
//          a ddel element for use by the drag proxy. Also add application data
//          to the returned data object.
            if (sourceEl) {
                d = sourceEl.cloneNode(true);
                d.id = Ext.id();
                return {
                    ddel: d,
                    sourceEl: sourceEl,
                    repairXY: Ext.fly(sourceEl).getXY(),
                    sourceStore: myDataView.store,
                    draggedRecord: v.getRecord(sourceEl)
                }
            }
        },

//      Provide coordinates for the proxy to slide back to on failed drag.
//      This is the original XY coordinates of the draggable element captured
//      in the getDragData method.
        getRepairXY: function () {
            return this.dragData.repairXY;
        }
    });
});</code></pre>
See the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which
cooperates with this DragZone.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="el" Type="Mixed">
                    <Summary><![CDATA[The container element]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="containerScroll" Type="Boolean">
                  <Summary><![CDATA[for auto scrolling during drag operations.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hlColor" Type="String">
                  <Summary><![CDATA[method after a failed drop (defaults to "c3daf9" - light blue)]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="dragData">
                  <Summary><![CDATA[This property contains the data representing the dragged object. This data is set up by the implementation
of the {@link #getDragData} method. It must contain a <tt>ddel</tt> property, but can contain
any other data according to the application's needs.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="afterRepair">
                  <Summary><![CDATA[Called after a repair of an invalid drop. By default, highlights this.dragData.ddel]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getDragData">
                  <Summary><![CDATA[Called when a mousedown occurs in this container. Looks in {@link Ext.dd.Registry}
for a valid target to drag based on the mouse down. Override this method
to provide your own lookup logic (e.g. finding a child by class name). Make sure your returned
object has a "ddel" attribute (with an HTML Element) for other functions to work.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="EventObject">
                      <Summary><![CDATA[The mouse down event]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The dragData]]></Summary>
                  </Return>
                </Method>
                <Method Name="getRepairXY">
                  <Summary><![CDATA[Called before a repair of an invalid drop to get the XY to animate to. By default returns
the XY of this.dragData.ddel]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="EventObject">
                      <Summary><![CDATA[The mouse up event]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Array">
                    <Summary><![CDATA[The xy location (e.g. [100, 200])]]></Summary>
                  </Return>
                </Method>
                <Method Name="onInitDrag">
                  <Summary><![CDATA[Called once drag threshold has been reached to initialize the proxy element. By default, it clones the
this.dragData.ddel]]></Summary>
                  <Parameters>
                    <Param Name="x" Type="Number">
                      <Summary><![CDATA[The x position of the click on the dragged object]]></Summary>
                    </Param>
                    <Param Name="y" Type="Number">
                      <Summary><![CDATA[The y position of the click on the dragged object]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[true to continue the drag, false to cancel]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DropTarget" FullName="Ext.dd.DropTarget" Package="dd" DefinedIn="dd\DropTarget.js" Extends="Ext.dd.DDTarget" Subclasses="Ext.dd.DropZone">
              <Summary><![CDATA[A simple class that provides the basic implementation needed to make any element a drop target that can have
draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="el" Type="Mixed">
                    <Summary><![CDATA[The container element]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="ddGroup" Type="String">
                  <Summary><![CDATA[A named drag drop group to which this object belongs.  If a group is specified, then this object will only
interact with other drag drop objects in the same group (defaults to undefined).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dropAllowed" Type="String">
                  <Summary><![CDATA[The CSS class returned to the drag source when drop is allowed (defaults to "x-dd-drop-ok").]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dropNotAllowed" Type="String">
                  <Summary><![CDATA[The CSS class returned to the drag source when drop is not allowed (defaults to "x-dd-drop-nodrop").]]></Summary>
                </ConfigOption>
                <ConfigOption Name="overClass" Type="String">
                  <Summary><![CDATA[The CSS class applied to the drop target element while the drag source is over it (defaults to "").]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="notifyDrop">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the dragged item has
been dropped on it.  This method has no default implementation and returns false, so you must provide an
implementation that does something to process the drop event and returns true so that the drag source's
repair action does not run.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the drop was valid, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="notifyEnter">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source is now over the
target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element
and returns the dropAllowed config value.  This method should be overridden if drop validation is required.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source
underlying {@link Ext.dd.StatusProxy} can be updated]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[status The CSS class that communicates the drop status back to the source so that the]]></Summary>
                  </Return>
                </Method>
                <Method Name="notifyOut">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source has been dragged
out of the target without dropping.  This default implementation simply removes the CSS class specified by
overClass (if any) from the drop element.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="notifyOver">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the target.
This method will be called on every mouse movement while the drag source is over the drop target.
This default implementation simply returns the dropAllowed config value.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source
underlying {@link Ext.dd.StatusProxy} can be updated]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[status The CSS class that communicates the drop status back to the source so that the]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DropZone" FullName="Ext.dd.DropZone" Package="dd" DefinedIn="dd\DropZone.js" Extends="Ext.dd.DropTarget" Subclasses="Ext.tree.TreeDropZone">
              <Summary><![CDATA[<p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>
<p>By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.
However a simpler way to allow a DropZone to manage any number of target elements is to configure the
DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed
mouse event to see if it has taken place within an element, or class of elements. This is easily done
by using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a
{@link Ext.DomQuery} selector.</p>
<p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over
a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},
{@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations
of these methods to provide application-specific behaviour for these events to update both
application state, and UI state.</p>
<p>For example to make a GridPanel a cooperating target with the example illustrated in
{@link Ext.dd.DragZone DragZone}, the following technique might be used:</p><pre><code>
myGridPanel.on('render', function () {
    myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {

//      If the mouse is over a grid row, return that node. This is
//      provided as the "target" parameter in all "onNodeXXXX" node event handling functions
        getTargetFromEvent: function (e) {
            return e.getTarget(myGridPanel.getView().rowSelector);
        },

//      On entry into a target node, highlight that node.
        onNodeEnter : function (target, dd, e, data) { 
            Ext.fly(target).addClass('my-row-highlight-class');
        },

//      On exit from a target node, unhighlight that node.
        onNodeOut : function (target, dd, e, data) { 
            Ext.fly(target).removeClass('my-row-highlight-class');
        },

//      While over a target node, return the default drop allowed class which
//      places a "tick" icon into the drag proxy.
        onNodeOver : function (target, dd, e, data) { 
            return Ext.dd.DropZone.prototype.dropAllowed;
        },

//      On node drop we can interrogate the target to find the underlying
//      application object that is the real target of the dragged data.
//      In this case, it is a Record in the GridPanel's Store.
//      We can use the data set up by the DragZone's getDragData method to read
//      any data we decided to attach in the DragZone's getDragData method.
        onNodeDrop : function (target, dd, e, data) {
            var rowIndex = myGridPanel.getView().findRowIndex(target);
            var r = myGridPanel.getStore().getAt(rowIndex);
            Ext.Msg.alert('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +
                ' on Record id ' + r.id);
            return true;
        }
    });
}
</code></pre>
See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which
cooperates with this DropZone.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="el" Type="Mixed">
                    <Summary><![CDATA[The container element]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="getTargetFromEvent">
                  <Summary><![CDATA[Returns a custom data object associated with the DOM node that is the target of the event.  By default
this looks up the event target in the {@link Ext.dd.Registry}, although you can override this method to
provide your own custom lookup.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[data The custom data]]></Summary>
                  </Return>
                </Method>
                <Method Name="notifyDrop">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the dragged item has
been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there
is a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,
otherwise it will call {@link #onContainerDrop}.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the drop was valid, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="notifyEnter">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source is now over
the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop
nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops
you should override this method and provide a custom implementation.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source
underlying {@link Ext.dd.StatusProxy} can be updated]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[status The CSS class that communicates the drop status back to the source so that the]]></Summary>
                  </Return>
                </Method>
                <Method Name="notifyOut">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source has been dragged
out of the zone without dropping.  If the drag source is currently over a registered node, the notification
will be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop target]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag zone]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="notifyOver">
                  <Summary><![CDATA[The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the drop zone.
This method will be called on every mouse movement while the drag source is over the drop zone.
It will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically
delegate to the appropriate node-specific methods as necessary when the drag source enters and exits
registered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a
registered node, it will call {@link #onContainerOver}.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source
underlying {@link Ext.dd.StatusProxy} can be updated]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[status The CSS class that communicates the drop status back to the source so that the]]></Summary>
                  </Return>
                </Method>
                <Method Name="onContainerDrop">
                  <Summary><![CDATA[Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped on it,
but not on any of its registered drop nodes.  The default implementation returns false, so it should be
overridden to provide the appropriate processing of the drop event if you need the drop zone itself to
be able to accept drops.  It should return true when valid so that the drag source's repair action does not run.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the drop was valid, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="onContainerOver">
                  <Summary><![CDATA[Called while the DropZone determines that a {@link Ext.dd.DragSource} is being dragged over it,
but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so
it should be overridden to provide the proper feedback if necessary.]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source
underlying {@link Ext.dd.StatusProxy} can be updated]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[status The CSS class that communicates the drop status back to the source so that the]]></Summary>
                  </Return>
                </Method>
                <Method Name="onNodeDrop">
                  <Summary><![CDATA[Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped onto
the drop node.  The default implementation returns false, so it should be overridden to provide the
appropriate processing of the drop event and return true so that the drag source's repair action does not run.]]></Summary>
                  <Parameters>
                    <Param Name="nodeData" Type="Object">
                      <Summary><![CDATA[The custom data associated with the drop node (this is the same value returned from
{@link #getTargetFromEvent} for this node)]]></Summary>
                    </Param>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the drop was valid, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="onNodeEnter">
                  <Summary><![CDATA[Called when the DropZone determines that a {@link Ext.dd.DragSource} has entered a drop node
that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.
This method has no default implementation and should be overridden to provide
node-specific processing if necessary.]]></Summary>
                  <Parameters>
                    <Param Name="nodeData" Type="Object">
                      <Summary><![CDATA[The custom data associated with the drop node (this is the same value returned from
{@link #getTargetFromEvent} for this node)]]></Summary>
                    </Param>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="onNodeOut">
                  <Summary><![CDATA[Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dragged out of
the drop node without dropping.  This method has no default implementation and should be overridden to provide
node-specific processing if necessary.]]></Summary>
                  <Parameters>
                    <Param Name="nodeData" Type="Object">
                      <Summary><![CDATA[The custom data associated with the drop node (this is the same value returned from
{@link #getTargetFromEvent} for this node)]]></Summary>
                    </Param>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="onNodeOver">
                  <Summary><![CDATA[Called while the DropZone determines that a {@link Ext.dd.DragSource} is over a drop node
that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.
The default implementation returns this.dropNotAllowed, so it should be
overridden to provide the proper feedback.]]></Summary>
                  <Parameters>
                    <Param Name="nodeData" Type="Object">
                      <Summary><![CDATA[The custom data associated with the drop node (this is the same value returned from
{@link #getTargetFromEvent} for this node)]]></Summary>
                    </Param>
                    <Param Name="source" Type="Ext.dd.DragSource">
                      <Summary><![CDATA[The drag source that was dragged over this drop zone]]></Summary>
                    </Param>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object">
                      <Summary><![CDATA[An object containing arbitrary data supplied by the drag source
underlying {@link Ext.dd.StatusProxy} can be updated]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[status The CSS class that communicates the drop status back to the source so that the]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="PanelProxy" FullName="Ext.dd.PanelProxy" Package="dd" DefinedIn="widgets\PanelDD.js">
              <Summary><![CDATA[A custom drag proxy implementation specific to {@link Ext.Panel}s. This class is primarily used internally
for the Panel's drag drop implementation, and should never need to be created directly.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="panel">
                    <Summary><![CDATA[The {@link Ext.Panel} to proxy for]]></Summary>
                  </Param>
                  <Param Name="config">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="insertProxy" Type="Boolean">
                  <Summary><![CDATA[false to drag with no proxy (defaults to true).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="getEl">
                  <Summary><![CDATA[Gets the proxy's element]]></Summary>
                  <Parameters />
                  <Return Type="Element">
                    <Summary><![CDATA[The proxy's element]]></Summary>
                  </Return>
                </Method>
                <Method Name="getGhost">
                  <Summary><![CDATA[Gets the proxy's ghost element]]></Summary>
                  <Parameters />
                  <Return Type="Element">
                    <Summary><![CDATA[The proxy's ghost element]]></Summary>
                  </Return>
                </Method>
                <Method Name="getProxy">
                  <Summary><![CDATA[Gets the proxy's element]]></Summary>
                  <Parameters />
                  <Return Type="Element">
                    <Summary><![CDATA[The proxy's element]]></Summary>
                  </Return>
                </Method>
                <Method Name="hide">
                  <Summary><![CDATA[Hides the proxy]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="moveProxy">
                  <Summary><![CDATA[Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel
to keep the proxy sync'd to the Panel's location.]]></Summary>
                  <Parameters>
                    <Param Name="parentNode" Type="HTMLElement">
                      <Summary><![CDATA[The proxy's parent DOM node]]></Summary>
                    </Param>
                    <Param Name="before" Type="HTMLElement" Optional="true">
                      <Summary><![CDATA[The sibling node before which the proxy should be inserted (defaults
to the parent's last child if not specified)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="show">
                  <Summary><![CDATA[Shows the proxy]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="Registry" FullName="Ext.dd.Registry" Package="dd" DefinedIn="dd\Registry.js" Singleton="true">
              <Summary><![CDATA[Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either
directly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="getHandle">
                  <Summary><![CDATA[Returns the handle registered for a DOM Node by id]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String/HTMLElement">
                      <Summary><![CDATA[The DOM node or id to look up]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[handle The custom handle data]]></Summary>
                  </Return>
                </Method>
                <Method Name="getHandleFromEvent">
                  <Summary><![CDATA[Returns the handle that is registered for the DOM node that is the target of the event]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[handle The custom handle data]]></Summary>
                  </Return>
                </Method>
                <Method Name="getTarget">
                  <Summary><![CDATA[Returns a custom data object that is registered for a DOM node by id]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String/HTMLElement">
                      <Summary><![CDATA[The DOM node or id to look up]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[data The custom data]]></Summary>
                  </Return>
                </Method>
                <Method Name="getTargetFromEvent">
                  <Summary><![CDATA[Returns a custom data object that is registered for the DOM node that is the target of the event]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Event">
                      <Summary><![CDATA[The event]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[data The custom data]]></Summary>
                  </Return>
                </Method>
                <Method Name="register">
                  <Summary><![CDATA[Resgister a drag drop element]]></Summary>
                  <Parameters>
                    <Param Name="{String/HTMLElement)">
                      <Summary><![CDATA[element The id or DOM node to register]]></Summary>
                    </Param>
                    <Param Name="data" Type="Object" Optional="true">
                      <Summary><![CDATA[An custom data object that will be passed between the elements that are involved
in drag drop operations.  You can populate this object with any arbitrary properties that your own code
knows how to interpret, plus there are some specific properties known to the Registry that should be
populated in the data object (if applicable):
<pre>
Value      Description<br />
---------  ------------------------------------------<br />
handles    Array of DOM nodes that trigger dragging<br />
for the element being registered<br />
isHandle   True if the element passed in triggers<br />
dragging itself, else false
</pre>]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="unregister">
                  <Summary><![CDATA[Unregister a drag drop element]]></Summary>
                  <Parameters>
                    <Param Name="{String/HTMLElement)">
                      <Summary><![CDATA[element The id or DOM node to unregister]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="ScrollManager" FullName="Ext.dd.ScrollManager" Package="dd" DefinedIn="dd\ScrollManager.js" Singleton="true">
              <Summary><![CDATA[<p>Provides automatic scrolling of overflow regions in the page during drag operations.</p>
<p>The ScrollManager configs will be used as the defaults for any scroll container registered with it,
but you can also override most of the configs per scroll container by adding a
<tt>ddScrollConfig</tt> object to the target element that contains these properties: {@link #hthresh},
{@link #vthresh}, {@link #increment} and {@link #frequency}.  Example usage:
<pre><code>
var el = Ext.get('scroll-ct');
el.ddScrollConfig = {
    vthresh: 50,
    hthresh: -1,
    frequency: 100,
    increment: 200
};
Ext.dd.ScrollManager.register(el);
</code></pre>
<b>Note: This class uses "Point Mode" and is untested in "Intersect Mode".</b>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="refreshCache">
                  <Summary><![CDATA[Manually trigger a cache refresh.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="register">
                  <Summary><![CDATA[Registers new overflow element(s) to auto scroll]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Mixed/Array">
                      <Summary><![CDATA[The id of or the element to be scrolled or an array of either]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="unregister">
                  <Summary><![CDATA[Unregisters overflow element(s) so they are no longer scrolled]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Mixed/Array">
                      <Summary><![CDATA[The id of or the element to be removed or an array of either]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="StatusProxy" FullName="Ext.dd.StatusProxy" Package="dd" DefinedIn="dd\StatusProxy.js">
              <Summary><![CDATA[A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the
default drag proxy used by all Ext.dd components.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="dropAllowed" Type="String">
                  <Summary><![CDATA[The CSS class to apply to the status element when drop is allowed (defaults to "x-dd-drop-ok").]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dropNotAllowed" Type="String">
                  <Summary><![CDATA[The CSS class to apply to the status element when drop is not allowed (defaults to "x-dd-drop-nodrop").]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="getEl">
                  <Summary><![CDATA[Returns the underlying proxy {@link Ext.Layer}]]></Summary>
                  <Parameters />
                  <Return Type="Ext.Layer">
                    <Summary><![CDATA[el]]></Summary>
                  </Return>
                </Method>
                <Method Name="getGhost">
                  <Summary><![CDATA[Returns the ghost element]]></Summary>
                  <Parameters />
                  <Return Type="Ext.Element">
                    <Summary><![CDATA[el]]></Summary>
                  </Return>
                </Method>
                <Method Name="hide">
                  <Summary><![CDATA[Hides the proxy]]></Summary>
                  <Parameters>
                    <Param Name="clear" Type="Boolean">
                      <Summary><![CDATA[True to reset the status and clear the ghost contents, false to preserve them]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="repair">
                  <Summary><![CDATA[Causes the proxy to return to its position of origin via an animation.  Should be called after an
invalid drop operation by the item being dragged.]]></Summary>
                  <Parameters>
                    <Param Name="xy" Type="Array">
                      <Summary><![CDATA[The XY position of the element ([x, y])]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function">
                      <Summary><![CDATA[The function to call after the repair is complete]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object">
                      <Summary><![CDATA[The scope in which to execute the callback]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="reset">
                  <Summary><![CDATA[Resets the status indicator to the default dropNotAllowed value]]></Summary>
                  <Parameters>
                    <Param Name="clearGhost" Type="Boolean">
                      <Summary><![CDATA[True to also remove all content from the ghost, false to preserve it]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setStatus">
                  <Summary><![CDATA[Updates the proxy's visual element to indicate the status of whether or not drop is allowed
over the current target element.]]></Summary>
                  <Parameters>
                    <Param Name="cssClass" Type="String">
                      <Summary><![CDATA[The css class for the new drop status indicator image]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="show">
                  <Summary><![CDATA[Displays this proxy]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="stop">
                  <Summary><![CDATA[Stops the repair animation if it's currently running]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="sync">
                  <Summary><![CDATA[Force the Layer to sync its shadow and shim positions to the element]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="update">
                  <Summary><![CDATA[Updates the contents of the ghost element]]></Summary>
                  <Parameters>
                    <Param Name="html" Type="String/HTMLElement">
                      <Summary><![CDATA[The html that will replace the current innerHTML of the ghost element, or a
DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first).]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="direct" Path="direct" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="JsonProvider" FullName="Ext.direct.JsonProvider" Package="direct" DefinedIn="direct\JsonProvider.js" Extends="Ext.direct.Provider" Subclasses="Ext.direct.PollingProvider,Ext.direct.RemotingProvider">
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="PollingProvider" FullName="Ext.direct.PollingProvider" Package="direct" DefinedIn="direct\PollingProvider.js" Extends="Ext.direct.JsonProvider">
              <Summary><![CDATA[
<p>Provides for repetitive polling of the server at distinct {@link #interval intervals}.
The initial request for data originates from the client, and then is responded to by the
server.</p>

<p>All configurations for the PollingProvider should be generated by the server-side
API portion of the Ext.Direct stack.</p>

<p>An instance of PollingProvider may be created directly via the new keyword or by simply
specifying <tt>type = 'polling'</tt>.  For example:</p>
<pre><code>
var pollA = new Ext.direct.PollingProvider({
    type:'polling',
    url: 'php/pollA.php',
});
Ext.Direct.addProvider(pollA);
pollA.disconnect();

Ext.Direct.addProvider(
   {
        type:'polling',
        url: 'php/pollB.php',
        id: 'pollB-provider'
    }
);
var pollB = Ext.Direct.getProvider('pollB-provider');
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="baseParams" Type="Object">
                  <Summary><![CDATA[on every polling request]]></Summary>
                </ConfigOption>
                <ConfigOption Name="interval" Type="Number">
                  <Summary><![CDATA[How often to poll the server-side in milliseconds (defaults to <tt>3000</tt> - every
3 seconds).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="priority" Type="Number">
                  <Summary><![CDATA[Priority of the request (defaults to <tt>3</tt>). See {@link Ext.direct.Provider#priority}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="url" Type="String/Function">
                  <Summary><![CDATA[The url which the PollingProvider should contact with each request. This can also be
an imported Ext.Direct method which will accept the baseParams as its only argument.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="connect">
                  <Summary><![CDATA[Connect to the server-side and begin the polling process. To handle each
response subscribe to the data event.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="disconnect">
                  <Summary><![CDATA[Disconnect from the server-side and stop the polling process. The disconnect
event will be fired on a successful disconnect.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events>
                <Event Name="beforepoll">
                  <Summary><![CDATA[Fired immediately before a poll takes place, an event handler can return false in order to cancel the poll.]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="poll">
                  <Summary><![CDATA[This event has not yet been implemented.]]></Summary>
                  <Parameters />
                </Event>
              </Events>
            </Class>
            <Class Name="Provider" FullName="Ext.direct.Provider" Package="direct" DefinedIn="direct\Provider.js" Extends="Ext.util.Observable" Subclasses="Ext.direct.JsonProvider">
              <Summary><![CDATA[<p>Ext.direct.Provider is an abstract class meant to be extended.</p>

<p>For example ExtJs implements the following subclasses:</p>
<pre><code>
Provider
|
+---{@link Ext.direct.JsonProvider JsonProvider} 
    |
    +---{@link Ext.direct.PollingProvider PollingProvider}   
    |
    +---{@link Ext.direct.RemotingProvider RemotingProvider}   
</code></pre>
@abstract]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="id" Type="String">
                  <Summary><![CDATA[The unique id of the provider (defaults to an {@link Ext#id auto-assigned id}).
You should assign an id if you need to be able to access the provider later and you do
not have an object reference available, for example:
<pre><code>
Ext.Direct.addProvider(
   {
        type: 'polling',
        url:  'php/poll.php',
        id:   'poll-provider'
    }
);
     
var p = {@link Ext.Direct Ext.Direct}.{@link Ext.Direct#getProvider getProvider}('poll-provider');
p.disconnect();
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="priority" Type="Number">
                  <Summary><![CDATA[Priority of the request. Lower is higher priority, <tt>0</tt> means "duplex" (always on).
All Providers default to <tt>1</tt> except for PollingProvider which defaults to <tt>3</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="type" Type="String">
                  <Summary><![CDATA[<b>Required</b>, <tt>undefined</tt> by default.  The <tt>type</tt> of provider specified
to {@link Ext.Direct Ext.Direct}.{@link Ext.Direct#addProvider addProvider} to create a
new Provider. Acceptable values by default are:<div class="mdetail-params"><ul>
<li><b><tt>polling</tt></b> : {@link Ext.direct.PollingProvider PollingProvider}</li>
<li><b><tt>remoting</tt></b> : {@link Ext.direct.RemotingProvider RemotingProvider}</li>
</ul></div>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="isConnected">
                  <Summary><![CDATA[Returns whether or not the server-side is currently connected.
Abstract method for subclasses to implement.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events>
                <Event Name="connect">
                  <Summary><![CDATA[Fires when the Provider connects to the server-side.]]></Summary>
                  <Parameters>
                    <Param Name="provider" Type="Ext.direct.Provider">
                      <Summary><![CDATA[The {@link Ext.direct.Provider Provider}.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="data">
                  <Summary><![CDATA[Fires when the Provider receives data from the server-side.]]></Summary>
                  <Parameters>
                    <Param Name="provider" Type="Ext.direct.Provider">
                      <Summary><![CDATA[The {@link Ext.direct.Provider Provider}.]]></Summary>
                    </Param>
                    <Param Name="e" Type="event">
                      <Summary><![CDATA[The {@link Ext.Direct#eventTypes Ext.Direct.Event type} that occurred.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="disconnect">
                  <Summary><![CDATA[Fires when the Provider disconnects from the server-side.]]></Summary>
                  <Parameters>
                    <Param Name="provider" Type="Ext.direct.Provider">
                      <Summary><![CDATA[The {@link Ext.direct.Provider Provider}.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="exception">
                  <Summary><![CDATA[Fires when the Provider receives an exception from the server-side.]]></Summary>
                  <Parameters />
                </Event>
              </Events>
            </Class>
            <Class Name="RemotingProvider" FullName="Ext.direct.RemotingProvider" Package="direct" DefinedIn="direct\RemotingProvider.js" Extends="Ext.direct.JsonProvider">
              <Summary><![CDATA[
<p>The {@link Ext.direct.RemotingProvider RemotingProvider} exposes access to
server side methods on the client (a remote procedure call (RPC) type of
connection where the client can initiate a procedure on the server).</p>

<p>This allows for code to be organized in a fashion that is maintainable,
while providing a clear path between client and server, something that is
not always apparent when using URLs.</p>

<p>To accomplish this the server-side needs to describe what classes and methods
are available on the client-side. This configuration will typically be
outputted by the server-side Ext.Direct stack when the API description is built.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="actions" Type="Object">
                  <Summary><![CDATA[Object literal defining the server side actions and methods. For example, if
the Provider is configured with:
<pre><code>
"actions":{ // each property within the 'actions' object represents a server side Class 
    "TestAction":[ // array of methods within each server side Class to be   
   {              // stubbed out on client
        "name":"doEcho", 
        "len":1            
    },{
        "name":"multiply",// name of method
        "len":2           // The number of parameters that will be used to create an
                          // array of data to send to the server side function.
                          // Ensure the server sends back a Number, not a String. 
    },{
        "name":"doForm",
        "formHandler":true, // direct the client to use specialized form handling method 
        "len":1
    }]
}
</code></pre>
<p>Note that a Store is not required, a server method can be called at any time.
In the following example a <b>client side</b> handler is used to call the
server side method "multiply" in the server-side "TestAction" Class:</p>
<pre><code>
TestAction.multiply(
    2, 4, // pass two arguments to server, so specify len=2
    // callback function after the server is called
    // result: the result returned by the server
    //      e: Ext.Direct.RemotingEvent object
    function (result, e) {
        var t = e.getTransaction();
        var action = t.action; // server side Class called
        var method = t.method; // server side method called
        if (e.status) {
            var answer = Ext.encode(result); // 8
    
        } else {
            var msg = e.message; // failure message
        }
    }
);
</code></pre>
In the example above, the server side "multiply" function will be passed two
arguments (2 and 4).  The "multiply" method should return the value 8 which will be
available as the <tt>result</tt> in the example above.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableBuffer" Type="Number/Boolean">
                  <Summary><![CDATA[<p><tt>true</tt> or <tt>false</tt> to enable or disable combining of method
calls. If a number is specified this is the amount of time in milliseconds
to wait before sending a batched request (defaults to <tt>10</tt>).</p>
<br><p>Calls which are received within the specified timeframe will be
concatenated together and sent in a single request, optimizing the
application by reducing the amount of round trips that have to be made
to the server.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableUrlEncode" Type="String">
                  <Summary><![CDATA[Specify which param will hold the arguments for the method.
Defaults to <tt>'data'</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxRetries" Type="Number">
                  <Summary><![CDATA[Number of times to re-attempt delivery on failure of a call.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="namespace" Type="String/Object">
                  <Summary><![CDATA[Namespace for the Remoting Provider (defaults to the browser global scope of <i>window</i>).
Explicitly specify the namespace Object, or specify a String to have a
{@link Ext#namespace namespace created} implicitly.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="url" Type="String">
                  <Summary><![CDATA[<b>Required<b>. The url to connect to the {@link Ext.Direct} server-side router.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events>
                <Event Name="beforecall">
                  <Summary><![CDATA[Fires immediately before the client-side sends off the RPC call. By returning false from an event handler you can prevent the call from executing.]]></Summary>
                  <Parameters>
                    <Param Name="provider" Type="Ext.direct.RemotingProvider" />
                    <Param Name="transaction" Type="Ext.Direct.Transaction" />
                  </Parameters>
                </Event>
                <Event Name="call">
                  <Summary><![CDATA[Fires immediately after the request to the server-side is sent. This does NOT fire after the response has come back from the call.]]></Summary>
                  <Parameters>
                    <Param Name="provider" Type="Ext.direct.RemotingProvider" />
                    <Param Name="transaction" Type="Ext.Direct.Transaction" />
                  </Parameters>
                </Event>
              </Events>
            </Class>
          </Classes>
        </Package>
        <Package Name="form" Path="form" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="Action" FullName="Ext.form.Action" Package="form" DefinedIn="widgets\form\Action.js" Subclasses="Ext.form.Action.Load,Ext.form.Action.Submit">
              <Summary><![CDATA[<p>The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.</p>
<p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
the Form needs to perform an action such as submit or load. The Configuration options
listed for this class are set through the Form's action methods: {@link Ext.form.BasicForm#submit submit},
{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}</p>
<p>The instance of Action which performed the action is passed to the success
and failure callbacks of the Form's action methods ({@link Ext.form.BasicForm#submit submit},
{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),
and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and
{@link Ext.form.BasicForm#actionfailed actionfailed} event handlers.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="failure" Type="Function">
                  <Summary><![CDATA[error ocurred in the Ajax communication.
The function is passed the following parameters:<ul class="mdetail-params">
<li><b>form</b> : Ext.form.BasicForm<div class="sub-desc">The form that requested the action</div></li>
<li><b>action</b> : Ext.form.Action<div class="sub-desc">The Action class. If an Ajax
error ocurred, the failure type will be in {@link #failureType}. The {@link #result}
property of this object may be examined to perform custom postprocessing.</div></li>
</ul>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="method" Type="String">
                  <Summary><![CDATA[{@link Ext.form.BasicForm}'s method, or if that is not specified, the underlying DOM form's method.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="params" Type="Mixed">
                  <Summary><![CDATA[{@link Ext.form.BasicForm#baseParams} and passed to the specified URL along with the Form's
input fields.</p>
<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="reset" Type="Boolean">
                  <Summary><![CDATA[{@link Ext.form.BasicForm.reset reset} on Action success. If specified, this happens
<b>before</b> the {@link #success} callback is called and before the Form's
{@link Ext.form.BasicForm.actioncomplete actioncomplete} event fires.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="scope" Type="Object">
                  <Summary><![CDATA[for the callback functions).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="success" Type="Function">
                  <Summary><![CDATA[The function is passed the following parameters:<ul class="mdetail-params">
<li><b>form</b> : Ext.form.BasicForm<div class="sub-desc">The form that requested the action</div></li>
<li><b>action</b> : Ext.form.Action<div class="sub-desc">The Action class. The {@link #result}
property of this object may be examined to perform custom postprocessing.</div></li>
</ul>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="timeout" Type="Number">
                  <Summary><![CDATA[failing with the {@link #failureType} as {@link #Action.CONNECT_FAILURE}. If not specified,
defaults to the configured <tt>{@link Ext.form.BasicForm#timeout timeout}</tt> of the
{@link Ext.form.BasicForm form}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="url" Type="String" />
                <ConfigOption Name="waitMsg" Type="String">
                  <Summary><![CDATA[during the time the action is being processed.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="waitTitle" Type="String">
                  <Summary><![CDATA[during the time the action is being processed.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="CLIENT_INVALID" Type="String" Static="true">
                  <Summary><![CDATA[Failure type returned when client side validation of the Form fails
thus aborting a submit action. Client side validation is performed unless
{@link #clientValidation} is explicitly set to <tt>false</tt>.]]></Summary>
                </Property>
                <Property Name="CONNECT_FAILURE" Type="String" Static="true">
                  <Summary><![CDATA[Failure type returned when a communication error happens when attempting
to send a request to the remote server. The {@link #response} may be examined to
provide further information.]]></Summary>
                </Property>
                <Property Name="failureType" Type="String">
                  <Summary><![CDATA[The type of failure detected will be one of these: {@link #CLIENT_INVALID},
{@link #SERVER_INVALID}, {@link #CONNECT_FAILURE}, or {@link #LOAD_FAILURE}.  Usage:
<pre><code>
var fp = new Ext.form.FormPanel({
...
buttons: [{
text: 'Save',
formBind: true,
handler: function () {
if (fp.getForm().isValid()) {
fp.getForm().submit({
url: 'form-submit.php',
waitMsg: 'Submitting your data...',
success: function (form, action) {
// server responded with success = true
var result = action.{@link #result};
},
failure: function (form, action) {
if (action.{@link #failureType} === Ext.form.Action.{@link #CONNECT_FAILURE}) {
Ext.Msg.alert('Error',
'Status:'+action.{@link #response}.status+': '+
action.{@link #response}.statusText);
}
if (action.failureType === Ext.form.Action.{@link #SERVER_INVALID}) {
// server responded with success = false
Ext.Msg.alert('Invalid', action.{@link #result}.errormsg);
}
}
});
}
}
},{
text: 'Reset',
handler: function () {
fp.getForm().reset();
}
}]
</code></pre>]]></Summary>
                </Property>
                <Property Name="LOAD_FAILURE" Type="String" Static="true">
                  <Summary><![CDATA[Failure type returned when the response's <tt style="font-weight:bold">success</tt>
property is set to <tt>false</tt>, or no field values are returned in the response's
<tt style="font-weight:bold">data</tt> property.]]></Summary>
                </Property>
                <Property Name="response" Type="Object">
                  <Summary><![CDATA[The XMLHttpRequest object used to perform the action.]]></Summary>
                </Property>
                <Property Name="result" Type="Object">
                  <Summary><![CDATA[The decoded response object containing a boolean <tt style="font-weight:bold">success</tt> property and
other, action-specific properties.]]></Summary>
                </Property>
                <Property Name="SERVER_INVALID" Type="String" Static="true">
                  <Summary><![CDATA[<p>Failure type returned when server side processing fails and the {@link #result}'s
<tt style="font-weight:bold">success</tt> property is set to <tt>false</tt>.</p>
<p>In the case of a form submission, field-specific error messages may be returned in the
{@link #result}'s <tt style="font-weight:bold">errors</tt> property.</p>]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="Action.DirectLoad" FullName="Ext.form.Action.DirectLoad" Package="form" DefinedIn="widgets\form\Action.js" Extends="Ext.form.Action.Load">
              <Summary><![CDATA[<p>Provides Ext.direct support for loading form data.</p>
<p>This example illustrates usage of Ext.Direct to <b>load</b> a form through Ext.Direct.</p>
<pre><code>
var myFormPanel = new Ext.form.FormPanel({
    // configs for FormPanel
    title: 'Basic Information',
    renderTo: document.body,
    width: 300, height: 160,
    padding: 10,

    // configs apply to child items
    defaults: {anchor: '100%'},
    defaultType: 'textfield',
    items: [{
        fieldLabel: 'Name',
        name: 'name'
    },{
        fieldLabel: 'Email',
        name: 'email'
    },{
        fieldLabel: 'Company',
        name: 'company'
    }],

    // configs for BasicForm
    api: {
        // The server-side method to call for load() requests
        load: Profile.getBasicInfo,
        // The server-side must mark the submit handler as a 'formHandler'
        submit: Profile.updateBasicInfo
    },
    // specify the order for the passed params
    paramOrder: ['uid', 'foo']
});

// load the form
myFormPanel.getForm().load({
    // pass 2 arguments to server side getBasicInfo method (len=2)
    params: {
        foo: 'bar',
        uid: 34
    }
});
</code></pre>
The data packet sent to the server will resemble something like:
<pre><code>
[
   {
        "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
        "data":[34,"bar"] // note the order of the params
    }
]
</code></pre>
The form will process a data packet returned by the server that is similar
to the following format:
<pre><code>
[
   {
        "action":"Profile","method":"getBasicInfo","type":"rpc","tid":2,
        "result":{
            "success":true,
            "data":{
                "name":"Fred Flintstone",
                "company":"Slate Rock and Gravel",
                "email":"fred.flintstone@slaterg.com"
            }
        }
    }
]
</code></pre>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Action.DirectSubmit" FullName="Ext.form.Action.DirectSubmit" Package="form" DefinedIn="widgets\form\Action.js" Extends="Ext.form.Action.Submit">
              <Summary><![CDATA[<p>Provides Ext.direct support for submitting form data.</p>
<p>This example illustrates usage of Ext.Direct to <b>submit</b> a form through Ext.Direct.</p>
<pre><code>
var myFormPanel = new Ext.form.FormPanel({
    // configs for FormPanel
    title: 'Basic Information',
    renderTo: document.body,
    width: 300, height: 160,
    padding: 10,
    buttons:[{
        text: 'Submit',
        handler: function () {
            myFormPanel.getForm().submit({
                params: {
                    foo: 'bar',
                    uid: 34
                }
            });
        }
    }],

    // configs apply to child items
    defaults: {anchor: '100%'},
    defaultType: 'textfield',
    items: [{
        fieldLabel: 'Name',
        name: 'name'
    },{
        fieldLabel: 'Email',
        name: 'email'
    },{
        fieldLabel: 'Company',
        name: 'company'
    }],

    // configs for BasicForm
    api: {
        // The server-side method to call for load() requests
        load: Profile.getBasicInfo,
        // The server-side must mark the submit handler as a 'formHandler'
        submit: Profile.updateBasicInfo
    },
    // specify the order for the passed params
    paramOrder: ['uid', 'foo']
});
</code></pre>
The data packet sent to the server will resemble something like:
<pre><code>
{
    "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
    "result":{
        "success":true,
        "id":{
            "extAction":"Profile","extMethod":"updateBasicInfo",
            "extType":"rpc","extTID":"6","extUpload":"false",
            "name":"Aaron Conran","email":"aaron@extjs.com","company":"Ext JS, LLC"
        }
    }
}
</code></pre>
The form will process a data packet returned by the server that is similar
to the following:
<pre><code>
// sample success packet (batched requests)
[
   {
        "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":3,
        "result":{
            "success":true
        }
    }
]

// sample failure packet (one request)
{
        "action":"Profile","method":"updateBasicInfo","type":"rpc","tid":"6",
        "result":{
            "errors":{
                "email":"already taken"
            },
            "success":false,
            "foo":"bar"
        }
}
</code></pre>
Also see the discussion in {@link Ext.form.Action.DirectLoad}.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Action.Load" FullName="Ext.form.Action.Load" Package="form" DefinedIn="widgets\form\Action.js" Extends="Ext.form.Action" Subclasses="Ext.form.Action.DirectLoad">
              <Summary><![CDATA[<p>A class which handles loading of data from a server into the Fields of an {@link Ext.form.BasicForm}.</p>
<p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
{@link Ext.form.BasicForm#load load}ing.</p>
<p><u><b>Response Packet Criteria</b></u></p>
<p>A response packet <b>must</b> contain:
<div class="mdetail-params"><ul>
<li><b><code>success</code></b> property : Boolean</li>
<li><b><code>data</code></b> property : Object</li>
<div class="sub-desc">The <code>data</code> property contains the values of Fields to load.
The individual value object for each Field is passed to the Field's
{@link Ext.form.Field#setValue setValue} method.</div></li>
</ul></div>
<p><u><b>JSON Packets</b></u></p>
<p>By default, response packets are assumed to be JSON, so for the following form load call:<pre><code>
var myFormPanel = new Ext.form.FormPanel({
    title: 'Client and routing info',
    items: [{
        fieldLabel: 'Client',
        name: 'clientName'
    }, {
        fieldLabel: 'Port of loading',
        name: 'portOfLoading'
    }, {
        fieldLabel: 'Port of discharge',
        name: 'portOfDischarge'
    }]
});
myFormPanel.{@link Ext.form.FormPanel#getForm getForm}().{@link Ext.form.BasicForm#load load}({
    url: '/getRoutingInfo.php',
    params: {
        consignmentRef: myConsignmentRef
    },
    failure: function (form, action) {
        Ext.Msg.alert("Load failed", action.result.errorMessage);
    }
});
</code></pre>
a <b>success response</b> packet may look like this:</p><pre><code>
{
    success: true,
    data: {
        clientName: "Fred. Olsen Lines",
        portOfLoading: "FXT",
        portOfDischarge: "OSL"
    }
}</code></pre>
while a <b>failure response</b> packet may look like this:</p><pre><code>
{
    success: false,
    errorMessage: "Consignment reference not found"
}</code></pre>
<p>Other data may be placed into the response for processing the {@link Ext.form.BasicForm Form}'s
callback or event handler methods. The object decoded from this JSON is available in the
{@link Ext.form.Action#result result} property.</p>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Action.Submit" FullName="Ext.form.Action.Submit" Package="form" DefinedIn="widgets\form\Action.js" Extends="Ext.form.Action" Subclasses="Ext.form.Action.DirectSubmit">
              <Summary><![CDATA[<p>A class which handles submission of data from {@link Ext.form.BasicForm Form}s
and processes the returned response.</p>
<p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when
{@link Ext.form.BasicForm#submit submit}ting.</p>
<p><u><b>Response Packet Criteria</b></u></p>
<p>A response packet may contain:
<div class="mdetail-params"><ul>
<li><b><code>success</code></b> property : Boolean
<div class="sub-desc">The <code>success</code> property is required.</div></li>
<li><b><code>errors</code></b> property : Object
<div class="sub-desc"><div class="sub-desc">The <code>errors</code> property,
which is optional, contains error messages for invalid fields.</div></li>
</ul></div>
<p><u><b>JSON Packets</b></u></p>
<p>By default, response packets are assumed to be JSON, so a typical response
packet may look like this:</p><pre><code>
{
    success: false,
    errors: {
        clientCode: "Client not found",
        portOfLoading: "This field must not be null"
    }
}</code></pre>
<p>Other data may be placed into the response for processing by the {@link Ext.form.BasicForm}'s callback
or event handler methods. The object decoded from this JSON is available in the
{@link Ext.form.Action#result result} property.</p>
<p>Alternatively, if an {@link #errorReader} is specified as an {@link Ext.data.XmlReader XmlReader}:</p><pre><code>
    errorReader: new Ext.data.XmlReader({
            record : 'field',
            success: '@success'
        }, [
            'id', 'msg'
        ]
    )
</code></pre>
<p>then the results may be sent back in XML format:</p><pre><code>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;message success="false"&gt;
&lt;errors&gt;
    &lt;field&gt;
        &lt;id&gt;clientCode&lt;/id&gt;
        &lt;msg&gt;&lt;![CDATA[Code not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;
    &lt;/field&gt;
    &lt;field&gt;
        &lt;id&gt;portOfLoading&lt;/id&gt;
        &lt;msg&gt;&lt;![CDATA[Port not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;
    &lt;/field&gt;
&lt;/errors&gt;
&lt;/message&gt;
</code></pre>
<p>Other elements may be placed into the response XML for processing by the {@link Ext.form.BasicForm}'s callback
or event handler methods. The XML document is available in the {@link #errorReader}'s {@link Ext.data.XmlReader#xmlData xmlData} property.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="clientValidation" Type="boolean">
                  <Summary><![CDATA[in a final call to {@link Ext.form.BasicForm#isValid isValid} prior to submission.
Pass <tt>false</tt> in the Form's submit options to prevent this. If not defined, pre-submission field validation
is performed.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="errorReader" Type="Ext.data.DataReader">
                  <Summary><![CDATA[no need for an errorReader.</b></p>
<p>A Reader which reads a single record from the returned data. The DataReader's
<b>success</b> property specifies how submission success is determined. The Record's
data provides the error messages to apply to any invalid form Fields.</p>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="BasicForm" FullName="Ext.form.BasicForm" Package="form" DefinedIn="widgets\form\BasicForm.js" Extends="Ext.util.Observable">
              <Summary><![CDATA[<p>Encapsulates the DOM &lt;form> element at the heart of the {@link Ext.form.FormPanel FormPanel} class, and provides
input field management, validation, submission, and form loading services.</p>
<p>By default, Ext Forms are submitted through Ajax, using an instance of {@link Ext.form.Action.Submit}.
To enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option.</p>
<p><b><u>File Uploads</u></b></p>
<p>{@link #fileUpload File uploads} are not performed using Ajax submission, that
is they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard
manner with the DOM <tt>&lt;form></tt> element temporarily modified to have its
<a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
but removed after the return data has been gathered.</p>
<p>The server response is parsed by the browser to create the document for the IFRAME. If the
server is using JSON to send the return object, then the
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
<p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
"&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
<p>The response text is retrieved from the document, and a fake XMLHttpRequest object
is created containing a <tt>responseText</tt> property in order to conform to the
requirements of event handlers and callbacks.</p>
<p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="el" Type="Mixed">
                    <Summary><![CDATA[The form element or its id]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="api" Type="Object">
                  <Summary><![CDATA[with {@link Ext.form.Action.DirectLoad} and {@link Ext.form.Action.DirectSubmit}.
Methods which have been imported by Ext.Direct can be specified here to load and submit
forms.
Such as the following:<pre><code>
api: {
    load: App.ss.MyProfile.load,
    submit: App.ss.MyProfile.submit
}
</code></pre>
<p>Load actions can use <code>{@link #paramOrder}</code> or <code>{@link #paramsAsHash}</code>
to customize how the load method is invoked.
Submit actions will always use a standard form submit. The formHandler configuration must
be set on the associated server-side method which has been imported by Ext.Direct</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="baseParams" Type="Object">
                  <Summary><![CDATA[<p>Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.</p>
<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="errorReader" Type="DataReader">
                  <Summary><![CDATA[<p>An Ext.data.DataReader (e.g. {@link Ext.data.XmlReader}) to be used to
read field error messages returned from 'submit' actions. This is optional
as there is built-in support for processing JSON.</p>
<p>The Records which provide messages for the invalid Fields must use the
Field name (or id) as the Record ID, and must contain a field called 'msg'
which contains the error message.</p>
<p>The errorReader does not have to be a full-blown implementation of a
DataReader. It simply needs to implement a <tt>read(xhr)</tt> function
which returns an Array of Records in an object with the following
structure:</p><pre><code>
{
    records: recordArray
}
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="fileUpload" Type="Boolean">
                  <Summary><![CDATA[Set to true if this form is a file upload.
<p>File uploads are not performed using normal 'Ajax' techniques, that is they are <b>not</b>
performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
DOM <tt>&lt;form></tt> element temporarily modified to have its
<a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
but removed after the return data has been gathered.</p>
<p>The server response is parsed by the browser to create the document for the IFRAME. If the
server is using JSON to send the return object, then the
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17">Content-Type</a> header
must be set to "text/html" in order to tell the browser to insert the text unchanged into the document body.</p>
<p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode
"&lt;" as "&amp;lt;", "&amp;" as "&amp;amp;" etc.</p>
<p>The response text is retrieved from the document, and a fake XMLHttpRequest object
is created containing a <tt>responseText</tt> property in order to conform to the
requirements of event handlers and callbacks.</p>
<p>Be aware that file upload packets are sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form</a>
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="method" Type="String">
                  <Summary><![CDATA[The request method to use (GET or POST) for form actions if one isn't supplied in the action options.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="paramOrder" Type="Array/String">
                  <Summary><![CDATA[Defaults to <tt>undefined</tt>. Only used for the <code>{@link #api}</code>
<code>load</code> configuration.</p>
<br><p>Specify the params in the order in which they must be executed on the
server-side as either (1) an Array of String values, or (2) a String of params
delimited by either whitespace, comma, or pipe. For example,
any of the following would be acceptable:</p><pre><code>
paramOrder: ['param1','param2','param3']
paramOrder: 'param1 param2 param3'
paramOrder: 'param1,param2,param3'
paramOrder: 'param1|param2|param'
     </code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="paramsAsHash" Type="Boolean">
                  <Summary><![CDATA[<code>load</code> configuration. Send parameters as a collection of named
arguments (defaults to <tt>false</tt>). Providing a
<tt>{@link #paramOrder}</tt> nullifies this configuration.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="reader" Type="DataReader">
                  <Summary><![CDATA[An Ext.data.DataReader (e.g. {@link Ext.data.XmlReader}) to be used to read
data when executing 'load' actions. This is optional as there is built-in
support for processing JSON.  For additional information on using an XMLReader
see the example provided in examples/form/xml-form.html.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="standardSubmit" Type="Boolean">
                  <Summary><![CDATA[<p>If set to <tt>true</tt>, standard HTML form submits are used instead
of XHR (Ajax) style form submissions. Defaults to <tt>false</tt>.</p>
<br><p><b>Note:</b> When using <code>standardSubmit</code>, the
<code>options</code> to <code>{@link #submit}</code> are ignored because
Ext's Ajax infrastracture is bypassed. To pass extra parameters (e.g.
<code>baseParams</code> and <code>params</code>), utilize hidden fields
to submit extra data, for example:</p>
<pre><code>
new Ext.FormPanel({
    standardSubmit: true,
    baseParams: {
        foo: 'bar'
    },
   {@link url}: 'myProcess.php',
    items: [{
        xtype: 'textfield',
        name: 'userName'
    }],
    buttons: [{
        text: 'Save',
        handler: function () {
            var fp = this.ownerCt.ownerCt,
                form = fp.getForm();
            if (form.isValid()) {
                // check if there are baseParams and if
                // hiddent items have been added already
                if (fp.baseParams && !fp.paramsAdded) {
                    // add hidden items for all baseParams
                    for (i in fp.baseParams) {
                        fp.add({
                            xtype: 'hidden',
                            name: i,
                            value: fp.baseParams[i]
                        });
                    }
                    fp.doLayout();
                    // set a custom flag to prevent re-adding
                    fp.paramsAdded = true;
                }
                form.{@link #submit}();
            }
        }
    }]
});
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="timeout" Type="Number" />
                <ConfigOption Name="trackResetOnLoad" Type="Boolean">
                  <Summary><![CDATA[or {@link #setValues}() data instead of when the form was first created.  Defaults to <tt>false</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="url" Type="String">
                  <Summary><![CDATA[The URL to use for form actions if one isn't supplied in the
<code>{@link #doAction doAction} options</code>.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="items">
                  <Summary><![CDATA[A {@link Ext.util.MixedCollection MixedCollection) containing all the Ext.form.Fields in this form.]]></Summary>
                </Property>
                <Property Name="waitMsgTarget">
                  <Summary><![CDATA[By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific
element by passing it or its id or mask the form itself by passing in true.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="add">
                  <Summary><![CDATA[Add Ext.form Components to this form's Collection. This does not result in rendering of
the passed Component, it just enables the form to validate Fields, and distribute values to
Fields.
<p><b>You will not usually call this function. In order to be rendered, a Field must be added
to a {@link Ext.Container Container}, usually an {@link Ext.form.FormPanel FormPanel}.
The FormPanel to which the field is added takes care of adding the Field to the BasicForm's
collection.</b></p>]]></Summary>
                  <Parameters>
                    <Param Name="field1" Type="Field" />
                    <Param Name="field2" Type="Field" Optional="true" />
                    <Param Name="etc" Type="Field" Optional="true" />
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="applyIfToFields">
                  <Summary><![CDATA[Calls {@link Ext#applyIf} for all field in this form with the passed object.]]></Summary>
                  <Parameters>
                    <Param Name="values" Type="Object" />
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="applyToFields">
                  <Summary><![CDATA[Calls {@link Ext#apply} for all fields in this form with the passed object.]]></Summary>
                  <Parameters>
                    <Param Name="values" Type="Object" />
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="clearInvalid">
                  <Summary><![CDATA[Clears all invalid messages in this form.]]></Summary>
                  <Parameters />
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="doAction">
                  <Summary><![CDATA[Performs a predefined action ({@link Ext.form.Action.Submit} or
{@link Ext.form.Action.Load}) or a custom extension of {@link Ext.form.Action}
to perform application-specific processing.]]></Summary>
                  <Parameters>
                    <Param Name="actionName" Type="String/Object">
                      <Summary><![CDATA[The name of the predefined action type,
or instance of {@link Ext.form.Action} to perform.]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object" Optional="true">
                      <Summary><![CDATA[The options to pass to the {@link Ext.form.Action}.
All of the config options listed below are supported by both the
{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}
actions unless otherwise noted (custom actions could also accept
other config options):<ul>

<li><b>url</b> : String<div class="sub-desc">The url for the action (defaults
to the form's {@link #url}.)</div></li>

<li><b>method</b> : String<div class="sub-desc">The form method to use (defaults
to the form's method, or POST if not defined)</div></li>

<li><b>params</b> : String/Object<div class="sub-desc"><p>The params to pass
(defaults to the form's baseParams, or none if not defined)</p>
<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p></div></li>

<li><b>headers</b> : Object<div class="sub-desc">Request headers to set for the action
(defaults to the form's default headers)</div></li>

<li><b>success</b> : Function<div class="sub-desc">The callback that will
be invoked after a successful response (see top of
{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}
for a description of what constitutes a successful response).
The function is passed the following parameters:<ul>
<li><tt>form</tt> : Ext.form.BasicForm<div class="sub-desc">The form that requested the action</div></li>
<li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.
<div class="sub-desc">The action object contains these properties of interest:<ul>
<li><tt>{@link Ext.form.Action#response response}</tt></li>
<li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>
<li><tt>{@link Ext.form.Action#type type}</tt></li>
</ul></div></li></ul></div></li>

<li><b>failure</b> : Function<div class="sub-desc">The callback that will be invoked after a
failed transaction attempt. The function is passed the following parameters:<ul>
<li><tt>form</tt> : The {@link Ext.form.BasicForm} that requested the action.</li>
<li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.
<div class="sub-desc">The action object contains these properties of interest:<ul>
<li><tt>{@link Ext.form.Action#failureType failureType}</tt></li>
<li><tt>{@link Ext.form.Action#response response}</tt></li>
<li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>
<li><tt>{@link Ext.form.Action#type type}</tt></li>
</ul></div></li></ul></div></li>

<li><b>scope</b> : Object<div class="sub-desc">The scope in which to call the
callback functions (The <tt>this</tt> reference for the callback functions).</div></li>

<li><b>clientValidation</b> : Boolean<div class="sub-desc">Submit Action only.
Determines whether a Form's fields are validated in a final call to
{@link Ext.form.BasicForm#isValid isValid} prior to submission. Set to <tt>false</tt>
to prevent this. If undefined, pre-submission field validation is performed.</div></li></ul>]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="findField">
                  <Summary><![CDATA[Find a {@link Ext.form.Field} in this form.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The value to search for (specify either a {@link Ext.Component#id id},
{@link Ext.grid.Column#dataIndex dataIndex}, {@link Ext.form.Field#getName name or hiddenName}).]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getEl">
                  <Summary><![CDATA[Get the HTML form Element]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getValues">
                  <Summary><![CDATA[<p>Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.
If multiple fields exist with the same name they are returned as an array.</p>
<p><b>Note:</b> The values are collected from all enabled HTML input elements within the form, <u>not</u> from
the Ext Field objects. This means that all returned values are Strings (or Arrays of Strings) and that the
value can potentially be the emptyText of a field.</p>]]></Summary>
                  <Parameters>
                    <Param Name="asString" Type="Boolean" Optional="true">
                      <Summary><![CDATA[Pass true to return the values as a string. (defaults to false, returning an Object)]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String/Object" />
                </Method>
                <Method Name="isDirty">
                  <Summary><![CDATA[<p>Returns true if any fields in this form have changed from their original values.</p>
<p>Note that if this BasicForm was configured with {@link #trackResetOnLoad} then the
Fields' <i>original values</i> are updated when the values are loaded by {@link #setValues}
or {@link #loadRecord}.</p>]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="isValid">
                  <Summary><![CDATA[Returns true if client-side validation on the form is successful.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="load">
                  <Summary><![CDATA[Shortcut to {@link #doAction do} a {@link Ext.form.Action.Load load action}.]]></Summary>
                  <Parameters>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The options to pass to the action (see {@link #doAction} for details)]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="loadRecord">
                  <Summary><![CDATA[Loads an {@link Ext.data.Record} into this form by calling {@link #setValues} with the
{@link Ext.data.Record#data record data}.
See also {@link #trackResetOnLoad}.]]></Summary>
                  <Parameters>
                    <Param Name="record" Type="Record">
                      <Summary><![CDATA[The record to load]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="markInvalid">
                  <Summary><![CDATA[Mark fields in this form invalid in bulk.]]></Summary>
                  <Parameters>
                    <Param Name="errors" Type="Array/Object">
                      <Summary><![CDATA[Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="remove">
                  <Summary><![CDATA[Removes a field from the items collection (does NOT remove its markup).]]></Summary>
                  <Parameters>
                    <Param Name="field" Type="Field" />
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="render">
                  <Summary><![CDATA[Iterates through the {@link Ext.form.Field Field}s which have been {@link #add add}ed to this BasicForm,
checks them for an id attribute, and calls {@link Ext.form.Field#applyToMarkup} on the existing dom element with that id.]]></Summary>
                  <Parameters />
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="reset">
                  <Summary><![CDATA[Resets this form.]]></Summary>
                  <Parameters />
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="setValues">
                  <Summary><![CDATA[Set values for fields in this form in bulk.]]></Summary>
                  <Parameters>
                    <Param Name="values" Type="Array/Object">
                      <Summary><![CDATA[Either an array in the form:<pre><code>
[{id:'clientName', value:'Fred. Olsen Lines'},
{id:'portOfLoading', value:'FXT'},
{id:'portOfDischarge', value:'OSL'} ]</code></pre>
or an object hash of the form:<pre><code>
{
clientName: 'Fred. Olsen Lines',
portOfLoading: 'FXT',
portOfDischarge: 'OSL'
}</code></pre>]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="submit">
                  <Summary><![CDATA[Shortcut to {@link #doAction do} a {@link Ext.form.Action.Submit submit action}.]]></Summary>
                  <Parameters>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The options to pass to the action (see {@link #doAction} for details).<br>
<p><b>Note:</b> this is ignored when using the {@link #standardSubmit} option.</p>
<p>The following code:</p><pre><code>
myFormPanel.getForm().submit({
clientValidation: true,
url: 'updateConsignment.php',
params: {
newStatus: 'delivered'
},
success: function (form, action) {
Ext.Msg.alert('Success', action.result.msg);
},
failure: function (form, action) {
switch (action.failureType) {
case Ext.form.Action.CLIENT_INVALID:
Ext.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');
break;
case Ext.form.Action.CONNECT_FAILURE:
Ext.Msg.alert('Failure', 'Ajax communication failed');
break;
case Ext.form.Action.SERVER_INVALID:
Ext.Msg.alert('Failure', action.result.msg);
}
}
});
</code></pre>
would process the following server response for a successful submission:<pre><code>
{
"success":true, // note this is Boolean, not string
"msg":"Consignment updated"
}
</code></pre>
and the following server response for a failed submission:<pre><code>
{
"success":false, // note this is Boolean, not string
"msg":"You do not have permission to perform this operation"
}
</code></pre>]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="updateRecord">
                  <Summary><![CDATA[Persists the values in this form into the passed {@link Ext.data.Record} object in a beginEdit/endEdit block.]]></Summary>
                  <Parameters>
                    <Param Name="record" Type="Record">
                      <Summary><![CDATA[The record to edit]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="BasicForm">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="actioncomplete">
                  <Summary><![CDATA[Fires when an action is completed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Form">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="action" Type="Action">
                      <Summary><![CDATA[The {@link Ext.form.Action} that completed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="actionfailed">
                  <Summary><![CDATA[Fires when an action fails.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Form">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="action" Type="Action">
                      <Summary><![CDATA[The {@link Ext.form.Action} that failed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeaction">
                  <Summary><![CDATA[Fires before any action is performed. Return false to cancel the action.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Form">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="action" Type="Action">
                      <Summary><![CDATA[The {@link Ext.form.Action} to be performed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Checkbox" FullName="Ext.form.Checkbox" Package="form" DefinedIn="widgets\form\Checkbox.js" Xtype="checkbox" Extends="Ext.form.Field" Subclasses="Ext.form.Radio">
              <Summary><![CDATA[Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new Checkbox.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoCreate" Type="String/Object">
                  <Summary><![CDATA[{tag: 'input', type: 'checkbox', autocomplete: 'off'})]]></Summary>
                </ConfigOption>
                <ConfigOption Name="boxLabel" Type="String" />
                <ConfigOption Name="checked" Type="Boolean" />
                <ConfigOption Name="fieldClass" Type="String" />
                <ConfigOption Name="focusClass" Type="String" />
                <ConfigOption Name="handler" Type="Function">
                  <Summary><![CDATA[handling the check event). The handler is passed the following parameters:
<div class="mdetail-params"><ul>
<li><b>checkbox</b> : Ext.form.Checkbox<div class="sub-desc">The Checkbox being toggled.</div></li>
<li><b>checked</b> : Boolean<div class="sub-desc">The new checked state of the checkbox.</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="inputValue" Type="String" />
                <ConfigOption Name="scope" Type="Object">
                  <Summary><![CDATA[(defaults to this Checkbox).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="clearInvalid">
                  <Summary><![CDATA[Overridden and disabled. The editor element does not support standard valid/invalid marking.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getValue">
                  <Summary><![CDATA[Returns the checked state of the checkbox.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if checked, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="markInvalid">
                  <Summary><![CDATA[Overridden and disabled. The editor element does not support standard valid/invalid marking.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="setValue">
                  <Summary><![CDATA[Sets the checked state of the checkbox, fires the 'check' event, and calls a
<code>{@link #handler}</code> (if configured).]]></Summary>
                  <Parameters>
                    <Param Name="checked" Type="Boolean/String">
                      <Summary><![CDATA[The following values will check the checkbox:
<code>true, 'true', '1', or 'on'</code>. Any other value will uncheck the checkbox.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.form.Field">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="check">
                  <Summary><![CDATA[Fires when the checkbox is checked or unchecked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Checkbox">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Boolean">
                      <Summary><![CDATA[The new checked value]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="CheckboxGroup" FullName="Ext.form.CheckboxGroup" Package="form" DefinedIn="widgets\form\CheckboxGroup.js" Xtype="checkboxgroup" Extends="Ext.form.Field" Subclasses="Ext.form.RadioGroup">
              <Summary><![CDATA[<p>A grouping container for {@link Ext.form.Checkbox} controls.</p>
<p>Sample usage:</p>
<pre><code>
var myCheckboxGroup = new Ext.form.CheckboxGroup({
    id:'myGroup',
    xtype: 'checkboxgroup',
    fieldLabel: 'Single Column',
    itemCls: 'x-check-group-alt',
    // Put all controls in a single column with width 100%
    columns: 1,
    items: [
       {boxLabel: 'Item 1', name: 'cb-col-1'},
       {boxLabel: 'Item 2', name: 'cb-col-2', checked: true},
       {boxLabel: 'Item 3', name: 'cb-col-3'}
    ]
});
</code></pre>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new CheckboxGroup.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="items" Type="Array">
                  <Summary><![CDATA[to arrange in the group.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="columns" Type="String/Number/Array">
                  <Summary><![CDATA[checkbox/radio controls using automatic layout.  This config can take several types of values:
<ul><li><b>'auto'</b> : <p class="sub-desc">The controls will be rendered one per column on one row and the width
of each column will be evenly distributed based on the width of the overall field container. This is the default.</p></li>
<li><b>Number</b> : <p class="sub-desc">If you specific a number (e.g., 3) that number of columns will be
created and the contained controls will be automatically distributed based on the value of {@link #vertical}.</p></li>
<li><b>Array</b> : Object<p class="sub-desc">You can also specify an array of column widths, mixing integer
(fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will
be rendered first, then any float values will be calculated as a percentage of the remaining space. Float
values do not have to add up to 1 (100%) although if you want the controls to take up the entire field
container you should do so.</p></li></ul>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="vertical" Type="Boolean">
                  <Summary><![CDATA[top to bottom before starting on the next column.  The number of controls in each column will be automatically
calculated to keep columns as even as possible.  The default value is false, so that controls will be added
to columns one at a time, completely filling each row left to right before starting on the next row.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="allowBlank" Type="Boolean">
                  <Summary><![CDATA[If no items are selected at validation time, {@link @blankText} will be used as the error text.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="blankText" Type="String">
                  <Summary><![CDATA[select at least one item in this group")]]></Summary>
                </ConfigOption>
                <ConfigOption Name="name" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="setValue">
                  <Summary><![CDATA[{@link Ext.form.Checkbox#setValue Set the value(s)} of an item or items
in the group. Examples illustrating how this method may be called:
<pre><code>
// call with name and value
myCheckboxGroup.setValue('cb-col-1', true);
// call with an array of boolean values 
myCheckboxGroup.setValue([true, false, false]);
// call with an object literal specifying item:value pairs
myCheckboxGroup.setValue({
    'cb-col-2': false,
    'cb-col-3': true
});
// use comma separated string to set items with name to true (checked)
myCheckboxGroup.setValue('cb-col-1,cb-col-3');
</code></pre>
See {@link Ext.form.Checkbox#setValue} for additional information.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="Mixed">
                      <Summary><![CDATA[The checkbox to check, or as described by example shown.]]></Summary>
                    </Param>
                    <Param Name="value" Type="Boolean" Optional="true">
                      <Summary><![CDATA[The value to set the item.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.form.CheckboxGroup">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="getValue">
                  <Summary><![CDATA[Gets an array of the selected {@link Ext.form.Checkbox} in the group.]]></Summary>
                  <Parameters />
                  <Return Type="Array">
                    <Summary><![CDATA[An array of the selected checkboxes.]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="change">
                  <Summary><![CDATA[Fires when the state of a child checkbox changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.CheckboxGroup">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Array">
                      <Summary><![CDATA[An array containing the checked boxes.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="ComboBox" FullName="Ext.form.ComboBox" Package="form" DefinedIn="widgets\form\Combo.js" Xtype="combo" Extends="Ext.form.TriggerField" Subclasses="Ext.form.TimeField">
              <Summary><![CDATA[<p>A combobox control with support for autocomplete, remote-loading, paging and many other features.</p>
<p>A ComboBox works in a similar manner to a traditional HTML &lt;select> field. The difference is
that to submit the {@link #valueField}, you must specify a {@link #hiddenName} to create a hidden input
field to hold the value of the valueField. The <i>{@link #displayField}</i> is shown in the text field
which is named according to the {@link #name}.</p>
<p><b><u>Events</u></b></p>
<p>To do something when something in ComboBox is selected, configure the select event:<pre><code>
var cb = new Ext.form.ComboBox({
    // all of your config options
    listeners:{
         scope: yourScope,
         'select': yourFunction
    }
});

// Alternatively, you can assign events after the object is created:
var cb = new Ext.form.ComboBox(yourOptions);
cb.on('select', yourFunction, yourScope);
</code></pre></p>

<p><b><u>ComboBox in Grid</u></b></p>
<p>If using a ComboBox in an {@link Ext.grid.EditorGridPanel Editor Grid} a {@link Ext.grid.Column#renderer renderer}
will be needed to show the displayField when the editor is not active.  Set up the renderer manually, or implement
a reusable render, for example:<pre><code>
// create reusable renderer
Ext.util.Format.comboRenderer = function (combo) {
    return function (value) {
        var record = combo.findRecord(combo.{@link #valueField}, value);
        return record ? record.get(combo.{@link #displayField}) : combo.{@link #valueNotFoundText};
    }
}

// create the combo instance
var combo = new Ext.form.ComboBox({
   {@link #typeAhead}: true,
   {@link #triggerAction}: 'all',
   {@link #lazyRender}:true,
   {@link #mode}: 'local',
   {@link #store}: new Ext.data.ArrayStore({
        id: 0,
        fields: [
            'myId',
            'displayText'
        ],
        data: [[1, 'item1'], [2, 'item2']]
    }),
   {@link #valueField}: 'myId',
   {@link #displayField}: 'displayText'
});

// snippet of column model used within grid
var cm = new Ext.grid.ColumnModel([{
       ...
    },{
       header: "Some Header",
       dataIndex: 'whatever',
       width: 130,
       editor: combo, // specify reference to combo instance
       renderer: Ext.util.Format.comboRenderer(combo) // pass combo instance to reusable renderer
    },
    ...
]);
</code></pre></p>

<p><b><u>Filtering</u></b></p>
<p>A ComboBox {@link #doQuery uses filtering itself}, for information about filtering the ComboBox
store manually see <tt>{@link #lastQuery}</tt>.</p>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new ComboBox.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="transform" Type="Mixed">
                  <Summary><![CDATA[Note that if you specify this and the combo is going to be in an {@link Ext.form.BasicForm} or
{@link Ext.form.FormPanel}, you must also set <tt>{@link #lazyRender} = true</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="lazyRender" Type="Boolean">
                  <Summary><![CDATA[(should always be used when rendering into an {@link Ext.Editor} (e.g. {@link Ext.grid.EditorGridPanel Grids}),
defaults to <tt>false</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoCreate" Type="String/Object">
                  <Summary><![CDATA[element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
<pre><code>{tag: "input", type: "text", size: "24", autocomplete: "off"}</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="store" Type="Ext.data.Store/Array">
                  <Summary><![CDATA[Acceptable values for this property are:
<div class="mdetail-params"><ul>
<li><b>any {@link Ext.data.Store Store} subclass</b></li>
<li><b>an Array</b> : Arrays will be converted to a {@link Ext.data.ArrayStore} internally,
automatically generating {@link Ext.data.Field#name field names} to work with all data components.
<div class="mdetail-params"><ul>
<li><b>1-dimensional array</b> : (e.g., <tt>['Foo','Bar']</tt>)<div class="sub-desc">
A 1-dimensional array will automatically be expanded (each array item will be used for both the combo
{@link #valueField} and {@link #displayField})</div></li>
<li><b>2-dimensional array</b> : (e.g., <tt>[['f','Foo'],['b','Bar']]</tt>)<div class="sub-desc">
For a multi-dimensional array, the value in index 0 of each item will be assumed to be the combo
{@link #valueField}, while the value at index 1 is assumed to be the combo {@link #displayField}.
</div></li></ul></div></li></ul></div>
<p>See also <tt>{@link #mode}</tt>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="title" Type="String">
                  <Summary><![CDATA[the dropdown list (defaults to undefined, with no header element)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="listWidth" Type="Number">
                  <Summary><![CDATA[list (defaults to the width of the ComboBox field).  See also <tt>{@link #minListWidth}]]></Summary>
                </ConfigOption>
                <ConfigOption Name="displayField" Type="String">
                  <Summary><![CDATA[ComboBox (defaults to undefined if <tt>{@link #mode} = 'remote'</tt> or <tt>'field1'</tt> if
{@link #transform transforming a select} or if the {@link #store field name is autogenerated based on
the store configuration}).
<p>See also <tt>{@link #valueField}</tt>.</p>
<p><b>Note</b>: if using a ComboBox in an {@link Ext.grid.EditorGridPanel Editor Grid} a
{@link Ext.grid.Column#renderer renderer} will be needed to show the displayField when the editor is not
active.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="valueField" Type="String">
                  <Summary><![CDATA[ComboBox (defaults to undefined if <tt>{@link #mode} = 'remote'</tt> or <tt>'field2'</tt> if
{@link #transform transforming a select} or if the {@link #store field name is autogenerated based on
the store configuration}).
<p><b>Note</b>: use of a <tt>valueField</tt> requires the user to make a selection in order for a value to be
mapped.  See also <tt>{@link #hiddenName}</tt>, <tt>{@link #hiddenValue}</tt>, and <tt>{@link #displayField}</tt>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hiddenName" Type="String">
                  <Summary><![CDATA[field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically
post during a form submission.  See also {@link #valueField}.
<p><b>Note</b>: the hidden field's id will also default to this name if {@link #hiddenId} is not specified.
The ComboBox {@link Ext.Component#id id} and the <tt>{@link #hiddenId}</tt> <b>should be different</b>, since
no two DOM nodes should share the same id.  So, if the ComboBox <tt>{@link Ext.form.Field#name name}</tt> and
<tt>hiddenName</tt> are the same, you should specify a unique <tt>{@link #hiddenId}</tt>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hiddenId" Type="String">
                  <Summary><![CDATA[to give the hidden field a unique id (defaults to the <tt>{@link #hiddenName}</tt>).  The <tt>hiddenId</tt>
and combo {@link Ext.Component#id id} should be different, since no two DOM
nodes should share the same id.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hiddenValue" Type="String">
                  <Summary><![CDATA[specified to contain the selected {@link #valueField}, from the Store. Defaults to the configured
<tt>{@link Ext.form.Field#value value}</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="listClass" Type="String">
                  <Summary><![CDATA[applied the dropdown list element (defaults to '').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="selectedClass" Type="String">
                  <Summary><![CDATA[(defaults to <tt>'x-combo-selected'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="listEmptyText" Type="String">
                  <Summary><![CDATA[(defaults to '')]]></Summary>
                </ConfigOption>
                <ConfigOption Name="triggerClass" Type="String">
                  <Summary><![CDATA[get the class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
(defaults to <tt>'x-form-arrow-trigger'</tt> which displays a downward arrow icon).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="shadow" Type="Boolean/String">
                  <Summary><![CDATA[4-way shadow, and <tt>"drop"</tt> for bottom-right]]></Summary>
                </ConfigOption>
                <ConfigOption Name="listAlign" Type="String">
                  <Summary><![CDATA[on supported anchor positions (defaults to <tt>'tl-bl?'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxHeight" Type="Number">
                  <Summary><![CDATA[(defaults to <tt>300</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minHeight" Type="Number">
                  <Summary><![CDATA[distance to the viewport edges (defaults to <tt>90</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="triggerAction" Type="String">
                  <Summary><![CDATA[<div class="mdetail-params"><ul>
<li><b><tt>'query'</tt></b> : <b>Default</b>
<p class="sub-desc">{@link #doQuery run the query} using the {@link Ext.form.Field#getRawValue raw value}.</p></li>
<li><b><tt>'all'</tt></b> :
<p class="sub-desc">{@link #doQuery run the query} specified by the <tt>{@link #allQuery}</tt> config option</p></li>
</ul></div>
<p>See also <code>{@link #queryParam}</code>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minChars" Type="Number">
                  <Summary><![CDATA[{@link #typeAhead} activate (defaults to <tt>4</tt> if <tt>{@link #mode} = 'remote'</tt> or <tt>0</tt> if
<tt>{@link #mode} = 'local'</tt>, does not apply if
<tt>{@link Ext.form.TriggerField#editable editable} = false</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="typeAhead" Type="Boolean">
                  <Summary><![CDATA[typed after a configurable delay ({@link #typeAheadDelay}) if it matches a known value (defaults
to <tt>false</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="queryDelay" Type="Number">
                  <Summary><![CDATA[sending the query to filter the dropdown list (defaults to <tt>500</tt> if <tt>{@link #mode} = 'remote'</tt>
or <tt>10</tt> if <tt>{@link #mode} = 'local'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="pageSize" Type="Number">
                  <Summary><![CDATA[footer of the dropdown list and the {@link #doQuery filter queries} will execute with page start and
{@link Ext.PagingToolbar#pageSize limit} parameters. Only applies when <tt>{@link #mode} = 'remote'</tt>
(defaults to <tt>0</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="selectOnFocus" Type="Boolean">
                  <Summary><![CDATA[Only applies when <tt>{@link Ext.form.TriggerField#editable editable} = true</tt> (defaults to
<tt>false</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="queryParam" Type="String">
                  <Summary><![CDATA[as it will be passed on the querystring (defaults to <tt>'query'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="loadingText" Type="String">
                  <Summary><![CDATA[when <tt>{@link #mode} = 'remote'</tt> (defaults to <tt>'Loading...'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="resizable" Type="Boolean">
                  <Summary><![CDATA[(creates an {@link Ext.Resizable} with 'se' {@link Ext.Resizable#pinned pinned} handles).
Defaults to <tt>false</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="handleHeight" Type="Number">
                  <Summary><![CDATA[<tt>{@link #resizable} = true</tt> (defaults to <tt>8</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="allQuery" Type="String">
                  <Summary><![CDATA[with no filtering (defaults to '')]]></Summary>
                </ConfigOption>
                <ConfigOption Name="mode" Type="String">
                  <Summary><![CDATA[<div class="mdetail-params"><ul>
<li><b><tt>'remote'</tt></b> : <b>Default</b>
<p class="sub-desc">Automatically loads the <tt>{@link #store}</tt> the <b>first</b> time the trigger
is clicked. If you do not want the store to be automatically loaded the first time the trigger is
clicked, set to <tt>'local'</tt> and manually load the store.  To force a requery of the store
<b>every</b> time the trigger is clicked see <tt>{@link #lastQuery}</tt>.</p></li>
<li><b><tt>'local'</tt></b> :
<p class="sub-desc">ComboBox loads local data</p>
<pre><code>
var combo = new Ext.form.ComboBox({
    renderTo: document.body,
    mode: 'local',
    store: new Ext.data.ArrayStore({
        id: 0,
        fields: [
            'myId',  // numeric value is the key
            'displayText'
        ],
        data: [[1, 'item1'], [2, 'item2']]  // data is local
    }),
    valueField: 'myId',
    displayField: 'displayText',
    triggerAction: 'all'
});
</code></pre></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minListWidth" Type="Number">
                  <Summary><![CDATA[be ignored if <tt>{@link #listWidth}</tt> has a higher value)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="forceSelection" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt> to allow the user to set arbitrary text into the field (defaults to <tt>false</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="typeAheadDelay" Type="Number">
                  <Summary><![CDATA[if <tt>{@link #typeAhead} = true</tt> (defaults to <tt>250</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="valueNotFoundText" Type="String">
                  <Summary><![CDATA[the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined). If this
default text is used, it means there is no value set and no validation will occur on this field.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="lazyInit" Type="Boolean">
                  <Summary><![CDATA[(defaults to <tt>true</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tpl" Type="String/Ext.XTemplate">
                  <Summary><![CDATA[use to display each item in the dropdown list. The dropdown list is displayed in a
DataView. See {@link #view}.</p>
<p>The default template string is:</p><pre><code>
                  '&lt;tpl for=".">&lt;div class="x-combo-list-item">{' + this.displayField + '}&lt;/div>&lt;/tpl>'
</code></pre>
<p>Override the default value to create custom UI layouts for items in the list.
For example:</p><pre><code>
                  '&lt;tpl for=".">&lt;div ext:qtip="{state}. {nick}" class="x-combo-list-item">{state}&lt;/div>&lt;/tpl>'
</code></pre>
<p>The template <b>must</b> contain one or more substitution parameters using field
names from the Combo's</b> {@link #store Store}. In the example above an
<pre>ext:qtip</pre> attribute is added to display other fields from the Store.</p>
<p>To preserve the default visual look of list items, add the CSS class name
<pre>x-combo-list-item</pre> to the template's container element.</p>
<p>Also see {@link #itemSelector} for additional details.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="itemSelector" Type="String">
                  <Summary><![CDATA[<p>A simple CSS selector (e.g. div.some-class or span:first-child) that will be
used to determine what nodes the {@link #view Ext.DataView} which handles the dropdown
display will be working with.</p>
<p><b>Note</b>: this setting is <b>required</b> if a custom XTemplate has been
specified in {@link #tpl} which assigns a class other than <pre>'x-combo-list-item'</pre>
to dropdown list items</b>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="lastQuery">
                  <Summary><![CDATA[The value of the match string used to filter the store. Delete this property to force a requery.
Example use:
<pre><code>
var combo = new Ext.form.ComboBox({
...
mode: 'remote',
...
listeners: {
// delete the previous query in the beforequery event or set
// combo.lastQuery = null (this will reload the store the next time it expands)
beforequery: function (qe) {
delete qe.combo.lastQuery;
}
}
});
</code></pre>
To make sure the filter in the store is not cleared the first time the ComboBox trigger is used
configure the combo with <tt>lastQuery=''</tt>. Example use:
<pre><code>
var combo = new Ext.form.ComboBox({
...
mode: 'local',
triggerAction: 'all',
lastQuery: ''
});
</code></pre>]]></Summary>
                </Property>
                <Property Name="view">
                  <Summary><![CDATA[The {@link Ext.DataView DataView} used to display the ComboBox's options.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getListParent">
                  <Summary><![CDATA[<p>Returns the element used to house this ComboBox's pop-up list. Defaults to the document body.</p>
A custom implementation may be provided as a configuration option if the floating list needs to be rendered
to a different Element. An example might be rendering the list inside a Menu so that clicking
the list does not hide the Menu:<pre><code>
var store = new Ext.data.ArrayStore({
    autoDestroy: true,
    fields: ['initials', 'fullname'],
    data : [
        ['FF', 'Fred Flintstone'],
        ['BR', 'Barney Rubble']
    ]
});

var combo = new Ext.form.ComboBox({
    store: store,
    displayField: 'fullname',
    emptyText: 'Select a name...',
    forceSelection: true,
    getListParent: function () {
        return this.el.up('.x-menu');
    },
    iconCls: 'no-icon', //use iconCls if placing within menu to shift to right side of menu
    mode: 'local',
    selectOnFocus: true,
    triggerAction: 'all',
    typeAhead: true,
    width: 135
});

var menu = new Ext.menu.Menu({
    id: 'mainMenu',
    items: [
        combo // A Field in a Menu
    ]
});
</code></pre>]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getStore">
                  <Summary><![CDATA[Returns the store associated with this combo.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.data.Store">
                    <Summary><![CDATA[The store]]></Summary>
                  </Return>
                </Method>
                <Method Name="getValue">
                  <Summary><![CDATA[Returns the currently selected field value or empty string if no value is set.]]></Summary>
                  <Parameters />
                  <Return Type="String">
                    <Summary><![CDATA[value The selected value]]></Summary>
                  </Return>
                </Method>
                <Method Name="clearValue">
                  <Summary><![CDATA[Clears any text/value currently set in the field]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="setValue">
                  <Summary><![CDATA[Sets the specified value into the field.  If the value finds a match, the corresponding record text
will be displayed in the field.  If the value does not match the data value of an existing item,
and the valueNotFoundText config option is defined, it will be displayed as the default field text.
Otherwise the field will be blank (although the value will still be set).]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The value to match]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.form.Field">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="isExpanded">
                  <Summary><![CDATA[Returns true if the dropdown list is expanded, else false.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="selectByValue">
                  <Summary><![CDATA[Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.
The store must be loaded and the list expanded for this function to work, otherwise use setValue.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The data value of the item to select]]></Summary>
                    </Param>
                    <Param Name="scrollIntoView" Type="Boolean">
                      <Summary><![CDATA[False to prevent the dropdown list from autoscrolling to display the
selected item if it is not currently in view (defaults to true)]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the value matched an item in the list, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="select">
                  <Summary><![CDATA[Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.
The store must be loaded and the list expanded for this function to work, otherwise use setValue.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The zero-based index of the list item to select]]></Summary>
                    </Param>
                    <Param Name="scrollIntoView" Type="Boolean">
                      <Summary><![CDATA[False to prevent the dropdown list from autoscrolling to display the
selected item if it is not currently in view (defaults to true)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="doQuery">
                  <Summary><![CDATA[Execute a query to filter the dropdown list.  Fires the {@link #beforequery} event prior to performing the
query allowing the query action to be canceled if needed.]]></Summary>
                  <Parameters>
                    <Param Name="query" Type="String">
                      <Summary><![CDATA[The SQL query to execute]]></Summary>
                    </Param>
                    <Param Name="forceAll" Type="Boolean">
                      <Summary><![CDATA[<tt>true</tt> to force the query to execute even if there are currently fewer
characters in the field than the minimum specified by the <tt>{@link #minChars}</tt> config option.  It
also clears any filter previously saved in the current store (defaults to <tt>false</tt>)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="collapse">
                  <Summary><![CDATA[Hides the dropdown list if it is currently expanded. Fires the {@link #collapse} event on completion.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="expand">
                  <Summary><![CDATA[Expands the dropdown list if it is currently hidden. Fires the {@link #expand} event on completion.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events>
                <Event Name="expand">
                  <Summary><![CDATA[Fires when the dropdown list is expanded.]]></Summary>
                  <Parameters>
                    <Param Name="combo" Type="Ext.form.ComboBox">
                      <Summary><![CDATA[This combo box]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="collapse">
                  <Summary><![CDATA[Fires when the dropdown list is collapsed.]]></Summary>
                  <Parameters>
                    <Param Name="combo" Type="Ext.form.ComboBox">
                      <Summary><![CDATA[This combo box]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeselect">
                  <Summary><![CDATA[Fires before a list item is selected. Return false to cancel the selection.]]></Summary>
                  <Parameters>
                    <Param Name="combo" Type="Ext.form.ComboBox">
                      <Summary><![CDATA[This combo box]]></Summary>
                    </Param>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The data record returned from the underlying store]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the selected item in the dropdown list]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="select">
                  <Summary><![CDATA[Fires when a list item is selected.]]></Summary>
                  <Parameters>
                    <Param Name="combo" Type="Ext.form.ComboBox">
                      <Summary><![CDATA[This combo box]]></Summary>
                    </Param>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The data record returned from the underlying store]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the selected item in the dropdown list]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforequery">
                  <Summary><![CDATA[Fires before all queries are processed. Return false to cancel the query or set the queryEvent's cancel property to true. <li><code>combo</code> : Ext.form.ComboBox <div class="sub-desc">This combo box</div></li> <li><code>query</code> : String <div class="sub-desc">The query</div></li> <li><code>forceAll</code> : Boolean <div class="sub-desc">True to force "all" query</div></li> <li><code>cancel</code> : Boolean <div class="sub-desc">Set to true to cancel the query</div></li> </ul>.]]></Summary>
                  <Parameters>
                    <Param Name="queryEvent" Type="Object">
                      <Summary><![CDATA[An object that has these properties:<ul>]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DateField" FullName="Ext.form.DateField" Package="form" DefinedIn="widgets\form\DateField.js" Xtype="datefield" Extends="Ext.form.TriggerField">
              <Summary><![CDATA[Provides a date input field with a {@link Ext.DatePicker} dropdown and automatic date validation.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new DateField.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="format" Type="String">
                  <Summary><![CDATA[The default date format string which can be overriden for localization support.  The format must be
valid according to {@link Date#parseDate} (defaults to <tt>'m/d/Y'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="altFormats" Type="String">
                  <Summary><![CDATA[Multiple date formats separated by "<tt>|</tt>" to try when parsing a user input value and it
does not match the defined format (defaults to
<tt>'m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disabledDaysText" Type="String">
                  <Summary><![CDATA[The tooltip to display when the date falls on a disabled day (defaults to <tt>'Disabled'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disabledDatesText" Type="String">
                  <Summary><![CDATA[The tooltip text to display when the date falls on a disabled date (defaults to <tt>'Disabled'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minText" Type="String">
                  <Summary><![CDATA[The error text to display when the date in the cell is before <tt>{@link #minValue}</tt> (defaults to
<tt>'The date in this field must be after {minValue}'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxText" Type="String">
                  <Summary><![CDATA[The error text to display when the date in the cell is after <tt>{@link #maxValue}</tt> (defaults to
<tt>'The date in this field must be before {maxValue}'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="invalidText" Type="String">
                  <Summary><![CDATA[The error text to display when the date in the field is invalid (defaults to
<tt>'{value} is not a valid date - it must be in the format {format}'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="triggerClass" Type="String">
                  <Summary><![CDATA[An additional CSS class used to style the trigger button.  The trigger will always get the
class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified
(defaults to <tt>'x-form-date-trigger'</tt> which displays a calendar icon).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="showToday" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt> to hide the footer area of the DatePicker containing the Today button and disable
the keyboard handler for spacebar that selects the current date (defaults to <tt>true</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minValue" Type="Date/String">
                  <Summary><![CDATA[The minimum allowed date. Can be either a Javascript date object or a string date in a
valid format (defaults to null).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxValue" Type="Date/String">
                  <Summary><![CDATA[The maximum allowed date. Can be either a Javascript date object or a string date in a
valid format (defaults to null).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disabledDays" Type="Array">
                  <Summary><![CDATA[An array of days to disable, 0 based (defaults to null). Some examples:<pre><code>
// disable Sunday and Saturday:
disabledDays:  [0, 6]
// disable weekdays:
disabledDays: [1,2,3,4,5]
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disabledDates" Type="Array">
                  <Summary><![CDATA[An array of "dates" to disable, as strings. These strings will be used to build a dynamic regular
expression so they are very powerful. Some examples:<pre><code>
// disable these exact dates:
disabledDates: ["03/08/2003", "09/16/2003"]
// disable these days for every year:
disabledDates: ["03/08", "09/16"]
// only match the beginning (useful if you are using short years):
disabledDates: ["^03/08"]
// disable every day in March 2006:
disabledDates: ["03/../2006"]
// disable every day in every March:
disabledDates: ["^03"]
</code></pre>
Note that the format of the dates included in the array should exactly match the {@link #format} config.
In order to support regular expressions, if you are using a {@link #format date format} that has "." in
it, you will have to escape the dot when restricting dates. For example: <tt>["03\\.08\\.03"]</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoCreate" Type="String/Object">
                  <Summary><![CDATA[A {@link Ext.DomHelper DomHelper element specification object}, or <tt>true</tt> for the default element
specification object:<pre><code>
autoCreate: {tag: "input", type: "text", size: "10", autocomplete: "off"}
</code></pre>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="setDisabledDates">
                  <Summary><![CDATA[Replaces any existing disabled dates with new values and refreshes the DatePicker.]]></Summary>
                  <Parameters>
                    <Param Name="disabledDates" Type="Array">
                      <Summary><![CDATA[An array of date strings (see the <tt>{@link #disabledDates}</tt> config
for details on supported values) used to disable a pattern of dates.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setDisabledDays">
                  <Summary><![CDATA[Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.]]></Summary>
                  <Parameters>
                    <Param Name="disabledDays" Type="Array">
                      <Summary><![CDATA[An array of disabled day indexes. See the <tt>{@link #disabledDays}</tt>
config for details on supported values.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setMinValue">
                  <Summary><![CDATA[Replaces any existing <tt>{@link #minValue}</tt> with the new value and refreshes the DatePicker.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Date">
                      <Summary><![CDATA[The minimum date that can be selected]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setMaxValue">
                  <Summary><![CDATA[Replaces any existing <tt>{@link #maxValue}</tt> with the new value and refreshes the DatePicker.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Date">
                      <Summary><![CDATA[The maximum date that can be selected]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getValue">
                  <Summary><![CDATA[Returns the current date value of the date field.]]></Summary>
                  <Parameters />
                  <Return Type="Date">
                    <Summary><![CDATA[The date value]]></Summary>
                  </Return>
                </Method>
                <Method Name="setValue">
                  <Summary><![CDATA[Sets the value of the date field.  You can pass a date object or any string that can be
parsed into a valid date, using <tt>{@link #format}</tt> as the date format, according
to the same rules as {@link Date#parseDate} (the default format used is <tt>"m/d/Y"</tt>).
<br />Usage:
<pre><code>
//All of these calls set the same date value (May 4, 2006)

//Pass a date object:
var dt = new Date('5/4/2006');
dateField.setValue(dt);

//Pass a date string (default format):
dateField.setValue('05/04/2006');

//Pass a date string (custom format):
dateField.format = 'Y-m-d';
dateField.setValue('2006-05-04');
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="date" Type="String/Date">
                      <Summary><![CDATA[The date or valid date string]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.form.Field">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="select">
                  <Summary><![CDATA[Fires when a date is selected via the date picker.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.DateField">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="date" Type="Date">
                      <Summary><![CDATA[The date that was selected]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DisplayField" FullName="Ext.form.DisplayField" Package="form" DefinedIn="widgets\form\DisplayField.js" Xtype="displayfield" Extends="Ext.form.Field">
              <Summary><![CDATA[A display-only text field which is not validated and not submitted.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new DisplayField.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="disabled" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="fieldClass" Type="String" />
                <ConfigOption Name="htmlEncode" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt>). This might be useful if you want to include tags in the field's innerHTML rather than
rendering them as string literals per the default logic.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="inputType" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="readOnly" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="validateOnBlur" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="validationDelay" Type="Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="validationEvent" Type="String/Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Field" FullName="Ext.form.Field" Package="form" DefinedIn="widgets\form\Field.js" Xtype="field" Extends="Ext.BoxComponent" Subclasses="Ext.form.Checkbox,Ext.form.CheckboxGroup,Ext.form.DisplayField,Ext.form.Hidden,Ext.form.HtmlEditor,Ext.form.TextField">
              <Summary><![CDATA[Base class for form fields that provides default event handling, sizing, value handling and other functionality.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new Field.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoCreate" Type="String/Object">
                  <Summary><![CDATA[element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
<pre><code>{tag: 'input', type: 'text', size: '20', autocomplete: 'off'}</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoEl" Type="String" />
                <ConfigOption Name="autoHeight" Type="Boolean" />
                <ConfigOption Name="autoWidth" Type="Boolean" />
                <ConfigOption Name="cls" Type="String" />
                <ConfigOption Name="disabled" Type="Boolean">
                  <Summary><![CDATA[<p>Be aware that conformant with the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1">HTML specification</a>,
disabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="fieldClass" Type="String" />
                <ConfigOption Name="focusClass" Type="String" />
                <ConfigOption Name="inputType" Type="String">
                  <Summary><![CDATA[to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are
no separate Ext components for those. Note that if you use <tt>inputType:'file'</tt>, {@link #emptyText}
is not supported and should be avoided.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="invalidClass" Type="String" />
                <ConfigOption Name="invalidText" Type="String">
                  <Summary><![CDATA[(defaults to 'The value in this field is invalid')]]></Summary>
                </ConfigOption>
                <ConfigOption Name="msgFx" Type="String">
                  <Summary><![CDATA[(defaults to 'normal').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="msgTarget" Type="String">
                  <Summary><![CDATA[(defaults to 'qtip'):
<pre>
Value         Description
-----------   ----------------------------------------------------------------------
qtip          Display a quick tip when the user hovers over the field
title         Display a default browser title attribute popup
under         Add a block div beneath the field containing the error text
side          Add an error icon to the right of the field with a popup on hover
[element id]  Add the error text directly to the innerHTML of the specified element
</pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="name" Type="String">
                  <Summary><![CDATA[<b>Note</b>: this property must be set if this field is to be automatically included with
{@link Ext.form.BasicForm#submit form submit()}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="preventMark" Type="Boolean">
                  <Summary><![CDATA[<tt>true</tt> to disable {@link #markInvalid marking the field invalid}.
Defaults to <tt>false</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="readOnly" Type="Boolean">
                  <Summary><![CDATA[(defaults to <tt>false</tt>).
<br><p><b>Note</b>: this only sets the element's readOnly DOM attribute.
Setting <code>readOnly=true</code>, for example, will not disable triggering a
ComboBox or DateField; it gives you the option of forcing the user to choose
via the trigger without typing in the text box. To hide the trigger use
<code>{@link Ext.form.TriggerField#hideTrigger hideTrigger}</code>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tabIndex" Type="Number">
                  <Summary><![CDATA[not those which are built via applyTo (defaults to undefined).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="validateOnBlur" Type="Boolean" />
                <ConfigOption Name="validationDelay" Type="Number">
                  <Summary><![CDATA[is initiated (defaults to 250)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="validationEvent" Type="String/Boolean">
                  <Summary><![CDATA[      automatic validation (defaults to 'keyup').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="value" Type="Mixed" />
              </ConfigOptions>
              <Properties>
                <Property Name="originalValue">
                  <Summary><![CDATA[The original value of the field as configured in the {@link #value} configuration, or
as loaded by the last form load operation if the form's {@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
setting is <code>true</code>.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="clearInvalid">
                  <Summary><![CDATA[Clear any invalid styles/messages for this field]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getName">
                  <Summary><![CDATA[Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}
attribute of the field if available.]]></Summary>
                  <Parameters />
                  <Return Type="String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName" />
                </Method>
                <Method Name="getRawValue">
                  <Summary><![CDATA[Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.]]></Summary>
                  <Parameters />
                  <Return Type="Mixed">
                    <Summary><![CDATA[value The field value]]></Summary>
                  </Return>
                </Method>
                <Method Name="getValue">
                  <Summary><![CDATA[Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.]]></Summary>
                  <Parameters />
                  <Return Type="Mixed">
                    <Summary><![CDATA[value The field value]]></Summary>
                  </Return>
                </Method>
                <Method Name="isDirty">
                  <Summary><![CDATA[<p>Returns true if the value of this Field has been changed from its original value.
Will return false if the field is disabled or has not been rendered yet.</p>
<p>Note that if the owning {@link Ext.form.BasicForm form} was configured with
{@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}
then the <i>original value</i> is updated when the values are loaded by
{@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#setValues setValues}.</p>
is not disabled), false otherwise.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if this field has been changed from its original value (and]]></Summary>
                  </Return>
                </Method>
                <Method Name="isValid">
                  <Summary><![CDATA[Returns whether or not the field value is currently valid by
{@link #validateValue validating} the {@link #processValue processed value}
of the field. <b>Note</b>: {@link #disabled} fields are ignored.]]></Summary>
                  <Parameters>
                    <Param Name="preventMark" Type="Boolean">
                      <Summary><![CDATA[True to disable marking the field invalid]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the value is valid, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="markInvalid">
                  <Summary><![CDATA[Mark this field as invalid, using {@link #msgTarget} to determine how to
display the error and applying {@link #invalidClass} to the field's element.
<b>Note</b>: this method does not actually make the field
{@link #isValid invalid}.]]></Summary>
                  <Parameters>
                    <Param Name="msg" Type="String" Optional="true">
                      <Summary><![CDATA[The validation message (defaults to {@link #invalidText})]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="processValue">
                  <Summary><![CDATA[This method should only be overridden if necessary to prepare raw values
for validation (see {@link #validate} and {@link #isValid}).  This method
is expected to return the processed value for the field which will
be used for validation (see validateValue method).]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed" />
                  </Parameters>
                </Method>
                <Method Name="reset">
                  <Summary><![CDATA[Resets the current field value to the originally loaded value and clears any validation messages.
See {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="setRawValue">
                  <Summary><![CDATA[Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The value to set]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Mixed">
                    <Summary><![CDATA[value The field value that is set]]></Summary>
                  </Return>
                </Method>
                <Method Name="setValue">
                  <Summary><![CDATA[Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The value to set]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.form.Field">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
                <Method Name="validate">
                  <Summary><![CDATA[Validates the field value]]></Summary>
                  <Parameters />
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the value is valid, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="validateValue">
                  <Summary><![CDATA[Subclasses should provide the validation implementation by overriding this]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed" />
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="blur">
                  <Summary><![CDATA[Fires when this field loses input focus.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Field">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="change">
                  <Summary><![CDATA[Fires just before the field blurs if the field value has changed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Field">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="newValue" Type="Mixed">
                      <Summary><![CDATA[The new value]]></Summary>
                    </Param>
                    <Param Name="oldValue" Type="Mixed">
                      <Summary><![CDATA[The original value]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="focus">
                  <Summary><![CDATA[Fires when this field receives input focus.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Field">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="invalid">
                  <Summary><![CDATA[Fires after the field has been marked as invalid.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Field">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="msg" Type="String">
                      <Summary><![CDATA[The validation message]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="specialkey">
                  <Summary><![CDATA[Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. To handle other keys see {@link Ext.Panel#keys} or {@link Ext.KeyMap}. You can check {@link Ext.EventObject#getKey} to determine which key was pressed. For example: <pre><code> var form = new Ext.form.FormPanel({ ... items: [{ fieldLabel: 'Field 1', name: 'field1', allowBlank: false },{ fieldLabel: 'Field 2', name: 'field2', listeners: { specialkey: function (field, e) { // e.HOME, e.END, e.PAGE_UP, e.PAGE_DOWN, // e.TAB, e.ESC, arrow keys: e.LEFT, e.RIGHT, e.UP, e.DOWN if (e.{@link Ext.EventObject#getKey getKey()} == e.ENTER) { var form = field.ownerCt.getForm(); form.submit(); } } } } ], ... }); </code></pre>.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Field">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="valid">
                  <Summary><![CDATA[Fires after the field has been validated with no errors.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Field">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="FieldSet" FullName="Ext.form.FieldSet" Package="form" DefinedIn="widgets\form\FieldSet.js" Xtype="fieldset" Extends="Ext.Panel">
              <Summary><![CDATA[Standard container used for grouping items within a {@link Ext.form.FormPanel form}.
<pre><code>
var form = new Ext.FormPanel({
    title: 'Simple Form with FieldSets',
    labelWidth: 75, // label settings here cascade unless overridden
    url: 'save-form.php',
    frame:true,
    bodyStyle:'padding:5px 5px 0',
    width: 700,
    renderTo: document.body,
    layout:'column', // arrange items in columns
    defaults: {      // defaults applied to items
        layout: 'form',
        border: false,
        bodyStyle: 'padding:4px'
    },
    items: [{
        // Fieldset in Column 1
        xtype:'fieldset',
        columnWidth: 0.5,
        title: 'Fieldset 1',
        collapsible: true,
        autoHeight:true,
        defaults: {
            anchor: '-20' // leave room for error icon
        },
        defaultType: 'textfield',
        items :[{
                fieldLabel: 'Field 1'
            }, {
                fieldLabel: 'Field 2'
            }, {
                fieldLabel: 'Field 3'
            }
        ]
    },{
        // Fieldset in Column 2 - Panel inside
        xtype:'fieldset',
        title: 'Show Panel', // title, header, or checkboxToggle creates fieldset header
        autoHeight:true,
        columnWidth: 0.5,
        checkboxToggle: true,
        collapsed: true, // fieldset initially collapsed
        layout:'anchor',
        items :[{
            xtype: 'panel',
            anchor: '100%',
            title: 'Panel inside a fieldset',
            frame: true,
            height: 100
        }]
    }]
});
</code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="checkboxToggle" Type="Mixed">
                  <Summary><![CDATA[in front of the legend to expand/collapse the fieldset when the checkbox is toggled. (defaults
to <tt>false</tt>).
<p>A {@link Ext.DomHelper DomHelper} element spec may also be specified to create the checkbox.
If <tt>true</tt> is specified, the default DomHelper config object used to create the element
is:</p><pre><code>
{tag: 'input', type: 'checkbox', name: this.checkboxName || this.id+'-checkbox'}
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="checkboxName" Type="String">
                  <Summary><![CDATA[(defaults to <tt>'[checkbox id]-checkbox'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="collapsible" Type="Boolean">
                  <Summary><![CDATA[<tt>true</tt> to make the fieldset collapsible and have the expand/collapse toggle button automatically
rendered into the legend element, <tt>false</tt> to keep the fieldset statically sized with no collapse
button (defaults to <tt>false</tt>). Another option is to configure <tt>{@link #checkboxToggle}</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="labelWidth" Type="Number" />
                <ConfigOption Name="itemCls" Type="String">
                  <Summary><![CDATA[{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl} for details).
This property cascades to child containers.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="baseCls" Type="String" />
                <ConfigOption Name="layout" Type="String" />
                <ConfigOption Name="animCollapse" Type="Boolean">
                  <Summary><![CDATA[<tt>true</tt> to animate the transition when the panel is collapsed, <tt>false</tt> to skip the
animation (defaults to <tt>false</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="activeItem" Type="String/Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="applyTo" Type="Mixed">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="bodyBorder" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="border" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="bufferResize" Type="Boolean/Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="collapseFirst" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultType" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disabledClass" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="elements" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="floating" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="footer" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="frame" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="header" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="headerAsText" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideCollapseTool" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="iconCls" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="shadow" Type="Boolean/String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="shadowOffset" Type="Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="shim" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tbar" Type="Object/Array">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tabTip" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="titleCollapse" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tools" Type="Array">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="toolTemplate" Type="Ext.Template/Ext.XTemplate">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="xtype" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="onCheckClick">
                  <Summary><![CDATA[This function is called by the fieldset's checkbox when it is toggled (only applies when
checkboxToggle = true).  This method should never be called externally, but can be
overridden to provide custom behavior when the checkbox is toggled if needed.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="FormPanel" FullName="Ext.form.FormPanel" Package="form" DefinedIn="widgets\form\Form.js" Xtype="form" Extends="Ext.Panel">
              <Summary><![CDATA[<p>Standard form container.</p>

<p><b><u>Layout</u></b></p>
<p>By default, FormPanel is configured with <tt>layout:'form'</tt> to use an {@link Ext.layout.FormLayout}
layout manager, which styles and renders fields and labels correctly. When nesting additional Containers
within a FormPanel, you should ensure that any descendant Containers which host input Fields use the
{@link Ext.layout.FormLayout} layout manager.</p>

<p><b><u>BasicForm</u></b></p>
<p>Although <b>not listed</b> as configuration options of FormPanel, the FormPanel class accepts all
of the config options required to configure its internal {@link Ext.form.BasicForm} for:
<div class="mdetail-params"><ul>
<li>{@link Ext.form.BasicForm#fileUpload file uploads}</li>
<li>functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form</li>
</ul></div>

<p><b>Note</b>: If subclassing FormPanel, any configuration options for the BasicForm must be applied to
the <tt><b>initialConfig</b></tt> property of the FormPanel. Applying {@link Ext.form.BasicForm BasicForm}
configuration settings to <b><tt>this</tt></b> will <b>not</b> affect the BasicForm's configuration.</p>

<p><b><u>Form Validation</u></b></p>
<p>For information on form validation see the following:</p>
<div class="mdetail-params"><ul>
<li>{@link Ext.form.TextField}</li>
<li>{@link Ext.form.VTypes}</li>
<li>{@link Ext.form.BasicForm#doAction BasicForm.doAction <b>clientValidation</b> notes}</li>
<li><tt>{@link Ext.form.FormPanel#monitorValid monitorValid}</tt></li>
</ul></div>

<p><b><u>Form Submission</u></b></p>
<p>By default, Ext Forms are submitted through Ajax, using {@link Ext.form.Action}. To enable normal browser
submission of the {@link Ext.form.BasicForm BasicForm} contained in this FormPanel, see the
<tt><b>{@link Ext.form.BasicForm#standardSubmit standardSubmit}</b></tt> option.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="buttons" Type="Array">
                  <Summary><![CDATA[An array of {@link Ext.Button}s or {@link Ext.Button} configs used to add buttons to the footer of this FormPanel.<br>
<p>Buttons in the footer of a FormPanel may be configured with the option <tt>formBind: true</tt>. This causes
the form's {@link #monitorValid valid state monitor task} to enable/disable those Buttons depending on
the form's valid/invalid state.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="formId" Type="String" />
                <ConfigOption Name="hideLabels" Type="Boolean">
                  <Summary><![CDATA[<p><tt>true</tt> to hide field labels by default (sets <tt>display:none</tt>). Defaults to
<tt>false</tt>.</p>
<p>Also see {@link Ext.Component}.<tt>{@link Ext.Component#hideLabel hideLabel}</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="itemCls" Type="String" />
                <ConfigOption Name="labelAlign" Type="String">
                  <Summary><![CDATA[for the <b>container</b>. Valid values are <tt>"left</tt>", <tt>"top"</tt> or <tt>"right"</tt>
(defaults to <tt>"left"</tt>). This property cascades to child <b>containers</b> and can be
overridden on any child <b>container</b> (e.g., a fieldset can specify a different <tt>labelAlign</tt>
for its fields).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="labelPad" Type="Number">
                  <Summary><![CDATA[The default padding in pixels for field labels (defaults to <tt>5</tt>). <tt>labelPad</tt> only
applies if <tt>{@link #labelWidth}</tt> is also specified, otherwise it will be ignored.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="labelSeparator" Type="String">
                  <Summary><![CDATA[See {@link Ext.Component}.<tt>{@link Ext.Component#labelSeparator labelSeparator}</tt>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="labelWidth" Type="Number">
                  <Summary><![CDATA[and can be overridden on any child container (e.g., a fieldset can specify a different <tt>labelWidth</tt>
for its fields) (defaults to <tt>100</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="layout" Type="String">
                  <Summary><![CDATA[For additional details see {@link Ext.layout.FormLayout} and {@link Ext.Container#layout Ext.Container.layout}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minButtonWidth" Type="Number" />
                <ConfigOption Name="monitorPoll" Type="Number" />
                <ConfigOption Name="monitorValid" Type="Boolean">
                  <Summary><![CDATA[regularly fires the {@link #clientvalidation} event passing that state.<br>
<p>When monitoring valid state, the FormPanel enables/disables any of its configured
{@link #buttons} which have been configured with <code>formBind: true</code> depending
on whether the {@link Ext.form.BasicForm#isValid form is valid} or not. Defaults to <tt>false</tt></p>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="getForm">
                  <Summary><![CDATA[Provides access to the {@link Ext.form.BasicForm Form} which this Panel contains.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.form.BasicForm} The {@link Ext.form.BasicForm Form">
                    <Summary><![CDATA[which this Panel contains.]]></Summary>
                  </Return>
                </Method>
                <Method Name="load">
                  <Summary><![CDATA[This is a proxy for the underlying BasicForm's {@link Ext.form.BasicForm#load} call.]]></Summary>
                  <Parameters>
                    <Param Name="options" Type="Object">
                      <Summary><![CDATA[The options to pass to the action (see {@link Ext.form.BasicForm#doAction} for details)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="startMonitoring">
                  <Summary><![CDATA[Starts monitoring of the valid state of this form. Usually this is done by passing the config
option "monitorValid"]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="stopMonitoring">
                  <Summary><![CDATA[Stops monitoring of the valid state of this form]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events>
                <Event Name="clientvalidation">
                  <Summary><![CDATA[If the monitorValid config option is true, this event fires repetitively to notify of valid state.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.FormPanel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="valid" Type="Boolean">
                      <Summary><![CDATA[true if the form has passed client-side validation]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Hidden" FullName="Ext.form.Hidden" Package="form" DefinedIn="widgets\form\Hidden.js" Xtype="hidden" Extends="Ext.form.Field">
              <Summary><![CDATA[A basic hidden field for storing hidden values in forms that need to be passed in the form submit.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new Hidden field.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="HtmlEditor" FullName="Ext.form.HtmlEditor" Package="form" DefinedIn="widgets\form\HtmlEditor.js" Xtype="htmleditor" Extends="Ext.form.Field">
              <Summary><![CDATA[Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be
automatically hidden when needed.  These are noted in the config options where appropriate.
<br><br>The editor's toolbar buttons have tooltips defined in the {@link #buttonTips} property, but they are not
enabled by default unless the global {@link Ext.QuickTips} singleton is {@link Ext.QuickTips#init initialized}.
<br><br><b>Note: The focus/blur and validation marking functionality inherited from Ext.form.Field is NOT
supported by this editor.</b>
<br><br>An Editor is a sensitive component that can not be used in all spots standard fields can be used. Putting an Editor within
any element that has display set to 'none' can cause problems in Safari and Firefox due to their default iframe reloading bugs.
<br><br>Example usage:
<pre><code>
// Simple example rendered with default options:
Ext.QuickTips.init();  // enable tooltips
new Ext.form.HtmlEditor({
    renderTo: Ext.getBody(),
    width: 800,
    height: 300
});

// Passed via xtype into a container and with custom options:
Ext.QuickTips.init();  // enable tooltips
new Ext.Panel({
    title: 'HTML Editor',
    renderTo: Ext.getBody(),
    width: 600,
    height: 300,
    frame: true,
    layout: 'fit',
    items: {
        xtype: 'htmleditor',
        enableColors: false,
        enableAlignments: false
    }
});
</code></pre>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new HtmlEditor.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="enableFormat" Type="Boolean" />
                <ConfigOption Name="enableFontSize" Type="Boolean" />
                <ConfigOption Name="enableColors" Type="Boolean" />
                <ConfigOption Name="enableAlignments" Type="Boolean" />
                <ConfigOption Name="enableLists" Type="Boolean" />
                <ConfigOption Name="enableSourceEdit" Type="Boolean" />
                <ConfigOption Name="enableLinks" Type="Boolean" />
                <ConfigOption Name="enableFont" Type="Boolean" />
                <ConfigOption Name="createLinkText" Type="String" />
                <ConfigOption Name="defaultLinkValue" Type="String" />
                <ConfigOption Name="fontFamilies" Type="Array" />
                <ConfigOption Name="defaultValue" Type="String" />
                <ConfigOption Name="fieldClass" Type="String" />
                <ConfigOption Name="focusClass" Type="String" />
                <ConfigOption Name="autoCreate" Type="String" />
                <ConfigOption Name="inputType" Type="String" />
                <ConfigOption Name="invalidClass" Type="String" />
                <ConfigOption Name="invalidText" Type="String" />
                <ConfigOption Name="msgFx" Type="String" />
                <ConfigOption Name="validateOnBlur" Type="String" />
                <ConfigOption Name="allowDomMove" Type="Boolean" />
                <ConfigOption Name="applyTo" Type="String" />
                <ConfigOption Name="autoHeight" Type="String" />
                <ConfigOption Name="autoWidth" Type="String" />
                <ConfigOption Name="cls" Type="String" />
                <ConfigOption Name="disabled" Type="String" />
                <ConfigOption Name="disabledClass" Type="String" />
                <ConfigOption Name="msgTarget" Type="String" />
                <ConfigOption Name="readOnly" Type="String" />
                <ConfigOption Name="style" Type="String" />
                <ConfigOption Name="validationDelay" Type="String" />
                <ConfigOption Name="validationEvent" Type="String" />
                <ConfigOption Name="tabIndex" Type="String" />
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="getDocMarkup">
                  <Summary><![CDATA[Protected method that will not generally be called directly. It
is called when the editor initializes the iframe with HTML contents. Override this method if you
want to change the initialization markup of the iframe (e.g. to add stylesheets).]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="toggleSourceEdit">
                  <Summary><![CDATA[Toggles the editor between standard and source edit mode.]]></Summary>
                  <Parameters>
                    <Param Name="sourceEdit" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True for source edit, false for standard]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="markInvalid">
                  <Summary><![CDATA[Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="clearInvalid">
                  <Summary><![CDATA[Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="cleanHtml">
                  <Summary><![CDATA[Protected method that will not generally be called directly. If you need/want
custom HTML cleanup, this is the method you should override.]]></Summary>
                  <Parameters>
                    <Param Name="html" Type="String">
                      <Summary><![CDATA[The HTML to be cleaned]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The cleaned HTML]]></Summary>
                  </Return>
                </Method>
                <Method Name="syncValue">
                  <Summary><![CDATA[Protected method that will not generally be called directly. Syncs the contents
of the editor iframe with the textarea.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="pushValue">
                  <Summary><![CDATA[Protected method that will not generally be called directly. Pushes the value of the textarea
into the iframe editor.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="updateToolbar">
                  <Summary><![CDATA[Protected method that will not generally be called directly. It triggers
a toolbar update by reading the markup state of the current selection in the editor.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="relayCmd">
                  <Summary><![CDATA[Executes a Midas editor command on the editor document and performs necessary focus and
toolbar updates. <b>This should only be called after the editor is initialized.</b>]]></Summary>
                  <Parameters>
                    <Param Name="cmd" Type="String">
                      <Summary><![CDATA[The Midas command]]></Summary>
                    </Param>
                    <Param Name="value" Type="String/Boolean" Optional="true">
                      <Summary><![CDATA[The value to pass to the command (defaults to null)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="execCmd">
                  <Summary><![CDATA[Executes a Midas editor command directly on the editor document.
For visual commands, you should use {@link #relayCmd} instead.
<b>This should only be called after the editor is initialized.</b>]]></Summary>
                  <Parameters>
                    <Param Name="cmd" Type="String">
                      <Summary><![CDATA[The Midas command]]></Summary>
                    </Param>
                    <Param Name="value" Type="String/Boolean" Optional="true">
                      <Summary><![CDATA[The value to pass to the command (defaults to null)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="insertAtCursor">
                  <Summary><![CDATA[Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated
to insert text.]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String" />
                  </Parameters>
                </Method>
                <Method Name="getToolbar">
                  <Summary><![CDATA[Returns the editor's toolbar. <b>This is only available after the editor has been rendered.</b>]]></Summary>
                  <Parameters />
                  <Return Type="Ext.Toolbar" />
                </Method>
              </Methods>
              <Events>
                <Event Name="initialize">
                  <Summary><![CDATA[Fires when the editor is fully initialized (including the iframe).]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HtmlEditor">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="activate">
                  <Summary><![CDATA[Fires when the editor is first receives the focus. Any insertion must wait until after this event.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HtmlEditor">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforesync">
                  <Summary><![CDATA[Fires before the textarea is updated with content from the editor iframe. Return false to cancel the sync.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HtmlEditor">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="html" Type="String" />
                  </Parameters>
                </Event>
                <Event Name="beforepush">
                  <Summary><![CDATA[Fires before the iframe editor is updated with content from the textarea. Return false to cancel the push.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HtmlEditor">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="html" Type="String" />
                  </Parameters>
                </Event>
                <Event Name="sync">
                  <Summary><![CDATA[Fires when the textarea is updated with content from the editor iframe.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HtmlEditor">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="html" Type="String" />
                  </Parameters>
                </Event>
                <Event Name="push">
                  <Summary><![CDATA[Fires when the iframe editor is updated with content from the textarea.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HtmlEditor">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="html" Type="String" />
                  </Parameters>
                </Event>
                <Event Name="editmodechange">
                  <Summary><![CDATA[Fires when the editor switches edit modes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HtmlEditor">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="sourceEdit" Type="Boolean">
                      <Summary><![CDATA[True if source edit, false if standard editing.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="blur">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="change">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="focus">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="specialkey">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
              </Events>
            </Class>
            <Class Name="Label" FullName="Ext.form.Label" Package="form" DefinedIn="widgets\form\Label.js" Xtype="label" Extends="Ext.BoxComponent">
              <Summary><![CDATA[Basic Label field.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new Label.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Ext.Element/String/Object">
                    <Summary><![CDATA[The configuration options.  If an element is passed, it is set as the internal element and its id used as the component id.  If a string is passed, it is assumed to be the id of an existing element and is used as the component id.  Otherwise, it is assumed to be a standard config object and is applied to the component.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="forId" Type="String">
                  <Summary><![CDATA[attribute. If not specified, the attribute will not be added to the label.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="html" Type="String">
                  <Summary><![CDATA[Note that if {@link #text} is specified it will take precedence and this value will be ignored.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="text" Type="String">
                  <Summary><![CDATA[tags within the label's innerHTML, use the {@link #html} config instead.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="setText">
                  <Summary><![CDATA[Updates the label's innerHTML with the specified string.]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The new label text]]></Summary>
                    </Param>
                    <Param Name="encode" Type="Boolean" Optional="true">
                      <Summary><![CDATA[False to skip HTML-encoding the text when rendering it
to the label (defaults to true which encodes the value). This might be useful if you want to include
tags in the label's innerHTML rather than rendering them as string literals per the default logic.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Label">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="NumberField" FullName="Ext.form.NumberField" Package="form" DefinedIn="widgets\form\NumberField.js" Xtype="numberfield" Extends="Ext.form.TextField">
              <Summary><![CDATA[Numeric text field that provides automatic keystroke filtering and numeric validation.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new NumberField.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="allowDecimals" Type="Boolean" />
                <ConfigOption Name="allowNegative" Type="Boolean" />
                <ConfigOption Name="baseChars" Type="String" />
                <ConfigOption Name="decimalPrecision" Type="Number" />
                <ConfigOption Name="decimalSeparator" Type="String" />
                <ConfigOption Name="fieldClass" Type="String" />
                <ConfigOption Name="maskRe" Type="RegExp" />
                <ConfigOption Name="maxText" Type="String" />
                <ConfigOption Name="maxValue" Type="Number" />
                <ConfigOption Name="minText" Type="String" />
                <ConfigOption Name="minValue" Type="Number" />
                <ConfigOption Name="nanText" Type="String">
                  <Summary><![CDATA[if a valid character like '.' or '-' is left in the field with no number (defaults to "{value} is not a valid number")]]></Summary>
                </ConfigOption>
                <ConfigOption Name="stripCharsRe" Type="RegExp" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Radio" FullName="Ext.form.Radio" Package="form" DefinedIn="widgets\form\Radio.js" Xtype="radio" Extends="Ext.form.Checkbox">
              <Summary><![CDATA[Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.
Radio grouping is handled automatically by the browser if you give each radio in a group the same name.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new Radio.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clearInvalid">
                  <Summary><![CDATA[Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getGroupValue">
                  <Summary><![CDATA[If this radio is part of a group, it will return the selected value]]></Summary>
                  <Parameters />
                  <Return Type="String" />
                </Method>
                <Method Name="markInvalid">
                  <Summary><![CDATA[Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="setValue">
                  <Summary><![CDATA[Sets either the checked/unchecked status of this Radio, or, if a string value
is passed, checks a sibling Radio of the same name whose value is the value specified.]]></Summary>
                  <Parameters>
                    <Param Name="valueed" Type="String/Boolean} Chec">
                      <Summary><![CDATA[value, or the value of the sibling radio button to check.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.form.Field">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="RadioGroup" FullName="Ext.form.RadioGroup" Package="form" DefinedIn="widgets\form\RadioGroup.js" Xtype="radiogroup" Extends="Ext.form.CheckboxGroup">
              <Summary><![CDATA[A grouping container for {@link Ext.form.Radio} controls.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new RadioGroup.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="allowBlank" Type="Boolean">
                  <Summary><![CDATA[If allowBlank = false and no items are selected at validation time, {@link @blankText} will
be used as the error text.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="blankText" Type="String">
                  <Summary><![CDATA[(defaults to 'You must select one item in this group')]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="getValue">
                  <Summary><![CDATA[Gets the selected {@link Ext.form.Radio} in the group, if it exists.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.form.Radio">
                    <Summary><![CDATA[The selected radio.]]></Summary>
                  </Return>
                </Method>
                <Method Name="setValue">
                  <Summary><![CDATA[Sets the checked radio in the group.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String/Ext.form.Radio">
                      <Summary><![CDATA[The radio to check.]]></Summary>
                    </Param>
                    <Param Name="value" Type="Boolean">
                      <Summary><![CDATA[The value to set the radio.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.form.RadioGroup">
                    <Summary><![CDATA[this]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="change">
                  <Summary><![CDATA[Fires when the state of a child radio changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.RadioGroup">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Ext.form.Radio">
                      <Summary><![CDATA[The checked radio]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="TextArea" FullName="Ext.form.TextArea" Package="form" DefinedIn="widgets\form\TextArea.js" Xtype="textarea" Extends="Ext.form.TextField">
              <Summary><![CDATA[Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds
support for auto-sizing.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new TextArea.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoCreate" Type="String/Object">
                  <Summary><![CDATA[element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
<pre><code>{tag: "textarea", style: "width:100px;height:60px;", autocomplete: "off"}</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="growMax" Type="Number">
                  <Summary><![CDATA[(defaults to <tt>1000</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="growMin" Type="Number">
                  <Summary><![CDATA[(defaults to <tt>60</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="preventScrollbars" Type="Boolean">
                  <Summary><![CDATA[in the field. This option is only relevant when {@link #grow} is <tt>true</tt>. Equivalent to setting overflow: hidden, defaults to
<tt>false</tt>.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="autoSize">
                  <Summary><![CDATA[Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.
This only takes effect if grow = true, and fires the {@link #autosize} event if the height changes.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TextField" FullName="Ext.form.TextField" Package="form" DefinedIn="widgets\form\TextField.js" Xtype="textfield" Extends="Ext.form.Field" Subclasses="Ext.form.NumberField,Ext.form.TextArea,Ext.form.TriggerField">
              <Summary><![CDATA[<p>Basic text field.  Can be used as a direct replacement for traditional text inputs,
or as the base class for more sophisticated input controls (like {@link Ext.form.TextArea}
and {@link Ext.form.ComboBox}).</p>
<p><b><u>Validation</u></b></p>
<p>The validation procedure is described in the documentation for {@link #validateValue}.</p>
<p><b><u>Alter Validation Behavior</u></b></p>
<p>Validation behavior for each field can be configured:</p>
<div class="mdetail-params"><ul>
<li><code>{@link Ext.form.TextField#invalidText invalidText}</code> : the default validation message to
show if any validation step above does not provide a message when invalid</li>
<li><code>{@link Ext.form.TextField#maskRe maskRe}</code> : filter out keystrokes before any validation occurs</li>
<li><code>{@link Ext.form.TextField#stripCharsRe stripCharsRe}</code> : filter characters after being typed in,
but before being validated</li>
<li><code>{@link Ext.form.Field#invalidClass invalidClass}</code> : alternate style when invalid</li>
<li><code>{@link Ext.form.Field#validateOnBlur validateOnBlur}</code>,
<code>{@link Ext.form.Field#validationDelay validationDelay}</code>, and
<code>{@link Ext.form.Field#validationEvent validationEvent}</code> : modify how/when validation is triggered</li>
</ul></div>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options ]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="allowBlank" Type="Boolean">
                  <Summary><![CDATA[<tt>true</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="blankText" Type="String">
                  <Summary><![CDATA[fails (defaults to <tt>'This field is required'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disableKeyFilter" Type="Boolean">
                  <Summary><![CDATA[to <tt>false</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="emptyClass" Type="String">
                  <Summary><![CDATA[(defaults to <tt>'x-form-empty-field'</tt>).  This class is automatically added and removed as needed
depending on the current field value.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="emptyText" Type="String">
                  <Summary><![CDATA[<b>Note</b>: that this value will be submitted to the server if this field is enabled and configured
with a {@link #name}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableKeyEvents" Type="Boolean">
                  <Summary><![CDATA[field (defaults to <tt>false</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="grow" Type="Boolean">
                  <Summary><![CDATA[(defaults to <tt>false</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="growMax" Type="Number">
                  <Summary><![CDATA[to <tt>800</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="growMin" Type="Number">
                  <Summary><![CDATA[to <tt>30</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maskRe" Type="RegExp">
                  <Summary><![CDATA[not match (defaults to <tt>null</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxLength" Type="Number">
                  <Summary><![CDATA[This behavior is intended to provide instant feedback to the user by improving usability to allow pasting
and editing or overtyping and back tracking. To restrict the maximum number of characters that can be
entered into the field use <tt><b>{@link Ext.form.Field#autoCreate autoCreate}</b></tt> to add
any attributes you want to a field, for example:<pre><code>
var myField = new Ext.form.NumberField({
    id: 'mobile',
    anchor:'90%',
    fieldLabel: 'Mobile',
    maxLength: 16, // for validation
    autoCreate: {tag: 'input', type: 'text', size: '20', autocomplete: 'off', maxlength: '10'}
});
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxLengthText" Type="String">
                  <Summary><![CDATA[validation fails (defaults to <tt>'The maximum length for this field is {maxLength}'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minLength" Type="Number" />
                <ConfigOption Name="minLengthText" Type="String">
                  <Summary><![CDATA[validation fails (defaults to <tt>'The minimum length for this field is {minLength}'</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="regex" Type="RegExp">
                  <Summary><![CDATA[(defaults to <tt>null</tt>). If the test fails, the field will be marked invalid using
<b><tt>{@link #regexText}</tt></b>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="regexText" Type="String">
                  <Summary><![CDATA[test fails during validation (defaults to <tt>''</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="selectOnFocus" Type="Boolean">
                  <Summary><![CDATA[receives input focus (defaults to <tt>false</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="stripCharsRe" Type="RegExp">
                  <Summary><![CDATA[before validation (defaults to <tt>null</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="validator" Type="Function">
                  <Summary><![CDATA[<p>A custom validation function to be called during field validation ({@link #validateValue})
(defaults to <tt>null</tt>). If specified, this function will be called first, allowing the
developer to override the default validation process.</p>
<br><p>This function will be passed the following Parameters:</p>
<div class="mdetail-params"><ul>
<li><code>value</code>: <i>Mixed</i>
<div class="sub-desc">The current field value</div></li>
</ul></div>
<br><p>This function is to Return:</p>
<div class="mdetail-params"><ul>
<li><code>true</code>: <i>Boolean</i>
<div class="sub-desc"><code>true</code> if the value is valid</div></li>
<li><code>msg</code>: <i>String</i>
<div class="sub-desc">An error message if the value is invalid</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="vtype" Type="String" />
                <ConfigOption Name="vtypeText" Type="String">
                  <Summary><![CDATA[for the <b><code>{@link #vtype}</code></b> currently set for this field (defaults to <tt>''</tt>).  <b>Note</b>:
only applies if <b><code>{@link #vtype}</code></b> is set, else ignored.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="autoSize">
                  <Summary><![CDATA[Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.
This only takes effect if <tt><b>{@link #grow}</b> = true</tt>, and fires the {@link #autosize} event.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="reset">
                  <Summary><![CDATA[Resets the current field value to the originally-loaded value and clears any validation messages.
Also adds <tt><b>{@link #emptyText}</b></tt> and <tt><b>{@link #emptyClass}</b></tt> if the
original value was blank.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="selectText">
                  <Summary><![CDATA[Selects text in this field]]></Summary>
                  <Parameters>
                    <Param Name="start" Type="Number" Optional="true">
                      <Summary><![CDATA[The index where the selection should start (defaults to 0)]]></Summary>
                    </Param>
                    <Param Name="end" Type="Number" Optional="true">
                      <Summary><![CDATA[The index where the selection should end (defaults to the text length)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="validateValue">
                  <Summary><![CDATA[<p>Validates a value according to the field's validation rules and marks the field as invalid
if the validation fails. Validation rules are processed in the following order:</p>
<div class="mdetail-params"><ul>

<li><b>1. Field specific validator</b>
<div class="sub-desc">
<p>A validator offers a way to customize and reuse a validation specification.
If a field is configured with a <code>{@link #validator}</code>
function, it will be passed the current field value.  The <code>{@link #validator}</code>
function is expected to return either:
<div class="mdetail-params"><ul>
<li>Boolean <tt>true</tt> if the value is valid (validation continues).</li>
<li>a String to represent the invalid message if invalid (validation halts).</li>
</ul></div>
</div></li>

<li><b>2. Basic Validation</b>
<div class="sub-desc">
<p>If the <code>{@link #validator}</code> has not halted validation,
basic validation proceeds as follows:</p>

<div class="mdetail-params"><ul>

<li><code>{@link #allowBlank}</code> : (Invalid message =
<code>{@link #emptyText}</code>)<div class="sub-desc">
Depending on the configuration of <code>{@link #allowBlank}</code>, a
blank field will cause validation to halt at this step and return
Boolean true or false accordingly.
</div></li>

<li><code>{@link #minLength}</code> : (Invalid message =
<code>{@link #minLengthText}</code>)<div class="sub-desc">
If the passed value does not satisfy the <code>{@link #minLength}</code>
specified, validation halts.
</div></li>

<li><code>{@link #maxLength}</code> : (Invalid message =
<code>{@link #maxLengthText}</code>)<div class="sub-desc">
If the passed value does not satisfy the <code>{@link #maxLength}</code>
specified, validation halts.
</div></li>

</ul></div>
</div></li>

<li><b>3. Preconfigured Validation Types (VTypes)</b>
<div class="sub-desc">
<p>If none of the prior validation steps halts validation, a field
configured with a <code>{@link #vtype}</code> will utilize the
corresponding {@link Ext.form.VTypes VTypes} validation function.
If invalid, either the field's <code>{@link #vtypeText}</code> or
the VTypes vtype Text property will be used for the invalid message.
Keystrokes on the field will be filtered according to the VTypes
vtype Mask property.</p>
</div></li>

<li><b>4. Field specific regex test</b>
<div class="sub-desc">
<p>If none of the prior validation steps halts validation, a field's
configured <code>{@link #regex}</code> test will be processed.
The invalid message for this test is configured with
<code>{@link #regexText}</code>.</p>
</div></li>]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The value to validate]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the value is valid, else false]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="autosize">
                  <Summary><![CDATA[Fires when the <tt><b>{@link #autoSize}</b></tt> function is triggered. The field may or may not have actually changed size according to the default logic, but this event provides a hook for the developer to apply additional logic at runtime to resize the field if needed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.Field">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="width" Type="Number">
                      <Summary><![CDATA[The new field width]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="keydown">
                  <Summary><![CDATA[Keydown input field event. This event only fires if <tt><b>{@link #enableKeyEvents}</b></tt> is set to true.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.TextField">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="keypress">
                  <Summary><![CDATA[Keypress input field event. This event only fires if <tt><b>{@link #enableKeyEvents}</b></tt> is set to true.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.TextField">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="keyup">
                  <Summary><![CDATA[Keyup input field event. This event only fires if <tt><b>{@link #enableKeyEvents}</b></tt> is set to true.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.form.TextField">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="TimeField" FullName="Ext.form.TimeField" Package="form" DefinedIn="widgets\form\TimeField.js" Xtype="timefield" Extends="Ext.form.ComboBox">
              <Summary><![CDATA[Provides a time input field with a time dropdown and automatic time validation.  Example usage:
<pre><code>
new Ext.form.TimeField({
    minValue: '9:00 AM',
    maxValue: '6:00 PM',
    increment: 30
});
</code></pre>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new TimeField.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="altFormats" Type="String">
                  <Summary><![CDATA[Multiple date formats separated by "|" to try when parsing a user input value and it doesn't match the defined
format (defaults to 'g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="format" Type="String">
                  <Summary><![CDATA[The default time format string which can be overriden for localization support.  The format must be
valid according to {@link Date#parseDate} (defaults to 'g:i A', e.g., '3:15 PM').  For 24-hour time
format try 'H:i' instead.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="grow" Type="Boolean" />
                <ConfigOption Name="growMax" Type="Number" />
                <ConfigOption Name="growMin" Type="Number" />
                <ConfigOption Name="increment" Type="Number">
                  <Summary><![CDATA[The number of minutes between each time value in the list (defaults to 15).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="invalidText" Type="String">
                  <Summary><![CDATA[The error text to display when the time in the field is invalid (defaults to
'{value} is not a valid time').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxText" Type="String">
                  <Summary><![CDATA[The error text to display when the time is after maxValue (defaults to
'The time in this field must be equal to or before {0}').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxValue" Type="Date/String">
                  <Summary><![CDATA[The maximum allowed time. Can be either a Javascript date object with a valid time value or a string
time in a valid format -- see {@link #format} and {@link #altFormats} (defaults to null).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minText" Type="String">
                  <Summary><![CDATA[The error text to display when the date in the cell is before minValue (defaults to
'The time in this field must be equal to or after {0}').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minValue" Type="Date/String">
                  <Summary><![CDATA[The minimum allowed time. Can be either a Javascript date object with a valid time value or a string
time in a valid format -- see {@link #format} and {@link #altFormats} (defaults to null).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="autoSize">
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TriggerField" FullName="Ext.form.TriggerField" Package="form" DefinedIn="widgets\form\TriggerField.js" Xtype="trigger" Extends="Ext.form.TextField" Subclasses="Ext.form.ComboBox,Ext.form.DateField,Ext.form.TwinTriggerField">
              <Summary><![CDATA[Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).
The trigger has no default action, so you must assign a function to implement the trigger click handler by
overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox
for which you can provide a custom implementation.  For example:
<pre><code>
var trigger = new Ext.form.TriggerField();
trigger.onTriggerClick = myTriggerFn;
trigger.applyToMarkup('my-field');
</code></pre>

However, in general you will most likely want to use TriggerField as the base class for a reusable component.
{@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new TriggerField.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options (valid {@Ext.form.TextField} config options will also be applied to the base TextField)]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoCreate" Type="String/Object">
                  <Summary><![CDATA[element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.
See <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>
<pre><code>{tag: "input", type: "text", size: "16", autocomplete: "off"}</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="editable" Type="Boolean">
                  <Summary><![CDATA[the field will only respond to a click on the trigger to set the value. (defaults to <tt>true</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="grow" Type="Boolean" />
                <ConfigOption Name="growMax" Type="Number" />
                <ConfigOption Name="growMin" Type="Number" />
                <ConfigOption Name="hideTrigger" Type="Boolean">
                  <Summary><![CDATA[text field (defaults to <tt>false</tt>)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="triggerClass" Type="String">
                  <Summary><![CDATA[An additional CSS class used to style the trigger button.  The trigger will always get the
class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="triggerConfig" Type="Mixed">
                  <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} config object specifying the structure of the
trigger element for this Field. (Optional).</p>
<p>Specify this when you need a customized element to act as the trigger button for a TriggerField.</p>
<p>Note that when using this option, it is the developer's responsibility to ensure correct sizing, positioning
and appearance of the trigger.  Defaults to:</p>
<pre><code>{tag: "img", src: Ext.BLANK_IMAGE_URL, cls: "x-form-trigger " + this.triggerClass}</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="wrapFocusClass" Type="String">
                  <Summary><![CDATA[<tt>x-trigger-wrap-focus</tt>.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="autoSize">
                  <Parameters />
                </Method>
                <Method Name="onTriggerClick">
                  <Summary><![CDATA[The function that should handle the trigger's click event.  This method does nothing by default
until overridden by an implementing function.  See Ext.form.ComboBox and Ext.form.DateField for
sample implementations.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="EventObject" />
                  </Parameters>
                </Method>
                <Method Name="setEditable">
                  <Summary><![CDATA[Allow or prevent the user from directly editing the field text.  If false is passed,
the user will only be able to modify the field using the trigger.  This method
is the runtime equivalent of setting the 'editable' config option at config time.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Boolean">
                      <Summary><![CDATA[True to allow the user to directly edit the field text]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TwinTriggerField" FullName="Ext.form.TwinTriggerField" Package="form" DefinedIn="widgets\form\TriggerField.js" Extends="Ext.form.TriggerField">
              <Summary><![CDATA[TwinTriggerField is not a public partial class to be used directly.  It is meant as an abstract base class
to be extended by an implementing class.  For an example of implementing this class, see the custom
SearchField implementation here:
<a href="http://extjs.com/deploy/ext/examples/form/custom.html">http://extjs.com/deploy/ext/examples/form/custom.html</a>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="trigger1Class" Type="String">
                  <Summary><![CDATA[An additional CSS class used to style the trigger button.  The trigger will always get the
class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="trigger2Class" Type="String">
                  <Summary><![CDATA[An additional CSS class used to style the trigger button.  The trigger will always get the
class <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="triggerConfig" Type="Mixed">
                  <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} config object specifying the structure of the trigger elements
for this Field. (Optional).</p>
<p>Specify this when you need a customized element to contain the two trigger elements for this Field.
Each trigger element must be marked by the CSS class <tt>x-form-trigger</tt> (also see
<tt>{@link #trigger1Class}</tt> and <tt>{@link #trigger2Class}</tt>).</p>
<p>Note that when using this option, it is the developer's responsibility to ensure correct sizing,
positioning and appearance of the triggers.</p>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="onTrigger1Click">
                  <Summary><![CDATA[The function that should handle the trigger's click event.  This method does nothing by default
until overridden by an implementing function. See {@link Ext.form.TriggerField#onTriggerClick}
for additional information.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="EventObject" />
                  </Parameters>
                </Method>
                <Method Name="onTrigger2Click">
                  <Summary><![CDATA[The function that should handle the trigger's click event.  This method does nothing by default
until overridden by an implementing function. See {@link Ext.form.TriggerField#onTriggerClick}
for additional information.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="EventObject" />
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="VTypes" FullName="Ext.form.VTypes" Package="form" DefinedIn="widgets\form\VTypes.js" Singleton="true">
              <Summary><![CDATA[<p>This is a singleton object which contains a set of commonly used field validation functions.
The validations provided are basic and intended to be easily customizable and extended.</p>
<p>To add custom VTypes specify the <code>{@link Ext.form.TextField#vtype vtype}</code> validation
test function, and optionally specify any corresponding error text to display and any keystroke
filtering mask to apply. For example:</p>
<pre><code>
// custom Vtype for vtype:'time'
var timeTest = /^([1-9]|1[0-9]):([0-5][0-9])(\s[a|p]m)$/i;
Ext.apply(Ext.form.VTypes, {
    //  vtype validation function
    time: function (val, field) {
        return timeTest.test(val);
    },
    // vtype Text property: The error text to display when the validation function returns false
    timeText: 'Not a valid time.  Must be in the format "12:34 PM".',
    // vtype Mask property: The keystroke filter mask
    timeMask: /[\d\s:amp]/i
});
</code></pre>
Another example:
<pre><code>
// custom Vtype for vtype:'IPAddress'
Ext.apply(Ext.form.VTypes, {
    IPAddress:  function (v) {
        return /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(v);
    },
    IPAddressText: 'Must be a numeric IP address',
    IPAddressMask: /[\d\.]/i
});
</code></pre>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="'alpha'">
                  <Summary><![CDATA[The function used to validate alpha values]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The value]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[true if the RegExp test passed, and false if not.]]></Summary>
                  </Return>
                </Method>
                <Method Name="'alphanum'">
                  <Summary><![CDATA[The function used to validate alphanumeric values]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The value]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[true if the RegExp test passed, and false if not.]]></Summary>
                  </Return>
                </Method>
                <Method Name="'email'">
                  <Summary><![CDATA[The function used to validate email addresses.  Note that this is a very basic validation -- complete
validation per the email RFC specifications is very complex and beyond the scope of this class, although
this function can be overridden if a more comprehensive validation scheme is desired.  See the validation
section of the <a href="http://en.wikipedia.org/wiki/E-mail_address">Wikipedia article on email addresses</a>
for additional information.  This implementation is intended to validate the following emails:<tt>
'barney@example.de', 'barney.rubble@example.com', 'barney-rubble@example.coop', 'barney+rubble@example.com'
</tt>.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The email address]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[true if the RegExp test passed, and false if not.]]></Summary>
                  </Return>
                </Method>
                <Method Name="'url'">
                  <Summary><![CDATA[The function used to validate URLs]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The URL]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[true if the RegExp test passed, and false if not.]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="grid" Path="grid" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="AbstractSelectionModel" FullName="Ext.grid.AbstractSelectionModel" Package="grid" DefinedIn="widgets\grid\AbstractSelectionModel.js" Extends="Ext.util.Observable" Subclasses="Ext.grid.CellSelectionModel,Ext.grid.RowSelectionModel">
              <Summary><![CDATA[Abstract base class for grid SelectionModels.  It provides the interface that should be
implemented by descendant classes.  This class should not be directly instantiated.]]></Summary>
              <ConfigOptions />
              <Properties>
                <Property Name="grid">
                  <Summary><![CDATA[The GridPanel for which this SelectionModel is handling selection. Read-only.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="isLocked">
                  <Summary><![CDATA[Returns true if the selections are locked.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="lock">
                  <Summary><![CDATA[    init : function (grid) {
        this.grid = grid;
        this.initEvents();
    },

    /**
Locks the selections.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="unlock">
                  <Summary><![CDATA[Unlocks the selections.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="BooleanColumn" FullName="Ext.grid.BooleanColumn" Package="grid" DefinedIn="widgets\grid\Column.js" Extends="Ext.grid.Column">
              <Summary><![CDATA[<p>A Column definition class which renders boolean data fields.  See the {@link Ext.grid.Column#xtype xtype}
config option of {@link Ext.grid.Column} for more details.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="falseText" Type="String">
                  <Summary><![CDATA[The string returned by the renderer when the column value is falsey (but not undefined) (defaults to
<tt>'false'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="trueText" Type="String">
                  <Summary><![CDATA[The string returned by the renderer when the column value is not falsey (defaults to <tt>'true'</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="undefinedText" Type="String">
                  <Summary><![CDATA[The string returned by the renderer when the column value is undefined (defaults to <tt>'&#160;'</tt>).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="CellSelectionModel" FullName="Ext.grid.CellSelectionModel" Package="grid" DefinedIn="widgets\grid\CellSelectionModel.js" Extends="Ext.grid.AbstractSelectionModel">
              <Summary><![CDATA[This class provides the basic implementation for <i>single</i> <b>cell</b> selection in a grid.
The object stored as the selection contains the following properties:
<div class="mdetail-params"><ul>
<li><b>cell</b> : see {@link #getSelectedCell}
<li><b>record</b> : Ext.data.record The {@link Ext.data.Record Record}
which provides the data for the row containing the selection</li>
</ul></div>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The object containing the configuration of this model.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clearSelections">
                  <Summary><![CDATA[If anything is selected, clears all selections and fires the selectionchange event.]]></Summary>
                  <Parameters>
                    <Param Name="preventNotify" Type="Boolean">
                      <Summary><![CDATA[<tt>true</tt> to prevent the gridview from
being notified about the change.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getSelectedCell">
                  <Summary><![CDATA[    initEvents : function () {
        this.grid.on("cellmousedown", this.handleMouseDown, this);
        this.grid.getGridEl().on(Ext.EventManager.useKeydown ? "keydown" : "keypress", this.handleKeyDown, this);
        var view = this.grid.view;
        view.on("refresh", this.onViewChange, this);
        view.on("rowupdated", this.onRowUpdated, this);
        view.on("beforerowremoved", this.clearSelections, this);
        view.on("beforerowsinserted", this.clearSelections, this);
        if (this.grid.isEditor) {
            this.grid.on("beforeedit", this.beforeEdit,  this);
        }
    },

	//private
    beforeEdit : function (e) {
        this.select(e.row, e.column, false, true, e.record);
    },

	//private
    onRowUpdated : function (v, index, r) {
        if (this.selection && this.selection.record == r) {
            v.onCellSelect(index, this.selection.cell[1]);
        }
    },

	//private
    onViewChange : function () {
        this.clearSelections(true);
    },

	/**
Returns an array containing the row and column indexes of the currently selected cell
(e.g., [0, 0]), or null if none selected. The array has elements:
<div class="mdetail-params"><ul>
<li><b>rowIndex</b> : Number<p class="sub-desc">The index of the selected row</p></li>
<li><b>cellIndex</b> : Number<p class="sub-desc">The index of the selected cell.
Due to possible column reordering, the cellIndex should <b>not</b> be used as an
index into the Record's data. Instead, use the cellIndex to determine the <i>name</i>
of the selected cell and use the field name to retrieve the data value from the record:<pre><code>
// get name
var fieldName = grid.getColumnModel().getDataIndex(cellIndex);
// get data value based on name
var data = record.get(fieldName);
</code></pre></p></li>
</ul></div>]]></Summary>
                  <Parameters />
                  <Return Type="Array">
                    <Summary><![CDATA[An array containing the row and column indexes of the selected cell, or null if none selected.]]></Summary>
                  </Return>
                </Method>
                <Method Name="hasSelection">
                  <Summary><![CDATA[Returns <tt>true</tt> if there is a selection.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="select">
                  <Summary><![CDATA[    handleMouseDown : function (g, row, cell, e) {
        if (e.button !== 0 || this.isLocked()) {
            return;
        }
        this.select(row, cell);
    },

    /**
Selects a cell.  Before selecting a cell, fires the
{@link #beforecellselect} event.  If this check is satisfied the cell
will be selected and followed up by  firing the {@link #cellselect} and
{@link #selectionchange} events.]]></Summary>
                  <Parameters>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The index of the row to select]]></Summary>
                    </Param>
                    <Param Name="colIndex" Type="Number">
                      <Summary><![CDATA[The index of the column to select]]></Summary>
                    </Param>
                    <Param Name="preventViewNotify" Type="Boolean" Optional="true">
                      <Summary><![CDATA[Specify <tt>true</tt> to
prevent notifying the view (disables updating the selected appearance)]]></Summary>
                    </Param>
                    <Param Name="preventFocus" Type="Boolean" Optional="true">
                      <Summary><![CDATA[Whether to prevent the cell at
the specified rowIndex / colIndex from being focused.]]></Summary>
                    </Param>
                    <Param Name="r" Type="Ext.data.Record" Optional="true">
                      <Summary><![CDATA[The record to select]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforecellselect">
                  <Summary><![CDATA[Fires before a cell is selected, return false to cancel the selection.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="SelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The selected row index]]></Summary>
                    </Param>
                    <Param Name="colIndex" Type="Number">
                      <Summary><![CDATA[The selected cell index]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="cellselect">
                  <Summary><![CDATA[Fires when a cell is selected.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="SelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The selected row index]]></Summary>
                    </Param>
                    <Param Name="colIndex" Type="Number">
                      <Summary><![CDATA[The selected cell index]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="selectionchange">
                  <Summary><![CDATA[Fires when the active selection changes. <div class="mdetail-params"><ul> <li><b>cell</b> : see {@link #getSelectedCell} <li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record Record} which provides the data for the row containing the selection</p></li> </ul></div>.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="SelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="selection" Type="Object">
                      <Summary><![CDATA[null for no selection or an object with two properties]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="CheckboxSelectionModel" FullName="Ext.grid.CheckboxSelectionModel" Package="grid" DefinedIn="widgets\grid\CheckboxSelectionModel.js" Extends="Ext.grid.RowSelectionModel">
              <Summary><![CDATA[A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="checkOnly" Type="Boolean">
                  <Summary><![CDATA[checkbox column (defaults to <tt>false</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="header" Type="String">
                  <Summary><![CDATA[checkbox column.  Defaults to:<pre><code>
'&lt;div class="x-grid3-hd-checker">&#38;#160;&lt;/div>'</tt>
</code></pre>
The default CSS class of <tt>'x-grid3-hd-checker'</tt> displays a checkbox in the header
and provides support for automatic check all/none behavior on header click. This string
can be replaced by any valid HTML fragment, including a simple text string (e.g.,
<tt>'Select Rows'</tt>), but the automatic check all/none behavior will only work if the
<tt>'x-grid3-hd-checker'</tt> class is supplied.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortable" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="width" Type="Number" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Column" FullName="Ext.grid.Column" Package="grid" DefinedIn="widgets\grid\Column.js" Subclasses="Ext.grid.BooleanColumn,Ext.grid.DateColumn,Ext.grid.NumberColumn,Ext.grid.TemplateColumn">
              <Summary><![CDATA[<p>This class encapsulates column configuration data to be used in the initialization of a
{@link Ext.grid.ColumnModel ColumnModel}.</p>
<p>While subclasses are provided to render data in different ways, this class renders a passed
data field unchanged and is usually used for textual columns.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="align" Type="String" />
                <ConfigOption Name="css" Type="String">
                  <Summary><![CDATA[(excluding headers). Defaults to undefined.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dataIndex" Type="String">
                  <Summary><![CDATA[grid's {@link Ext.data.Store}'s {@link Ext.data.Record} definition from
which to draw the column's value.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="editable" Type="Boolean">
                  <Summary><![CDATA[<tt>{@link #editor}</tt>.  Set to <tt>false</tt> to initially disable editing on this column.
The initial configuration may be dynamically altered using
{@link Ext.grid.ColumnModel}.{@link Ext.grid.ColumnModel#setEditable setEditable()}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="editor" Type="Ext.form.Field">
                  <Summary><![CDATA[if editing is supported by the grid. See <tt>{@link #editable}</tt> also.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="emptyGroupText" Type="String">
                  <Summary><![CDATA[may be used to specify the text to display when there is an empty group value. Defaults to the
{@link Ext.grid.GroupingView}.{@link Ext.grid.GroupingView#emptyGroupText emptyGroupText}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="fixed" Type="Boolean" />
                <ConfigOption Name="groupable" Type="Boolean">
                  <Summary><![CDATA[may be used to disable the header menu item to group by the column selected. Defaults to <tt>true</tt>,
which enables the header menu group option.  Set to <tt>false</tt> to disable (but still show) the
group option in the header menu for the column. See also <code>{@link #groupName}</code>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="groupName" Type="String">
                  <Summary><![CDATA[may be used to specify the text with which to prefix the group field value in the group header line.
See also {@link #groupRenderer} and
{@link Ext.grid.GroupingView}.{@link Ext.grid.GroupingView#showGroupName showGroupName}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="groupRenderer" Type="Function">
                  <Summary><![CDATA[may be used to specify the function used to format the grouping field value for display in the group
{@link #groupName header}.  If a <tt><b>groupRenderer</b></tt> is not specified, the configured
<tt><b>{@link #renderer}</b></tt> will be called; if a <tt><b>{@link #renderer}</b></tt> is also not specified
the new value of the group field will be used.</p>
<p>The called function (either the <tt><b>groupRenderer</b></tt> or <tt><b>{@link #renderer}</b></tt>) will be
passed the following parameters:
<div class="mdetail-params"><ul>
<li><b>v</b> : Object<p class="sub-desc">The new value of the group field.</p></li>
<li><b>unused</b> : undefined<p class="sub-desc">Unused parameter.</p></li>
<li><b>r</b> : Ext.data.Record<p class="sub-desc">The Record providing the data
for the row which caused group change.</p></li>
<li><b>rowIndex</b> : Number<p class="sub-desc">The row index of the Record which caused group change.</p></li>
<li><b>colIndex</b> : Number<p class="sub-desc">The column index of the group field.</p></li>
<li><b>ds</b> : Ext.data.Store<p class="sub-desc">The Store which is providing the data Model.</p></li>
</ul></div></p>
<p>The function should return a string value.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="header" Type="String">
                  <Summary><![CDATA[(html tags are accepted) to display in the Grid view.  <b>Note</b>: to
have a clickable header with no text displayed use <tt>'&#160;'</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hidden" Type="Boolean">
                  <Summary><![CDATA[Optional. <tt>true</tt> to initially hide this column. Defaults to <tt>false</tt>.
A hidden column {@link Ext.grid.GridPanel#enableColumnHide may be shown via the header row menu}.
If a column is never to be shown, simply do not include this column in the Column Model at all.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideable" Type="Boolean">
                  <Summary><![CDATA[(defaults to true).  To disallow column hiding globally for all columns in the grid, use
{@link Ext.grid.GridPanel#enableColumnHide} instead.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="id" Type="String">
                  <Summary><![CDATA[ordinal position.) The <tt>id</tt> is used to create a CSS <b>class</b> name which is applied to all
table cells (including headers) in that column (in this context the <tt>id</tt> does not need to be
unique). The class name takes the form of <pre>x-grid3-td-<b>id</b></pre>
Header cells will also receive this class name, but will also have the class <pre>x-grid3-hd</pre>
So, to target header cells, use CSS selectors such as:<pre>.x-grid3-hd-row .x-grid3-td-<b>id</b></pre>
The {@link Ext.grid.GridPanel#autoExpandColumn} grid config option references the column via this
unique identifier.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="isColumn" Type="Boolean">
                  <Summary><![CDATA[Used by ColumnModel setConfig method to avoid reprocessing a Column
if <code>isColumn</code> is not set ColumnModel will recreate a new Ext.grid.Column
Defaults to true.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="menuDisabled" Type="Boolean" />
                <ConfigOption Name="renderer" Type="Mixed">
                  <Summary><![CDATA[<p>For an alternative to specifying a renderer see <code>{@link #xtype}</code></p>
<p>Optional. A renderer is an 'interceptor' method which can be used transform data (value,
appearance, etc.) before it is rendered). This may be specified in either of three ways:
<div class="mdetail-params"><ul>
<li>A renderer function used to return HTML markup for a cell given the cell's data value.</li>
<li>A string which references a property name of the {@link Ext.util.Format} class which
provides a renderer function.</li>
<li>An object specifying both the renderer function, and its execution scope (<tt><b>this</b></tt>
reference) e.g.:<pre style="margin-left:1.2em"><code>
{
    fn: this.gridRenderer,
    scope: this
}
</code></pre></li></ul></div>
If not specified, the default renderer uses the raw data value.</p>
<p>For information about the renderer function (passed parameters, etc.), see
{@link Ext.grid.ColumnModel#setRenderer}. An example of specifying renderer function inline:</p><pre><code>
var companyColumn = {
   header: 'Company Name',
   dataIndex: 'company',
   renderer: function (value, metaData, record, rowIndex, colIndex, store) {
      // provide the logic depending on business rules
      // name of your own choosing to manipulate the cell depending upon
      // the data in the underlying Record object.
      if (value == 'whatever') {
          //metaData.css : String : A CSS class name to add to the TD element of the cell.
          //metaData.attr : String : An html attribute definition string to apply to
          //                         the data container element within the table
          //                         cell (e.g. 'style="color:red;"').
          metaData.css = 'name-of-css-class-you-will-define';
      }
      return value;
   }
}
</code></pre>
See also {@link #scope}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="resizable" Type="Boolean" />
                <ConfigOption Name="scope" Type="Object">
                  <Summary><![CDATA[renderer.  Defaults to the Column configuration object.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortable" Type="Boolean">
                  <Summary><![CDATA[Defaults to the value of the <code>{@link Ext.grid.ColumnModel#defaultSortable}</code> property.
Whether local/remote sorting is used is specified in <code>{@link Ext.data.Store#remoteSort}</code>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tooltip" Type="String">
                  <Summary><![CDATA[are enabled, this value will be used as the text of the quick tip, otherwise it will be set as the
header's HTML title attribute. Defaults to ''.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="width" Type="Number">
                  <Summary><![CDATA[Optional. The initial width in pixels of the column.
The width of each column can also be affected if any of the following are configured:
<div class="mdetail-params"><ul>
<li>{@link Ext.grid.GridPanel}.<tt>{@link Ext.grid.GridPanel#autoExpandColumn autoExpandColumn}</tt></li>
<li>{@link Ext.grid.GridView}.<tt>{@link Ext.grid.GridView#forceFit forceFit}</tt>
<div class="sub-desc">
<p>By specifying <tt>forceFit:true</tt>, {@link #fixed non-fixed width} columns will be
re-proportioned (based on the relative initial widths) to fill the width of the grid so
that no horizontal scrollbar is shown.</p>
</div></li>
<li>{@link Ext.grid.GridView}.<tt>{@link Ext.grid.GridView#autoFill autoFill}</tt></li>
<li>{@link Ext.grid.GridPanel}.<tt>{@link Ext.grid.GridPanel#minColumnWidth minColumnWidth}</tt></li>
<br><p><b>Note</b>: when the width of each column is determined, a space on the right side
is reserved for the vertical scrollbar.  The
{@link Ext.grid.GridView}.<tt>{@link Ext.grid.GridView#scrollOffset scrollOffset}</tt>
can be modified to reduce or eliminate the reserved offset.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="xtype" Type="String">
                  <Summary><![CDATA[type which is preconfigured with an appropriate <code>{@link #renderer}</code> to be easily
configured into a ColumnModel. The predefined {@link Ext.grid.Column} subclass types are:
<div class="mdetail-params"><ul>
<li><b><tt>gridcolumn</tt></b> : {@link Ext.grid.Column} (<b>Default</b>)<p class="sub-desc"></p></li>
<li><b><tt>booleancolumn</tt></b> : {@link Ext.grid.BooleanColumn}<p class="sub-desc"></p></li>
<li><b><tt>numbercolumn</tt></b> : {@link Ext.grid.NumberColumn}<p class="sub-desc"></p></li>
<li><b><tt>datecolumn</tt></b> : {@link Ext.grid.DateColumn}<p class="sub-desc"></p></li>
<li><b><tt>templatecolumn</tt></b> : {@link Ext.grid.TemplateColumn}<p class="sub-desc"></p></li>
</ul></div>
<p>Configuration properties for the specified <code>xtype</code> may be specified with
the Column configuration properties, for example:</p>
<pre><code>
var grid = new Ext.grid.GridPanel({
    ...
    columns: [{
        header: 'Last Updated',
        dataIndex: 'lastChange',
        width: 85,
        sortable: true,
        //renderer: Ext.util.Format.dateRenderer('m/d/Y'),
        xtype: 'datecolumn', // use xtype instead of renderer
        format: 'M/d/Y' // configuration property for {@link Ext.grid.DateColumn}
    }, {
        ...
    }]
});
</code></pre>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="renderer">
                  <Summary><![CDATA[Optional. A function which returns displayable data when passed the following parameters:
<div class="mdetail-params"><ul>
<li><b>value</b> : Object<p class="sub-desc">The data value for the cell.</p></li>
<li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
<li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
<li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container
element <i>within</i> the table cell (e.g. 'style="color:red;"').</p></li></ul></p></li>
<li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record} from which the data was
extracted.</p></li>
<li><b>rowIndex</b> : Number<p class="sub-desc">Row index</p></li>
<li><b>colIndex</b> : Number<p class="sub-desc">Column index</p></li>
<li><b>store</b> : Ext.data.Store<p class="sub-desc">The {@link Ext.data.Store} object from which the Record
was extracted.</p></li>
</ul></div>]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getCellEditor">
                  <Summary><![CDATA[Returns the {@link Ext.Editor editor} defined for this column that was created to wrap the {@link Ext.form.Field Field}
used to edit the cell.]]></Summary>
                  <Parameters>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The row index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.Editor" />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="ColumnModel" FullName="Ext.grid.ColumnModel" Package="grid" DefinedIn="widgets\grid\ColumnModel.js" Extends="Ext.util.Observable" Subclasses="Ext.grid.PropertyColumnModel">
              <Summary><![CDATA[<p>After the data has been read into the client side cache (<b>{@link Ext.data.Store Store}</b>),
the ColumnModel is used to configure how and what parts of that data will be displayed in the
vertical slices (columns) of the grid. The Ext.grid.ColumnModel Class is the default implementation
of a ColumnModel used by implentations of {@link Ext.grid.GridPanel GridPanel}.</p>
<p>Data is mapped into the store's records and then indexed into the ColumnModel using the
<tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt>:</p>
<pre><code>
{data source} == mapping ==> {data store} == <b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b> ==> {ColumnModel}
</code></pre>
<p>Each {@link Ext.grid.Column Column} in the grid's ColumnModel is configured with a
<tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt> to specify how the data within
each record in the store is indexed into the ColumnModel.</p>
<p>There are two ways to initialize the ColumnModel class:</p>
<p><u>Initialization Method 1: an Array</u></p>
<pre><code>
 var colModel = new Ext.grid.ColumnModel([
   { header: "Ticker", width: 60, sortable: true},
   { header: "Company Name", width: 150, sortable: true, id: 'company'},
   { header: "Market Cap.", width: 100, sortable: true},
   { header: "$ Sales", width: 100, sortable: true, renderer: money},
   { header: "Employees", width: 100, sortable: true, resizable: false}
 ]);
 </code></pre>
<p>The ColumnModel may be initialized with an Array of {@link Ext.grid.Column} column configuration
objects to define the initial layout / display of the columns in the Grid. The order of each
{@link Ext.grid.Column} column configuration object within the specified Array defines the initial
order of the column display.  A Column's display may be initially hidden using the
<tt>{@link Ext.grid.Column#hidden hidden}</tt></b> config property (and then shown using the column
header menu).  Field's that are not included in the ColumnModel will not be displayable at all.</p>
<p>How each column in the grid correlates (maps) to the {@link Ext.data.Record} field in the
{@link Ext.data.Store Store} the column draws its data from is configured through the
<b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b>.  If the
<b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b> is not explicitly defined (as shown in the
example above) it will use the column configuration's index in the Array as the index.</p>
<p>See <b><tt>{@link Ext.grid.Column}</tt></b> for additional configuration options for each column.</p>
<p><u>Initialization Method 2: an Object</u></p>
<p>In order to use configuration options from <tt>Ext.grid.ColumnModel</tt>, an Object may be used to
initialize the ColumnModel.  The column configuration Array will be specified in the <tt><b>{@link #columns}</b></tt>
config property. The <tt><b>{@link #defaults}</b></tt> config property can be used to apply defaults
for all columns, e.g.:</p><pre><code>
 var colModel = new Ext.grid.ColumnModel({
    columns: [
       { header: "Ticker", width: 60, menuDisabled: false},
       { header: "Company Name", width: 150, id: 'company'},
       { header: "Market Cap."},
       { header: "$ Sales", renderer: money},
       { header: "Employees", resizable: false}
    ],
    defaults: {
        sortable: true,
        menuDisabled: true,
        width: 100
    },
    listeners: {
       {@link #hiddenchange}: function (cm, colIndex, hidden) {
            saveConfig(colIndex, hidden);
        }
    }
});
 </code></pre>
<p>In both examples above, the ability to apply a CSS class to all cells in a column (including the
header) is demonstrated through the use of the <b><tt>{@link Ext.grid.Column#id id}</tt></b> config
option. This column could be styled by including the following css:</p><pre><code>
 //add this css *after* the core css is loaded
.x-grid3-td-company {
    color: red; // entire column will have red font
}
// modify the header row only, adding an icon to the column header
.x-grid3-hd-company {
    background: transparent
        url(../../resources/images/icons/silk/building.png)
        no-repeat 3px 3px ! important;
        padding-left:20px;
}
 </code></pre>
Note that the "Company Name" column could be specified as the
<b><tt>{@link Ext.grid.GridPanel}.{@link Ext.grid.GridPanel#autoExpandColumn autoExpandColumn}</tt></b>.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Mixed">
                    <Summary><![CDATA[Specify either an Array of {@link Ext.grid.Column} configuration objects or specify a configuration Object (see introductory section discussion utilizing Initialization Method 2 above).]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="columns" Type="Array">
                  <Summary><![CDATA[<b>{@link Ext.grid.Column}</b> are the options which may appear in the object literal for each
individual column definition.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaults" Type="Object">
                  <Summary><![CDATA[configuration options to all <tt><b>{@link #columns}</b></tt>.  Configuration options specified with
individual {@link Ext.grid.Column column} configs will supersede these <tt><b>{@link #defaults}</b></tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultSortable" Type="Boolean">
                  <Summary><![CDATA[sortable specified (defaults to <tt>false</tt>).  This property shall preferably be configured
through the <tt><b>{@link #defaults}</b></tt> config property.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultWidth" Type="Number">
                  <Summary><![CDATA[specified (defaults to <tt>100</tt>).  This property shall preferably be configured through the
<tt><b>{@link #defaults}</b></tt> config property.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="config">
                  <Summary><![CDATA[An Array of {@link Ext.grid.Column Column definition} objects representing the configuration
of this ColumnModel.  See {@link Ext.grid.Column} for the configuration properties that may
be specified.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="destroy">
                  <Summary><![CDATA[Destroys this column model by purging any event listeners, and removing any editors.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="findColumnIndex">
                  <Summary><![CDATA[Finds the index of the first matching column for the given dataIndex.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="String">
                      <Summary><![CDATA[The dataIndex to find]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The column index, or -1 if no match was found]]></Summary>
                  </Return>
                </Method>
                <Method Name="getCellEditor">
                  <Summary><![CDATA[Returns the editor defined for the cell/column.]]></Summary>
                  <Parameters>
                    <Param Name="colIndex" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The row index
the {@link Ext.form.Field Field} used to edit the cell.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.Editor} The {@link Ext.Editor Editor">
                    <Summary><![CDATA[that was created to wrap]]></Summary>
                  </Return>
                </Method>
                <Method Name="getColumnById">
                  <Summary><![CDATA[Returns the column for a specified id.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The column id]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[the column]]></Summary>
                  </Return>
                </Method>
                <Method Name="getColumnCount">
                  <Summary><![CDATA[Returns the number of columns.]]></Summary>
                  <Parameters>
                    <Param Name="visibleOnly" Type="Boolean">
                      <Summary><![CDATA[Optional. Pass as true to only include visible columns.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number" />
                </Method>
                <Method Name="getColumnHeader">
                  <Summary><![CDATA[Returns the header for the specified column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String" />
                </Method>
                <Method Name="getColumnId">
                  <Summary><![CDATA[Returns the id of the column at the specified index.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[the id]]></Summary>
                  </Return>
                </Method>
                <Method Name="getColumnsBy">
                  <Summary><![CDATA[Returns the column configs that return true by the passed function that is called
with (columnConfig, index)
<pre><code>
// returns an array of column config objects for all hidden columns
var columns = grid.getColumnModel().getColumnsBy(function (c) {
  return c.hidden;
});
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function" />
                    <Param Name="scope" Type="Object" Optional="true" />
                  </Parameters>
                  <Return Type="Array">
                    <Summary><![CDATA[result]]></Summary>
                  </Return>
                </Method>
                <Method Name="getColumnTooltip">
                  <Summary><![CDATA[Returns the tooltip for the specified column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String" />
                </Method>
                <Method Name="getColumnWidth">
                  <Summary><![CDATA[Returns the width for the specified column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number" />
                </Method>
                <Method Name="getDataIndex">
                  <Summary><![CDATA[Returns the dataIndex for the specified column.
<pre><code>
// Get field name for the column
var fieldName = grid.getColumnModel().getDataIndex(columnIndex);
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The column's dataIndex]]></Summary>
                  </Return>
                </Method>
                <Method Name="getIndexById">
                  <Summary><![CDATA[Returns the index for a specified column id.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The column id]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[the index, or -1 if not found]]></Summary>
                  </Return>
                </Method>
                <Method Name="getRenderer">
                  <Summary><![CDATA[Returns the rendering (formatting) function defined for the column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Function} The function used to render the cell. See {@link #setRenderer">
                    <Summary><![CDATA[.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getTotalWidth">
                  <Summary><![CDATA[Returns the total width of all columns.]]></Summary>
                  <Parameters>
                    <Param Name="includeHidden" Type="Boolean">
                      <Summary><![CDATA[True to include hidden column widths]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number" />
                </Method>
                <Method Name="isCellEditable">
                  <Summary><![CDATA[Returns true if the cell is editable.
<pre><code>
var store = new Ext.data.Store({...});
var colModel = new Ext.grid.ColumnModel({
  columns: [...],
  isCellEditable: function (col, row) {
    var record = store.getAt(row);
    if (record.get('readonly')) { // replace with your condition
      return false;
    }
    return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);
  }
});
var grid = new Ext.grid.GridPanel({
  store: store,
  colModel: colModel,
  ...
});
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="colIndex" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The row index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isFixed">
                  <Summary><![CDATA[Returns true if the column width cannot be changed]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="isHidden">
                  <Summary><![CDATA[Returns true if the column is hidden.]]></Summary>
                  <Parameters>
                    <Param Name="colIndex" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isMenuDisabled">
                  <Summary><![CDATA[Returns true if the specified column menu is disabled.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isResizable">
                  <Summary><![CDATA[Returns true if the column can be resized]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isSortable">
                  <Summary><![CDATA[Returns true if the specified column is sortable.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="moveColumn">
                  <Summary><![CDATA[Moves a column from one position to another.]]></Summary>
                  <Parameters>
                    <Param Name="oldIndex" Type="Number">
                      <Summary><![CDATA[The index of the column to move.]]></Summary>
                    </Param>
                    <Param Name="newIndex" Type="Number">
                      <Summary><![CDATA[The position at which to reinsert the coolumn.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setColumnHeader">
                  <Summary><![CDATA[Sets the header for a column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="header" Type="String">
                      <Summary><![CDATA[The new header]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setColumnTooltip">
                  <Summary><![CDATA[Sets the tooltip for a column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="tooltip" Type="String">
                      <Summary><![CDATA[The new tooltip]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setColumnWidth">
                  <Summary><![CDATA[Sets the width for a column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="width" Type="Number">
                      <Summary><![CDATA[The new width]]></Summary>
                    </Param>
                    <Param Name="suppressEvent" Type="Boolean">
                      <Summary><![CDATA[True to suppress firing the <code>{@link #widthchange}</code>
event. Defaults to false.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setConfig">
                  <Summary><![CDATA[<p>Reconfigures this column model according to the passed Array of column definition objects.
For a description of the individual properties of a column definition object, see the
<a href="#Ext.grid.ColumnModel-configs">Config Options</a>.</p>
<p>Causes the {@link #configchange} event to be fired. A {@link Ext.grid.GridPanel GridPanel}
using this ColumnModel will listen for this event and refresh its UI automatically.</p>]]></Summary>
                  <Parameters>
                    <Param Name="config" Type="Array">
                      <Summary><![CDATA[Array of Column definition objects.]]></Summary>
                    </Param>
                    <Param Name="initial" Type="Boolean">
                      <Summary><![CDATA[Specify <tt>true</tt> to bypass cleanup which deletes the <tt>totalWidth</tt>
and destroys existing editors.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setDataIndex">
                  <Summary><![CDATA[Sets the dataIndex for a column.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="dataIndex" Type="String">
                      <Summary><![CDATA[The new dataIndex]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setEditable">
                  <Summary><![CDATA[Sets if a column is editable.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="editable" Type="Boolean">
                      <Summary><![CDATA[True if the column is editable]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setEditor">
                  <Summary><![CDATA[Sets the editor for a column and destroys the prior editor.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="editor" Type="Object">
                      <Summary><![CDATA[The editor object]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setHidden">
                  <Summary><![CDATA[Sets if a column is hidden.
<pre><code>
myGrid.getColumnModel().setHidden(0, true); // hide column 0 (0 = the first column).
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="colIndex" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="hidden" Type="Boolean">
                      <Summary><![CDATA[True if the column is hidden]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setRenderer">
                  <Summary><![CDATA[Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some
default formatting functions.]]></Summary>
                  <Parameters>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to use to process the cell's raw data
to return HTML markup for the grid view. The render function is called with
the following parameters:<ul>
<li><b>value</b> : Object<p class="sub-desc">The data value for the cell.</p></li>
<li><b>metadata</b> : Object<p class="sub-desc">An object in which you may set the following attributes:<ul>
<li><b>css</b> : String<p class="sub-desc">A CSS class name to add to the cell's TD element.</p></li>
<li><b>attr</b> : String<p class="sub-desc">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell
(e.g. 'style="color:red;"').</p></li></ul></p></li>
<li><b>record</b> : Ext.data.record<p class="sub-desc">The {@link Ext.data.Record} from which the data was extracted.</p></li>
<li><b>rowIndex</b> : Number<p class="sub-desc">Row index</p></li>
<li><b>colIndex</b> : Number<p class="sub-desc">Column index</p></li>
<li><b>store</b> : Ext.data.Store<p class="sub-desc">The {@link Ext.data.Store} object from which the Record was extracted.</p></li></ul>]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="columnmoved">
                  <Summary><![CDATA[Fires when a column is moved.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="ColumnModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="oldIndex" Type="Number" />
                    <Param Name="newIndex" Type="Number" />
                  </Parameters>
                </Event>
                <Event Name="configchange">
                  <Summary><![CDATA[Fires when the configuration is changed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="ColumnModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="headerchange">
                  <Summary><![CDATA[Fires when the text of a header changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="ColumnModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="columnIndex" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="newText" Type="String">
                      <Summary><![CDATA[The new header text]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="hiddenchange">
                  <Summary><![CDATA[Fires when a column is hidden or "unhidden".]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="ColumnModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="columnIndex" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="hidden" Type="Boolean">
                      <Summary><![CDATA[true if hidden, false otherwise]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="widthchange">
                  <Summary><![CDATA[Fires when the width of a column is programmaticially changed using <code>{@link #setColumnWidth}</code>. Note internal resizing suppresses the event from firing. See also {@link Ext.grid.GridPanel}.<code>{@link #columnresize}</code>.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="ColumnModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="columnIndex" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                    <Param Name="newWidth" Type="Number">
                      <Summary><![CDATA[The new width]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DateColumn" FullName="Ext.grid.DateColumn" Package="grid" DefinedIn="widgets\grid\Column.js" Extends="Ext.grid.Column">
              <Summary><![CDATA[<p>A Column definition class which renders a passed date according to the default locale, or a configured
{@link #format}. See the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column}
for more details.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="format" Type="String">
                  <Summary><![CDATA[A formatting string as used by {@link Date#format} to format a Date for this Column
(defaults to <tt>'m/d/Y'</tt>).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="EditorGridPanel" FullName="Ext.grid.EditorGridPanel" Package="grid" DefinedIn="widgets\grid\EditorGrid.js" Xtype="editorgrid" Extends="Ext.grid.GridPanel" Subclasses="Ext.grid.PropertyGrid">
              <Summary><![CDATA[<p>This class extends the {@link Ext.grid.GridPanel GridPanel Class} to provide cell editing
on selected {@link Ext.grid.Column columns}. The editable columns are specified by providing
an {@link Ext.grid.ColumnModel#editor editor} in the {@link Ext.grid.Column column configuration}.</p>
<p>Editability of columns may be controlled programatically by inserting an implementation
of {@link Ext.grid.ColumnModel#isCellEditable isCellEditable} into the
{@link Ext.grid.ColumnModel ColumnModel}.</p>
<p>Editing is performed on the value of the <i>field</i> specified by the column's
<tt>{@link Ext.grid.ColumnModel#dataIndex dataIndex}</tt> in the backing {@link Ext.data.Store Store}
(so if you are using a {@link Ext.grid.ColumnModel#setRenderer renderer} in order to display
transformed data, this must be accounted for).</p>
<p>If a value-to-description mapping is used to render a column, then a {@link Ext.form.Field#ComboBox ComboBox}
which uses the same {@link Ext.form.Field#valueField value}-to-{@link Ext.form.Field#displayFieldField description}
mapping would be an appropriate editor.</p>
If there is a more complex mismatch between the visible data in the grid, and the editable data in
the {@link Edt.data.Store Store}, then code to transform the data both before and after editing can be
injected using the {@link #beforeedit} and {@link #afteredit} events.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The config object]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoEncode" Type="Boolean">
                  <Summary><![CDATA[True to automatically HTML encode and decode values pre and post edit (defaults to false)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="clicksToEdit" Type="Number">
                  <Summary><![CDATA[<p>The number of clicks on a cell required to display the cell's editor (defaults to 2).</p>
<p>Setting this option to 'auto' means that mousedown <i>on the selected cell</i> starts
editing that cell.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="forceValidation" Type="Boolean">
                  <Summary><![CDATA[True to force validation even if the value is unmodified (defaults to false)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="selModel" Type="Object">
                  <Summary><![CDATA[the grid (defaults to {@link Ext.grid.CellSelectionModel} if not specified).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="trackMouseOver" Type="Boolean" />
              </ConfigOptions>
              <Properties>
                <Property Name="activeEditor">
                  <Summary><![CDATA[The currently active editor or null]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="startEditing">
                  <Summary><![CDATA[Starts editing the specified for the specified row/column]]></Summary>
                  <Parameters>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="colIndex" Type="Number" />
                  </Parameters>
                </Method>
                <Method Name="stopEditing">
                  <Summary><![CDATA[Stops any active editing]]></Summary>
                  <Parameters>
                    <Param Name="cancel" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to cancel any changes]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="afteredit">
                  <Summary><![CDATA[Fires after a cell is edited. The edit event object has the following properties <br /> <ul style="padding:5px;padding-left:16px;"> <li>grid - This grid</li> <li>record - The record being edited</li> <li>field - The field name being edited</li> <li>value - The value being set</li> <li>originalValue - The original value for the field, before the edit.</li> <li>row - The grid row index</li> <li>column - The grid column index</li> </ul> <pre><code> grid.on('afteredit', afterEdit, this ); function afterEdit(e) { // execute an XHR to send/commit data to the server, in callback do (if successful): e.record.commit(); }; </code></pre>.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[An edit event (see above for description)]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeedit">
                  <Summary><![CDATA[Fires before cell editing is triggered. The edit event object has the following properties <br /> <ul style="padding:5px;padding-left:16px;"> <li>grid - This grid</li> <li>record - The record being edited</li> <li>field - The field name being edited</li> <li>value - The value for the field being edited.</li> <li>row - The grid row index</li> <li>column - The grid column index</li> <li>cancel - Set this to true to cancel the edit or return false from your handler.</li> </ul>.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[An edit event (see above for description)]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="validateedit">
                  <Summary><![CDATA[Fires after a cell is edited, but before the value is set in the record. Return false to cancel the change. The edit event object has the following properties <br /> <ul style="padding:5px;padding-left:16px;"> <li>grid - This grid</li> <li>record - The record being edited</li> <li>field - The field name being edited</li> <li>value - The value being set</li> <li>originalValue - The original value for the field, before the edit.</li> <li>row - The grid row index</li> <li>column - The grid column index</li> <li>cancel - Set this to true to cancel the edit or return false from your handler.</li> </ul> Usage example showing how to remove the red triangle (dirty record indicator) from some records (not all). By observing the grid's validateedit event, it can be cancelled if the edit occurs on a targeted row (for example) and then setting the field's new value in the Record directly: <pre><code> grid.on('validateedit', function (e) { var myTargetRow = 6; if (e.row == myTargetRow) { e.cancel = true; e.record.data[e.field] = e.value; } }); </code></pre>.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Object">
                      <Summary><![CDATA[An edit event (see above for description)]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="GridDragZone" FullName="Ext.grid.GridDragZone" Package="grid" DefinedIn="widgets\grid\GridDD.js" Extends="Ext.dd.DragZone">
              <Summary><![CDATA[<p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the
template methods of DragZone to enable dragging of the selected rows of a GridPanel.</p>
<p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's template method implementations of
{@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop}</p> are able
to process the {@link #getDragData data} which is provided.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="afterRepair">
                  <Summary><![CDATA[An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight
the selected rows to show that they have not been dragged.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getDragData">
                  <Summary><![CDATA[<p>The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.</p>
<p>This data is available for processing in the {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} methods of a cooperating {@link Ext.dd.DropZone DropZone}.</p>
<p>The data object contains the following properties:<ul>
<li><b>grid</b> : Ext.Grid.GridPanel<div class="sub-desc">The GridPanel from which the data is being dragged.</div></li>
<li><b>ddel</b> : htmlElement<div class="sub-desc">An htmlElement which provides the "picture" of the data being dragged.</div></li>
<li><b>rowIndex</b> : Number<div class="sub-desc">The index of the row which receieved the mousedown gesture which triggered the drag.</div></li>
<li><b>selections</b> : Array<div class="sub-desc">An Array of the selected Records which are being dragged from the GridPanel.</div></li>
</ul></p>]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getRepairXY">
                  <Summary><![CDATA[<p>An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.</p>
<p>Called before a repair of an invalid drop to get the XY to animate to.</p>]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="EventObject">
                      <Summary><![CDATA[The mouse up event]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Array">
                    <Summary><![CDATA[The xy location (e.g. [100, 200])]]></Summary>
                  </Return>
                </Method>
                <Method Name="onInitDrag">
                  <Summary><![CDATA[<p>The provided implementation of the onInitDrag method. Sets the <tt>innerHTML</tt> of the drag proxy which provides the "picture"
of the data being dragged.</p>
<p>The <tt>innerHTML</tt> data is found by calling the owning GridPanel's {@link Ext.grid.GridPanel#getDragDropText getDragDropText}.</p>]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="GridPanel" FullName="Ext.grid.GridPanel" Package="grid" DefinedIn="widgets\grid\GridPanel.js" Xtype="grid" Extends="Ext.Panel" Subclasses="Ext.grid.EditorGridPanel">
              <Summary><![CDATA[<p>This class represents the primary interface of a component based grid control to represent data
in a tabular format of rows and columns. The GridPanel is composed of the following:</p>
<div class="mdetail-params"><ul>
<li><b>{@link Ext.data.Store Store}</b> : The Model holding the data records (rows)
<div class="sub-desc"></div></li>
<li><b>{@link Ext.grid.ColumnModel Column model}</b> : Column makeup
<div class="sub-desc"></div></li>
<li><b>{@link Ext.grid.GridView View}</b> : Encapsulates the user interface
<div class="sub-desc"></div></li>
<li><b>{@link Ext.grid.AbstractSelectionModel selection model}</b> : Selection behavior
<div class="sub-desc"></div></li>
</ul></div>
<p>Example usage:</p>
<pre><code>
var grid = new Ext.grid.GridPanel({
   {@link #store}: new {@link Ext.data.Store}({
       {@link Ext.data.Store#autoDestroy autoDestroy}: true,
       {@link Ext.data.Store#reader reader}: reader,
       {@link Ext.data.Store#data data}: xg.dummyData
    }),
   {@link #colModel}: new {@link Ext.grid.ColumnModel}({
       {@link Ext.grid.ColumnModel#defaults defaults}: {
            width: 120,
            sortable: true
        },
       {@link Ext.grid.ColumnModel#columns columns}: [
           {id: 'company', header: 'Company', width: 200, sortable: true, dataIndex: 'company'},
           {header: 'Price', renderer: Ext.util.Format.usMoney, dataIndex: 'price'},
           {header: 'Change', dataIndex: 'change'},
           {header: '% Change', dataIndex: 'pctChange'},
            // instead of specifying renderer: Ext.util.Format.dateRenderer('m/d/Y') use xtype
           {
                header: 'Last Updated', width: 135, dataIndex: 'lastChange',
                xtype: 'datecolumn', format: 'M d, Y'
            }
        ],
    }),
   {@link #viewConfig}: {
       {@link Ext.grid.GridView#forceFit forceFit}: true,

//      Return CSS class to apply to rows depending upon data values
       {@link Ext.grid.GridView#getRowClass getRowClass}: function (record, index) {
            var c = record.{@link Ext.data.Record#get get}('change');
            if (c < 0) {
                return 'price-fall';
            } else if (c > 0) {
                return 'price-rise';
            }
        }
    },
   {@link #sm}: new Ext.grid.RowSelectionModel({singleSelect:true}),
    width: 600,
    height: 300,
    frame: true,
    title: 'Framed with Row Selection and Horizontal Scrolling',
    iconCls: 'icon-grid'
});
</code></pre>
<p><b><u>Notes:</u></b></p>
<div class="mdetail-params"><ul>
<li>Although this class inherits many configuration options from base classes, some of them
(such as autoScroll, autoWidth, layout, items, etc) are not used by this class, and will
have no effect.</li>
<li>A grid <b>requires</b> a width in which to scroll its columns, and a height in which to
scroll its rows. These dimensions can either be set explicitly through the
<tt>{@link Ext.BoxComponent#height height}</tt> and <tt>{@link Ext.BoxComponent#width width}</tt>
configuration options or implicitly set by using the grid as a child item of a
{@link Ext.Container Container} which will have a {@link Ext.Container#layout layout manager}
provide the sizing of its child items (for example the Container of the Grid may specify
<tt>{@link Ext.Container#layout layout}:'fit'</tt>).</li>
<li>To access the data in a Grid, it is necessary to use the data model encapsulated
by the {@link #store Store}. See the {@link #cellclick} event for more details.</li>
</ul></div>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The config object]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoExpandColumn" Type="String">
                  <Summary><![CDATA[<p>The <tt>{@link Ext.grid.Column#id id}</tt> of a {@link Ext.grid.Column column} in
this grid that should expand to fill unused space. This value specified here can not
be <tt>0</tt>.</p>
<br><p><b>Note</b>: If the Grid's {@link Ext.grid.GridView view} is configured with
<tt>{@link Ext.grid.GridView#forceFit forceFit}=true</tt> the <tt>autoExpandColumn</tt>
is ignored. See {@link Ext.grid.Column}.<tt>{@link Ext.grid.Column#width width}</tt>
for additional details.</p>
<p>See <tt>{@link #autoExpandMax}</tt> and <tt>{@link #autoExpandMin}</tt> also.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoExpandMax" Type="Number">
                  <Summary><![CDATA[can have (if enabled). Defaults to <tt>1000</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoExpandMin" Type="Number">
                  <Summary><![CDATA[can have (if enabled). Defaults to <tt>50</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="columnLines" Type="Boolean">
                  <Summary><![CDATA[Default is <tt>false</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="cm" Type="Object" />
                <ConfigOption Name="colModel" Type="Object" />
                <ConfigOption Name="columns" Type="Array">
                  <Summary><![CDATA[{@link Ext.grid.ColumnModel}.  The ColumnModel may be explicitly created via the
<tt>{@link #colModel}</tt> configuration property.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="ddGroup" Type="String" />
                <ConfigOption Name="ddText" Type="String">
                  <Summary><![CDATA[Configures the text in the drag proxy.  Defaults to:
<pre><code>
ddText : '{0} selected row{1}'
</code></pre>
<tt>{0}</tt> is replaced with the number of selected rows.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="deferRowRender" Type="Boolean">
                  <Summary><![CDATA[<p>This allows the GridPanel to be initially rendered empty, with the expensive update of the row
structure deferred so that layouts with GridPanels appear more quickly.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="disableSelection" Type="Boolean">
                  <Summary><![CDATA[<p>Ignored if a {@link #selModel SelectionModel} is specified.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableColumnResize" Type="Boolean" />
                <ConfigOption Name="enableColumnHide" Type="Boolean">
                  <Summary><![CDATA[Defaults to <tt>true</tt> to enable {@link Ext.grid.Column#hidden hiding of columns}
with the {@link #enableHdMenu header menu}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableColumnMove" Type="Boolean">
                  <Summary><![CDATA[to turn off column reordering via drag drop.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableDragDrop" Type="Boolean">
                  <Summary><![CDATA[<p>Setting this to <b><tt>true</tt></b> causes this GridPanel's {@link #getView GridView} to
create an instance of {@link Ext.grid.GridDragZone}. <b>Note</b>: this is available only <b>after</b>
the Grid has been rendered as the GridView's <tt>{@link Ext.grid.GridView#dragZone dragZone}</tt>
property.</p>
<p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's implementations of
{@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},
{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} are able
to process the {@link Ext.grid.GridDragZone#getDragData data} which is provided.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableHdMenu" Type="Boolean" />
                <ConfigOption Name="hideHeaders" Type="Boolean" />
                <ConfigOption Name="loadMask" Type="Object">
                  <Summary><![CDATA[loading. Defaults to <code>false</code>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxHeight" Type="Number" />
                <ConfigOption Name="minColumnWidth" Type="Number" />
                <ConfigOption Name="sm" Type="Object" />
                <ConfigOption Name="selModel" Type="Object">
                  <Summary><![CDATA[the selection model for the grid (defaults to {@link Ext.grid.RowSelectionModel} if not specified).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="store" Type="Ext.data.Store" />
                <ConfigOption Name="stripeRows" Type="Boolean">
                  <Summary><![CDATA[<p>This causes the CSS class <tt><b>x-grid3-row-alt</b></tt> to be added to alternate rows of
the grid. A default CSS rule is provided which sets a background colour, but you can override this
with a rule which either overrides the <b>background-color</b> style using the '!important'
modifier, or which uses a CSS selector of higher specificity.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="trackMouseOver" Type="Boolean">
                  <Summary><![CDATA[for GridPanel, but <tt>false</tt> for EditorGridPanel.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="stateEvents" Type="Array">
                  <Summary><![CDATA[An array of events that, when fired, should trigger this component to save its state.
Defaults to:<pre><code>
stateEvents: ['columnmove', 'columnresize', 'sortchange']
</code></pre>
<p>These can be any types of events supported by this component, including browser or
custom events (e.g., <tt>['click', 'customerchange']</tt>).</p>
<p>See {@link Ext.Component#stateful} for an explanation of saving and restoring
Component state.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="view" Type="Object">
                  <Summary><![CDATA[before a call to {@link Ext.Component#render render()}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="viewConfig" Type="Object">
                  <Summary><![CDATA[the config options available for {@link Ext.grid.GridView} can be specified here. This option
is ignored if <tt>{@link #view}</tt> is specified.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="activeItem" Type="String/Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoDestroy" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoLoad" Type="Object/String/Function">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoWidth" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="bufferResize" Type="Boolean/Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultType" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaults" Type="Object">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideBorders" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="items" Type="Mixed">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="layout" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="layoutConfig" Type="Object">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="monitorResize" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="reconfigure">
                  <Summary><![CDATA[<p>Reconfigures the grid to use a different Store and Column Model
and fires the 'reconfigure' event. The View will be bound to the new
objects and refreshed.</p>
<p>Be aware that upon reconfiguring a GridPanel, certain existing settings <i>may</i> become
invalidated. For example the configured {@link #autoExpandColumn} may no longer exist in the
new ColumnModel. Also, an existing {@link Ext.PagingToolbar PagingToolbar} will still be bound
to the old Store, and will need rebinding. Any {@link #plugins} might also need reconfiguring
with the new data.</p>]]></Summary>
                  <Parameters>
                    <Param Name="store" Type="Ext.data.Store">
                      <Summary><![CDATA[The new {@link Ext.data.Store} object]]></Summary>
                    </Param>
                    <Param Name="colModel" Type="Ext.grid.ColumnModel">
                      <Summary><![CDATA[The new {@link Ext.grid.ColumnModel} object]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getGridEl">
                  <Summary><![CDATA[Returns the grid's underlying element.]]></Summary>
                  <Parameters />
                  <Return Type="Element">
                    <Summary><![CDATA[The element]]></Summary>
                  </Return>
                </Method>
                <Method Name="getSelectionModel">
                  <Summary><![CDATA[Returns the grid's selection model configured by the <code>{@link #selModel}</code>
configuration option. If no selection model was configured, this will create
and return a {@link Ext.grid.RowSelectionModel RowSelectionModel}.]]></Summary>
                  <Parameters />
                  <Return Type="SelectionModel" />
                </Method>
                <Method Name="getStore">
                  <Summary><![CDATA[Returns the grid's data store.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.data.Store">
                    <Summary><![CDATA[The store]]></Summary>
                  </Return>
                </Method>
                <Method Name="getColumnModel">
                  <Summary><![CDATA[Returns the grid's ColumnModel.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.grid.ColumnModel">
                    <Summary><![CDATA[The column model]]></Summary>
                  </Return>
                </Method>
                <Method Name="getView">
                  <Summary><![CDATA[Returns the grid's GridView object.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.grid.GridView">
                    <Summary><![CDATA[The grid view]]></Summary>
                  </Return>
                </Method>
                <Method Name="getDragDropText">
                  <Summary><![CDATA[Called to get grid's drag proxy text, by default returns this.ddText.]]></Summary>
                  <Parameters />
                  <Return Type="String">
                    <Summary><![CDATA[The text]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="click">
                  <Summary><![CDATA[The raw click event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="dblclick">
                  <Summary><![CDATA[The raw dblclick event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="contextmenu">
                  <Summary><![CDATA[The raw contextmenu event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="mousedown">
                  <Summary><![CDATA[The raw mousedown event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="mouseup">
                  <Summary><![CDATA[The raw mouseup event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="mouseover">
                  <Summary><![CDATA[The raw mouseover event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="mouseout">
                  <Summary><![CDATA[The raw mouseout event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="keypress">
                  <Summary><![CDATA[The raw keypress event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="keydown">
                  <Summary><![CDATA[The raw keydown event for the entire grid.]]></Summary>
                  <Parameters>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="cellmousedown">
                  <Summary><![CDATA[Fires before a cell is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="rowmousedown">
                  <Summary><![CDATA[Fires before a row is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="headermousedown">
                  <Summary><![CDATA[Fires before a header is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="cellclick">
                  <Summary><![CDATA[Fires when a cell is clicked. The data for the cell is drawn from the {@link Ext.data.Record Record} for this row. To access the data in the listener function use the following technique: <pre><code> function (grid, rowIndex, columnIndex, e) { var record = grid.getStore().getAt(rowIndex); // Get the Record var fieldName = grid.getColumnModel().getDataIndex(columnIndex); // Get field name var data = record.get(fieldName); } </code></pre>.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="celldblclick">
                  <Summary><![CDATA[Fires when a cell is double clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="rowclick">
                  <Summary><![CDATA[Fires when a row is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="rowdblclick">
                  <Summary><![CDATA[Fires when a row is double clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="headerclick">
                  <Summary><![CDATA[Fires when a header is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="headerdblclick">
                  <Summary><![CDATA[Fires when a header cell is double clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="rowcontextmenu">
                  <Summary><![CDATA[Fires when a row is right clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="cellcontextmenu">
                  <Summary><![CDATA[Fires when a cell is right clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="cellIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="headercontextmenu">
                  <Summary><![CDATA[Fires when a header is right clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="bodyscroll">
                  <Summary><![CDATA[Fires when the body element is scrolled.]]></Summary>
                  <Parameters>
                    <Param Name="scrollLeft" Type="Number" />
                    <Param Name="scrollTop" Type="Number" />
                  </Parameters>
                </Event>
                <Event Name="columnresize">
                  <Summary><![CDATA[Fires when the user resizes a column.]]></Summary>
                  <Parameters>
                    <Param Name="columnIndex" Type="Number" />
                    <Param Name="newSize" Type="Number" />
                  </Parameters>
                </Event>
                <Event Name="columnmove">
                  <Summary><![CDATA[Fires when the user moves a column.]]></Summary>
                  <Parameters>
                    <Param Name="oldIndex" Type="Number" />
                    <Param Name="newIndex" Type="Number" />
                  </Parameters>
                </Event>
                <Event Name="sortchange">
                  <Summary><![CDATA[Fires when the grid's store sort changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="sortInfo" Type="Object">
                      <Summary><![CDATA[An object with the keys field and direction]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="reconfigure">
                  <Summary><![CDATA[Fires when the grid is reconfigured with a new store and/or column model.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Grid">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="store" Type="Ext.data.Store">
                      <Summary><![CDATA[The new store]]></Summary>
                    </Param>
                    <Param Name="colModel" Type="Ext.grid.ColumnModel">
                      <Summary><![CDATA[The new column model]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="GridView" FullName="Ext.grid.GridView" Package="grid" DefinedIn="widgets\grid\GridView.js" Extends="Ext.util.Observable" Subclasses="Ext.grid.GroupingView">
              <Summary><![CDATA[<p>This class encapsulates the user interface of an {@link Ext.grid.GridPanel}.
Methods of this class may be used to access user interface elements to enable
special display effects. Do not change the DOM structure of the user interface.</p>
<p>This class does not provide ways to manipulate the underlying data. The data
model of a Grid is held in an {@link Ext.data.Store}.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="autoFill" Type="Boolean">
                  <Summary><![CDATA[Defaults to <tt>false</tt>.  Specify <tt>true</tt> to have the column widths re-proportioned
when the grid is <b>initially rendered</b>.  The
{@link Ext.grid.Column#width initially configured width}</tt> of each column will be adjusted
to fit the grid width and prevent horizontal scrolling. If columns are later resized (manually
or programmatically), the other columns in the grid will <b>not</b> be resized to fit the grid width.
See <tt>{@link #forceFit}</tt> also.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="cellSelector" Type="String" />
                <ConfigOption Name="cellSelectorDepth" Type="Number" />
                <ConfigOption Name="columnsText" Type="String" />
                <ConfigOption Name="deferEmptyText" Type="Boolean">
                  <Summary><![CDATA[first load (defaults to <tt>true</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="emptyText" Type="String">
                  <Summary><![CDATA[are available (defaults to ''). This value will be used to update the <tt>{@link #mainBody}</tt>:
    <pre><code>
    this.mainBody.update('&lt;div class="x-grid-empty">' + this.emptyText + '&lt;/div>');
    </code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableRowBody" Type="Boolean">
                  <Summary><![CDATA[that spans beneath the data row.  Use the {@link #getRowClass} method's rowParams config to customize the row body.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="forceFit" Type="Boolean">
                  <Summary><![CDATA[Defaults to <tt>false</tt>.  Specify <tt>true</tt> to have the column widths re-proportioned
at <b>all times</b>.  The {@link Ext.grid.Column#width initially configured width}</tt> of each
column will be adjusted to fit the grid width and prevent horizontal scrolling. If columns are
later resized (manually or programmatically), the other columns in the grid <b>will</b> be resized
to fit the grid width. See <tt>{@link #autoFill}</tt> also.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="headersDisabled" Type="Boolean">
                  <Summary><![CDATA[Use the {@link Ext.grid.ColumnModel ColumnModel} <tt>{@link Ext.grid.ColumnModel#menuDisabled menuDisabled}</tt>
config to disable the <i>menu</i> for individual columns.  While this config is true the
following will be disabled:<div class="mdetail-params"><ul>
<li>clicking on header to sort</li>
<li>the trigger to reveal the menu.</li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="rowSelector" Type="String" />
                <ConfigOption Name="rowSelectorDepth" Type="Number" />
                <ConfigOption Name="scrollOffset" Type="Number">
                  <Summary><![CDATA[(defaults to <tt>undefined</tt>). If an explicit value isn't specified, this will be automatically
calculated.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="selectedRowClass" Type="String">
                  <Summary><![CDATA[example overriding the default styling:
    <pre><code>
    .x-grid3-row-selected {background-color: yellow;}
    </code></pre>
Note that this only controls the row, and will not do anything for the text inside it.  To style inner
facets (like text) use something like:
    <pre><code>
    .x-grid3-row-selected .x-grid3-cell-inner {
        color: #FFCC00;
    }
    </code></pre>
@type String]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortAscText" Type="String" />
                <ConfigOption Name="sortClasses" Type="Array" />
                <ConfigOption Name="sortDescText" Type="String" />
              </ConfigOptions>
              <Properties>
                <Property Name="dragZone" Type="Ext.grid.GridDragZone">
                  <Summary><![CDATA[<p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations
of the template methods of DragZone to enable dragging of the selected rows of a GridPanel.
See {@link Ext.grid.GridDragZone} for details.</p>
<p>This will <b>only</b> be present:<div class="mdetail-params"><ul>
<li><i>if</i> the owning GridPanel was configured with {@link Ext.grid.GridPanel#enableDragDrop enableDragDrop}: <tt>true</tt>.</li>
<li><i>after</i> the owning GridPanel has been rendered.</li>
</ul></div>]]></Summary>
                </Property>
                <Property Name="mainBody">
                  <Summary><![CDATA[<i>Read-only</i>. The GridView's body Element which encapsulates all rows in the Grid.
This {@link Ext.Element Element} is only available after the GridPanel has been rendered.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="findCellIndex">
                  <Summary><![CDATA[<p>Return the index of the grid column which contains the passed HTMLElement.</p>
See also {@link #findRowIndex}]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HTMLElement">
                      <Summary><![CDATA[The target element]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The column index, or <b>false</b> if the target element is not within a row of this GridView.]]></Summary>
                  </Return>
                </Method>
                <Method Name="findRow">
                  <Summary><![CDATA[Return the HtmlElement representing the grid row which contains the passed element.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HTMLElement">
                      <Summary><![CDATA[The target HTMLElement]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="HTMLElement">
                    <Summary><![CDATA[The row element, or null if the target element is not within a row of this GridView.]]></Summary>
                  </Return>
                </Method>
                <Method Name="findRowIndex">
                  <Summary><![CDATA[<p>Return the index of the grid row which contains the passed HTMLElement.</p>
See also {@link #findCellIndex}]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="HTMLElement">
                      <Summary><![CDATA[The target HTMLElement]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The row index, or <b>false</b> if the target element is not within a row of this GridView.]]></Summary>
                  </Return>
                </Method>
                <Method Name="focusCell">
                  <Summary><![CDATA[Focuses the specified cell.]]></Summary>
                  <Parameters>
                    <Param Name="row" Type="Number">
                      <Summary><![CDATA[The row index]]></Summary>
                    </Param>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="focusRow">
                  <Summary><![CDATA[Focuses the specified row.]]></Summary>
                  <Parameters>
                    <Param Name="row" Type="Number">
                      <Summary><![CDATA[The row index]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getCell">
                  <Summary><![CDATA[Returns the grid's <tt>&lt;td></tt> HtmlElement at the specified coordinates.]]></Summary>
                  <Parameters>
                    <Param Name="row" Type="Number">
                      <Summary><![CDATA[The row index in which to find the cell.]]></Summary>
                    </Param>
                    <Param Name="col" Type="Number">
                      <Summary><![CDATA[The column index of the cell.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="HtmlElement">
                    <Summary><![CDATA[The td at the specified coordinates.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getHeaderCell">
                  <Summary><![CDATA[Return the <tt>&lt;td></tt> HtmlElement which represents the Grid's header cell for the specified column index.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The column index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="HtmlElement">
                    <Summary><![CDATA[The td element.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getRow">
                  <Summary><![CDATA[Return the <tt>&lt;div></tt> HtmlElement which represents a Grid row for the specified index.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The row index]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="HtmlElement">
                    <Summary><![CDATA[The div element.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getRowClass">
                  <Summary><![CDATA[Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom
parameters to the row template for the current row to customize how it is rendered using the <b>rowParams</b>
parameter.  This function should return the CSS class name (or empty string '' for none) that will be added
to the row's wrapping div.  To apply multiple class names, simply return them space-delimited within the string
(e.g., 'my-class another-class'). Example usage:
    <pre><code>
viewConfig: {
    forceFit: true,
    showPreview: true, // custom property
    enableRowBody: true, // required to create a second, full-width row to show expanded Record data
    getRowClass: function (record, rowIndex, rp, ds) { // rp = rowParams
        if (this.showPreview) {
            rp.body = '&lt;p>'+record.data.excerpt+'&lt;/p>';
            return 'x-grid3-row-expanded';
        }
        return 'x-grid3-row-collapsed';
    }
},     
    </code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="record" Type="Record">
                      <Summary><![CDATA[The {@link Ext.data.Record} corresponding to the current row.]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The row index.]]></Summary>
                    </Param>
                    <Param Name="rowParams" Type="Object">
                      <Summary><![CDATA[A config object that is passed to the row template during rendering that allows
customization of various aspects of a grid row.
<p>If {@link #enableRowBody} is configured <b><tt></tt>true</b>, then the following properties may be set
by this function, and will be used to render a full-width expansion row below each grid row:</p>
<ul>
<li><code>body</code> : String <div class="sub-desc">An HTML fragment to be used as the expansion row's body content (defaults to '').</div></li>
<li><code>bodyStyle</code> : String <div class="sub-desc">A CSS style specification that will be applied to the expansion row's &lt;tr> element. (defaults to '').</div></li>
</ul>
The following property will be passed in, and may be appended to:
<ul>
<li><code>tstyle</code> : String <div class="sub-desc">A CSS style specification that willl be applied to the &lt;table> element which encapsulates
both the standard grid row, and any expansion row.</div></li>
</ul>]]></Summary>
                    </Param>
                    <Param Name="store" Type="Store">
                      <Summary><![CDATA[The {@link Ext.data.Store} this grid is bound to]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[a CSS class name to add to the row.]]></Summary>
                  </Return>
                </Method>
                <Method Name="refresh">
                  <Summary><![CDATA[Refreshs the grid UI]]></Summary>
                  <Parameters>
                    <Param Name="headersToo" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to also refresh the headers]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="scrollToTop">
                  <Summary><![CDATA[Scrolls the grid to the top]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events>
                <Event Name="beforerefresh">
                  <Summary><![CDATA[Internal UI Event. Fired before the view is refreshed.]]></Summary>
                  <Parameters>
                    <Param Name="view" Type="Ext.grid.GridView" />
                  </Parameters>
                </Event>
                <Event Name="beforerowremoved">
                  <Summary><![CDATA[Internal UI Event. Fired before a row is removed.]]></Summary>
                  <Parameters>
                    <Param Name="view" Type="Ext.grid.GridView" />
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The index of the row to be removed.]]></Summary>
                    </Param>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The Record to be removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforerowsinserted">
                  <Summary><![CDATA[Internal UI Event. Fired before rows are inserted.]]></Summary>
                  <Parameters>
                    <Param Name="view" Type="Ext.grid.GridView" />
                    <Param Name="firstRow" Type="Number">
                      <Summary><![CDATA[The index of the first row to be inserted.]]></Summary>
                    </Param>
                    <Param Name="lastRow" Type="Number">
                      <Summary><![CDATA[The index of the last row to be inserted.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="refresh">
                  <Summary><![CDATA[Internal UI Event. Fired after the GridView's body has been refreshed.]]></Summary>
                  <Parameters>
                    <Param Name="view" Type="Ext.grid.GridView" />
                  </Parameters>
                </Event>
                <Event Name="rowremoved">
                  <Summary><![CDATA[Internal UI Event. Fired after a row is removed.]]></Summary>
                  <Parameters>
                    <Param Name="view" Type="Ext.grid.GridView" />
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The index of the row that was removed.]]></Summary>
                    </Param>
                    <Param Name="record" Type="Ext.data.Record">
                      <Summary><![CDATA[The Record that was removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="rowsinserted">
                  <Summary><![CDATA[Internal UI Event. Fired after rows are inserted.]]></Summary>
                  <Parameters>
                    <Param Name="view" Type="Ext.grid.GridView" />
                    <Param Name="firstRow" Type="Number">
                      <Summary><![CDATA[The index of the first inserted.]]></Summary>
                    </Param>
                    <Param Name="lastRow" Type="Number">
                      <Summary><![CDATA[The index of the last row inserted.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="rowupdated">
                  <Summary><![CDATA[Internal UI Event. Fired after a row has been updated.]]></Summary>
                  <Parameters>
                    <Param Name="view" Type="Ext.grid.GridView" />
                    <Param Name="firstRow" Type="Number">
                      <Summary><![CDATA[The index of the row updated.]]></Summary>
                    </Param>
                    <Param Name="record" Type="Ext.data.record">
                      <Summary><![CDATA[The Record backing the row updated.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="GroupingView" FullName="Ext.grid.GroupingView" Package="grid" DefinedIn="widgets\grid\GroupingView.js" Extends="Ext.grid.GridView">
              <Summary><![CDATA[Adds the ability for single level grouping to the grid. A {@link Ext.data.GroupingStore GroupingStore}
must be used to enable grouping.  Some grouping characteristics may also be configured at the
{@link Ext.grid.Column Column level}<div class="mdetail-params"><ul>
<li><code>{@link Ext.grid.Column#emptyGroupText emptyGroupText}</li>
<li><code>{@link Ext.grid.Column#groupable groupable}</li>
<li><code>{@link Ext.grid.Column#groupName groupName}</li>
<li><code>{@link Ext.grid.Column#groupRender groupRender}</li>
</ul></div>
<p>Sample usage:</p>
<pre><code>
var grid = new Ext.grid.GridPanel({
    // A groupingStore is required for a GroupingView
    store: new {@link Ext.data.GroupingStore}({
        autoDestroy: true,
        reader: reader,
        data: xg.dummyData,
        sortInfo: {field: 'company', direction: 'ASC'},
       {@link Ext.data.GroupingStore#groupOnSort groupOnSort}: true,
       {@link Ext.data.GroupingStore#remoteGroup remoteGroup}: true,
       {@link Ext.data.GroupingStore#groupField groupField}: 'industry'
    }),
    colModel: new {@link Ext.grid.ColumnModel}({
        columns:[
           {id:'company',header: 'Company', width: 60, dataIndex: 'company'},
            // {@link Ext.grid.Column#groupable groupable}, {@link Ext.grid.Column#groupName groupName}, {@link Ext.grid.Column#groupRender groupRender} are also configurable at column level
           {header: 'Price', renderer: Ext.util.Format.usMoney, dataIndex: 'price', {@link Ext.grid.Column#groupable groupable}: false},
           {header: 'Change', dataIndex: 'change', renderer: Ext.util.Format.usMoney},
           {header: 'Industry', dataIndex: 'industry'},
           {header: 'Last Updated', renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}
        ],
        defaults: {
            sortable: true,
            menuDisabled: false,
            width: 20
        }
    }),

    view: new Ext.grid.GroupingView({
       {@link Ext.grid.GridView#forceFit forceFit}: true,
        // custom grouping text template to display the number of items per group
       {@link #groupTextTpl}: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
    }),

    frame:true,
    width: 700,
    height: 450,
    collapsible: true,
    animCollapse: false,
    title: 'Grouping Example',
    iconCls: 'icon-grid',
    renderTo: document.body
});
</code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="emptyGroupText" Type="String">
                  <Summary><![CDATA[May also be specified per column, see {@link Ext.grid.Column}.{@link Ext.grid.Column#emptyGroupText emptyGroupText}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableGrouping" Type="Boolean" />
                <ConfigOption Name="enableGroupingMenu" Type="Boolean" />
                <ConfigOption Name="enableNoGroups" Type="Boolean" />
                <ConfigOption Name="groupByText" Type="String">
                  <Summary><![CDATA[(defaults to 'Group By This Field').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="groupMode" Type="String">
                  <Summary><![CDATA[raw value, <tt>'display'</tt> constructs the id using the rendered value. Defaults to <tt>'value'</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="groupRenderer" Type="Function">
                  <Summary><![CDATA[each column.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="groupTextTpl" Type="String">
                  <Summary><![CDATA[This is used to format an object which contains the following properties:
<div class="mdetail-params"><ul>
<li><b>group</b> : String<p class="sub-desc">The <i>rendered</i> value of the group field.
By default this is the unchanged value of the group field. If a <tt><b>{@link Ext.grid.Column#groupRenderer groupRenderer}</b></tt>
is specified, it is the result of a call to that function.</p></li>
<li><b>gvalue</b> : Object<p class="sub-desc">The <i>raw</i> value of the group field.</p></li>
<li><b>text</b> : String<p class="sub-desc">The configured header (as described in <tt>{@link #showGroupName})</tt>
if <tt>{@link #showGroupName}</tt> is <tt>true</tt>) plus the <i>rendered</i> group field value.</p></li>
<li><b>groupId</b> : String<p class="sub-desc">A unique, generated ID which is applied to the
View Element which contains the group.</p></li>
<li><b>startRow</b> : Number<p class="sub-desc">The row index of the Record which caused group change.</p></li>
<li><b>rs</b> : Array<p class="sub-desc">Contains a single element: The Record providing the data
for the row which caused group change.</p></li>
<li><b>cls</b> : String<p class="sub-desc">The generated class name string to apply to the group header Element.</p></li>
<li><b>style</b> : String<p class="sub-desc">The inline style rules to apply to the group header Element.</p></li>
</ul></div></p>
See {@link Ext.XTemplate} for information on how to format data using a template. Possible usage:<pre><code>
var grid = new Ext.grid.GridPanel({
    ...
    view: new Ext.grid.GroupingView({
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Items" : "Item"]})'
    }),
});
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideGroupedColumn" Type="Boolean" />
                <ConfigOption Name="ignoreAdd" Type="Boolean" />
                <ConfigOption Name="showGroupName" Type="Boolean">
                  <Summary><![CDATA[in the group header line.  The prefix will consist of the <tt><b>{@link Ext.grid.Column#groupName groupName}</b></tt>
(or the configured <tt><b>{@link Ext.grid.Column#header header}</b></tt> if not provided) configured in the
{@link Ext.grid.Column} for each set of grouped rows (defaults to <tt>true</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="showGroupsText" Type="String">
                  <Summary><![CDATA[(defaults to 'Show in Groups').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="startCollapsed" Type="Boolean" />
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="collapseAllGroups">
                  <Summary><![CDATA[Collapses all grouped rows.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="expandAllGroups">
                  <Summary><![CDATA[Expands all grouped rows.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getGroupId">
                  <Summary><![CDATA[Dynamically tries to determine the groupId of a specific value]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String" />
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The group id]]></Summary>
                  </Return>
                </Method>
                <Method Name="toggleAllGroups">
                  <Summary><![CDATA[Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.]]></Summary>
                  <Parameters>
                    <Param Name="expanded" Type="Boolean" Optional="true" />
                  </Parameters>
                </Method>
                <Method Name="toggleGroup">
                  <Summary><![CDATA[Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.]]></Summary>
                  <Parameters>
                    <Param Name="groupId" Type="String">
                      <Summary><![CDATA[The groupId assigned to the group (see getGroupId)]]></Summary>
                    </Param>
                    <Param Name="expanded" Type="Boolean" Optional="true" />
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="NumberColumn" FullName="Ext.grid.NumberColumn" Package="grid" DefinedIn="widgets\grid\Column.js" Extends="Ext.grid.Column">
              <Summary><![CDATA[<p>A Column definition class which renders a numeric data field according to a {@link #format} string.  See the
{@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more details.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="format" Type="String">
                  <Summary><![CDATA[A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column
(defaults to <tt>'0,000.00'</tt>).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="PropertyColumnModel" FullName="Ext.grid.PropertyColumnModel" Package="grid" DefinedIn="widgets\grid\PropertyGrid.js" Extends="Ext.grid.ColumnModel">
              <Summary><![CDATA[A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="grid" Type="Ext.grid.Grid">
                    <Summary><![CDATA[The grid this store will be bound to]]></Summary>
                  </Param>
                  <Param Name="source" Type="Object">
                    <Summary><![CDATA[The source data config object]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="PropertyGrid" FullName="Ext.grid.PropertyGrid" Package="grid" DefinedIn="widgets\grid\PropertyGrid.js" Extends="Ext.grid.EditorGridPanel">
              <Summary><![CDATA[A specialized grid implementation intended to mimic the traditional property grid as typically seen in
development IDEs.  Each row in the grid represents a property of some object, and the data is stored
as a set of name/value pairs in {@link Ext.grid.PropertyRecord}s.  Example usage:
<pre><code>
var grid = new Ext.grid.PropertyGrid({
    title: 'Properties Grid',
    autoHeight: true,
    width: 300,
    renderTo: 'grid-ct',
    source: {
        "(name)": "My Object",
        "Created": new Date(Date.parse('10/15/2006')),
        "Available": false,
        "Version": .01,
        "Description": "A test object"
    }
});
</code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The grid config object]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="customEditors" Type="Object">
                  <Summary><![CDATA[the grid to support additional types of editable fields.  By default, the grid supports strongly-typed editing
of strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and
associated with a custom input control by specifying a custom editor.  The name of the editor
type should correspond with the name of the property that will use the editor.  Example usage:
<pre><code>
var grid = new Ext.grid.PropertyGrid({
    ...
    customEditors: {
        'Start Time': new Ext.grid.GridEditor(new Ext.form.TimeField({selectOnFocus:true}))
    },
    source: {
        'Start Time': '10:00 AM'
    }
});
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="propertyNames" Type="Object">
                  <Summary><![CDATA[If specified, the display name will be shown in the name column instead of the property name.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="source" Type="Object" />
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="getSource">
                  <Summary><![CDATA[Gets the source data object containing the property data.  See {@link #setSource} for details regarding the
format of the data object.]]></Summary>
                  <Parameters />
                  <Return Type="Object">
                    <Summary><![CDATA[The data object]]></Summary>
                  </Return>
                </Method>
                <Method Name="setSource">
                  <Summary><![CDATA[Sets the source data object containing the property data.  The data object can contain one or more name/value
pairs representing all of the properties of an object to display in the grid, and this data will automatically
be loaded into the grid's {@link #store}.  The values should be supplied in the proper data type if needed,
otherwise string type will be assumed.  If the grid already contains data, this method will replace any
existing data.  See also the {@link #source} config value.  Example usage:
<pre><code>
grid.setSource({
    "(name)": "My Object",
    "Created": new Date(Date.parse('10/15/2006')),  // date type
    "Available": false,  // boolean type
    "Version": .01,      // decimal type
    "Description": "A test object"
});
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Object">
                      <Summary><![CDATA[The data object]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforepropertychange">
                  <Summary><![CDATA[Fires before a property value changes. Handlers can return false to cancel the property change (this will internally call {@link Ext.data.Record#reject} on the property's record). as the {@link #source} config property).]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Object">
                      <Summary><![CDATA[The source data object for the grid (corresponds to the same object passed in]]></Summary>
                    </Param>
                    <Param Name="recordId" Type="String">
                      <Summary><![CDATA[The record's id in the data store]]></Summary>
                    </Param>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The current edited property value]]></Summary>
                    </Param>
                    <Param Name="oldValue" Type="Mixed">
                      <Summary><![CDATA[The original property value prior to editing]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="propertychange">
                  <Summary><![CDATA[Fires after a property value has changed. as the {@link #source} config property).]]></Summary>
                  <Parameters>
                    <Param Name="source" Type="Object">
                      <Summary><![CDATA[The source data object for the grid (corresponds to the same object passed in]]></Summary>
                    </Param>
                    <Param Name="recordId" Type="String">
                      <Summary><![CDATA[The record's id in the data store]]></Summary>
                    </Param>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The current edited property value]]></Summary>
                    </Param>
                    <Param Name="oldValue" Type="Mixed">
                      <Summary><![CDATA[The original property value prior to editing]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="PropertyRecord" FullName="Ext.grid.PropertyRecord" Package="grid" DefinedIn="widgets\grid\PropertyGrid.js">
              <Summary><![CDATA[A specific {@link Ext.data.Record} type that represents a name/value pair and is made to work with the
{@link Ext.grid.PropertyGrid}.  Typically, PropertyRecords do not need to be created directly as they can be
created implicitly by simply using the appropriate data configs either via the {@link Ext.grid.PropertyGrid#source}
config property or by calling {@link Ext.grid.PropertyGrid#setSource}.  However, if the need arises, these records
can also be created explicitly as shwon below.  Example usage:
<pre><code>
var rec = new Ext.grid.PropertyRecord({
    name: 'Birthday',
    value: new Date(Date.parse('05/26/1972'))
});
// Add record to an already populated grid
grid.store.addSorted(rec);
</code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[A data object in the format: {name: [name], value: [value]}.  The specified value's type will be read automatically by the grid to determine the type of editor to use when displaying it.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="PropertyStore" FullName="Ext.grid.PropertyStore" Package="grid" DefinedIn="widgets\grid\PropertyGrid.js" Extends="Ext.util.Observable">
              <Summary><![CDATA[A custom wrapper for the {@link Ext.grid.PropertyGrid}'s {@link Ext.data.Store}. This class handles the mapping
between the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format
required for compatibility with the underlying store. Generally this class should not need to be used directly --
the grid's data should be accessed from the underlying store via the {@link #store} property.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="grid" Type="Ext.grid.Grid">
                    <Summary><![CDATA[The grid this store will be bound to]]></Summary>
                  </Param>
                  <Param Name="source" Type="Object">
                    <Summary><![CDATA[The source data config object]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="RowNumberer" FullName="Ext.grid.RowNumberer" Package="grid" DefinedIn="widgets\grid\RowNumberer.js">
              <Summary><![CDATA[This is a utility class that can be passed into a {@link Ext.grid.ColumnModel} as a column config that provides
an automatic row numbering column.
<br>Usage:<br>
 <pre><code>
 // This is a typical column config with the first column providing row numbers
 var colModel = new Ext.grid.ColumnModel([
    new Ext.grid.RowNumberer(),
   {header: "Name", width: 80, sortable: true},
   {header: "Code", width: 50, sortable: true},
   {header: "Description", width: 200, sortable: true}
 ]);
 </code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="header" Type="String">
                  <Summary><![CDATA[number column (defaults to '').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortable" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="width" Type="Number" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="RowSelectionModel" FullName="Ext.grid.RowSelectionModel" Package="grid" DefinedIn="widgets\grid\RowSelectionModel.js" Extends="Ext.grid.AbstractSelectionModel" Subclasses="Ext.grid.CheckboxSelectionModel">
              <Summary><![CDATA[The default SelectionModel used by {@link Ext.grid.GridPanel}.
It supports multiple selections and keyboard selection/navigation. The objects stored
as selections and returned by {@link #getSelected}, and {@link #getSelections} are
the {@link Ext.data.Record Record}s which provide the data for the selected rows.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="moveEditorOnEnter" Type="Boolean">
                  <Summary><![CDATA[<tt>false</tt> to turn off moving the editor to the next row down when the enter key is pressed
or the next row up when shift + enter keys are pressed.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="singleSelect" Type="Boolean">
                  <Summary><![CDATA[<tt>true</tt> to allow selection of only one row at a time (defaults to <tt>false</tt>
allowing multiple selections)]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="clearSelections">
                  <Summary><![CDATA[Clears all selections if the selection model
{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.]]></Summary>
                  <Parameters>
                    <Param Name="fast" Type="Boolean" Optional="true">
                      <Summary><![CDATA[<tt>true</tt> to bypass the
conditional checks and events described in {@link #deselectRow}.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="deselectRange">
                  <Summary><![CDATA[Deselects a range of rows if the selection model
{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
All rows in between startRow and endRow are also deselected.]]></Summary>
                  <Parameters>
                    <Param Name="startRow" Type="Number">
                      <Summary><![CDATA[The index of the first row in the range]]></Summary>
                    </Param>
                    <Param Name="endRow" Type="Number">
                      <Summary><![CDATA[The index of the last row in the range]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="deselectRow">
                  <Summary><![CDATA[Deselects a row.  Before deselecting a row, checks if the selection model
{@link Ext.grid.AbstractSelectionModel#isLocked is locked}.
If this check is satisfied the row will be deselected and followed up by
firing the {@link #rowdeselect} and {@link #selectionchange} events.]]></Summary>
                  <Parameters>
                    <Param Name="row" Type="Number">
                      <Summary><![CDATA[The index of the row to deselect]]></Summary>
                    </Param>
                    <Param Name="preventViewNotify" Type="Boolean" Optional="true">
                      <Summary><![CDATA[Specify <tt>true</tt> to
prevent notifying the view (disables updating the selected appearance)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="each">
                  <Summary><![CDATA[Calls the passed function with each selection. If the function returns
<tt>false</tt>, iteration is stopped and this function returns
<tt>false</tt>. Otherwise it returns <tt>true</tt>.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function" />
                    <Param Name="scope" Type="Object" Optional="true" />
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[true if all selections were iterated]]></Summary>
                  </Return>
                </Method>
                <Method Name="getCount">
                  <Summary><![CDATA[Gets the number of selected rows.]]></Summary>
                  <Parameters />
                  <Return Type="Number" />
                </Method>
                <Method Name="getSelected">
                  <Summary><![CDATA[Returns the first selected record.]]></Summary>
                  <Parameters />
                  <Return Type="Record" />
                </Method>
                <Method Name="getSelections">
                  <Summary><![CDATA[Returns the selected records]]></Summary>
                  <Parameters />
                  <Return Type="Array">
                    <Summary><![CDATA[Array of selected records]]></Summary>
                  </Return>
                </Method>
                <Method Name="hasNext">
                  <Summary><![CDATA[Returns true if there is a next record to select]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="hasPrevious">
                  <Summary><![CDATA[Returns true if there is a previous record to select]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="hasSelection">
                  <Summary><![CDATA[Returns <tt>true</tt> if there is a selection.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isIdSelected">
                  <Summary><![CDATA[Returns <tt>true</tt> if the specified record id is selected.]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of record to check]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isSelected">
                  <Summary><![CDATA[Returns <tt>true</tt> if the specified row is selected.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number/Record">
                      <Summary><![CDATA[The record or index of the record to check]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="selectAll">
                  <Summary><![CDATA[Selects all rows if the selection model
{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="selectFirstRow">
                  <Summary><![CDATA[Selects the first row in the grid.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="selectLastRow">
                  <Summary><![CDATA[Select the last row.]]></Summary>
                  <Parameters>
                    <Param Name="keepExisting" Type="Boolean" Optional="true">
                      <Summary><![CDATA[<tt>true</tt> to keep existing selections]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="selectNext">
                  <Summary><![CDATA[Selects the row immediately following the last selected row.]]></Summary>
                  <Parameters>
                    <Param Name="keepExisting" Type="Boolean" Optional="true">
                      <Summary><![CDATA[<tt>true</tt> to keep existing selections]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[<tt>true</tt> if there is a next row, else <tt>false</tt>]]></Summary>
                  </Return>
                </Method>
                <Method Name="selectPrevious">
                  <Summary><![CDATA[Selects the row that precedes the last selected row.]]></Summary>
                  <Parameters>
                    <Param Name="keepExisting" Type="Boolean" Optional="true">
                      <Summary><![CDATA[<tt>true</tt> to keep existing selections]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[<tt>true</tt> if there is a previous row, else <tt>false</tt>]]></Summary>
                  </Return>
                </Method>
                <Method Name="selectRange">
                  <Summary><![CDATA[Selects a range of rows if the selection model
{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.
All rows in between startRow and endRow are also selected.]]></Summary>
                  <Parameters>
                    <Param Name="startRow" Type="Number">
                      <Summary><![CDATA[The index of the first row in the range]]></Summary>
                    </Param>
                    <Param Name="endRow" Type="Number">
                      <Summary><![CDATA[The index of the last row in the range]]></Summary>
                    </Param>
                    <Param Name="keepExisting" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to retain existing selections]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="selectRecords">
                  <Summary><![CDATA[Select records.]]></Summary>
                  <Parameters>
                    <Param Name="records" Type="Array">
                      <Summary><![CDATA[The records to select]]></Summary>
                    </Param>
                    <Param Name="keepExisting" Type="Boolean" Optional="true">
                      <Summary><![CDATA[<tt>true</tt> to keep existing selections]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="selectRow">
                  <Summary><![CDATA[Selects a row.  Before selecting a row, checks if the selection model
{@link Ext.grid.AbstractSelectionModel#isLocked is locked} and fires the
{@link #beforerowselect} event.  If these checks are satisfied the row
will be selected and followed up by  firing the {@link #rowselect} and
{@link #selectionchange} events.]]></Summary>
                  <Parameters>
                    <Param Name="row" Type="Number">
                      <Summary><![CDATA[The index of the row to select]]></Summary>
                    </Param>
                    <Param Name="keepExisting" Type="Boolean" Optional="true">
                      <Summary><![CDATA[<tt>true</tt> to keep existing selections]]></Summary>
                    </Param>
                    <Param Name="preventViewNotify" Type="Boolean" Optional="true">
                      <Summary><![CDATA[Specify <tt>true</tt> to
prevent notifying the view (disables updating the selected appearance)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="selectRows">
                  <Summary><![CDATA[Selects multiple rows.]]></Summary>
                  <Parameters>
                    <Param Name="rows" Type="Array">
                      <Summary><![CDATA[Array of the indexes of the row to select]]></Summary>
                    </Param>
                    <Param Name="keepExisting" Type="Boolean" Optional="true">
                      <Summary><![CDATA[<tt>true</tt> to keep
existing selections (defaults to <tt>false</tt>)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforerowselect">
                  <Summary><![CDATA[Fires before a row is selected, return false to cancel the selection.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="SelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The index to be selected]]></Summary>
                    </Param>
                    <Param Name="keepExisting" Type="Boolean">
                      <Summary><![CDATA[False if other selections will be cleared]]></Summary>
                    </Param>
                    <Param Name="record" Type="Record">
                      <Summary><![CDATA[The record to be selected]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="rowdeselect">
                  <Summary><![CDATA[Fires when a row is deselected. To prevent deselection {@link Ext.grid.AbstractSelectionModel#lock lock the selections}.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="SelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number" />
                    <Param Name="record" Type="Record" />
                  </Parameters>
                </Event>
                <Event Name="rowselect">
                  <Summary><![CDATA[Fires when a row is selected.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="SelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="rowIndex" Type="Number">
                      <Summary><![CDATA[The selected index]]></Summary>
                    </Param>
                    <Param Name="r" Type="Ext.data.Record">
                      <Summary><![CDATA[The selected record]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="selectionchange">
                  <Summary><![CDATA[Fires when the selection changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="SelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="TemplateColumn" FullName="Ext.grid.TemplateColumn" Package="grid" DefinedIn="widgets\grid\Column.js" Extends="Ext.grid.Column">
              <Summary><![CDATA[<p>A Column definition class which renders a value by processing a {@link Ext.data.Record Record}'s
{@link Ext.data.Record#data data} using a {@link #tpl configured} {@link Ext.XTemplate XTemplate}.
See the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more
details.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="tpl" Type="String/XTemplate">
                  <Summary><![CDATA[An {@link Ext.XTemplate XTemplate}, or an XTemplate <i>definition string</i> to use to process a
{@link Ext.data.Record Record}'s {@link Ext.data.Record#data data} to produce a column's rendered value.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="layout" Path="layout" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="AbsoluteLayout" FullName="Ext.layout.AbsoluteLayout" Package="layout" DefinedIn="widgets\layout\AbsoluteLayout.js" Extends="Ext.layout.AnchorLayout">
              <Summary><![CDATA[<p>This is a layout that inherits the anchoring of <b>{@link Ext.layout.AnchorLayout}</b> and adds the
ability for x/y positioning using the standard x and y component config options.</p>
<p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
<p>Example usage:</p>
<pre><code>
var form = new Ext.form.FormPanel({
    title: 'Absolute Layout',
    layout:'absolute',
    layoutConfig: {
        // layout-specific configs go here
        extraCls: 'x-abs-layout-item',
    },
    baseCls: 'x-plain',
    url:'save-form.php',
    defaultType: 'textfield',
    items: [{
        x: 0,
        y: 5,
        xtype:'label',
        text: 'Send To:'
    },{
        x: 60,
        y: 0,
        name: 'to',
        anchor:'100%'  // anchor width by percentage
    },{
        x: 0,
        y: 35,
        xtype:'label',
        text: 'Subject:'
    },{
        x: 60,
        y: 30,
        name: 'subject',
        anchor: '100%'  // anchor width by percentage
    },{
        x:0,
        y: 60,
        xtype: 'textarea',
        name: 'msg',
        anchor: '100% 100%'  // anchor width and height
    }]
});
</code></pre>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="AccordionLayout" FullName="Ext.layout.AccordionLayout" Package="layout" DefinedIn="widgets\layout\AccordionLayout.js" Extends="Ext.layout.FitLayout">
              <Summary><![CDATA[<p>This is a layout that contains multiple panels in an expandable accordion style such that only
<b>one panel can be open at any given time</b>.  Each panel has built-in support for expanding and collapsing.
<p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>
<p>Example usage:</p>
<pre><code>
var accordion = new Ext.Panel({
    title: 'Accordion Layout',
    layout:'accordion',
    defaults: {
        // applied to each contained panel
        bodyStyle: 'padding:15px'
    },
    layoutConfig: {
        // layout-specific configs go here
        titleCollapse: false,
        animate: true,
        activeOnTop: true
    },
    items: [{
        title: 'Panel 1',
        html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    },{
        title: 'Panel 2',
        html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    },{
        title: 'Panel 3',
        html: '&lt;p&gt;Panel content!&lt;/p&gt;'
    }]
});
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="activeOnTop" Type="Boolean">
                  <Summary><![CDATA[True to swap the position of each panel as it is expanded so that it becomes the first item in the container,
false to keep the panels in the rendered order. <b>This is NOT compatible with "animate:true"</b> (defaults to false).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="animate" Type="Boolean">
                  <Summary><![CDATA[True to slide the contained panels open and closed during expand/collapse using animation, false to open and
close directly with no animation (defaults to false).  Note: to defer to the specific config setting of each
contained panel for this property, set this to undefined at the layout level.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoWidth" Type="Boolean">
                  <Summary><![CDATA[True to set each contained item's width to 'auto', false to use the item's current width (defaults to true).
Note that some components, in particular the {@link Ext.grid.GridPanel grid}, will not function properly within
layouts if they have auto width, so in such cases this config should be set to false.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="collapseFirst" Type="Boolean">
                  <Summary><![CDATA[True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools
in the contained panels' title bars, false to render it last (defaults to false).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="fill" Type="Boolean">
                  <Summary><![CDATA[True to adjust the active item's height to fill the available space in the container, false to use the
item's current height, or auto height if not explicitly set (defaults to true).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideCollapseTool" Type="Boolean">
                  <Summary><![CDATA[True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false).
When set to true, {@link #titleCollapse} should be true also.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sequence" Type="Boolean">
                  <Summary><![CDATA[<b>Experimental</b>. If animate is set to true, this will result in each animation running in sequence.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="titleCollapse" Type="Boolean">
                  <Summary><![CDATA[True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow
expand/collapse only when the toggle tool button is clicked (defaults to true).  When set to false,
{@link #hideCollapseTool} should be false also.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="setActiveItem">
                  <Summary><![CDATA[Sets the active (expanded) item in the layout.]]></Summary>
                  <Parameters>
                    <Param Name="item" Type="String/Number">
                      <Summary><![CDATA[The string component id or numeric index of the item to activate]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="AnchorLayout" FullName="Ext.layout.AnchorLayout" Package="layout" DefinedIn="widgets\layout\AnchorLayout.js" Extends="Ext.layout.ContainerLayout" Subclasses="Ext.layout.AbsoluteLayout,Ext.layout.FormLayout">
              <Summary><![CDATA[<p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.
If the container is resized, all anchored items are automatically rerendered according to their
<b><tt>{@link #anchor}</tt></b> rules.</p>
<p>This class is intended to be extended or created via the layout:'anchor' {@link Ext.Container#layout}
config, and should generally not need to be created directly via the new keyword.</p>
<p>AnchorLayout does not have any direct config options (other than inherited ones). By default,
AnchorLayout will calculate anchor measurements based on the size of the container itself. However, the
container using the AnchorLayout can supply an anchoring-specific config property of <b>anchorSize</b>.
If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating
anchor measurements based on it instead, allowing the container to be sized independently of the anchoring
logic if necessary.  For example:</p>
<pre><code>
var viewport = new Ext.Viewport({
    layout:'anchor',
    anchorSize: {width:800, height:600},
    items:[{
        title:'Item 1',
        html:'Content 1',
        width:800,
        anchor:'right 20%'
    },{
        title:'Item 2',
        html:'Content 2',
        width:300,
        anchor:'50% 30%'
    },{
        title:'Item 3',
        html:'Content 3',
        width:600,
        anchor:'-100 50%'
    }]
});
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="anchor" Type="String">
                  <Summary><![CDATA[<p>This configuation option is to be applied to <b>child <tt>items</tt></b> of a container managed by
this layout (ie. configured with <tt>layout:'anchor'</tt>).</p><br/>

<p>This value is what tells the layout how an item should be anchored to the container. <tt>items</tt>
added to an AnchorLayout accept an anchoring-specific config property of <b>anchor</b> which is a string
containing two values: the horizontal anchor value and the vertical anchor value (for example, '100% 50%').
The following types of anchor values are supported:<div class="mdetail-params"><ul>

<li><b>Percentage</b> : Any value between 1 and 100, expressed as a percentage.<div class="sub-desc">
The first anchor is the percentage width that the item should take up within the container, and the
second is the percentage height.  For example:<pre><code>
// two values specified
anchor: '100% 50%' // render item complete width of the container and
                   // 1/2 height of the container
// one value specified
anchor: '100%'     // the width value; the height will default to auto
</code></pre></div></li>

<li><b>Offsets</b> : Any positive or negative integer value.<div class="sub-desc">
This is a raw adjustment where the first anchor is the offset from the right edge of the container,
and the second is the offset from the bottom edge. For example:<pre><code>
// two values specified
anchor: '-50 -100' // render item the complete width of the container
                   // minus 50 pixels and
                   // the complete height minus 100 pixels.
// one value specified
anchor: '-50'      // anchor value is assumed to be the right offset value
                   // bottom offset will default to 0
</code></pre></div></li>

<li><b>Sides</b> : Valid values are <tt>'right'</tt> (or <tt>'r'</tt>) and <tt>'bottom'</tt>
(or <tt>'b'</tt>).<div class="sub-desc">
Either the container must have a fixed size or an anchorSize config value defined at render time in
order for these to have any effect.</div></li>

<li><b>Mixed</b> : <div class="sub-desc">
Anchor values can also be mixed as needed.  For example, to render the width offset from the container
right edge by 50 pixels and 75% of the container's height use:
<pre><code>
anchor: '-50 75%' 
</code></pre></div></li>


</ul></div>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="BorderLayout" FullName="Ext.layout.BorderLayout" Package="layout" DefinedIn="widgets\layout\BorderLayout.js" Extends="Ext.layout.ContainerLayout">
              <Summary><![CDATA[<p>This is a multi-pane, application-oriented UI layout style that supports multiple
nested panels, automatic {@link Ext.layout.BorderLayout.Region#split split} bars between
{@link Ext.layout.BorderLayout.Region#BorderLayout.Region regions} and built-in
{@link Ext.layout.BorderLayout.Region#collapsible expanding and collapsing} of regions.</p>
<p>This class is intended to be extended or created via the <tt>layout:'border'</tt>
{@link Ext.Container#layout} config, and should generally not need to be created directly
via the new keyword.</p>
<p>BorderLayout does not have any direct config options (other than inherited ones).
All configuration options available for customizing the BorderLayout are at the
{@link Ext.layout.BorderLayout.Region} and {@link Ext.layout.BorderLayout.SplitRegion}
levels.</p>
<p>Example usage:</p>
<pre><code>
var myBorderPanel = new Ext.Panel({
   {@link Ext.Component#renderTo renderTo}: document.body,
   {@link Ext.BoxComponent#width width}: 700,
   {@link Ext.BoxComponent#height height}: 500,
   {@link Ext.Panel#title title}: 'Border Layout',
   {@link Ext.Container#layout layout}: 'border',
   {@link Ext.Container#items items}: [{
       {@link Ext.Panel#title title}: 'South Region is resizable',
       {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}: 'south',     // position for region
       {@link Ext.BoxComponent#height height}: 100,
       {@link Ext.layout.BorderLayout.Region#split split}: true,         // enable resizing
       {@link Ext.SplitBar#minSize minSize}: 75,         // defaults to {@link Ext.layout.BorderLayout.Region#minHeight 50} 
       {@link Ext.SplitBar#maxSize maxSize}: 150,
       {@link Ext.layout.BorderLayout.Region#margins margins}: '0 5 5 5'
    },{
        // xtype: 'panel' implied by default
       {@link Ext.Panel#title title}: 'West Region is collapsible',
       {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}:'west',
       {@link Ext.layout.BorderLayout.Region#margins margins}: '5 0 0 5',
       {@link Ext.BoxComponent#width width}: 200,
       {@link Ext.layout.BorderLayout.Region#collapsible collapsible}: true,   // make collapsible
       {@link Ext.layout.BorderLayout.Region#cmargins cmargins}: '5 5 0 5', // adjust top margin when collapsed
       {@link Ext.Component#id id}: 'west-region-container',
       {@link Ext.Container#layout layout}: 'fit',
       {@link Ext.Panel#unstyled unstyled}: true
    },{
       {@link Ext.Panel#title title}: 'Center Region',
       {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}: 'center',     // center region is required, no width/height specified
       {@link Ext.Component#xtype xtype}: 'container',
       {@link Ext.Container#layout layout}: 'fit',
       {@link Ext.layout.BorderLayout.Region#margins margins}: '5 5 0 0'
    }]
});
</code></pre>
<p><b><u>Notes</u></b>:</p><div class="mdetail-params"><ul>
<li>Any container using the BorderLayout <b>must</b> have a child item with <tt>region:'center'</tt>.
The child item in the center region will always be resized to fill the remaining space not used by
the other regions in the layout.</li>
<li>Any child items with a region of <tt>west</tt> or <tt>east</tt> must have <tt>width</tt> defined
(an integer representing the number of pixels that the region should take up).</li>
<li>Any child items with a region of <tt>north</tt> or <tt>south</tt> must have <tt>height</tt> defined.</li>
<li>The regions of a BorderLayout are <b>fixed at render time</b> and thereafter, its child Components may not be removed or added</b>.  To add/remove
Components within a BorderLayout, have them wrapped by an additional Container which is directly
managed by the BorderLayout.  If the region is to be collapsible, the Container used directly
by the BorderLayout manager should be a Panel.  In the following example a Container (an Ext.Panel)
is added to the west region:
<div style="margin-left:16px"><pre><code>
wrc = {@link Ext#getCmp Ext.getCmp}('west-region-container');
wrc.{@link Ext.Panel#removeAll removeAll}();
wrc.{@link Ext.Container#add add}({
    title: 'Added Panel',
    html: 'Some content'
});
wrc.{@link Ext.Container#doLayout doLayout}();
</code></pre></div>
</li>
<li> To reference a {@link Ext.layout.BorderLayout.Region Region}:
<div style="margin-left:16px"><pre><code>
wr = myBorderPanel.layout.west;
</code></pre></div>
</li>
</ul></div>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="BorderLayout.Region" FullName="Ext.layout.BorderLayout.Region" Package="layout" DefinedIn="widgets\layout\BorderLayout.js" Subclasses="Ext.layout.BorderLayout.SplitRegion">
              <Summary><![CDATA[<p>This is a region of a {@link Ext.layout.BorderLayout BorderLayout} that acts as a subcontainer
within the layout.  Each region has its own {@link Ext.layout.ContainerLayout layout} that is
independent of other regions and the containing BorderLayout, and can be any of the
{@link Ext.layout.ContainerLayout valid Ext layout types}.</p>
<p>Region size is managed automatically and cannot be changed by the user -- for
{@link #split resizable regions}, see {@link Ext.layout.BorderLayout.SplitRegion}.</p>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new Region.]]></Summary>
                <Parameters>
                  <Param Name="layout" Type="Layout">
                    <Summary><![CDATA[The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region.]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The configuration options]]></Summary>
                  </Param>
                  <Param Name="position" Type="String">
                    <Summary><![CDATA[The region position.  Valid values are: <tt>north</tt>, <tt>south</tt>, <tt>east</tt>, <tt>west</tt> and <tt>center</tt>.  Every {@link Ext.layout.BorderLayout BorderLayout} <b>must have a center region</b> for the primary content -- all other regions are optional.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="animFloat" Type="Boolean">
                  <Summary><![CDATA[When a collapsed region's bar is clicked, the region's panel will be displayed as a floated
panel that will close again once the user mouses out of that panel (or clicks out if
<tt>{@link #autoHide} = false</tt>).  Setting <tt>{@link #animFloat} = false</tt> will
prevent the open and close of these floated panels from being animated (defaults to <tt>true</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoHide" Type="Boolean">
                  <Summary><![CDATA[When a collapsed region's bar is clicked, the region's panel will be displayed as a floated
panel.  If <tt>autoHide = true</tt>, the panel will automatically hide after the user mouses
out of the panel.  If <tt>autoHide = false</tt>, the panel will continue to display until the
user clicks outside of the panel (defaults to <tt>true</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="cmargins" Type="Object">
                  <Summary><![CDATA[An object containing margins to apply to the region when in the collapsed state in the
format:<pre><code>
{
    top: (top margin),
    right: (right margin),
    bottom: (bottom margin),
    left: (left margin)
}</code></pre>
<p>May also be a string containing space-separated, numeric margin values. The order of the
sides associated with each value matches the way CSS processes margin values.</p>
<p><ul>
<li>If there is only one value, it applies to all sides.</li>
<li>If there are two values, the top and bottom borders are set to the first value and the
right and left are set to the second.</li>
<li>If there are three values, the top is set to the first value, the left and right are set
to the second, and the bottom is set to the third.</li>
<li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
</ul></p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="collapseMode" Type="String">
                  <Summary><![CDATA[<tt>collapseMode</tt> supports two configuration values:<div class="mdetail-params"><ul>
<li><b><tt>undefined</tt></b> (default)<div class="sub-desc">By default, {@link #collapsible}
regions are collapsed by clicking the expand/collapse tool button that renders into the region's
title bar.</div></li>
<li><b><tt>'mini'</tt></b><div class="sub-desc">Optionally, when <tt>collapseMode</tt> is set to
<tt>'mini'</tt> the region's split bar will also display a small collapse button in the center of
the bar. In <tt>'mini'</tt> mode the region will collapse to a thinner bar than in normal mode.
</div></li>
</ul></div></p>
<p><b>Note</b>: if a collapsible region does not have a title bar, then set <tt>collapseMode =
'mini'</tt> and <tt>{@link #split} = true</tt> in order for the region to be {@link #collapsible}
by the user as the expand/collapse tool button (that would go in the title bar) will not be rendered.</p>
<p>See also <tt>{@link #cmargins}</tt>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="collapsible" Type="Boolean">
                  <Summary><![CDATA[<p><tt>true</tt> to allow the user to collapse this region (defaults to <tt>false</tt>).  If
<tt>true</tt>, an expand/collapse tool button will automatically be rendered into the title
bar of the region, otherwise the button will not be shown.</p>
<p><b>Note</b>: that a title bar is required to display the collapse/expand toggle button -- if
no <tt>title</tt> is specified for the region's panel, the region will only be collapsible if
<tt>{@link #collapseMode} = 'mini'</tt> and <tt>{@link #split} = true</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="floatable" Type="Boolean">
                  <Summary><![CDATA[<tt>true</tt> to allow clicking a collapsed region's bar to display the region's panel floated
above the layout, <tt>false</tt> to force the user to fully expand a collapsed region by
clicking the expand button to see it again (defaults to <tt>true</tt>).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="margins" Type="Object">
                  <Summary><![CDATA[An object containing margins to apply to the region when in the expanded state in the
format:<pre><code>
{
    top: (top margin),
    right: (right margin),
    bottom: (bottom margin),
    left: (left margin)
}</code></pre>
<p>May also be a string containing space-separated, numeric margin values. The order of the
sides associated with each value matches the way CSS processes margin values:</p>
<p><div class="mdetail-params"><ul>
<li>If there is only one value, it applies to all sides.</li>
<li>If there are two values, the top and bottom borders are set to the first value and the
right and left are set to the second.</li>
<li>If there are three values, the top is set to the first value, the left and right are set
to the second, and the bottom is set to the third.</li>
<li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
</ul></div></p>
<p>Defaults to:</p><pre><code>
{top:0, right:0, bottom:0, left:0}
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minHeight" Type="Number">
                  <Summary><![CDATA[The minimum allowable height in pixels for this region (defaults to <tt>50</tt>)
<tt>maxHeight</tt> may also be specified.</p><br>
<p><b>Note</b>: setting the <tt>{@link Ext.SplitBar#minSize minSize}</tt> /
<tt>{@link Ext.SplitBar#maxSize maxSize}</tt> supersedes any specified
<tt>minHeight</tt> / <tt>maxHeight</tt>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="minWidth" Type="Number">
                  <Summary><![CDATA[<p>The minimum allowable width in pixels for this region (defaults to <tt>50</tt>).
<tt>maxWidth</tt> may also be specified.</p><br>
<p><b>Note</b>: setting the <tt>{@link Ext.SplitBar#minSize minSize}</tt> /
<tt>{@link Ext.SplitBar#maxSize maxSize}</tt> supersedes any specified
<tt>minWidth</tt> / <tt>maxWidth</tt>.</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="split" Type="Boolean">
                  <Summary><![CDATA[<p><tt>true</tt> to create a {@link Ext.layout.BorderLayout.SplitRegion SplitRegion} and
display a 5px wide {@link Ext.SplitBar} between this region and its neighbor, allowing the user to
resize the regions dynamically.  Defaults to <tt>false</tt> creating a
{@link Ext.layout.BorderLayout.Region Region}.</p><br>
<p><b>Notes</b>:</p><div class="mdetail-params"><ul>
<li>this configuration option is ignored if <tt>region='center'</tt></li>
<li>when <tt>split == true</tt>, it is common to specify a
<tt>{@link Ext.SplitBar#minSize minSize}</tt> and <tt>{@link Ext.SplitBar#maxSize maxSize}</tt>
for the {@link Ext.BoxComponent BoxComponent} representing the region. These are not native
configs of {@link Ext.BoxComponent BoxComponent}, and are used only by this class.</li>
<li>if <tt>{@link #collapseMode} = 'mini'</tt> requires <tt>split = true</tt> to reserve space
for the collapse tool</tt></li>
</ul></div>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="isCollapsed">
                  <Summary><![CDATA[True if this region is collapsed. Read-only.]]></Summary>
                </Property>
                <Property Name="layout">
                  <Summary><![CDATA[This region's layout.  Read-only.]]></Summary>
                </Property>
                <Property Name="panel">
                  <Summary><![CDATA[This region's panel.  Read-only.]]></Summary>
                </Property>
                <Property Name="position">
                  <Summary><![CDATA[This region's layout position (north, south, east, west or center).  Read-only.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getMargins">
                  <Summary><![CDATA[Returns the current margins for this region.  If the region is collapsed, the
{@link #cmargins} (collapsed margins) value will be returned, otherwise the
{@link #margins} value will be returned.
margin), top: (top margin), right: (right margin), bottom: (bottom margin)}</tt>]]></Summary>
                  <Parameters />
                  <Return Type="Object">
                    <Summary><![CDATA[An object containing the element's margins: <tt>{left: (left]]></Summary>
                  </Return>
                </Method>
                <Method Name="getMinHeight">
                  <Summary><![CDATA[Returns the minimum allowable height for this region.]]></Summary>
                  <Parameters />
                  <Return Type="Number">
                    <Summary><![CDATA[The minimum height]]></Summary>
                  </Return>
                </Method>
                <Method Name="getMinWidth">
                  <Summary><![CDATA[Returns the minimum allowable width for this region.]]></Summary>
                  <Parameters />
                  <Return Type="Number">
                    <Summary><![CDATA[The minimum width]]></Summary>
                  </Return>
                </Method>
                <Method Name="getSize">
                  <Summary><![CDATA[Returns the current size of this region.  If the region is collapsed, the size of the
collapsedEl will be returned, otherwise the size of the region's panel will be returned.
height: (element height)}</tt>]]></Summary>
                  <Parameters />
                  <Return Type="Object">
                    <Summary><![CDATA[An object containing the element's size: <tt>{width: (element width),]]></Summary>
                  </Return>
                </Method>
                <Method Name="isVisible">
                  <Summary><![CDATA[True if this region is currently visible, else false.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="setPanel">
                  <Summary><![CDATA[Sets the specified panel as the container element for this region.]]></Summary>
                  <Parameters>
                    <Param Name="panel" Type="Ext.Panel">
                      <Summary><![CDATA[The new panel]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="slideIn">
                  <Summary><![CDATA[If this Region is {@link #floatable}, and this Region has been slid into floating visibility, then this method slides
this region back into its collapsed state.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="slideOut">
                  <Summary><![CDATA[If this Region is {@link #floatable}, this method slides this Region into full visibility <i>over the top
of the center Region</i> where it floats until either {@link #slideIn} is called, or other regions of the layout
are clicked, or the mouse exits the Region.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="BorderLayout.SplitRegion" FullName="Ext.layout.BorderLayout.SplitRegion" Package="layout" DefinedIn="widgets\layout\BorderLayout.js" Extends="Ext.layout.BorderLayout.Region">
              <Summary><![CDATA[<p>This is a specialized type of {@link Ext.layout.BorderLayout.Region BorderLayout region} that
has a built-in {@link Ext.SplitBar} for user resizing of regions.  The movement of the split bar
is configurable to move either {@link #tickSize smooth or incrementally}.</p>]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new SplitRegion.]]></Summary>
                <Parameters>
                  <Param Name="layout" Type="Layout">
                    <Summary><![CDATA[The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region.]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The configuration options]]></Summary>
                  </Param>
                  <Param Name="position" Type="String">
                    <Summary><![CDATA[The region position.  Valid values are: north, south, east, west and center.  Every BorderLayout must have a center region for the primary content -- all other regions are optional.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="collapsibleSplitTip" Type="String">
                  <Summary><![CDATA[The tooltip to display when the user hovers over a
{@link Ext.layout.BorderLayout.Region#collapsible collapsible} region's split bar
(defaults to "Drag to resize. Double click to hide."). Only applies if
<tt>{@link #useSplitTips} = true</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="splitTip" Type="String">
                  <Summary><![CDATA[The tooltip to display when the user hovers over a
{@link Ext.layout.BorderLayout.Region#collapsible non-collapsible} region's split bar
(defaults to <tt>"Drag to resize."</tt>).  Only applies if
<tt>{@link #useSplitTips} = true</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tickSize" Type="Number">
                  <Summary><![CDATA[The increment, in pixels by which to move this Region's {@link Ext.SplitBar SplitBar}.
By default, the {@link Ext.SplitBar SplitBar} moves smoothly.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="useSplitTips" Type="Boolean">
                  <Summary><![CDATA[<tt>true</tt> to display a tooltip when the user hovers over a region's split bar
(defaults to <tt>false</tt>).  The tooltip text will be the value of either
<tt>{@link #splitTip}</tt> or <tt>{@link #collapsibleSplitTip}</tt> as appropriate.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="getSplitBar">
                  <Summary><![CDATA[Returns a reference to the split bar in use by this region.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.SplitBar">
                    <Summary><![CDATA[The split bar]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="BoxLayout" FullName="Ext.layout.BoxLayout" Package="layout" DefinedIn="widgets\layout\BoxLayout.js" Extends="Ext.layout.ContainerLayout" Subclasses="Ext.layout.HBoxLayout,Ext.layout.VBoxLayout">
              <Summary><![CDATA[<p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="defaultMargins" Type="Object">
                  <Summary><![CDATA[<p>If the individual contained items do not have a <tt>margins</tt>
property specified, the default margins from this property will be
applied to each item.</p>
<br><p>This property may be specified as an object containing margins
to apply in the format:</p><pre><code>
{
    top: (top margin),
    right: (right margin),
    bottom: (bottom margin),
    left: (left margin)
}</code></pre>
<p>This property may also be specified as a string containing
space-separated, numeric margin values. The order of the sides associated
with each value matches the way CSS processes margin values:</p>
<div class="mdetail-params"><ul>
<li>If there is only one value, it applies to all sides.</li>
<li>If there are two values, the top and bottom borders are set to the
first value and the right and left are set to the second.</li>
<li>If there are three values, the top is set to the first value, the left
and right are set to the second, and the bottom is set to the third.</li>
<li>If there are four values, they apply to the top, right, bottom, and
left, respectively.</li>
</ul></div>
<p>Defaults to:</p><pre><code>
{top:0, right:0, bottom:0, left:0}
</code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="padding" Type="String">
                  <Summary><![CDATA[Defaults to <tt>'0'</tt>. Sets the padding to be applied to all child items managed by this
container's layout.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="CardLayout" FullName="Ext.layout.CardLayout" Package="layout" DefinedIn="widgets\layout\CardLayout.js" Extends="Ext.layout.FitLayout">
              <Summary><![CDATA[<p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be
visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.
This class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,
and should generally not need to be created directly via the new keyword.</p>
<p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,
the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of
the next panel to display.  The layout itself does not provide a user interface for handling this navigation,
so that functionality must be provided by the developer.</p>
<p>In the following example, a simplistic wizard setup is demonstrated.  A button bar is added
to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a
common navigation routine -- for this example, the implementation of that routine has been ommitted since
it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a
completely different implementation.  For serious implementations, a better approach would be to extend
CardLayout to provide the custom functionality needed.  Example usage:</p>
<pre><code>
var navHandler = function (direction) {
    // This routine could contain business logic required to manage the navigation steps.
    // It would call setActiveItem as needed, manage navigation button state, handle any
    // branching logic that might be required, handle alternate actions like cancellation
    // or finalization, etc.  A complete wizard implementation could get pretty
    // sophisticated depending on the complexity required, and should probably be
    // done as a subclass of CardLayout in a real-world implementation.
};

var card = new Ext.Panel({
    title: 'Example Wizard',
    layout:'card',
    activeItem: 0, // make sure the active item is set on the container config!
    bodyStyle: 'padding:15px',
    defaults: {
        // applied to each contained panel
        border:false
    },
    // just an example of one possible navigation scheme, using buttons
    bbar: [
       {
            id: 'move-prev',
            text: 'Back',
            handler: navHandler.createDelegate(this, [-1]),
            disabled: true
        },
        '->', // greedy spacer so that the buttons are aligned to each side
       {
            id: 'move-next',
            text: 'Next',
            handler: navHandler.createDelegate(this, [1])
        }
    ],
    // the panels (or "cards") within the layout
    items: [{
        id: 'card-0',
        html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'
    },{
        id: 'card-1',
        html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'
    },{
        id: 'card-2',
        html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'
    }]
});
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="deferredRender" Type="Boolean">
                  <Summary><![CDATA[True to render each contained item at the time it becomes active, false to render all contained items
as soon as the layout is rendered (defaults to false).  If there is a significant amount of content or
a lot of heavy controls being rendered into panels that are not displayed by default, setting this to
true might improve performance.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="layoutOnCardChange" Type="Boolean">
                  <Summary><![CDATA[True to force a layout of the active item when the active card is changed. Defaults to false.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="renderHidden" Type="Boolean" />
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="setActiveItem">
                  <Summary><![CDATA[Sets the active (visible) item in the layout.]]></Summary>
                  <Parameters>
                    <Param Name="item" Type="String/Number">
                      <Summary><![CDATA[The string component id or numeric index of the item to activate]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="ColumnLayout" FullName="Ext.layout.ColumnLayout" Package="layout" DefinedIn="widgets\layout\ColumnLayout.js" Extends="Ext.layout.ContainerLayout">
              <Summary><![CDATA[<p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of
each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.
This class is intended to be extended or created via the layout:'column' {@link Ext.Container#layout} config,
and should generally not need to be created directly via the new keyword.</p>
<p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a
specific config property of <b><tt>columnWidth</tt></b> that can be included in the config of any panel added to it.  The
layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.
If width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>
<p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1.
The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and
less than 1 (e.g., .25).</p>
<p>The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the
set of contained panels.  During the first layout pass, all panels that either have a fixed width or none
specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second
pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on
the total <b>remaining</b> container width.  In other words, percentage width panels are designed to fill the space
left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns
with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your
layout may not render as expected.  Example usage:</p>
<pre><code>
// All columns are percentages -- they must add up to 1
var p = new Ext.Panel({
    title: 'Column Layout - Percentage Only',
    layout:'column',
    items: [{
        title: 'Column 1',
        columnWidth: .25 
    },{
        title: 'Column 2',
        columnWidth: .6
    },{
        title: 'Column 3',
        columnWidth: .15
    }]
});

// Mix of width and columnWidth -- all columnWidth values must add up
// to 1. The first column will take up exactly 120px, and the last two
// columns will fill the remaining container width.
var p = new Ext.Panel({
    title: 'Column Layout - Mixed',
    layout:'column',
    items: [{
        title: 'Column 1',
        width: 120
    },{
        title: 'Column 2',
        columnWidth: .8
    },{
        title: 'Column 3',
        columnWidth: .2
    }]
});
</code></pre>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="ContainerLayout" FullName="Ext.layout.ContainerLayout" Package="layout" DefinedIn="widgets\layout\ContainerLayout.js" Subclasses="Ext.layout.AnchorLayout,Ext.layout.BorderLayout,Ext.layout.BoxLayout,Ext.layout.ColumnLayout,Ext.layout.FitLayout,Ext.layout.MenuLayout,Ext.layout.TableLayout,Ext.layout.ToolbarLayout">
              <Summary><![CDATA[<p>The ContainerLayout class is the default layout manager delegated by {@link Ext.Container} to
render any child Components when no <tt>{@link Ext.Container#layout layout}</tt> is configured into
a {@link Ext.Container Container}. ContainerLayout provides the basic foundation for all other layout
classes in Ext. It simply renders all child Components into the Container, performing no sizing or
positioning services. To utilize a layout that provides sizing and positioning of child Components,
specify an appropriate <tt>{@link Ext.Container#layout layout}</tt>.</p>
<p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>
configuration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="extraCls" Type="String">
                  <Summary><![CDATA[<p>An optional extra CSS class that will be added to the container. This can be useful for adding
customized styles to the container or any of its children using standard CSS rules. See
{@link Ext.Component}.{@link Ext.Component#ctCls ctCls} also.</p>
<p><b>Note</b>: <tt>extraCls</tt> defaults to <tt>''</tt> except for the following classes
which assign a value by default:
<div class="mdetail-params"><ul>
<li>{@link Ext.layout.AbsoluteLayout Absolute Layout} : <tt>'x-abs-layout-item'</tt></li>
<li>{@link Ext.layout.Box Box Layout} : <tt>'x-box-item'</tt></li>
<li>{@link Ext.layout.ColumnLayout Column Layout} : <tt>'x-column'</tt></li>
</ul></div>
To configure the above Classes with an extra CSS class append to the default.  For example,
for ColumnLayout:<pre><code>
extraCls: 'x-column custom-class'
</code></pre>
</p>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="renderHidden" Type="Boolean">
                  <Summary><![CDATA[True to hide each contained item on render (defaults to false).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="activeItem" Type="Ext.Component">
                  <Summary><![CDATA[A reference to the {@link Ext.Component} that is active.  For example, <pre><code>
if (myPanel.layout.activeItem.id == 'item-1') { ... }
</code></pre>
<tt>activeItem</tt> only applies to layout styles that can display items one at a time
(like {@link Ext.layout.AccordionLayout}, {@link Ext.layout.CardLayout}
and {@link Ext.layout.FitLayout}).  Read-only.  Related to {@link Ext.Container#activeItem}.]]></Summary>
                </Property>
                <Property Name="fieldTpl">
                  <Summary><![CDATA[The {@link Ext.Template Ext.Template} used by Field rendering layout classes (such as
{@link Ext.layout.FormLayout}) to create the DOM structure of a fully wrapped,
labeled and styled form Field. A default Template is supplied, but this may be
overriden to create custom field structures. The template processes values returned from
{@link Ext.layout.FormLayout#getTemplateArgs}.]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="FitLayout" FullName="Ext.layout.FitLayout" Package="layout" DefinedIn="widgets\layout\FitLayout.js" Extends="Ext.layout.ContainerLayout" Subclasses="Ext.layout.AccordionLayout,Ext.layout.CardLayout">
              <Summary><![CDATA[<p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's
container.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}
config, and should generally not need to be created directly via the new keyword.</p>
<p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container
using FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has
multiple panels, only the first one will be displayed.  Example usage:</p>
<pre><code>
var p = new Ext.Panel({
    title: 'Fit Layout',
    layout:'fit',
    items: {
        title: 'Inner Panel',
        html: '&lt;p&gt;This is the inner panel content&lt;/p&gt;',
        border: false
    }
});
</code></pre>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="FormLayout" FullName="Ext.layout.FormLayout" Package="layout" DefinedIn="widgets\layout\FormLayout.js" Extends="Ext.layout.AnchorLayout">
              <Summary><![CDATA[<p>This layout manager is specifically designed for rendering and managing child Components of
{@link Ext.form.FormPanel forms}. It is responsible for rendering the labels of
{@link Ext.form.Field Field}s.</p>

<p>This layout manager is used when a Container is configured with the <tt>layout:'form'</tt>
{@link Ext.Container#layout layout} config option, and should generally not need to be created directly
via the new keyword. See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>

<p>In an application, it will usually be preferrable to use a {@link Ext.form.FormPanel FormPanel}
(which is configured with FormLayout as its layout class by default) since it also provides built-in
functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form.</p>

<p>A {@link Ext.Container Container} <i>using</i> the FormLayout layout manager (e.g.
{@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>) can also accept the following
layout-specific config properties:<div class="mdetail-params"><ul>
<li><b><tt>{@link Ext.form.FormPanel#hideLabels hideLabels}</tt></b></li>
<li><b><tt>{@link Ext.form.FormPanel#labelAlign labelAlign}</tt></b></li>
<li><b><tt>{@link Ext.form.FormPanel#labelPad labelPad}</tt></b></li>
<li><b><tt>{@link Ext.form.FormPanel#labelSeparator labelSeparator}</tt></b></li>
<li><b><tt>{@link Ext.form.FormPanel#labelWidth labelWidth}</tt></b></li>
</ul></div></p>

<p>Any Component (including Fields) managed by FormLayout accepts the following as a config option:
<div class="mdetail-params"><ul>
<li><b><tt>{@link Ext.Component#anchor anchor}</tt></b></li>
</ul></div></p>

<p>Any Component managed by FormLayout may be rendered as a form field (with an associated label) by
configuring it with a non-null <b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b>. Components configured
in this way may be configured with the following options which affect the way the FormLayout renders them:
<div class="mdetail-params"><ul>
<li><b><tt>{@link Ext.Component#clearCls clearCls}</tt></b></li>
<li><b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b></li>
<li><b><tt>{@link Ext.Component#hideLabel hideLabel}</tt></b></li>
<li><b><tt>{@link Ext.Component#itemCls itemCls}</tt></b></li>
<li><b><tt>{@link Ext.Component#labelSeparator labelSeparator}</tt></b></li>
<li><b><tt>{@link Ext.Component#labelStyle labelStyle}</tt></b></li>
</ul></div></p>

<p>Example usage:</p>
<pre><code>
// Required if showing validation messages
Ext.QuickTips.init();

// While you can create a basic Panel with layout:'form', practically
// you should usually use a FormPanel to also get its form functionality
// since it already creates a FormLayout internally.
var form = new Ext.form.FormPanel({
    title: 'Form Layout',
    bodyStyle: 'padding:15px',
    width: 350,
    defaultType: 'textfield',
    defaults: {
        // applied to each contained item
        width: 230,
        msgTarget: 'side'
    },
    items: [{
            fieldLabel: 'First Name',
            name: 'first',
            allowBlank: false,
           {@link Ext.Component#labelSeparator labelSeparator}: ':' // override labelSeparator layout config
        },{
            fieldLabel: 'Last Name',
            name: 'last'
        },{
            fieldLabel: 'Email',
            name: 'email',
            vtype:'email'
        }, {
            xtype: 'textarea',
            hideLabel: true,     // override hideLabels layout config
            name: 'msg',
            anchor: '100% -53'
        }
    ],
    buttons: [
       {text: 'Save'},
       {text: 'Cancel'}
    ],
    layoutConfig: {
       {@link #labelSeparator}: '~' // superseded by assignment below
    },
    // config options applicable to container when layout='form':
    hideLabels: false,
    labelAlign: 'left',   // or 'right' or 'top'
   {@link Ext.form.FormPanel#labelSeparator labelSeparator}: '>>', // takes precedence over layoutConfig value
    labelWidth: 65,       // defaults to 100
    labelPad: 8           // defaults to 5, must specify labelWidth to be honored
});
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="labelSeparator" Type="String">
                  <Summary><![CDATA[See {@link Ext.form.FormPanel}.{@link Ext.form.FormPanel#labelSeparator labelSeparator}.  Configuration
of this property at the <b>container</b> level takes precedence.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="trackLabels" Type="Boolean">
                  <Summary><![CDATA[True to show/hide the field label when the field is hidden. Defaults to <tt>false</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="fieldTpl" Type="Ext.Template">
                  <Summary><![CDATA[A {@link Ext.Template#compile compile}d {@link Ext.Template} for rendering
the fully wrapped, labeled and styled form Field. Defaults to:</p><pre><code>
new Ext.Template(
    &#39;&lt;div class="x-form-item {itemCls}" tabIndex="-1">&#39;,
        &#39;&lt;&#108;abel for="{id}" style="{labelStyle}" class="x-form-item-&#108;abel">{&#108;abel}{labelSeparator}&lt;/&#108;abel>&#39;,
        &#39;&lt;div class="x-form-element" id="x-form-el-{id}" style="{elementStyle}">&#39;,
        &#39;&lt;/div>&lt;div class="{clearCls}">&lt;/div>&#39;,
    '&lt;/div>'
);
</code></pre>
<p>This may be specified to produce a different DOM structure when rendering form Fields.</p>
<p>A description of the properties within the template follows:</p><div class="mdetail-params"><ul>
<li><b><tt>itemCls</tt></b> : String<div class="sub-desc">The CSS class applied to the outermost div wrapper
that contains this field label and field element (the default class is <tt>'x-form-item'</tt> and <tt>itemCls</tt>
will be added to that). If supplied, <tt>itemCls</tt> at the field level will override the default <tt>itemCls</tt>
supplied at the container level.</div></li>
<li><b><tt>id</tt></b> : String<div class="sub-desc">The id of the Field</div></li>
<li><b><tt>{@link #labelStyle}</tt></b> : String<div class="sub-desc">
A CSS style specification string to add to the field label for this field (defaults to <tt>''</tt> or the
{@link #labelStyle layout's value for <tt>labelStyle</tt>}).</div></li>
<li><b><tt>label</tt></b> : String<div class="sub-desc">The text to display as the label for this
field (defaults to <tt>''</tt>)</div></li>
<li><b><tt>{@link #labelSeparator}</tt></b> : String<div class="sub-desc">The separator to display after
the text of the label for this field (defaults to a colon <tt>':'</tt> or the
{@link #labelSeparator layout's value for labelSeparator}). To hide the separator use empty string ''.</div></li>
<li><b><tt>elementStyle</tt></b> : String<div class="sub-desc">The styles text for the input element's wrapper.</div></li>
<li><b><tt>clearCls</tt></b> : String<div class="sub-desc">The CSS class to apply to the special clearing div
rendered directly after each form field wrapper (defaults to <tt>'x-form-clear-left'</tt>)</div></li>
</ul></div>
<p>Also see <tt>{@link #getTemplateArgs}</tt></p>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="labelStyle">
                  <Summary><![CDATA[Read only. The CSS style specification string added to field labels in this layout if not
otherwise {@link Ext.Component#labelStyle specified by each contained field}.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getTemplateArgs">
                  <Summary><![CDATA[<p>Provides template arguments for rendering the fully wrapped, labeled and styled form Field.</p>
<p>This method returns an object hash containing properties used by the layout's {@link #fieldTpl}
to create a correctly wrapped, labeled and styled form Field. This may be overriden to
create custom layouts. The properties which must be returned are:</p><div class="mdetail-params"><ul>
<li><b><tt>itemCls</tt></b> : String<div class="sub-desc">The CSS class applied to the outermost div wrapper
that contains this field label and field element (the default class is <tt>'x-form-item'</tt> and <tt>itemCls</tt>
will be added to that). If supplied, <tt>itemCls</tt> at the field level will override the default <tt>itemCls</tt>
supplied at the container level.</div></li>
<li><b><tt>id</tt></b> : String<div class="sub-desc">The id of the Field</div></li>
<li><b><tt>{@link #labelStyle}</tt></b> : String<div class="sub-desc">
A CSS style specification string to add to the field label for this field (defaults to <tt>''</tt> or the
{@link #labelStyle layout's value for <tt>labelStyle</tt>}).</div></li>
<li><b><tt>label</tt></b> : String<div class="sub-desc">The text to display as the label for this
field (defaults to <tt>''</tt>)</div></li>
<li><b><tt>{@link #labelSeparator}</tt></b> : String<div class="sub-desc">The separator to display after
the text of the label for this field (defaults to a colon <tt>':'</tt> or the
{@link #labelSeparator layout's value for labelSeparator}). To hide the separator use empty string ''.</div></li>
<li><b><tt>elementStyle</tt></b> : String<div class="sub-desc">The styles text for the input element's wrapper.</div></li>
<li><b><tt>clearCls</tt></b> : String<div class="sub-desc">The CSS class to apply to the special clearing div
rendered directly after each form field wrapper (defaults to <tt>'x-form-clear-left'</tt>)</div></li>
</ul></div>]]></Summary>
                  <Parameters>
                    <Param Name="field">
                      <Summary><![CDATA[The {@link Field Ext.form.Field} being rendered.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="HBoxLayout" FullName="Ext.layout.HBoxLayout" Package="layout" DefinedIn="widgets\layout\BoxLayout.js" Extends="Ext.layout.BoxLayout">
              <Summary><![CDATA[A layout that arranges items horizontally]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="align" Type="String">
                  <Summary><![CDATA[Controls how the child items of the container are aligned. Acceptable configuration values for this
property are:
<div class="mdetail-params"><ul>
<li><b><tt>top</tt></b> : <b>Default</b><div class="sub-desc">child items are aligned vertically
at the <b>left</b> side of the container</div></li>
<li><b><tt>middle</tt></b> : <div class="sub-desc">child items are aligned vertically at the
<b>mid-height</b> of the container</div></li>
<li><b><tt>stretch</tt></b> : <div class="sub-desc">child items are stretched vertically to fill
the height of the container</div></li>
<li><b><tt>stretchmax</tt></b> : <div class="sub-desc">child items are stretched vertically to
the size of the largest item.</div></li>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="pack" Type="String">
                  <Summary><![CDATA[Controls how the child items of the container are packed together. Acceptable configuration values
for this property are:
<div class="mdetail-params"><ul>
<li><b><tt>start</tt></b> : <b>Default</b><div class="sub-desc">child items are packed together at
<b>left</b> side of container</div></li>
<li><b><tt>center</tt></b> : <div class="sub-desc">child items are packed together at
<b>mid-width</b> of container</div></li>
<li><b><tt>end</tt></b> : <div class="sub-desc">child items are packed together at <b>right</b>
side of container</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="flex" Type="Number">
                  <Summary><![CDATA[This configuation option is to be applied to <b>child <tt>items</tt></b> of the container managed
by this layout. Each child item with a <tt>flex</tt> property will be flexed <b>horizontally</b>
according to each item's <b>relative</b> <tt>flex</tt> value compared to the sum of all items with
a <tt>flex</tt> value specified.  Any child items that have either a <tt>flex = 0</tt> or
<tt>flex = undefined</tt> will not be 'flexed' (the initial size will not be changed).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="MenuLayout" FullName="Ext.layout.MenuLayout" Package="layout" DefinedIn="widgets\menu\Menu.js" Extends="Ext.layout.ContainerLayout">
              <Summary><![CDATA[<p>Layout manager used by {@link Ext.menu.Menu}. Generally this class should not need to be used directly.</p>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="TableLayout" FullName="Ext.layout.TableLayout" Package="layout" DefinedIn="widgets\layout\TableLayout.js" Extends="Ext.layout.ContainerLayout">
              <Summary><![CDATA[<p>This layout allows you to easily render content into an HTML table.  The total number of columns can be
specified, and rowspan and colspan can be used to create complex layouts within the table.
This class is intended to be extended or created via the layout:'table' {@link Ext.Container#layout} config,
and should generally not need to be created directly via the new keyword.</p>
<p>Note that when creating a layout via config, the layout-specific config properties must be passed in via
the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  In the
case of TableLayout, the only valid layout config property is {@link #columns}.  However, the items added to a
TableLayout can supply the following table-specific config properties:</p>
<ul>
<li><b>rowspan</b> Applied to the table cell containing the item.</li>
<li><b>colspan</b> Applied to the table cell containing the item.</li>
<li><b>cellId</b> An id applied to the table cell containing the item.</li>
<li><b>cellCls</b> A CSS class name added to the table cell containing the item.</li>
</ul>
<p>The basic concept of building up a TableLayout is conceptually very similar to building up a standard
HTML table.  You simply add each panel (or "cell") that you want to include along with any span attributes
specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.
Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the
total column count in the layoutConfig and start adding panels in their natural order from left to right,
top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,
how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add
up correctly in your overall layout or you'll end up with missing and/or extra cells!  Example usage:</p>
<pre><code>
// This code will generate a layout table that is 3 columns by 2 rows
// with some spanning included.  The basic layout will be:
// +--------+-----------------+
// |   A    |   B             |
// |        |--------+--------|
// |        |   C    |   D    |
// +--------+--------+--------+
var table = new Ext.Panel({
    title: 'Table Layout',
    layout:'table',
    defaults: {
        // applied to each contained panel
        bodyStyle:'padding:20px'
    },
    layoutConfig: {
        // The total column count must be specified here
        columns: 3
    },
    items: [{
        html: '&lt;p&gt;Cell A content&lt;/p&gt;',
        rowspan: 2
    },{
        html: '&lt;p&gt;Cell B content&lt;/p&gt;',
        colspan: 2
    },{
        html: '&lt;p&gt;Cell C content&lt;/p&gt;',
        cellCls: 'highlight'
    },{
        html: '&lt;p&gt;Cell D content&lt;/p&gt;'
    }]
});
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="columns" Type="Number">
                  <Summary><![CDATA[The total number of columns to create in the table for this layout.  If not specified, all Components added to
this layout will be rendered into a single row using one column per Component.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="tableAttrs" Type="Object">
                  <Summary><![CDATA[<p>An object containing properties which are added to the {@link Ext.DomHelper DomHelper} specification
used to create the layout's <tt>&lt;table&gt;</tt> element. Example:</p><pre><code>
{
    xtype: 'panel',
    layout: 'table',
    layoutConfig: {
        tableAttrs: {
        	style: {
        		width: '100%'
        	}
        },
        columns: 3
    }
}</code></pre>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="ToolbarLayout" FullName="Ext.layout.ToolbarLayout" Package="layout" DefinedIn="widgets\Toolbar.js" Extends="Ext.layout.ContainerLayout">
              <Summary><![CDATA[Layout manager implicitly used by Ext.Toolbar.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="VBoxLayout" FullName="Ext.layout.VBoxLayout" Package="layout" DefinedIn="widgets\layout\BoxLayout.js" Extends="Ext.layout.BoxLayout">
              <Summary><![CDATA[A layout that arranges items vertically]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="align" Type="String">
                  <Summary><![CDATA[Controls how the child items of the container are aligned. Acceptable configuration values for this
property are:
<div class="mdetail-params"><ul>
<li><b><tt>left</tt></b> : <b>Default</b><div class="sub-desc">child items are aligned horizontally
at the <b>left</b> side of the container</div></li>
<li><b><tt>center</tt></b> : <div class="sub-desc">child items are aligned horizontally at the
<b>mid-width</b> of the container</div></li>
<li><b><tt>stretch</tt></b> : <div class="sub-desc">child items are stretched horizontally to fill
the width of the container</div></li>
<li><b><tt>stretchmax</tt></b> : <div class="sub-desc">child items are stretched horizontally to
the size of the largest item.</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="pack" Type="String">
                  <Summary><![CDATA[Controls how the child items of the container are packed together. Acceptable configuration values
for this property are:
<div class="mdetail-params"><ul>
<li><b><tt>start</tt></b> : <b>Default</b><div class="sub-desc">child items are packed together at
<b>top</b> side of container</div></li>
<li><b><tt>center</tt></b> : <div class="sub-desc">child items are packed together at
<b>mid-height</b> of container</div></li>
<li><b><tt>end</tt></b> : <div class="sub-desc">child items are packed together at <b>bottom</b>
side of container</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="flex" Type="Number">
                  <Summary><![CDATA[This configuation option is to be applied to <b>child <tt>items</tt></b> of the container managed
by this layout. Each child item with a <tt>flex</tt> property will be flexed <b>vertically</b>
according to each item's <b>relative</b> <tt>flex</tt> value compared to the sum of all items with
a <tt>flex</tt> value specified.  Any child items that have either a <tt>flex = 0</tt> or
<tt>flex = undefined</tt> will not be 'flexed' (the initial size will not be changed).]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="menu" Path="menu" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="BaseItem" FullName="Ext.menu.BaseItem" Package="menu" DefinedIn="widgets\menu\BaseItem.js" Xtype="menubaseitem" Extends="Ext.Component" Subclasses="Ext.menu.Item,Ext.menu.Separator,Ext.menu.TextItem">
              <Summary><![CDATA[The base class for all items that render into menus.  BaseItem provides default rendering, activated state
management and base configuration options shared by all menu components.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new BaseItem.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="activeClass" Type="String" />
                <ConfigOption Name="canActivate" Type="Boolean" />
                <ConfigOption Name="clickHideDelay" Type="Number" />
                <ConfigOption Name="handler" Type="Function">
                  <Summary><![CDATA[A function that will handle the click event of this menu item (optional).
The handler is passed the following parameters:<div class="mdetail-params"><ul>
<li><code>b</code> : Item<div class="sub-desc">This menu Item.</div></li>
<li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideOnClick" Type="Boolean" />
                <ConfigOption Name="scope" Type="Object">
                  <Summary><![CDATA[The scope (<tt><b>this</b></tt> reference) in which the handler function will be called.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="parentMenu">
                  <Summary><![CDATA[The parent Menu of this Item.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="setHandler">
                  <Summary><![CDATA[Sets the function that will handle click events for this item (equivalent to passing in the {@link #handler}
config property).  If an existing handler is already registered, it will be unregistered for you.]]></Summary>
                  <Parameters>
                    <Param Name="handler" Type="Function">
                      <Summary><![CDATA[The function that should be called on click]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object">
                      <Summary><![CDATA[The scope that should be passed to the handler]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="activate">
                  <Summary><![CDATA[Fires when this item is activated.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.BaseItem">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="click">
                  <Summary><![CDATA[Fires when this item is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.BaseItem">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="deactivate">
                  <Summary><![CDATA[Fires when this item is deactivated.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.BaseItem">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="CheckItem" FullName="Ext.menu.CheckItem" Package="menu" DefinedIn="widgets\menu\CheckItem.js" Xtype="menucheckitem" Extends="Ext.menu.Item">
              <Summary><![CDATA[Adds a menu item that contains a checkbox by default, but can also be part of a radio group.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new CheckItem.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="checked" Type="Boolean">
                  <Summary><![CDATA[if this checkbox is part of a radio group (group = true) only the last item in the group that is
initialized with checked = true will be rendered as checked.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="group" Type="String">
                  <Summary><![CDATA[All check items with the same group name will automatically be grouped into a single-select
radio button group (defaults to '')]]></Summary>
                </ConfigOption>
                <ConfigOption Name="groupClass" Type="String" />
                <ConfigOption Name="itemCls" Type="String" />
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="checkHandler">
                  <Summary><![CDATA[A function that handles the checkchange event.  The function is undefined by default, but if an implementation
is provided, it will be called automatically when the checkchange event fires.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.CheckItem">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Boolean">
                      <Summary><![CDATA[The checked value that was set]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setChecked">
                  <Summary><![CDATA[Set the checked state of this item]]></Summary>
                  <Parameters>
                    <Param Name="checked" Type="Boolean">
                      <Summary><![CDATA[The new checked value]]></Summary>
                    </Param>
                    <Param Name="suppressEvent" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to prevent the checkchange event from firing (defaults to false)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforecheckchange">
                  <Summary><![CDATA[Fires before the checked value is set, providing an opportunity to cancel if needed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.CheckItem">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Boolean">
                      <Summary><![CDATA[The new checked value that will be set]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="checkchange">
                  <Summary><![CDATA[Fires after the checked value has been set.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.CheckItem">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Boolean">
                      <Summary><![CDATA[The checked value that was set]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="ColorMenu" FullName="Ext.menu.ColorMenu" Package="menu" DefinedIn="widgets\menu\ColorMenu.js" Xtype="colormenu" Extends="Ext.menu.Menu">
              <Summary><![CDATA[<p>A menu containing a {@link Ext.ColorPalette} Component.</p>
<p>Notes:</p><div class="mdetail-params"><ul>
<li>Although not listed here, the <b>constructor</b> for this class
accepts all of the configuration options of <b>{@link Ext.ColorPalette}</b>.</li>
<li>If subclassing ColorMenu, any configuration options for the ColorPalette must be
applied to the <tt><b>initialConfig</b></tt> property of the ColorMenu.
Applying {@link Ext.ColorPalette ColorPalette} configuration settings to
<b><tt>this</tt></b> will <b>not</b> affect the ColorPalette's configuration.</li>
</ul></div> *]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="enableScrolling" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="handler" Type="Function">
                  <Summary><![CDATA[Optional. A function that will handle the select event of this menu.
The handler is passed the following parameters:<div class="mdetail-params"><ul>
<li><code>palette</code> : ColorPalette<div class="sub-desc">The {@link #palette Ext.ColorPalette}.</div></li>
<li><code>color</code> : String<div class="sub-desc">The 6-digit color hex code (without the # symbol).</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideOnClick" Type="Boolean">
                  <Summary><![CDATA[False to continue showing the menu after a color is selected, defaults to true.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxHeight" Type="Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="scope" Type="Object">
                  <Summary><![CDATA[The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
function will be called.  Defaults to this ColorMenu instance.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="scrollIncrement" Type="Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="palette">
                  <Summary><![CDATA[The {@link Ext.ColorPalette} instance for this ColorMenu]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events>
                <Event Name="click">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="itemclick">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="select">
                  <Summary><![CDATA[Fires when a color is selected from the {@link #palette Ext.ColorPalette}.]]></Summary>
                  <Parameters>
                    <Param Name="palette" Type="Ext.ColorPalette">
                      <Summary><![CDATA[The {@link #palette Ext.ColorPalette}]]></Summary>
                    </Param>
                    <Param Name="color" Type="String">
                      <Summary><![CDATA[The 6-digit color hex code (without the # symbol)]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DateMenu" FullName="Ext.menu.DateMenu" Package="menu" DefinedIn="widgets\menu\DateMenu.js" Xtype="datemenu" Extends="Ext.menu.Menu">
              <Summary><![CDATA[<p>A menu containing an {@link Ext.DatePicker} Component.</p>
<p>Notes:</p><div class="mdetail-params"><ul>
<li>Although not listed here, the <b>constructor</b> for this class
accepts all of the configuration options of <b>{@link Ext.DatePicker}</b>.</li>
<li>If subclassing DateMenu, any configuration options for the DatePicker must be
applied to the <tt><b>initialConfig</b></tt> property of the DateMenu.
Applying {@link Ext.DatePicker DatePicker} configuration settings to
<b><tt>this</tt></b> will <b>not</b> affect the DatePicker's configuration.</li>
</ul></div>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="enableScrolling" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="handler" Type="Function">
                  <Summary><![CDATA[Optional. A function that will handle the select event of this menu.
The handler is passed the following parameters:<div class="mdetail-params"><ul>
<li><code>picker</code> : DatePicker<div class="sub-desc">The Ext.DatePicker.</div></li>
<li><code>date</code> : Date<div class="sub-desc">The selected date.</div></li>
</ul></div>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideOnClick" Type="Boolean">
                  <Summary><![CDATA[False to continue showing the menu after a date is selected, defaults to true.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxHeight" Type="Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="scope" Type="Object">
                  <Summary><![CDATA[The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
function will be called.  Defaults to this DateMenu instance.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="scrollIncrement" Type="Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="picker">
                  <Summary><![CDATA[The {@link Ext.DatePicker} instance for this DateMenu]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events>
                <Event Name="click">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="itemclick">
                  <Summary><![CDATA[@hide]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="select">
                  <Summary><![CDATA[Fires when a date is selected from the {@link #picker Ext.DatePicker}.]]></Summary>
                  <Parameters>
                    <Param Name="picker" Type="DatePicker">
                      <Summary><![CDATA[The {@link #picker Ext.DatePicker}]]></Summary>
                    </Param>
                    <Param Name="date" Type="Date">
                      <Summary><![CDATA[The selected date]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Item" FullName="Ext.menu.Item" Package="menu" DefinedIn="widgets\menu\Item.js" Xtype="menuitem" Extends="Ext.menu.BaseItem" Subclasses="Ext.menu.CheckItem">
              <Summary><![CDATA[A base class for all menu items that require menu-related functionality (like sub-menus) and are not static
display items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific
activation and click handling.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new Item.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="canActivate" Type="Boolean" />
                <ConfigOption Name="href" Type="String" />
                <ConfigOption Name="hrefTarget" Type="String" />
                <ConfigOption Name="icon" Type="String">
                  <Summary><![CDATA[icon is specified {@link #iconCls} should not be.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="iconCls" Type="String">
                  <Summary><![CDATA[this item (defaults to '').  If iconCls is specified {@link #icon} should not be.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="itemCls" Type="String" />
                <ConfigOption Name="menu" Type="Mixed">
                  <Summary><![CDATA[{@link Ext.menu.Menu} which acts as the submenu when this item is activated.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="showDelay" Type="Number" />
                <ConfigOption Name="text" Type="String" />
              </ConfigOptions>
              <Properties>
                <Property Name="menu">
                  <Summary><![CDATA[The submenu associated with this Item if one was configured.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="setIconClass">
                  <Summary><![CDATA[Sets the CSS class to apply to the item's icon element]]></Summary>
                  <Parameters>
                    <Param Name="cls" Type="String">
                      <Summary><![CDATA[The CSS class to apply]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setText">
                  <Summary><![CDATA[Sets the text to display in this menu item]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The text to display]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="Menu" FullName="Ext.menu.Menu" Package="menu" DefinedIn="widgets\menu\Menu.js" Xtype="menu" Extends="Ext.Container" Subclasses="Ext.menu.ColorMenu,Ext.menu.DateMenu">
              <Summary><![CDATA[<p>A menu object.  This is the container to which you may add menu items.  Menu can also serve as a base class
when you want a specialized menu based off of another component (like {@link Ext.menu.DateMenu} for example).</p>
<p>Menus may contain either {@link Ext.menu.Item menu items}, or general {@link Ext.Component Component}s.</p>
<p>To make a contained general {@link Ext.Component Component} line up with other {@link Ext.menu.Item menu items}
specify <tt>iconCls: 'no-icon'</tt>.  This reserves a space for an icon, and indents the Component in line
with the other menu items.  See {@link Ext.form.ComboBox}.{@link Ext.form.ComboBox#getListParent getListParent}
for an example.</p>
<p>By default, Menus are absolutely positioned, floating Components. By configuring a Menu with
<b><tt>{@link #floating}:false</tt></b>, a Menu may be used as child of a Container.</p>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="allowOtherMenus" Type="Boolean" />
                <ConfigOption Name="defaultAlign" Type="String">
                  <Summary><![CDATA[relative to its element of origin (defaults to 'tl-bl?')]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultOffsets" Type="Array">
                  <Summary><![CDATA[change the default Menu popup position after aligning according to the {@link #defaultAlign}
configuration. Defaults to <tt>[0, 0]</tt>.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaults" Type="Object">
                  <Summary><![CDATA[A config object that will be applied to all items added to this container either via the {@link #items}
config or via the {@link #add} method.  The defaults config can contain any number of
name/value property pairs to be added to each item, and should be valid for the types of items
being added to the menu.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="enableScrolling" Type="Boolean" />
                <ConfigOption Name="floating" Type="Boolean">
                  <Summary><![CDATA[<p>By default, a Menu configured as <b><code>floating:true</code></b>
will be rendered as an {@link Ext.Layer} (an absolutely positioned,
floating Component with zindex=15000).
If configured as <b><code>floating:false</code></b>, the Menu may be
used as child item of another Container instead of a free-floating
{@link Ext.Layer Layer}.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="ignoreParentClicks" Type="Boolean">
                  <Summary><![CDATA[a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).]]></Summary>
                </ConfigOption>
                <ConfigOption Name="items" Type="Mixed">
                  <Summary><![CDATA[An array of items to be added to this menu. Menus may contain either {@link Ext.menu.Item menu items},
or general {@link Ext.Component Component}s.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="layout" Type="String/Object">
                  <Summary><![CDATA[This class assigns a default layout (<code>layout:'<b>menu</b>'</code>).
Developers <i>may</i> override this configuration option if another layout is required.
See {@link Ext.Container#layout} for additional information.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxHeight" Type="Number" />
                <ConfigOption Name="minWidth" Type="Number" />
                <ConfigOption Name="scrollIncrement" Type="Number" />
                <ConfigOption Name="shadow" Type="Boolean/String">
                  <Summary><![CDATA[for bottom-right shadow (defaults to 'sides')]]></Summary>
                </ConfigOption>
                <ConfigOption Name="showSeparator" Type="Boolean" />
                <ConfigOption Name="subMenuAlign" Type="String">
                  <Summary><![CDATA[this menu (defaults to 'tl-tr?')]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="addElement">
                  <Summary><![CDATA[Adds an {@link Ext.Element} object to the menu]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Mixed">
                      <Summary><![CDATA[The element or DOM node to add, or its id]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.menu.Item">
                    <Summary><![CDATA[The menu item that was added]]></Summary>
                  </Return>
                </Method>
                <Method Name="addItem">
                  <Summary><![CDATA[Adds an existing object based on {@link Ext.menu.BaseItem} to the menu]]></Summary>
                  <Parameters>
                    <Param Name="item" Type="Ext.menu.Item">
                      <Summary><![CDATA[The menu item to add]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.menu.Item">
                    <Summary><![CDATA[The menu item that was added]]></Summary>
                  </Return>
                </Method>
                <Method Name="addMenuItem">
                  <Summary><![CDATA[Creates a new {@link Ext.menu.Item} based an the supplied config object and adds it to the menu]]></Summary>
                  <Parameters>
                    <Param Name="config" Type="Object">
                      <Summary><![CDATA[A MenuItem config object]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.menu.Item">
                    <Summary><![CDATA[The menu item that was added]]></Summary>
                  </Return>
                </Method>
                <Method Name="addSeparator">
                  <Summary><![CDATA[Adds a separator bar to the menu]]></Summary>
                  <Parameters />
                  <Return Type="Ext.menu.Item">
                    <Summary><![CDATA[The menu item that was added]]></Summary>
                  </Return>
                </Method>
                <Method Name="addText">
                  <Summary><![CDATA[Creates a new {@link Ext.menu.TextItem} with the supplied text and adds it to the menu]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The text to display in the menu item]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.menu.Item">
                    <Summary><![CDATA[The menu item that was added]]></Summary>
                  </Return>
                </Method>
                <Method Name="hide">
                  <Summary><![CDATA[Hides this menu and optionally all parent menus]]></Summary>
                  <Parameters>
                    <Param Name="deep" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to hide all parent menus recursively, if any (defaults to false)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="show">
                  <Summary><![CDATA[If <code>{@link #floating}=true</code>, shows this menu relative to
another element using {@link #showat}, otherwise uses {@link Ext.Component#show}.]]></Summary>
                  <Parameters>
                    <Param Name="element" Type="Mixed">
                      <Summary><![CDATA[The element to align to]]></Summary>
                    </Param>
                    <Param Name="position" Type="String" Optional="true">
                      <Summary><![CDATA[The {@link Ext.Element#alignTo} anchor position to use in aligning to
the element (defaults to this.defaultAlign)]]></Summary>
                    </Param>
                    <Param Name="parentMenu" Type="Ext.menu.Menu" Optional="true">
                      <Summary><![CDATA[This menu's parent menu, if applicable (defaults to undefined)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="showAt">
                  <Summary><![CDATA[Displays this menu at a specific xy position and fires the 'show' event if a
handler for the 'beforeshow' event does not return false cancelling the operation.]]></Summary>
                  <Parameters>
                    <Param Name="xyPosition" Type="Array">
                      <Summary><![CDATA[Contains X & Y [x, y] values for the position at which to show the menu (coordinates are page-based)]]></Summary>
                    </Param>
                    <Param Name="parentMenu" Type="Ext.menu.Menu" Optional="true">
                      <Summary><![CDATA[This menu's parent menu, if applicable (defaults to undefined)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="click">
                  <Summary><![CDATA[Fires when this menu is clicked (or when the enter key is pressed while it is active).]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.Menu">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="menuItem" Type="Ext.menu.Item">
                      <Summary><![CDATA[The menu item that was clicked]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="itemclick">
                  <Summary><![CDATA[Fires when a menu item contained in this menu is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="baseItem" Type="Ext.menu.BaseItem">
                      <Summary><![CDATA[The BaseItem that was clicked]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                  </Parameters>
                </Event>
                <Event Name="mouseout">
                  <Summary><![CDATA[Fires when the mouse exits this menu.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.Menu">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                    <Param Name="menuItem" Type="Ext.menu.Item">
                      <Summary><![CDATA[The menu item that was clicked]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="mouseover">
                  <Summary><![CDATA[Fires when the mouse is hovering over this menu.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.menu.Menu">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject" />
                    <Param Name="menuItem" Type="Ext.menu.Item">
                      <Summary><![CDATA[The menu item that was clicked]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="MenuMgr" FullName="Ext.menu.MenuMgr" Package="menu" DefinedIn="widgets\menu\MenuMgr.js" Singleton="true">
              <Summary><![CDATA[Provides a common registry of all menu items on a page so that they can be easily accessed by id.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="get">
                  <Summary><![CDATA[Returns a {@link Ext.menu.Menu} object]]></Summary>
                  <Parameters>
                    <Param Name="menu" Type="String/Object">
                      <Summary><![CDATA[The string menu id, an existing menu object reference, or a Menu config that will
be used to generate and return a new Menu instance.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.menu.Menu">
                    <Summary><![CDATA[The specified menu, or null if none are found]]></Summary>
                  </Return>
                </Method>
                <Method Name="hideAll">
                  <Summary><![CDATA[Hides all menus that are currently visible]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="Separator" FullName="Ext.menu.Separator" Package="menu" DefinedIn="widgets\menu\Separator.js" Xtype="menuseparator" Extends="Ext.menu.BaseItem">
              <Summary><![CDATA[Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will
add one of these by using "-" in you call to add() or in your items config rather than creating one directly.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[Configuration options]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="activeClass" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideOnClick" Type="Boolean" />
                <ConfigOption Name="itemCls" Type="String" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="TextItem" FullName="Ext.menu.TextItem" Package="menu" DefinedIn="widgets\menu\TextItem.js" Xtype="menutextitem" Extends="Ext.menu.BaseItem">
              <Summary><![CDATA[Adds a static text string to a menu, usually used as either a heading or group separator.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new TextItem.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object/String">
                    <Summary><![CDATA[If config is a string, it is used as the text to display, otherwise it is applied as a config object (and should contain a <tt>text</tt> property).]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="hideOnClick" Type="Boolean" />
                <ConfigOption Name="itemCls" Type="String" />
                <ConfigOption Name="text" Type="String" />
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="state" Path="state" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="CookieProvider" FullName="Ext.state.CookieProvider" Package="state" DefinedIn="state\CookieProvider.js" Extends="Ext.state.Provider">
              <Summary><![CDATA[The default Provider implementation which saves state via cookies.
<br />Usage:
 <pre><code>
   var cp = new Ext.state.CookieProvider({
       path: "/cgi-bin/",
       expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days
       domain: "extjs.com"
   });
   Ext.state.Manager.setProvider(cp);
 </code></pre>
@cfg {String} path The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)
@cfg {Date} expires The cookie expiration date (defaults to 7 days from now)
@cfg {String} domain The domain to save the cookie for.  Note that you cannot specify a different domain than
your page is on, but you can specify a sub-domain, or simply the domain itself like 'extjs.com' to include
all sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same
domain the page is running on including the 'www' like 'www.extjs.com')
@cfg {Boolean} secure True if the site is using SSL (defaults to false)]]></Summary>
              <Constructor>
                <Summary><![CDATA[Create a new CookieProvider.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[The configuration object]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="Manager" FullName="Ext.state.Manager" Package="state" DefinedIn="state\StateManager.js" Singleton="true">
              <Summary><![CDATA[This is the global state manager. By default all components that are "state aware" check this class
for state information if you don't pass them a custom state provider. In order for this class
to be useful, it must be initialized with a provider when your application initializes. Example usage:
 <pre><code>
// in your initialization function
init : function () {
   Ext.state.Manager.setProvider(new Ext.state.CookieProvider());
   var win = new Window(...);
   win.restoreState();
}
 </code></pre>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clear">
                  <Summary><![CDATA[Clears a value from the state]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The key name]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="get">
                  <Summary><![CDATA[Returns the current value for a key]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The key name]]></Summary>
                    </Param>
                    <Param Name="defaultValue" Type="Mixed">
                      <Summary><![CDATA[The default value to return if the key lookup does not match]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Mixed">
                    <Summary><![CDATA[The state data]]></Summary>
                  </Return>
                </Method>
                <Method Name="getProvider">
                  <Summary><![CDATA[Gets the currently configured state provider]]></Summary>
                  <Parameters />
                  <Return Type="Provider">
                    <Summary><![CDATA[The state provider]]></Summary>
                  </Return>
                </Method>
                <Method Name="set">
                  <Summary><![CDATA[Sets the value for a key]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The key name]]></Summary>
                    </Param>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The state data]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="setProvider">
                  <Summary><![CDATA[Configures the default state provider for your application]]></Summary>
                  <Parameters>
                    <Param Name="stateProvider" Type="Provider">
                      <Summary><![CDATA[The state provider to set]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="Provider" FullName="Ext.state.Provider" Package="state" DefinedIn="state\Provider.js" Subclasses="Ext.state.CookieProvider">
              <Summary><![CDATA[Abstract base class for state provider implementations. This class provides methods
for encoding and decoding <b>typed</b> variables including dates and defines the
Provider interface.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clear">
                  <Summary><![CDATA[Clears a value from the state]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The key name]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="decodeValue">
                  <Summary><![CDATA[Decodes a string previously encoded with {@link #encodeValue}.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The value to decode]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Mixed">
                    <Summary><![CDATA[The decoded value]]></Summary>
                  </Return>
                </Method>
                <Method Name="encodeValue">
                  <Summary><![CDATA[Encodes a value including type information.  Decode with {@link #decodeValue}.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The value to encode]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The encoded value]]></Summary>
                  </Return>
                </Method>
                <Method Name="get">
                  <Summary><![CDATA[Returns the current value for a key]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The key name]]></Summary>
                    </Param>
                    <Param Name="defaultValue" Type="Mixed">
                      <Summary><![CDATA[A default value to return if the key's value is not found]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Mixed">
                    <Summary><![CDATA[The state data]]></Summary>
                  </Return>
                </Method>
                <Method Name="set">
                  <Summary><![CDATA[Sets the value for a key]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The key name]]></Summary>
                    </Param>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The value to set]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="statechange">
                  <Summary><![CDATA[Fires when a state change occurs.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Provider">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[The state key which was changed]]></Summary>
                    </Param>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The encoded value for the state]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
          </Classes>
        </Package>
        <Package Name="tree" Path="tree" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="AsyncTreeNode" FullName="Ext.tree.AsyncTreeNode" Package="tree" DefinedIn="widgets\tree\AsyncTreeNode.js" Extends="Ext.tree.TreeNode">
              <Summary><![CDATA[@cfg {TreeLoader} loader A TreeLoader to be used by this node (defaults to the loader defined on the tree)]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="attributes" Type="Object/String">
                    <Summary><![CDATA[The attributes/config for the node or just a string with the text for the node]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="loader">
                  <Summary><![CDATA[The loader used by this node (defaults to using the tree's defined loader)]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="isLoaded">
                  <Summary><![CDATA[Returns true if this node has been loaded]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isLoading">
                  <Summary><![CDATA[Returns true if this node is currently loading]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="reload">
                  <Summary><![CDATA[Trigger a reload for this node]]></Summary>
                  <Parameters>
                    <Param Name="callback" Type="Function" />
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope in which to execute the callback.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforeload">
                  <Summary><![CDATA[Fires before this node is loaded, return false to cancel.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="load">
                  <Summary><![CDATA[Fires when this node is loaded.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="DefaultSelectionModel" FullName="Ext.tree.DefaultSelectionModel" Package="tree" DefinedIn="widgets\tree\TreeSelectionModel.js" Extends="Ext.util.Observable">
              <Summary><![CDATA[The default single selection for a TreePanel.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clearSelections">
                  <Summary><![CDATA[Clear all selections]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getSelectedNode">
                  <Summary><![CDATA[Get the selected node]]></Summary>
                  <Parameters />
                  <Return Type="TreeNode">
                    <Summary><![CDATA[The selected node]]></Summary>
                  </Return>
                </Method>
                <Method Name="isSelected">
                  <Summary><![CDATA[Returns true if the node is selected]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[The node to check]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="select">
                  <Summary><![CDATA[Select a node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[The node to select]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="TreeNode">
                    <Summary><![CDATA[The selected node]]></Summary>
                  </Return>
                </Method>
                <Method Name="selectNext">
                  <Summary><![CDATA[Selects the node above the selected node in the tree, intelligently walking the nodes]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="selectPrevious">
                  <Summary><![CDATA[Selects the node above the selected node in the tree, intelligently walking the nodes]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="unselect">
                  <Summary><![CDATA[Deselect a node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[The node to unselect]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforeselect">
                  <Summary><![CDATA[Fires before the selected node changes, return false to cancel the change.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="DefaultSelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[the new selection]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="selectionchange">
                  <Summary><![CDATA[Fires when the selected node changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="DefaultSelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[the new selection]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="MultiSelectionModel" FullName="Ext.tree.MultiSelectionModel" Package="tree" DefinedIn="widgets\tree\TreeSelectionModel.js" Extends="Ext.util.Observable">
              <Summary><![CDATA[Multi selection for a TreePanel.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clearSelections">
                  <Summary><![CDATA[Clear all selections]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getSelectedNodes">
                  <Summary><![CDATA[Returns an array of the selected nodes]]></Summary>
                  <Parameters />
                  <Return Type="Array" />
                </Method>
                <Method Name="isSelected">
                  <Summary><![CDATA[Returns true if the node is selected]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[The node to check]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean" />
                </Method>
                <Method Name="select">
                  <Summary><![CDATA[Select a node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[The node to select]]></Summary>
                    </Param>
                    <Param Name="e" Type="EventObject" Optional="true">
                      <Summary><![CDATA[An event associated with the selection]]></Summary>
                    </Param>
                    <Param Name="keepExisting" Type="Boolean">
                      <Summary><![CDATA[True to retain existing selections]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="TreeNode">
                    <Summary><![CDATA[The selected node]]></Summary>
                  </Return>
                </Method>
                <Method Name="unselect">
                  <Summary><![CDATA[Deselect a node.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="TreeNode">
                      <Summary><![CDATA[The node to unselect]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="selectionchange">
                  <Summary><![CDATA[Fires when the selected nodes change.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="MultiSelectionModel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="nodes" Type="Array">
                      <Summary><![CDATA[Array of the selected nodes]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="RootTreeNodeUI" FullName="Ext.tree.RootTreeNodeUI" Package="tree" DefinedIn="widgets\tree\TreeNodeUI.js">
              <Summary><![CDATA[This class provides the default UI implementation for <b>root</b> Ext TreeNodes.
The RootTreeNode UI implementation allows customizing the appearance of the root tree node.<br>
<p>
If you are customizing the Tree's user interface, you
may need to extend this class, but you should never need to instantiate this class.<br>]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods />
              <Events />
            </Class>
            <Class Name="TreeDragZone" FullName="Ext.tree.TreeDragZone" Package="tree" DefinedIn="widgets\tree\TreeDragZone.js" Extends="Ext.dd.DragZone">
              <Constructor>
                <Parameters>
                  <Param Name="tree" Type="String/HTMLElement/Element">
                    <Summary><![CDATA[The {@link Ext.tree.TreePanel} for which to enable dragging]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="ddGroup" Type="String">
                  <Summary><![CDATA[A named drag drop group to which this object belongs.  If a group is specified, then this object will only
interact with other drag drop objects in the same group (defaults to 'TreeDD').]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="tree">
                  <Summary><![CDATA[The TreePanel for this drag zone]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="TreeDropZone" FullName="Ext.tree.TreeDropZone" Package="tree" DefinedIn="widgets\tree\TreeDropZone.js" Extends="Ext.dd.DropZone">
              <Constructor>
                <Parameters>
                  <Param Name="tree" Type="String/HTMLElement/Element">
                    <Summary><![CDATA[The {@link Ext.tree.TreePanel} for which to enable dropping]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="allowContainerDrop" Type="String">
                  <Summary><![CDATA[True if drops on the tree container (outside of a specific tree node) are allowed (defaults to false)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="allowParentInsert" Type="Boolean">
                  <Summary><![CDATA[Allow inserting a dragged node between an expanded parent node and its first child that will become a
sibling of the parent when dropped (defaults to false)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="appendOnly" Type="String">
                  <Summary><![CDATA[True if the tree should only allow append drops (use for trees which are sorted, defaults to false)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="ddGroup" Type="String">
                  <Summary><![CDATA[A named drag drop group to which this object belongs.  If a group is specified, then this object will only
interact with other drag drop objects in the same group (defaults to 'TreeDD').]]></Summary>
                </ConfigOption>
                <ConfigOption Name="expandDelay" Type="String">
                  <Summary><![CDATA[The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node
over the target (defaults to 1000)]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="dragOverData">
                  <Summary><![CDATA[Arbitrary data that can be associated with this tree and will be included in the event object that gets
passed to any nodedragover event handler (defaults to {})]]></Summary>
                </Property>
                <Property Name="tree">
                  <Summary><![CDATA[The TreePanel for this drop zone]]></Summary>
                </Property>
              </Properties>
              <Methods />
              <Events />
            </Class>
            <Class Name="TreeEditor" FullName="Ext.tree.TreeEditor" Package="tree" DefinedIn="widgets\tree\TreeEditor.js" Extends="Ext.Editor">
              <Summary><![CDATA[Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used
as the editor field.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="tree" Type="TreePanel" />
                  <Param Name="fieldConfig" Type="Object" Optional="true">
                    <Summary><![CDATA[Either a prebuilt {@link Ext.form.Field} instance or a Field config object that will be applied to the default field instance (defaults to a {@link Ext.form.TextField}).]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" Optional="true">
                    <Summary><![CDATA[A TreeEditor config object]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="alignment" Type="String">
                  <Summary><![CDATA[The position to align to (see {@link Ext.Element#alignTo} for more details, defaults to "l-l").]]></Summary>
                </ConfigOption>
                <ConfigOption Name="cls" Type="String">
                  <Summary><![CDATA[CSS class to apply to the editor (defaults to "x-small-editor x-tree-editor")]]></Summary>
                </ConfigOption>
                <ConfigOption Name="editDelay" Type="Number">
                  <Summary><![CDATA[editing on the current node (defaults to 350).  If two clicks occur on the same node within this time span,
the editor for the node will display, otherwise it will be processed as a regular click.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideEl" Type="Boolean">
                  <Summary><![CDATA[True to hide the bound element while the editor is displayed (defaults to false)]]></Summary>
                </ConfigOption>
                <ConfigOption Name="maxWidth" Type="Number">
                  <Summary><![CDATA[The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed
the containing tree element's size, it will be automatically limited for you to the container width, taking
scroll and client offsets into account prior to each edit.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="shim" Type="Boolean">
                  <Summary><![CDATA[True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="editNode">
                  <Summary><![CDATA[The {@link Ext.tree.TreeNode TreeNode} this editor is bound to. Read-only.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="triggerEdit">
                  <Summary><![CDATA[Edit the text of the passed {@link Ext.tree.TreeNode TreeNode}.]]></Summary>
                  <Parameters>
                    <Param Name="nodeTreeNode" Type="Ext.tree.TreeNode} The">
                      <Summary><![CDATA[to edit. The TreeNode must be {@link Ext.tree.TreeNode#editable editable}.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TreeFilter" FullName="Ext.tree.TreeFilter" Package="tree" DefinedIn="widgets\tree\TreeFilter.js">
              <Summary><![CDATA[Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" Optional="true" />
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clear">
                  <Summary><![CDATA[Clears the current filter. Note: with the "remove" option
set a filter cannot be cleared.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="filter">
                  <Summary><![CDATA[Filter the data by a specific attribute.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String/RegExp">
                      <Summary><![CDATA[Either string that the attribute value
should start with or a RegExp to test against the attribute]]></Summary>
                    </Param>
                    <Param Name="attr" Type="String" Optional="true">
                      <Summary><![CDATA[The attribute passed in your node's attributes collection. Defaults to "text".]]></Summary>
                    </Param>
                    <Param Name="startNode" Type="TreeNode" Optional="true">
                      <Summary><![CDATA[The node to start the filter at.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="filterBy">
                  <Summary><![CDATA[Filter by a function. The passed function will be called with each
node in the tree (or from the startNode). If the function returns true, the node is kept
otherwise it is filtered. If a node is filtered, its children are also filtered.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The filter function]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope of the function (defaults to the current node)]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TreeLoader" FullName="Ext.tree.TreeLoader" Package="tree" DefinedIn="widgets\tree\TreeLoader.js" Extends="Ext.util.Observable">
              <Summary><![CDATA[A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}'s child
nodes from a specified URL. The response must be a JavaScript Array definition
whose elements are node definition objects. e.g.:
<pre><code>
    [{
        id: 1,
        text: 'A leaf Node',
        leaf: true
    },{
        id: 2,
        text: 'A folder Node',
        children: [{
            id: 3,
            text: 'A child Node',
            leaf: true
        }]
   }]
</code></pre>
<br><br>
A server request is sent, and child nodes are loaded only when a node is expanded.
The loading node's id is passed to the server under the parameter name "node" to
enable the server to produce the correct child nodes.
<br><br>
To pass extra parameters, an event handler may be attached to the "beforeload"
event, and the parameters specified in the TreeLoader's baseParams property:
<pre><code>
    myTreeLoader.on("beforeload", function (treeLoader, node) {
        this.baseParams.category = node.attributes.category;
    }, this);
</code></pre>
This would pass an HTTP parameter called "category" to the server containing
the value of the Node's "category" attribute.]]></Summary>
              <Constructor>
                <Summary><![CDATA[Creates a new Treeloader.]]></Summary>
                <Parameters>
                  <Param Name="config" Type="Object">
                    <Summary><![CDATA[A config object containing config properties.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="baseAttrs" Type="Object">
                  <Summary><![CDATA[created by this loader. If the attributes sent by the server have an attribute in this object,
they take priority.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="baseParams" Type="Object">
                  <Summary><![CDATA[specify HTTP parameters to be passed to each request for child nodes.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="clearOnLoad" Type="Boolean">
                  <Summary><![CDATA[child nodes before loading.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="dataUrl" Type="String">
                  <Summary><![CDATA[specifies an array of node definition objects representing the child nodes
to be loaded.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="directFn" Type="Function">
                  <Summary><![CDATA[Function to call when executing a request.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="paramOrder" Type="Array/String">
                  <Summary><![CDATA[A list of params to be executed
server side.  Specify the params in the order in which they must be executed on the server-side
as either (1) an Array of String values, or (2) a String of params delimited by either whitespace,
comma, or pipe. For example,
any of the following would be acceptable:<pre><code>
paramOrder: ['param1','param2','param3']
paramOrder: 'param1 param2 param3'
paramOrder: 'param1,param2,param3'
paramOrder: 'param1|param2|param'
     </code></pre>]]></Summary>
                </ConfigOption>
                <ConfigOption Name="paramsAsHash" Type="Boolean">
                  <Summary><![CDATA[Send parameters as a collection of named arguments (defaults to <tt>false</tt>). Providing a
<tt>{@link #paramOrder}</tt> nullifies this configuration.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="preloadChildren" Type="Boolean" />
                <ConfigOption Name="requestMethod" Type="String" />
                <ConfigOption Name="uiProviders" Type="Object">
                  <Summary><![CDATA[specify custom {@link Ext.tree.TreeNodeUI} implementations. If the optional
<i>uiProvider</i> attribute of a returned child node is a string rather
than a reference to a TreeNodeUI implementation, then that string value
is used as a property name in the uiProviders object.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="url" Type="String" />
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="createNode">
                  <Summary><![CDATA[<p>Override this function for custom TreeNode node implementation, or to
modify the attributes at creation time.</p>
Example:<pre><code>
new Ext.tree.TreePanel({
    ...
    loader: new Ext.tree.TreeLoader({
        url: 'dataUrl',
        createNode: function (attr) {
//          Allow consolidation consignments to have
//          consignments dropped into them.
            if (attr.isConsolidation) {
                attr.iconCls = 'x-consol',
                attr.allowDrop = true;
            }
            return Ext.tree.TreeLoader.prototype.createNode.call(this, attr);
        }
    }),
    ...
});
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="attrattributes" Type="Object} The">
                      <Summary><![CDATA[from which to create the new node.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="load">
                  <Summary><![CDATA[Load an {@link Ext.tree.TreeNode} from the URL specified in the constructor.
This is called automatically when a node is expanded, but may be used to reload
a node (or append new children if the {@link #clearOnLoad} option is false.)]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Ext.tree.TreeNode" />
                    <Param Name="callback" Type="Function" />
                    <Param Name="scope" Type="Object" />
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="beforeload">
                  <Summary><![CDATA[Fires before a network request is made to retrieve the Json text which specifies a node's children.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Object">
                      <Summary><![CDATA[The {@link Ext.tree.TreeNode} object being loaded.]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Object">
                      <Summary><![CDATA[The callback function specified in the {@link #load} call.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="load">
                  <Summary><![CDATA[Fires when the node has been successfuly loaded.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Object">
                      <Summary><![CDATA[The {@link Ext.tree.TreeNode} object being loaded.]]></Summary>
                    </Param>
                    <Param Name="response" Type="Object">
                      <Summary><![CDATA[The response object containing the data from the server.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="loadexception">
                  <Summary><![CDATA[Fires if the network request failed.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Object">
                      <Summary><![CDATA[The {@link Ext.tree.TreeNode} object being loaded.]]></Summary>
                    </Param>
                    <Param Name="response" Type="Object">
                      <Summary><![CDATA[The response object containing the data from the server.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="TreeNode" FullName="Ext.tree.TreeNode" Package="tree" DefinedIn="widgets\tree\TreeNode.js" Extends="Ext.data.Node" Subclasses="Ext.tree.AsyncTreeNode">
              <Summary><![CDATA[@cfg {String} text The text for this node
@cfg {Boolean} expanded true to start the node expanded
@cfg {Boolean} allowDrag False to make this node undraggable if {@link #draggable} = true (defaults to true)
@cfg {Boolean} allowDrop False if this node cannot have child nodes dropped on it (defaults to true)
@cfg {Boolean} disabled true to start the node disabled
@cfg {String} icon The path to an icon for the node. The preferred way to do this
is to use the cls or iconCls attributes and add the icon via a CSS background image.
@cfg {String} cls A css class to be added to the node
@cfg {String} iconCls A css class to be added to the nodes icon element for applying css background images
@cfg {String} href URL of the link used for the node (defaults to #)
@cfg {String} hrefTarget target frame for the link
@cfg {Boolean} hidden True to render hidden. (Defaults to false).
@cfg {String} qtip An Ext QuickTip for the node
@cfg {Boolean} expandable If set to true, the node will always show a plus/minus icon, even when empty
@cfg {String} qtipCfg An Ext QuickTip config for the node (used instead of qtip)
@cfg {Boolean} singleClickExpand True for single click expand on this node
@cfg {Function} uiProvider A UI <b>class</b> to use for this node (defaults to Ext.tree.TreeNodeUI)
@cfg {Boolean} checked True to render a checked checkbox for this node, false to render an unchecked checkbox
(defaults to undefined with no checkbox rendered)
@cfg {Boolean} draggable True to make this node draggable (defaults to false)
@cfg {Boolean} isTarget False to not allow this node to act as a drop target (defaults to true)
@cfg {Boolean} allowChildren False to not allow this node to have child nodes (defaults to true)
@cfg {Boolean} editable False to not allow this node to be edited by an (@link Ext.tree.TreeEditor} (defaults to true)]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="attributes" Type="Object/String">
                    <Summary><![CDATA[The attributes/config for the node or just a string with the text for the node]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties>
                <Property Name="disabled">
                  <Summary><![CDATA[True if this node is disabled.]]></Summary>
                </Property>
                <Property Name="hidden">
                  <Summary><![CDATA[True if this node is hidden.]]></Summary>
                </Property>
                <Property Name="text">
                  <Summary><![CDATA[Read-only. The text for this node. To change it use <code>{@link #setText}</code>.]]></Summary>
                </Property>
                <Property Name="ui">
                  <Summary><![CDATA[Read-only. The UI for this node]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="collapse">
                  <Summary><![CDATA[Collapse this node.]]></Summary>
                  <Parameters>
                    <Param Name="deep" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to collapse all children as well]]></Summary>
                    </Param>
                    <Param Name="anim" Type="Boolean" Optional="true">
                      <Summary><![CDATA[false to cancel the default animation]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function" Optional="true">
                      <Summary><![CDATA[A callback to be called when
expanding this node completes (does not wait for deep expand to complete).
Called with 1 parameter, this node.]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope in which to execute the callback.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="collapseChildNodes">
                  <Summary><![CDATA[Collapse all child nodes]]></Summary>
                  <Parameters>
                    <Param Name="deep" Type="Boolean" Optional="true">
                      <Summary><![CDATA[true if the child nodes should also collapse their child nodes]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="disable">
                  <Summary><![CDATA[Disables this node]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="enable">
                  <Summary><![CDATA[Enables this node]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="ensureVisible">
                  <Summary><![CDATA[Ensures all parent nodes are expanded, and if necessary, scrolls
the node into view.]]></Summary>
                  <Parameters>
                    <Param Name="callback" Type="Function" Optional="true">
                      <Summary><![CDATA[A function to call when the node has been made visible.]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope in which to execute the callback.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="expand">
                  <Summary><![CDATA[Expand this node.]]></Summary>
                  <Parameters>
                    <Param Name="deep" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to expand all children as well]]></Summary>
                    </Param>
                    <Param Name="anim" Type="Boolean" Optional="true">
                      <Summary><![CDATA[false to cancel the default animation]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function" Optional="true">
                      <Summary><![CDATA[A callback to be called when
expanding this node completes (does not wait for deep expand to complete).
Called with 1 parameter, this node.]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope in which to execute the callback.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="expandChildNodes">
                  <Summary><![CDATA[Expand all child nodes]]></Summary>
                  <Parameters>
                    <Param Name="deep" Type="Boolean" Optional="true">
                      <Summary><![CDATA[true if the child nodes should also expand their child nodes]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getUI">
                  <Summary><![CDATA[Returns the UI object for this node.
node. Unless otherwise specified in the {@link #uiProvider}, this will be an instance
of {@link Ext.tree.TreeNodeUI}]]></Summary>
                  <Parameters />
                  <Return Type="TreeNodeUI">
                    <Summary><![CDATA[The object which is providing the user interface for this tree]]></Summary>
                  </Return>
                </Method>
                <Method Name="isExpanded">
                  <Summary><![CDATA[Returns true if this node is expanded]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="isSelected">
                  <Summary><![CDATA[Returns true if this node is selected]]></Summary>
                  <Parameters />
                  <Return Type="Boolean" />
                </Method>
                <Method Name="select">
                  <Summary><![CDATA[Triggers selection of this node]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="setText">
                  <Summary><![CDATA[Sets the text for this node]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String" />
                  </Parameters>
                </Method>
                <Method Name="toggle">
                  <Summary><![CDATA[Toggles expanded/collapsed state of the node]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="unselect">
                  <Summary><![CDATA[Triggers deselection of this node]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events>
                <Event Name="beforechildrenrendered">
                  <Summary><![CDATA[Fires right before the child nodes for this node are rendered.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeclick">
                  <Summary><![CDATA[Fires before click processing. Return false to cancel the default action.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforecollapse">
                  <Summary><![CDATA[Fires before this node is collapsed, return false to cancel.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="deep" Type="Boolean" />
                    <Param Name="anim" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="beforedblclick">
                  <Summary><![CDATA[Fires before double click processing. Return false to cancel the default action.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeexpand">
                  <Summary><![CDATA[Fires before this node is expanded, return false to cancel.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="deep" Type="Boolean" />
                    <Param Name="anim" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="checkchange">
                  <Summary><![CDATA[Fires when a node with a checkbox's checked property changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="click">
                  <Summary><![CDATA[Fires when this node is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="collapse">
                  <Summary><![CDATA[Fires when this node is collapsed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="contextmenu">
                  <Summary><![CDATA[Fires when this node is right clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="dblclick">
                  <Summary><![CDATA[Fires when this node is double clicked.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="disabledchange">
                  <Summary><![CDATA[Fires when the disabled status of this node changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="disabled" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="expand">
                  <Summary><![CDATA[Fires when this node is expanded.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="textchange">
                  <Summary><![CDATA[Fires when the text for this node is changed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The new text]]></Summary>
                    </Param>
                    <Param Name="oldText" Type="String">
                      <Summary><![CDATA[The old text]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="TreeNodeUI" FullName="Ext.tree.TreeNodeUI" Package="tree" DefinedIn="widgets\tree\TreeNodeUI.js">
              <Summary><![CDATA[This class provides the default UI implementation for Ext TreeNodes.
The TreeNode UI implementation is separate from the
tree implementation, and allows customizing of the appearance of
tree nodes.<br>
<p>
If you are customizing the Tree's user interface, you
may need to extend this class, but you should never need to instantiate this class.<br>
<p>
This class provides access to the user interface components of an Ext TreeNode, through
{@link Ext.tree.TreeNode#getUI}]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="addClass">
                  <Summary><![CDATA[Adds one or more CSS classes to the node's UI element.
Duplicate classes are automatically filtered out.]]></Summary>
                  <Parameters>
                    <Param Name="className" Type="String/Array">
                      <Summary><![CDATA[The CSS class to add, or an array of classes]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getAnchor">
                  <Summary><![CDATA[Returns the &lt;a> element that provides focus for the node's UI.]]></Summary>
                  <Parameters />
                  <Return Type="HtmlElement">
                    <Summary><![CDATA[The DOM anchor element.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getIconEl">
                  <Summary><![CDATA[Returns the icon &lt;img> element.]]></Summary>
                  <Parameters />
                  <Return Type="HtmlElement">
                    <Summary><![CDATA[The DOM image element.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getTextEl">
                  <Summary><![CDATA[Returns the text node.]]></Summary>
                  <Parameters />
                  <Return Type="HtmlNode">
                    <Summary><![CDATA[The DOM text node.]]></Summary>
                  </Return>
                </Method>
                <Method Name="hide">
                  <Summary><![CDATA[Hides this node.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="isChecked">
                  <Summary><![CDATA[Returns the checked status of the node. If the node was rendered with no
checkbox, it returns false.]]></Summary>
                  <Parameters />
                  <Return Type="Boolean">
                    <Summary><![CDATA[The checked flag.]]></Summary>
                  </Return>
                </Method>
                <Method Name="removeClass">
                  <Summary><![CDATA[Removes one or more CSS classes from the node's UI element.]]></Summary>
                  <Parameters>
                    <Param Name="className" Type="String/Array">
                      <Summary><![CDATA[The CSS class to remove, or an array of classes]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="show">
                  <Summary><![CDATA[Shows this node.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="toggleCheck">
                  <Summary><![CDATA[Sets the checked status of the tree node to the passed value, or, if no value was passed,
toggles the checked status. If the node was rendered with no checkbox, this has no effect.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TreePanel" FullName="Ext.tree.TreePanel" Package="tree" DefinedIn="widgets\tree\TreePanel.js" Xtype="treepanel" Extends="Ext.Panel">
              <Summary><![CDATA[<p>The TreePanel provides tree-structured UI representation of tree-structured data.</p>
<p>{@link Ext.tree.TreeNode TreeNode}s added to the TreePanel may each contain metadata
used by your application in their {@link Ext.tree.TreeNode#attributes attributes} property.</p>
<p><b>A TreePanel must have a {@link #root} node before it is rendered.</b> This may either be
specified using the {@link #root} config option, or using the {@link #setRootNode} method.
<p>An example of tree rendered to an existing div:</p><pre><code>
var tree = new Ext.tree.TreePanel({
    renderTo: 'tree-div',
    useArrows: true,
    autoScroll: true,
    animate: true,
    enableDD: true,
    containerScroll: true,
    border: false,
    // auto create TreeLoader
    dataUrl: 'get-nodes.php',

    root: {
        nodeType: 'async',
        text: 'Ext JS',
        draggable: false,
        id: 'source'
    }
});

tree.getRootNode().expand();
</code></pre>
<p>The example above would work with a data packet similar to this:</p><pre><code>
[{
    "text": "adapter",
    "id": "source\/adapter",
    "cls": "folder"
}, {
    "text": "dd",
    "id": "source\/dd",
    "cls": "folder"
}, {
    "text": "debug.js",
    "id": "source\/debug.js",
    "leaf": true,
    "cls": "file"
}]
</code></pre>
<p>An example of tree within a Viewport:</p><pre><code>
new Ext.Viewport({
    layout: 'border',
    items: [{
        region: 'west',
        collapsible: true,
        title: 'Navigation',
        xtype: 'treepanel',
        width: 200,
        autoScroll: true,
        split: true,
        loader: new Ext.tree.TreeLoader(),
        root: new Ext.tree.AsyncTreeNode({
            expanded: true,
            children: [{
                text: 'Menu Option 1',
                leaf: true
            }, {
                text: 'Menu Option 2',
                leaf: true
            }, {
                text: 'Menu Option 3',
                leaf: true
            }]
        }),
        rootVisible: false,
        listeners: {
            click: function (n) {
                Ext.Msg.alert('Navigation Tree Click', 'You clicked: "' + n.attributes.text + '"');
            }
        }
    }, {
        region: 'center',
        xtype: 'tabpanel',
        // remaining code not shown ...
    }]
});
</code></pre>

@cfg {Ext.tree.TreeNode} root The root node for the tree.
@cfg {Boolean} rootVisible <tt>false</tt> to hide the root node (defaults to <tt>true</tt>)
@cfg {Boolean} lines <tt>false</tt> to disable tree lines (defaults to <tt>true</tt>)
@cfg {Boolean} enableDD <tt>true</tt> to enable drag and drop
@cfg {Boolean} enableDrag <tt>true</tt> to enable just drag
@cfg {Boolean} enableDrop <tt>true</tt> to enable just drop
@cfg {Object} dragConfig Custom config to pass to the {@link Ext.tree.TreeDragZone} instance
@cfg {Object} dropConfig Custom config to pass to the {@link Ext.tree.TreeDropZone} instance
@cfg {String} ddGroup The DD group this TreePanel belongs to
@cfg {Boolean} ddAppendOnly <tt>true</tt> if the tree should only allow append drops (use for trees which are sorted)
@cfg {Boolean} ddScroll <tt>true</tt> to enable body scrolling
@cfg {Boolean} containerScroll <tt>true</tt> to register this container with ScrollManager
@cfg {Boolean} hlDrop <tt>false</tt> to disable node highlight on drop (defaults to the value of {@link Ext#enableFx})
@cfg {String} hlColor The color of the node highlight (defaults to <tt>'C3DAF9'</tt>)
@cfg {Boolean} animate <tt>true</tt> to enable animated expand/collapse (defaults to the value of {@link Ext#enableFx})
@cfg {Boolean} singleExpand <tt>true</tt> if only 1 node per branch may be expanded
@cfg {Object} selModel A tree selection model to use with this TreePanel (defaults to an {@link Ext.tree.DefaultSelectionModel})
@cfg {Boolean} trackMouseOver <tt>false</tt> to disable mouse over highlighting
@cfg {Ext.tree.TreeLoader} loader A {@link Ext.tree.TreeLoader} for use with this TreePanel
@cfg {String} pathSeparator The token used to separate sub-paths in path strings (defaults to <tt>'/'</tt>)
@cfg {Boolean} useArrows <tt>true</tt> to use Vista-style arrows in the tree (defaults to <tt>false</tt>)
@cfg {String} requestMethod The HTTP request method for loading data (defaults to the value of {@link Ext.Ajax#method}).]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="activeItem" Type="String/Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoDestroy" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoLoad" Type="Object/String/Function">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="autoWidth" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="bufferResize" Type="Boolean/Number">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaultType" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="defaults" Type="Object">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="hideBorders" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="items" Type="Mixed">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="layout" Type="String">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="layoutConfig" Type="Object">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
                <ConfigOption Name="monitorResize" Type="Boolean">
                  <Summary><![CDATA[@hide]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="root">
                  <Summary><![CDATA[The root node of this tree.]]></Summary>
                </Property>
                <Property Name="dropZone">
                  <Summary><![CDATA[The dropZone used by this tree if drop is enabled (see {@link #enableDD} or {@link #enableDrop})]]></Summary>
                </Property>
                <Property Name="dragZone">
                  <Summary><![CDATA[The dragZone used by this tree if drag is enabled (see {@link #enableDD} or {@link #enableDrag})]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="getRootNode">
                  <Summary><![CDATA[Returns this root node for this tree]]></Summary>
                  <Parameters />
                  <Return Type="Node" />
                </Method>
                <Method Name="setRootNode">
                  <Summary><![CDATA[Sets the root node for this tree. If the TreePanel has already rendered a root node, the
previous root node (and all of its descendants) are destroyed before the new root node is rendered.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node" />
                  </Parameters>
                  <Return Type="Node" />
                </Method>
                <Method Name="getNodeById">
                  <Summary><![CDATA[Gets a node in this tree by its id]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String" />
                  </Parameters>
                  <Return Type="Node" />
                </Method>
                <Method Name="getChecked">
                  <Summary><![CDATA[Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. "id")]]></Summary>
                  <Parameters>
                    <Param Name="attribute" Type="String" Optional="true">
                      <Summary><![CDATA[Defaults to null (return the actual nodes)]]></Summary>
                    </Param>
                    <Param Name="startNode" Type="TreeNode" Optional="true">
                      <Summary><![CDATA[The node to start from, defaults to the root]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Array" />
                </Method>
                <Method Name="getEl">
                  <Summary><![CDATA[Returns the container element for this TreePanel.]]></Summary>
                  <Parameters />
                  <Return Type="Element">
                    <Summary><![CDATA[The container element for this TreePanel.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getLoader">
                  <Summary><![CDATA[Returns the default {@link Ext.tree.TreeLoader} for this TreePanel.]]></Summary>
                  <Parameters />
                  <Return Type="Ext.tree.TreeLoader">
                    <Summary><![CDATA[The TreeLoader for this TreePanel.]]></Summary>
                  </Return>
                </Method>
                <Method Name="expandAll">
                  <Summary><![CDATA[Expand all nodes]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="collapseAll">
                  <Summary><![CDATA[Collapse all nodes]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="getSelectionModel">
                  <Summary><![CDATA[Returns the selection model used by this TreePanel.]]></Summary>
                  <Parameters />
                  <Return Type="TreeSelectionModel">
                    <Summary><![CDATA[The selection model used by this TreePanel]]></Summary>
                  </Return>
                </Method>
                <Method Name="expandPath">
                  <Summary><![CDATA[Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Ext.data.Node#getPath}]]></Summary>
                  <Parameters>
                    <Param Name="path" Type="String" />
                    <Param Name="attr" Type="String" Optional="true">
                      <Summary><![CDATA[The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function" Optional="true">
                      <Summary><![CDATA[The callback to call when the expand is complete. The callback will be called with
(bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="selectPath">
                  <Summary><![CDATA[Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Ext.data.Node#getPath}]]></Summary>
                  <Parameters>
                    <Param Name="path" Type="String" />
                    <Param Name="attr" Type="String" Optional="true">
                      <Summary><![CDATA[The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)]]></Summary>
                    </Param>
                    <Param Name="callback" Type="Function" Optional="true">
                      <Summary><![CDATA[The callback to call when the selection is complete. The callback will be called with
(bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="getTreeEl">
                  <Summary><![CDATA[Returns the underlying Element for this tree]]></Summary>
                  <Parameters />
                  <Return Type="Ext.Element">
                    <Summary><![CDATA[The Element]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events>
                <Event Name="append">
                  <Summary><![CDATA[Fires when a new child node is appended to a node in this tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The newly appended node]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the newly appended node]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="remove">
                  <Summary><![CDATA[Fires when a child node is removed from a node in this tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="movenode">
                  <Summary><![CDATA[Fires when a node is moved to a new location in the tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node moved]]></Summary>
                    </Param>
                    <Param Name="oldParent" Type="Node">
                      <Summary><![CDATA[The old parent of this node]]></Summary>
                    </Param>
                    <Param Name="newParent" Type="Node">
                      <Summary><![CDATA[The new parent of this node]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index it was moved to]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="insert">
                  <Summary><![CDATA[Fires when a new child node is inserted in a node in this tree.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node inserted]]></Summary>
                    </Param>
                    <Param Name="refNode" Type="Node">
                      <Summary><![CDATA[The child node the node was inserted before]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeappend">
                  <Summary><![CDATA[Fires before a new child is appended to a node in this tree, return false to cancel the append.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be appended]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeremove">
                  <Summary><![CDATA[Fires before a child is removed from a node in this tree, return false to cancel the remove.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be removed]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforemovenode">
                  <Summary><![CDATA[Fires before a node is moved to a new location in the tree. Return false to cancel the move.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node being moved]]></Summary>
                    </Param>
                    <Param Name="oldParent" Type="Node">
                      <Summary><![CDATA[The parent of the node]]></Summary>
                    </Param>
                    <Param Name="newParent" Type="Node">
                      <Summary><![CDATA[The new parent the node is moving to]]></Summary>
                    </Param>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index it is being moved to]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeinsert">
                  <Summary><![CDATA[Fires before a new child is inserted in a node in this tree, return false to cancel the insert.]]></Summary>
                  <Parameters>
                    <Param Name="tree" Type="Tree">
                      <Summary><![CDATA[The owner tree]]></Summary>
                    </Param>
                    <Param Name="parent" Type="Node">
                      <Summary><![CDATA[The parent node]]></Summary>
                    </Param>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The child node to be inserted]]></Summary>
                    </Param>
                    <Param Name="refNode" Type="Node">
                      <Summary><![CDATA[The child node the node is being inserted before]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeload">
                  <Summary><![CDATA[Fires before a node is loaded, return false to cancel.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node being loaded]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="load">
                  <Summary><![CDATA[Fires when a node is loaded.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node that was loaded]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="textchange">
                  <Summary><![CDATA[Fires when the text for a node is changed.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The new text]]></Summary>
                    </Param>
                    <Param Name="oldText" Type="String">
                      <Summary><![CDATA[The old text]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeexpandnode">
                  <Summary><![CDATA[Fires before a node is expanded, return false to cancel.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="deep" Type="Boolean" />
                    <Param Name="anim" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="beforecollapsenode">
                  <Summary><![CDATA[Fires before a node is collapsed, return false to cancel.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="deep" Type="Boolean" />
                    <Param Name="anim" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="expandnode">
                  <Summary><![CDATA[Fires when a node is expanded.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="disabledchange">
                  <Summary><![CDATA[Fires when the disabled status of a node changes.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="disabled" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="collapsenode">
                  <Summary><![CDATA[Fires when a node is collapsed.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforeclick">
                  <Summary><![CDATA[Fires before click processing on a node. Return false to cancel the default action.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="click">
                  <Summary><![CDATA[Fires when a node is clicked.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="checkchange">
                  <Summary><![CDATA[Fires when a node with a checkbox's checked property changes.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Node">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="checked" Type="Boolean" />
                  </Parameters>
                </Event>
                <Event Name="beforedblclick">
                  <Summary><![CDATA[Fires before double click processing on a node. Return false to cancel the default action.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="dblclick">
                  <Summary><![CDATA[Fires when a node is double clicked.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="contextmenu">
                  <Summary><![CDATA[Fires when a node is right clicked. To display a context menu in response to this event, first create a Menu object (see {@link Ext.menu.Menu} for details), then add a handler for this event:<pre><code> new Ext.tree.TreePanel({ title: 'My TreePanel', root: new Ext.tree.AsyncTreeNode({ text: 'The Root', children: [ { text: 'Child node 1', leaf: true }, { text: 'Child node 2', leaf: true } ] }), contextMenu: new Ext.menu.Menu({ items: [{ id: 'delete-node', text: 'Delete Node' }], listeners: { itemclick: function (item) { switch (item.id) { case 'delete-node': var n = item.parentMenu.contextNode; if (n.parentNode) { n.remove(); } break; } } } }), listeners: { contextmenu: function (node, e) { //     Register the context node with the menu so that a Menu Item's handler function can access //     it via its {@link Ext.menu.BaseItem#parentMenu parentMenu} property. node.select(); var c = node.getOwnerTree().contextMenu; c.contextNode = node; c.showAt(e.getXY()); } } }); </code></pre>.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                    <Param Name="e" Type="Ext.EventObject">
                      <Summary><![CDATA[The event object]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforechildrenrendered">
                  <Summary><![CDATA[Fires right before the child nodes for a node are rendered.]]></Summary>
                  <Parameters>
                    <Param Name="node" Type="Node">
                      <Summary><![CDATA[The node]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="startdrag">
                  <Summary><![CDATA[Fires when a node starts being dragged.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.tree.TreePanel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Ext.tree.TreeNode" />
                    <Param Name="e" Type="event">
                      <Summary><![CDATA[The raw browser event]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="enddrag">
                  <Summary><![CDATA[Fires when a drag operation is complete.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.tree.TreePanel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Ext.tree.TreeNode" />
                    <Param Name="e" Type="event">
                      <Summary><![CDATA[The raw browser event]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="dragdrop">
                  <Summary><![CDATA[Fires when a dragged node is dropped on a valid DD target.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.tree.TreePanel">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                    <Param Name="node" Type="Ext.tree.TreeNode" />
                    <Param Name="dd" Type="DD">
                      <Summary><![CDATA[The dd it was dropped on]]></Summary>
                    </Param>
                    <Param Name="e" Type="event">
                      <Summary><![CDATA[The raw browser event]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="beforenodedrop">
                  <Summary><![CDATA[Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop. The dropEvent passed to handlers has the following properties:<br /> <ul style="padding:5px;padding-left:16px;"> <li>tree - The TreePanel</li> <li>target - The node being targeted for the drop</li> <li>data - The drag data from the drag source</li> <li>point - The point of the drop - append, above or below</li> <li>source - The drag source</li> <li>rawEvent - Raw mouse event</li> <li>dropNode - Drop node(s) provided by the source <b>OR</b> you can supply node(s) to be inserted by setting them on this object.</li> <li>cancel - Set this to true to cancel the drop.</li> <li>dropStatus - If the default drop action is cancelled but the drop is valid, setting this to true will prevent the animated "repair" from appearing.</li> </ul>.]]></Summary>
                  <Parameters>
                    <Param Name="dropEvent" Type="Object" />
                  </Parameters>
                </Event>
                <Event Name="nodedrop">
                  <Summary><![CDATA[Fires after a DD object is dropped on a node in this tree. The dropEvent passed to handlers has the following properties:<br /> <ul style="padding:5px;padding-left:16px;"> <li>tree - The TreePanel</li> <li>target - The node being targeted for the drop</li> <li>data - The drag data from the drag source</li> <li>point - The point of the drop - append, above or below</li> <li>source - The drag source</li> <li>rawEvent - Raw mouse event</li> <li>dropNode - Dropped node(s).</li> </ul>.]]></Summary>
                  <Parameters>
                    <Param Name="dropEvent" Type="Object" />
                  </Parameters>
                </Event>
                <Event Name="nodedragover">
                  <Summary><![CDATA[Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed. The dragOverEvent passed to handlers has the following properties:<br /> <ul style="padding:5px;padding-left:16px;"> <li>tree - The TreePanel</li> <li>target - The node being targeted for the drop</li> <li>data - The drag data from the drag source</li> <li>point - The point of the drop - append, above or below</li> <li>source - The drag source</li> <li>rawEvent - Raw mouse event</li> <li>dropNode - Drop node(s) provided by the source.</li> <li>cancel - Set this to true to signal drop not allowed.</li> </ul>.]]></Summary>
                  <Parameters>
                    <Param Name="dragOverEvent" Type="Object" />
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="TreeSorter" FullName="Ext.tree.TreeSorter" Package="tree" DefinedIn="widgets\tree\TreeSorter.js">
              <Summary><![CDATA[Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the
associated TreePanel that might affect the tree's sort order (beforechildrenrendered, append, insert and textchange).
Example usage:<br />
<pre><code>
new Ext.tree.TreeSorter(myTree, {
    folderSort: true,
    dir: "desc",
    sortType: function (node) {
        // sort by a custom, typed attribute:
        return parseInt(node.id, 10);
    }
});
</code></pre>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="tree" Type="TreePanel" />
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="caseSensitive" Type="Boolean" />
                <ConfigOption Name="dir" Type="String" />
                <ConfigOption Name="folderSort" Type="Boolean" />
                <ConfigOption Name="leafAttr" Type="String" />
                <ConfigOption Name="property" Type="String">
                  <Summary><![CDATA[property is only used if no {@link #sortType} function is specified, otherwise it is ignored.]]></Summary>
                </ConfigOption>
                <ConfigOption Name="sortType" Type="Function">
                  <Summary><![CDATA[will be called with a single parameter (the {@link Ext.tree.TreeNode} being evaluated) and is expected to return
the node's sort value cast to the specific data type required for sorting.  This could be used, for example, when
a node's text (or other attribute) should be sorted as a date or numeric value.  See the class description for
example usage.  Note that if a sortType is specified, any {@link #property} config will be ignored.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods />
              <Events />
            </Class>
          </Classes>
        </Package>
        <Package Name="util" Path="util" Parent="Ext">
          <Packages />
          <Classes>
            <Class Name="ClickRepeater" FullName="Ext.util.ClickRepeater" Package="util" DefinedIn="util\ClickRepeater.js" Extends="Ext.util.Observable">
              <Summary><![CDATA[
 A wrapper class which can be applied to any element. Fires a "click" event while the
 mouse is pressed. The interval between firings may be specified in the config but
 defaults to 20 milliseconds.

 Optionally, a CSS class may be applied to the element during the time it is pressed.

 @cfg {Mixed} el The element to act as a button.
 @cfg {Number} delay The initial delay before the repeating event begins firing.
 Similar to an autorepeat key delay.
 @cfg {Number} interval The interval between firings of the "click" event. Default 20 ms.
 @cfg {String} pressClass A CSS class name to be applied to the element while pressed.
 @cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.
           "interval" and "delay" are ignored.
 @cfg {Boolean} preventDefault True to prevent the default click event
 @cfg {Boolean} stopDefault True to stop the default click event

 @history
    2007-02-02 jvs Original code contributed by Nige "Animal" White
    2007-02-02 jvs Renamed to ClickRepeater
    2007-02-03 jvs Modifications for FF Mac and Safari]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="el" Type="Mixed">
                    <Summary><![CDATA[The element to listen on]]></Summary>
                  </Param>
                  <Param Name="config" Type="Object" />
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="disable">
                  <Summary><![CDATA[Disables the repeater and stops events from firing.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="enable">
                  <Summary><![CDATA[Enables the repeater and allows events to fire.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="setDisabled">
                  <Summary><![CDATA[Convenience function for setting disabled/enabled by boolean.]]></Summary>
                  <Parameters>
                    <Param Name="disabled" Type="Boolean" />
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="click">
                  <Summary><![CDATA[Fires on a specified interval during the time the element is pressed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.util.ClickRepeater">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="mousedown">
                  <Summary><![CDATA[Fires when the mouse button is depressed.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.util.ClickRepeater">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="mouseup">
                  <Summary><![CDATA[Fires when the mouse key is released.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="Ext.util.ClickRepeater">
                      <Summary><![CDATA[this]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Cookies" FullName="Ext.util.Cookies" Package="util" DefinedIn="util\Cookies.js" Singleton="true">
              <Summary><![CDATA[Utility class for managing and interacting with cookies.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="clear">
                  <Summary><![CDATA[Removes a cookie with the provided name from the browser
if found by setting its expiration date to sometime in the past.]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The name of the cookie to remove]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="get">
                  <Summary><![CDATA[Retrieves cookies that are accessible by the current page. If a cookie
does not exist, <code>get()</code> returns <tt>null</tt>.  The following
example retrieves the cookie called "valid" and stores the String value
in the variable <tt>validStatus</tt>.
<pre><code>
var validStatus = Ext.util.Cookies.get("valid");
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The name of the cookie to get
null if the cookie name does not exist.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Mixed">
                    <Summary><![CDATA[Returns the cookie value for the specified name;]]></Summary>
                  </Return>
                </Method>
                <Method Name="set">
                  <Summary><![CDATA[Create a cookie with the specified name and value. Additional settings
for the cookie may be optionally specified (for example: expiration,
access restriction, SSL).]]></Summary>
                  <Parameters>
                    <Param Name="name" Type="String">
                      <Summary><![CDATA[The name of the cookie to set.]]></Summary>
                    </Param>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The value to set for the cookie.]]></Summary>
                    </Param>
                    <Param Name="expires" Type="Object" Optional="true">
                      <Summary><![CDATA[Specify an expiration date the
cookie is to persist until.  Note that the specified Date object will
be converted to Greenwich Mean Time (GMT).]]></Summary>
                    </Param>
                    <Param Name="path" Type="String" Optional="true">
                      <Summary><![CDATA[Setting a path on the cookie restricts
access to pages that match that path. Defaults to all pages (<tt>'/'</tt>).]]></Summary>
                    </Param>
                    <Param Name="domain" Type="String" Optional="true">
                      <Summary><![CDATA[Setting a domain restricts access to
pages on a given domain (typically used to allow cookie access across
subdomains). For example, "extjs.com" will create a cookie that can be
accessed from any subdomain of extjs.com, including www.extjs.com,
support.extjs.com, etc.]]></Summary>
                    </Param>
                    <Param Name="secure" Type="Boolean" Optional="true">
                      <Summary><![CDATA[Specify true to indicate that the cookie
should only be accessible via SSL on a page using the HTTPS protocol.
Defaults to <tt>false</tt>. Note that this will only work if the page
calling this code uses the HTTPS protocol, otherwise the cookie will be
created with default options.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="CSS" FullName="Ext.util.CSS" Package="util" DefinedIn="util\CSS.js" Singleton="true">
              <Summary><![CDATA[Utility class for manipulating CSS rules]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="createStyleSheet">
                  <Summary><![CDATA[Creates a stylesheet from a text blob of rules.
These rules will be wrapped in a STYLE tag and appended to the HEAD of the document.]]></Summary>
                  <Parameters>
                    <Param Name="cssText" Type="String">
                      <Summary><![CDATA[The text containing the css rules]]></Summary>
                    </Param>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[An id to add to the stylesheet for later removal]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="StyleSheet" />
                </Method>
                <Method Name="getRule">
                  <Summary><![CDATA[Gets an an individual CSS rule by selector(s)]]></Summary>
                  <Parameters>
                    <Param Name="selector" Type="String/Array">
                      <Summary><![CDATA[The CSS selector or an array of selectors to try. The first selector that is found is returned.]]></Summary>
                    </Param>
                    <Param Name="refreshCache" Type="Boolean">
                      <Summary><![CDATA[true to refresh the internal cache if you have recently updated any rules or added styles dynamically]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="CSSRule">
                    <Summary><![CDATA[The CSS rule or null if one is not found]]></Summary>
                  </Return>
                </Method>
                <Method Name="getRules">
                  <Summary><![CDATA[Gets all css rules for the document]]></Summary>
                  <Parameters>
                    <Param Name="refreshCache" Type="Boolean">
                      <Summary><![CDATA[true to refresh the internal cache]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[An object (hash) of rules indexed by selector]]></Summary>
                  </Return>
                </Method>
                <Method Name="refreshCache">
                  <Summary><![CDATA[Refresh the rule cache if you have dynamically added stylesheets]]></Summary>
                  <Parameters />
                  <Return Type="Object">
                    <Summary><![CDATA[An object (hash) of rules indexed by selector]]></Summary>
                  </Return>
                </Method>
                <Method Name="removeStyleSheet">
                  <Summary><![CDATA[Removes a style or link tag by id]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of the tag]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="swapStyleSheet">
                  <Summary><![CDATA[Dynamically swaps an existing stylesheet reference for a new one]]></Summary>
                  <Parameters>
                    <Param Name="id" Type="String">
                      <Summary><![CDATA[The id of an existing link tag to remove]]></Summary>
                    </Param>
                    <Param Name="url" Type="String">
                      <Summary><![CDATA[The href of the new stylesheet to include]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="updateRule">
                  <Summary><![CDATA[Updates a rule property]]></Summary>
                  <Parameters>
                    <Param Name="selector" Type="String/Array">
                      <Summary><![CDATA[If it's an array it tries each selector until it finds one. Stops immediately once one is found.]]></Summary>
                    </Param>
                    <Param Name="property" Type="String">
                      <Summary><![CDATA[The css property]]></Summary>
                    </Param>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The new value for the property]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[true If a rule was found and updated]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="DelayedTask" FullName="Ext.util.DelayedTask" Package="util" DefinedIn="util\core\DelayedTask.js">
              <Summary><![CDATA[<p> The DelayedTask class provides a convenient way to "buffer" the execution of a method,
performing setTimeout where a new timeout cancels the old timeout. When called, the
task will wait the specified time period before executing. If durng that time period,
the task is called again, the original call will be cancelled. This continues so that
the function is only called a single time for each iteration.</p>
<p>This method is especially useful for things like detecting whether a user has finished
typing in a text field. An example would be performing validation on a keypress. You can
use this class to buffer the keypress events for a certain number of milliseconds, and
perform only if they stop for that amount of time.  Usage:</p><pre><code>
var task = new Ext.util.DelayedTask(function () {
    alert(Ext.getDom('myInputField').value.length);
});
// Wait 500ms before calling our function. If the user presses another key 
// during that 500ms, it will be cancelled and we'll wait another 500ms.
Ext.get('myInputField').on('keypress', function () {
    task.{@link #delay}(500); 
});
</code></pre>
<p>Note that we are using a DelayedTask here to illustrate a point. The configuration
option <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will
also setup a delayed task for you to buffer events.</p>]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="fn" Type="Function" Optional="true">
                    <Summary><![CDATA[The default function to call.]]></Summary>
                  </Param>
                  <Param Name="scope" Type="Object">
                    <Summary><![CDATA[The default scope (The <code><b>this</b></code> reference) in which the function is called. If not specified, <code>this</code> will refer to the browser window.]]></Summary>
                  </Param>
                  <Param Name="args" Type="Array" Optional="true">
                    <Summary><![CDATA[The default Array of arguments.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="cancel">
                  <Summary><![CDATA[Cancel the last queued timeout]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="delay">
                  <Summary><![CDATA[Cancels any pending timeout and queues a new one]]></Summary>
                  <Parameters>
                    <Param Name="delay" Type="Number">
                      <Summary><![CDATA[The milliseconds to delay]]></Summary>
                    </Param>
                    <Param Name="newFn" Type="Function" Optional="true">
                      <Summary><![CDATA[Overrides function passed to constructor]]></Summary>
                    </Param>
                    <Param Name="newScope" Type="Object" Optional="true">
                      <Summary><![CDATA[Overrides scope passed to constructor. Remember that if no scope
is specified, <code>this</code> will refer to the browser window.]]></Summary>
                    </Param>
                    <Param Name="newArgs" Type="Array" Optional="true">
                      <Summary><![CDATA[Overrides args passed to constructor]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="Format" FullName="Ext.util.Format" Package="util" DefinedIn="util\Format.js" Singleton="true">
              <Summary><![CDATA[Reusable data formatting functions]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="capitalize">
                  <Summary><![CDATA[Converts the first character only of a string to upper case]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The text to convert]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The converted text]]></Summary>
                  </Return>
                </Method>
                <Method Name="date">
                  <Summary><![CDATA[Parse a value into a formatted date using the specified format pattern.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String/Date">
                      <Summary><![CDATA[The value to format (Strings must conform to the format expected by the javascript Date object's <a href="http://www.w3schools.com/jsref/jsref_parse.asp">parse()</a> method)]]></Summary>
                    </Param>
                    <Param Name="format" Type="String" Optional="true">
                      <Summary><![CDATA[Any valid date format string (defaults to 'm/d/Y')]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The formatted date string]]></Summary>
                  </Return>
                </Method>
                <Method Name="dateRenderer">
                  <Summary><![CDATA[Returns a date rendering function that can be reused to apply a date format multiple times efficiently]]></Summary>
                  <Parameters>
                    <Param Name="format" Type="String">
                      <Summary><![CDATA[Any valid date format string]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Function">
                    <Summary><![CDATA[The date formatting function]]></Summary>
                  </Return>
                </Method>
                <Method Name="defaultValue">
                  <Summary><![CDATA[Checks a reference and converts it to the default value if it's empty]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[Reference to check]]></Summary>
                    </Param>
                    <Param Name="defaultValue" Type="String">
                      <Summary><![CDATA[The value to insert of it's undefined (defaults to "")]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String" />
                </Method>
                <Method Name="ellipsis">
                  <Summary><![CDATA[Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The string to truncate]]></Summary>
                    </Param>
                    <Param Name="length" Type="Number">
                      <Summary><![CDATA[The maximum length to allow before truncating]]></Summary>
                    </Param>
                    <Param Name="word" Type="Boolean">
                      <Summary><![CDATA[True to try to find a common work break]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The converted text]]></Summary>
                  </Return>
                </Method>
                <Method Name="fileSize">
                  <Summary><![CDATA[Simple format for a file size (xxx bytes, xxx KB, xxx MB)]]></Summary>
                  <Parameters>
                    <Param Name="size" Type="Number/String">
                      <Summary><![CDATA[The numeric value to format]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The formatted file size]]></Summary>
                  </Return>
                </Method>
                <Method Name="htmlDecode">
                  <Summary><![CDATA[Convert certain characters (&, <, >, and ') from their HTML character equivalents.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The string to decode]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The decoded text]]></Summary>
                  </Return>
                </Method>
                <Method Name="htmlEncode">
                  <Summary><![CDATA[Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The string to encode]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The encoded text]]></Summary>
                  </Return>
                </Method>
                <Method Name="lowercase">
                  <Summary><![CDATA[Converts a string to all lower case letters]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The text to convert]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The converted text]]></Summary>
                  </Return>
                </Method>
                <Method Name="math">
                  <Summary><![CDATA[It does simple math for use in a template, for example:<pre><code>
var tpl = new Ext.Template('{value} * 10 = {value:math("* 10")}');
</code></pre>]]></Summary>
                  <Parameters />
                  <Return Type="Function">
                    <Summary><![CDATA[A function that operates on the passed value.]]></Summary>
                  </Return>
                </Method>
                <Method Name="nl2br">
                  <Summary><![CDATA[Converts newline characters to the HTML tag &lt;br/>]]></Summary>
                  <Parameters />
                  <Return Type="String">
                    <Summary><![CDATA[The string with embedded &lt;br/> tags in place of newlines.]]></Summary>
                  </Return>
                </Method>
                <Method Name="number">
                  <Summary><![CDATA[Formats the number according to the format string.
<div style="margin-left:40px">examples (123456.789):
<div style="margin-left:10px">
0 - (123456) show only digits, no precision<br>
0.00 - (123456.78) show only digits, 2 precision<br>
0.0000 - (123456.7890) show only digits, 4 precision<br>
0,000 - (123,456) show comma and digits, no precision<br>
0,000.00 - (123,456.78) show comma and digits, 2 precision<br>
0,0.00 - (123,456.78) shortcut method, show comma and digits, 2 precision<br>
To reverse the grouping (,) and decimal (.) for international numbers, add /i to the end.
For example: 0.000,00/i
</div></div>]]></Summary>
                  <Parameters>
                    <Param Name="v" Type="Number">
                      <Summary><![CDATA[The number to format.]]></Summary>
                    </Param>
                    <Param Name="format" Type="String">
                      <Summary><![CDATA[The way you would like to format this text.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The formatted number.]]></Summary>
                  </Return>
                </Method>
                <Method Name="numberRenderer">
                  <Summary><![CDATA[Returns a number rendering function that can be reused to apply a number format multiple times efficiently]]></Summary>
                  <Parameters>
                    <Param Name="format" Type="String">
                      <Summary><![CDATA[Any valid number format string for {@link #number}]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Function">
                    <Summary><![CDATA[The number formatting function]]></Summary>
                  </Return>
                </Method>
                <Method Name="plural">
                  <Summary><![CDATA[Selectively do a plural form of a word based on a numeric value. For example, in a template,
{commentCount:plural("Comment")}  would result in "1 Comment" if commentCount was 1 or would be "x Comments"
if the value is 0 or greater than 1.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Number">
                      <Summary><![CDATA[The value to compare against]]></Summary>
                    </Param>
                    <Param Name="singular" Type="String">
                      <Summary><![CDATA[The singular form of the word]]></Summary>
                    </Param>
                    <Param Name="plural" Type="String" Optional="true">
                      <Summary><![CDATA[The plural form of the word (defaults to the singular with an "s")]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="round">
                  <Summary><![CDATA[Rounds the passed number to the required decimal precision.]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Number/String">
                      <Summary><![CDATA[The numeric value to round.]]></Summary>
                    </Param>
                    <Param Name="precision" Type="Number">
                      <Summary><![CDATA[The number of decimal places to which to round the first parameter's value.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The rounded value.]]></Summary>
                  </Return>
                </Method>
                <Method Name="stripScripts">
                  <Summary><![CDATA[Strips all script tags]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The text from which to strip script tags]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The stripped text]]></Summary>
                  </Return>
                </Method>
                <Method Name="stripTags">
                  <Summary><![CDATA[Strips all HTML tags]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[The text from which to strip tags]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The stripped text]]></Summary>
                  </Return>
                </Method>
                <Method Name="substr">
                  <Summary><![CDATA[Returns a substring from within an original string]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The original text]]></Summary>
                    </Param>
                    <Param Name="start" Type="Number">
                      <Summary><![CDATA[The start index of the substring]]></Summary>
                    </Param>
                    <Param Name="length" Type="Number">
                      <Summary><![CDATA[The length of the substring]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The substring]]></Summary>
                  </Return>
                </Method>
                <Method Name="trim">
                  <Summary><![CDATA[Trims any whitespace from either side of a string]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The text to trim]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The trimmed text]]></Summary>
                  </Return>
                </Method>
                <Method Name="undef">
                  <Summary><![CDATA[Checks a reference and converts it to empty string if it is undefined]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Mixed">
                      <Summary><![CDATA[Reference to check]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Mixed">
                    <Summary><![CDATA[Empty string if converted, otherwise the original value]]></Summary>
                  </Return>
                </Method>
                <Method Name="uppercase">
                  <Summary><![CDATA[Converts a string to all upper case letters]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="String">
                      <Summary><![CDATA[The text to convert]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The converted text]]></Summary>
                  </Return>
                </Method>
                <Method Name="usMoney">
                  <Summary><![CDATA[Format a number as US currency]]></Summary>
                  <Parameters>
                    <Param Name="value" Type="Number/String">
                      <Summary><![CDATA[The numeric value to format]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The formatted currency string]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="JSON" FullName="Ext.util.JSON" Package="util" DefinedIn="util\core\JSON.js,util\JSON.js" Singleton="true">
              <Summary><![CDATA[Modified version of Douglas Crockford"s json.js that doesn"t
mess with the Object prototype
http://www.json.org/js.html

Modified version of Douglas Crockford"s json.js that doesn"t
mess with the Object prototype
http://www.json.org/js.html]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="decode">
                  <Summary><![CDATA[Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError unless the safe option is set.]]></Summary>
                  <Parameters>
                    <Param Name="json" Type="String">
                      <Summary><![CDATA[The JSON string]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The resulting object]]></Summary>
                  </Return>
                </Method>
                <Method Name="encode">
                  <Summary><![CDATA[Encodes an Object, Array or other value]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Mixed">
                      <Summary><![CDATA[The variable to encode]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="String">
                    <Summary><![CDATA[The JSON string]]></Summary>
                  </Return>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="MixedCollection" FullName="Ext.util.MixedCollection" Package="util" DefinedIn="util\MixedCollection.js" Extends="Ext.util.Observable" Subclasses="Ext.StoreMgr">
              <Summary><![CDATA[A Collection class that maintains both numeric indexes and keys and exposes events.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="allowFunctions" Type="Boolean">
                    <Summary><![CDATA[Specify <tt>true</tt> if the {@link #addAll} function should add function references to the collection. Defaults to <tt>false</tt>.]]></Summary>
                  </Param>
                  <Param Name="keyFn" Type="Function">
                    <Summary><![CDATA[A function that can accept an item of the type(s) stored in this MixedCollection and return the key value for that item.  This is used when available to look up the key on items that were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is equivalent to providing an implementation for the {@link #getKey} method.]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions>
                <ConfigOption Name="allowFunctions" Type="Boolean">
                  <Summary><![CDATA[function should add function references to the collection. Defaults to
<tt>false</tt>.]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties>
                <Property Name="get">
                  <Summary><![CDATA[This method calls {@link #item item()}.
Returns the item associated with the passed key OR index. Key has priority
over index.  This is the equivalent of calling {@link #key} first, then if
nothing matched calling {@link #itemAt}.
@param {String/Number} key The key or index of the item.
@return {Object} If the item is found, returns the item.  If the item was
not found, returns <tt>undefined</tt>. If an item was found, but is a Class,
returns <tt>null</tt>.]]></Summary>
                </Property>
              </Properties>
              <Methods>
                <Method Name="_sort">
                  <Summary><![CDATA[Defaults to sorting by numeric value.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="add">
                  <Summary><![CDATA[Adds an item to the collection. Fires the {@link #add} event when complete.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[<p>The key to associate with the item, or the new item.</p>
<p>If a {@link #getKey} implementation was specified for this MixedCollection,
or if the key of the stored items is in a property called <tt><b>id</b></tt>,
the MixedCollection will be able to <i>derive</i> the key for the new item.
In this case just pass the new item in this parameter.</p>]]></Summary>
                    </Param>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The item to add.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The item added.]]></Summary>
                  </Return>
                </Method>
                <Method Name="addAll">
                  <Summary><![CDATA[Adds all elements of an Array or an Object to the collection.]]></Summary>
                  <Parameters>
                    <Param Name="objs" Type="Object/Array">
                      <Summary><![CDATA[An Object containing properties which will be added
to the collection, or an Array of values, each of which are added to the collection.
Functions references will be added to the collection if <code>{@link #allowFunctions}</code>
has been set to <tt>true</tt>.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="clear">
                  <Summary><![CDATA[Removes all items from the collection.  Fires the {@link #clear} event when complete.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="clone">
                  <Summary><![CDATA[Creates a shallow copy of this collection]]></Summary>
                  <Parameters />
                  <Return Type="MixedCollection" />
                </Method>
                <Method Name="contains">
                  <Summary><![CDATA[Returns true if the collection contains the passed Object as an item.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The Object to look for in the collection.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the collection contains the Object as an item.]]></Summary>
                  </Return>
                </Method>
                <Method Name="containsKey">
                  <Summary><![CDATA[Returns true if the collection contains the passed Object as a key.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[The key to look for in the collection.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the collection contains the Object as a key.]]></Summary>
                  </Return>
                </Method>
                <Method Name="each">
                  <Summary><![CDATA[Executes the specified function once for every item in the collection, passing the following arguments:
<div class="mdetail-params"><ul>
<li><b>item</b> : Mixed<p class="sub-desc">The collection item</p></li>
<li><b>index</b> : Number<p class="sub-desc">The item's index</p></li>
<li><b>length</b> : Number<p class="sub-desc">The total number of items in the collection</p></li>
</ul></div>
The function should return a boolean value. Returning false from the function will stop the iteration.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to execute for each item.]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope in which to execute the function.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="eachKey">
                  <Summary><![CDATA[Executes the specified function once for every key in the collection, passing each
key, and its associated item as the first two parameters.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to execute for each item.]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope in which to execute the function.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="filter">
                  <Summary><![CDATA[Filter the <i>objects</i> in this collection by a specific property.
Returns a new collection that has been filtered.]]></Summary>
                  <Parameters>
                    <Param Name="property" Type="String">
                      <Summary><![CDATA[A property on your objects]]></Summary>
                    </Param>
                    <Param Name="value" Type="String/RegExp">
                      <Summary><![CDATA[Either string that the property values
should start with or a RegExp to test against the property]]></Summary>
                    </Param>
                    <Param Name="anyMatch" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to match any part of the string, not just the beginning]]></Summary>
                    </Param>
                    <Param Name="caseSensitive" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True for case sensitive comparison (defaults to False).]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="MixedCollection">
                    <Summary><![CDATA[The new filtered collection]]></Summary>
                  </Return>
                </Method>
                <Method Name="filterBy">
                  <Summary><![CDATA[Filter by a function. Returns a <i>new</i> collection that has been filtered.
The passed function will be called with each object in the collection.
If the function returns true, the value is included otherwise it is filtered.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to be called, it will receive the args o (the object), k (the key)]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope of the function (defaults to this)]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="MixedCollection">
                    <Summary><![CDATA[The new filtered collection]]></Summary>
                  </Return>
                </Method>
                <Method Name="find">
                  <Summary><![CDATA[Returns the first item in the collection which elicits a true return value from the
passed selection function.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The selection function to execute for each item.]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope in which to execute the function.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The first item in the collection which returned true from the selection function.]]></Summary>
                  </Return>
                </Method>
                <Method Name="findIndex">
                  <Summary><![CDATA[Finds the index of the first matching object in this collection by a specific property/value.]]></Summary>
                  <Parameters>
                    <Param Name="property" Type="String">
                      <Summary><![CDATA[The name of a property on your objects.]]></Summary>
                    </Param>
                    <Param Name="value" Type="String/RegExp">
                      <Summary><![CDATA[A string that the property values
should start with or a RegExp to test against the property.]]></Summary>
                    </Param>
                    <Param Name="start" Type="Number" Optional="true">
                      <Summary><![CDATA[The index to start searching at (defaults to 0).]]></Summary>
                    </Param>
                    <Param Name="anyMatch" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True to match any part of the string, not just the beginning.]]></Summary>
                    </Param>
                    <Param Name="caseSensitive" Type="Boolean" Optional="true">
                      <Summary><![CDATA[True for case sensitive comparison.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The matched index or -1]]></Summary>
                  </Return>
                </Method>
                <Method Name="findIndexBy">
                  <Summary><![CDATA[Find the index of the first matching object in this collection by a function.
If the function returns <i>true</i> it is considered a match.]]></Summary>
                  <Parameters>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to be called, it will receive the args o (the object), k (the key).]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope of the function (defaults to this).]]></Summary>
                    </Param>
                    <Param Name="start" Type="Number" Optional="true">
                      <Summary><![CDATA[The index to start searching at (defaults to 0).]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The matched index or -1]]></Summary>
                  </Return>
                </Method>
                <Method Name="first">
                  <Summary><![CDATA[Returns the first item in the collection.]]></Summary>
                  <Parameters />
                  <Return Type="Object">
                    <Summary><![CDATA[the first item in the collection..]]></Summary>
                  </Return>
                </Method>
                <Method Name="getCount">
                  <Summary><![CDATA[Returns the number of items in the collection.]]></Summary>
                  <Parameters />
                  <Return Type="Number">
                    <Summary><![CDATA[the number of items in the collection.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getKey">
                  <Summary><![CDATA[MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation
simply returns <b><code>item.id</code></b> but you can provide your own implementation
to return a different value as in the following examples:<pre><code>
// normal way
var mc = new Ext.util.MixedCollection();
mc.add(someEl.dom.id, someEl);
mc.add(otherEl.dom.id, otherEl);
//and so on

// using getKey
var mc = new Ext.util.MixedCollection();
mc.getKey = function (el) {
   return el.dom.id;
};
mc.add(someEl);
mc.add(otherEl);

// or via the constructor
var mc = new Ext.util.MixedCollection(false, function (el) {
   return el.dom.id;
});
mc.add(someEl);
mc.add(otherEl);
</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="item" Type="Object">
                      <Summary><![CDATA[The item for which to find the key.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The key for the passed item.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getRange">
                  <Summary><![CDATA[Returns a range of items in this collection]]></Summary>
                  <Parameters>
                    <Param Name="startIndex" Type="Number" Optional="true">
                      <Summary><![CDATA[The starting index. Defaults to 0.]]></Summary>
                    </Param>
                    <Param Name="endIndex" Type="Number" Optional="true">
                      <Summary><![CDATA[The ending index. Defaults to the last item.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Array">
                    <Summary><![CDATA[An array of items]]></Summary>
                  </Return>
                </Method>
                <Method Name="indexOf">
                  <Summary><![CDATA[Returns index within the collection of the passed Object.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The item to find the index of.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[index of the item. Returns -1 if not found.]]></Summary>
                  </Return>
                </Method>
                <Method Name="indexOfKey">
                  <Summary><![CDATA[Returns index within the collection of the passed key.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[The key to find the index of.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[index of the key.]]></Summary>
                  </Return>
                </Method>
                <Method Name="insert">
                  <Summary><![CDATA[Inserts an item at the specified index in the collection. Fires the {@link #add} event when complete.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index to insert the item at.]]></Summary>
                    </Param>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[The key to associate with the new item, or the item itself.]]></Summary>
                    </Param>
                    <Param Name="o" Type="Object" Optional="true">
                      <Summary><![CDATA[If the second parameter was a key, the new item.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The item inserted.]]></Summary>
                  </Return>
                </Method>
                <Method Name="item">
                  <Summary><![CDATA[Returns the item associated with the passed key OR index.
Key has priority over index.  This is the equivalent
of calling {@link #key} first, then if nothing matched calling {@link #itemAt}.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String/Number">
                      <Summary><![CDATA[The key or index of the item.
If an item was found, but is a Class, returns <tt>null</tt>.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[If the item is found, returns the item.  If the item was not found, returns <tt>undefined</tt>.]]></Summary>
                  </Return>
                </Method>
                <Method Name="itemAt">
                  <Summary><![CDATA[Returns the item at the specified index.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index of the item.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The item at the specified index.]]></Summary>
                  </Return>
                </Method>
                <Method Name="key">
                  <Summary><![CDATA[Returns the item associated with the passed key.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String/Number">
                      <Summary><![CDATA[The key of the item.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The item associated with the passed key.]]></Summary>
                  </Return>
                </Method>
                <Method Name="keySort">
                  <Summary><![CDATA[Sorts this collection by <b>key</b>s.]]></Summary>
                  <Parameters>
                    <Param Name="direction" Type="String" Optional="true">
                      <Summary><![CDATA['ASC' or 'DESC'. Defaults to 'ASC'.]]></Summary>
                    </Param>
                    <Param Name="fn" Type="Function" Optional="true">
                      <Summary><![CDATA[Comparison function that defines the sort order.
Defaults to sorting by case insensitive string.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="last">
                  <Summary><![CDATA[Returns the last item in the collection.]]></Summary>
                  <Parameters />
                  <Return Type="Object">
                    <Summary><![CDATA[the last item in the collection..]]></Summary>
                  </Return>
                </Method>
                <Method Name="remove">
                  <Summary><![CDATA[Remove an item from the collection.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The item to remove.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The item removed or false if no item was removed.]]></Summary>
                  </Return>
                </Method>
                <Method Name="removeAt">
                  <Summary><![CDATA[Remove an item from a specified index in the collection. Fires the {@link #remove} event when complete.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index within the collection of the item to remove.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The item removed or false if no item was removed.]]></Summary>
                  </Return>
                </Method>
                <Method Name="removeKey">
                  <Summary><![CDATA[Removed an item associated with the passed key fom the collection.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[The key of the item to remove.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The item removed or false if no item was removed.]]></Summary>
                  </Return>
                </Method>
                <Method Name="replace">
                  <Summary><![CDATA[Replaces an item in the collection. Fires the {@link #replace} event when complete.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[<p>The key associated with the item to replace, or the replacement item.</p>
<p>If you supplied a {@link #getKey} implementation for this MixedCollection, or if the key
of your stored items is in a property called <tt><b>id</b></tt>, then the MixedCollection
will be able to <i>derive</i> the key of the replacement item. If you want to replace an item
with one having the same key value, then just pass the replacement item in this parameter.</p>]]></Summary>
                    </Param>
                    <Param Name="o" Type="Object} " Optional="true">
                      <Summary><![CDATA[If the first parameter passed was a key, the item to associate
with that key.]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The new item.]]></Summary>
                  </Return>
                </Method>
                <Method Name="sort">
                  <Summary><![CDATA[Sorts this collection by <b>item</b> value with the passed comparison function.]]></Summary>
                  <Parameters>
                    <Param Name="direction" Type="String" Optional="true">
                      <Summary><![CDATA['ASC' or 'DESC'. Defaults to 'ASC'.]]></Summary>
                    </Param>
                    <Param Name="fn" Type="Function" Optional="true">
                      <Summary><![CDATA[Comparison function that defines the sort order.
Defaults to sorting by numeric value.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events>
                <Event Name="add">
                  <Summary><![CDATA[Fires when an item is added to the collection.]]></Summary>
                  <Parameters>
                    <Param Name="index" Type="Number">
                      <Summary><![CDATA[The index at which the item was added.]]></Summary>
                    </Param>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The item added.]]></Summary>
                    </Param>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[The key associated with the added item.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="clear">
                  <Summary><![CDATA[Fires when the collection is cleared.]]></Summary>
                  <Parameters />
                </Event>
                <Event Name="remove">
                  <Summary><![CDATA[Fires when an item is removed from the collection.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The item being removed.]]></Summary>
                    </Param>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[The key associated with the removed item.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
                <Event Name="replace">
                  <Summary><![CDATA[Fires when an item is replaced in the collection.]]></Summary>
                  <Parameters>
                    <Param Name="key" Type="String">
                      <Summary><![CDATA[he key associated with the new added.]]></Summary>
                    </Param>
                    <Param Name="old" Type="Object">
                      <Summary><![CDATA[The item being replaced.]]></Summary>
                    </Param>
                    <Param Name="new" Type="Object">
                      <Summary><![CDATA[The new item.]]></Summary>
                    </Param>
                  </Parameters>
                </Event>
              </Events>
            </Class>
            <Class Name="Observable" FullName="Ext.util.Observable" Package="util" DefinedIn="util\core\Observable.js,util\Observable-more.js" Subclasses="Ext.data.Connection,Ext.data.DataProxy,Ext.data.Node,Ext.data.Store,Ext.data.Tree,Ext.dd.DragTracker,Ext.direct.Provider,Ext.form.BasicForm,Ext.grid.AbstractSelectionModel,Ext.grid.ColumnModel,Ext.grid.GridView,Ext.grid.PropertyStore,Ext.tree.DefaultSelectionModel,Ext.tree.MultiSelectionModel,Ext.tree.TreeLoader,Ext.util.ClickRepeater,Ext.util.MixedCollection,Ext.Component,Ext.Direct,Ext.History,Ext.ListView.ColumnResizer,Ext.ListView.Sorter,Ext.Resizable,Ext.SplitBar,Ext.Updater">
              <Summary><![CDATA[Base class that provides a common interface for publishing events. Subclasses are expected to
to have a property "events" with all the events defined, and, optionally, a property "listeners"
with configured listeners defined.<br>
For example:
<pre><code>
Employee = Ext.extend(Ext.util.Observable, {
    constructor: function (config) {
        this.name = config.name;
        this.addEvents({
            "fired" : true,
            "quit" : true
        });

        // Copy configured listeners into *this* object so that the base class&#39;s
        // constructor will add them.
        this.listeners = config.listeners;

        // Call our superclass constructor to complete construction process.
        Employee.superclass.constructor.call(config)
    }
});
</code></pre>
This could then be used like this:<pre><code>
var newEmployee = new Employee({
    name: employeeName,
    listeners: {
        quit: function () {
            // By default, "this" will be the object that fired the event.
            alert(this.name + " has quit!");
        }
    }
});
</code></pre>]]></Summary>
              <ConfigOptions>
                <ConfigOption Name="listeners" Type="Object">
                  <Summary><![CDATA[object during initialization.  This should be a valid listeners config object as specified in the
{@link #addListener} example for attaching multiple handlers at once.</p>
<br><p><b><u>DOM events from ExtJs {@link Ext.Component Components}</u></b></p>
<br><p>While <i>some</i> ExtJs Component classes export selected DOM events (e.g. "click", "mouseover" etc), this
is usually only done when extra value can be added. For example the {@link Ext.DataView DataView}'s
<b><code>{@link Ext.DataView#click click}</code></b> event passing the node clicked on. To access DOM
events directly from a Component's HTMLElement, listeners must be added to the <i>{@link Ext.Component#getEl Element}</i> after the Component
has been rendered. A plugin can simplify this step:<pre><code>
// Plugin is configured with a listeners config object.
// The Component is appended to the argument list of all handler functions.
Ext.DomObserver = Ext.extend(Object, {
    constructor: function (config) {
        this.listeners = config.listeners ? config.listeners : config;
    },

    // Component passes itself into plugin&#39;s init method
    init: function (c) {
        var p, l = this.listeners;
        for (p in l) {
            if (Ext.isFunction(l[p])) {
                l[p] = this.createHandler(l[p], c);
            } else {
                l[p].fn = this.createHandler(l[p].fn, c);
            }
        }

        // Add the listeners to the Element immediately following the render call
        c.render = c.render.{@link Function#createSequence createSequence}(function () {
            var e = c.getEl();
            if (e) {
                e.on(l);
            }
        });
    },

    createHandler: function (fn, c) {
        return function (e) {
            fn.call(this, e, c);
        };
    }
});

var combo = new Ext.form.ComboBox({

    // Collapse combo when its element is clicked on
    plugins: [ new Ext.DomObserver({
        click: function (evt, comp) {
            comp.collapse();
        }
    })],
    store: myStore,
    typeAhead: true,
    mode: 'local',
    triggerAction: 'all'
});
</code></pre></p>]]></Summary>
                </ConfigOption>
              </ConfigOptions>
              <Properties />
              <Methods>
                <Method Name="addEvents">
                  <Summary><![CDATA[Used to define events on this Observable]]></Summary>
                  <Parameters>
                    <Param Name="object" Type="Object">
                      <Summary><![CDATA[The object with the events defined]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="addListener">
                  <Summary><![CDATA[Appends an event handler to this object.]]></Summary>
                  <Parameters>
                    <Param Name="eventName" Type="String">
                      <Summary><![CDATA[The name of the event to listen for.]]></Summary>
                    </Param>
                    <Param Name="handler" Type="Function">
                      <Summary><![CDATA[The method the event invokes.]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope (<code><b>this</b></code> reference) in which the handler function is executed.
<b>If omitted, defaults to the object which fired the event.</b>]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object" Optional="true">
                      <Summary><![CDATA[An object containing handler configuration.
properties. This may contain any of the following properties:<ul>
<li><b>scope</b> : Object<div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the handler function is executed.
<b>If omitted, defaults to the object which fired the event.</b></div></li>
<li><b>delay</b> : Number<div class="sub-desc">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>
<li><b>single</b> : Boolean<div class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
<li><b>buffer</b> : Number<div class="sub-desc">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
<li><b>target</b> : Observable<div class="sub-desc">Only call the handler if the event was fired on the target Observable, <i>not</i>
if the event was bubbled up from a child Observable.</div></li>
</ul><br>
<p>
<b>Combining Options</b><br>
Using the options argument, it is possible to combine different types of listeners:<br>
<br>
A delayed, one-time listener.
<pre><code>
myDataView.on('click', this.onClick, this, {
single: true,
delay: 100
});</code></pre>
<p>
<b>Attaching multiple handlers in 1 call</b><br>
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.
<p>
<pre><code>
myGridPanel.on({
'click' : {
fn: this.onClick,
scope: this,
delay: 100
},
'mouseover' : {
fn: this.onMouseOver,
scope: this
},
'mouseout' : {
fn: this.onMouseOut,
scope: this
}
});</code></pre>
<p>
Or a shorthand syntax:<br>
<pre><code>
myGridPanel.on({
'click' : this.onClick,
'mouseover' : this.onMouseOver,
'mouseout' : this.onMouseOut,
scope: this
});</code></pre>]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="hasListener">
                  <Summary><![CDATA[Checks to see if this object has any listeners for a specified event]]></Summary>
                  <Parameters>
                    <Param Name="eventName" Type="String">
                      <Summary><![CDATA[The name of the event to check for]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Boolean">
                    <Summary><![CDATA[True if the event is being listened for, else false]]></Summary>
                  </Return>
                </Method>
                <Method Name="on">
                  <Summary><![CDATA[Appends an event handler to this object (shorthand for {@link #addListener}.)]]></Summary>
                  <Parameters>
                    <Param Name="eventName" Type="String">
                      <Summary><![CDATA[The type of event to listen for]]></Summary>
                    </Param>
                    <Param Name="handler" Type="Function">
                      <Summary><![CDATA[The method the event invokes]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope (<code><b>this</b></code> reference) in which the handler function is executed.
<b>If omitted, defaults to the object which fired the event.</b>]]></Summary>
                    </Param>
                    <Param Name="options" Type="Object" Optional="true">
                      <Summary><![CDATA[An object containing handler configuration.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="purgeListeners">
                  <Summary><![CDATA[Removes all listeners for this object]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="releaseCapture">
                  <Summary><![CDATA[Removes <b>all</b> added captures from the Observable.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Observable">
                      <Summary><![CDATA[The Observable to release
@static]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="removeListener">
                  <Summary><![CDATA[Removes an event handler.]]></Summary>
                  <Parameters>
                    <Param Name="eventName" Type="String">
                      <Summary><![CDATA[The type of event the handler was associated with.]]></Summary>
                    </Param>
                    <Param Name="handler" Type="Function">
                      <Summary><![CDATA[The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope originally specified for the handler.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="resumeEvents">
                  <Summary><![CDATA[Resume firing events. (see {@link #suspendEvents})
If events were suspended using the <tt><b>queueSuspended</b></tt> parameter, then all
events fired during event suspension will be sent to any listeners now.]]></Summary>
                  <Parameters />
                </Method>
                <Method Name="suspendEvents">
                  <Summary><![CDATA[Suspend the firing of all events. (see {@link #resumeEvents})]]></Summary>
                  <Parameters>
                    <Param Name="queueSuspended" Type="Boolean">
                      <Summary><![CDATA[Pass as true to queue up suspended events to be fired
after the {@link #resumeEvents} call instead of discarding all suspended events;]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="un">
                  <Summary><![CDATA[Removes an event handler (shorthand for {@link #removeListener}.)]]></Summary>
                  <Parameters>
                    <Param Name="eventName" Type="String">
                      <Summary><![CDATA[The type of event the handler was associated with.]]></Summary>
                    </Param>
                    <Param Name="handler" Type="Function">
                      <Summary><![CDATA[The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope originally specified for the handler.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="capture">
                  <Summary><![CDATA[Starts capture on the specified Observable. All events will be passed
to the supplied function with the event name + standard signature of the event
<b>before</b> the event is fired. If the supplied function returns false,
the event will not fire.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Observable">
                      <Summary><![CDATA[The Observable to capture]]></Summary>
                    </Param>
                    <Param Name="fn" Type="Function">
                      <Summary><![CDATA[The function to call]]></Summary>
                    </Param>
                    <Param Name="scope" Type="Object" Optional="true">
                      <Summary><![CDATA[The scope (this object) for the fn
@static]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="enableBubble">
                  <Summary><![CDATA[Used to enable bubbling of events]]></Summary>
                  <Parameters>
                    <Param Name="events" Type="Object" />
                  </Parameters>
                </Method>
                <Method Name="observeClass">
                  <Summary><![CDATA[Sets observability on the passed class constructor.<p>
<p>This makes any event fired on any instance of the passed class also fire a single event through
the <i>class</i> allowing for central handling of events on many instances at once.</p>
<p>Usage:</p><pre><code>
Ext.util.Observable.observeClass(Ext.data.Connection);
Ext.data.Connection.on('beforerequest', function (con, options) {
    console.log("Ajax request made to " + options.url);
});</code></pre>]]></Summary>
                  <Parameters>
                    <Param Name="c" Type="Function">
                      <Summary><![CDATA[The class constructor to make observable.
@static]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="relayEvents">
                  <Summary><![CDATA[Relays selected events from the specified Observable as if the events were fired by <tt><b>this</b></tt>.]]></Summary>
                  <Parameters>
                    <Param Name="o" Type="Object">
                      <Summary><![CDATA[The Observable whose events this object is to relay.]]></Summary>
                    </Param>
                    <Param Name="events" Type="Array">
                      <Summary><![CDATA[Array of event names to relay.]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TaskRunner" FullName="Ext.util.TaskRunner" Package="util" DefinedIn="util\core\TaskMgr.js" Subclasses="Ext.TaskMgr">
              <Summary><![CDATA[Provides the ability to execute one or more arbitrary tasks in a multithreaded
manner.  Generally, you can use the singleton {@link Ext.TaskMgr} instead, but
if needed, you can create separate instances of TaskRunner.  Any number of
separate tasks can be started at any time and will run independently of each
other. Example usage:
<pre><code>
// Start a simple clock task that updates a div once per second
var updateClock = function () {
    Ext.fly('clock').update(new Date().format('g:i:s A'));
} 
var task = {
    run: updateClock,
    interval: 1000 //1 second
}
var runner = new Ext.util.TaskRunner();
runner.start(task);

// equivalent using TaskMgr
Ext.TaskMgr.start({
    run: updateClock,
    interval: 1000
});

</code></pre>
Also see {@link Ext.util.DelayedTask}.]]></Summary>
              <Constructor>
                <Parameters>
                  <Param Name="interval" Type="Number" Optional="true">
                    <Summary><![CDATA[The minimum precision in milliseconds supported by this TaskRunner instance (defaults to 10)]]></Summary>
                  </Param>
                </Parameters>
              </Constructor>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="start">
                  <Summary><![CDATA[Starts a new task.]]></Summary>
                  <Parameters>
                    <Param Name="task" Type="Object">
                      <Summary><![CDATA[A config object that supports the following properties:<ul>
<li><code>run</code> : Function<div class="sub-desc">The function to execute each time the task is run. The
function will be called at each interval and passed the <code>args</code> argument if specified.  If a
particular scope is required, be sure to specify it using the <code>scope</code> argument.</div></li>
<li><code>interval</code> : Number<div class="sub-desc">The frequency in milliseconds with which the task
should be executed.</div></li>
<li><code>args</code> : Array<div class="sub-desc">(optional) An array of arguments to be passed to the function
specified by <code>run</code>.</div></li>
<li><code>scope</code> : Object<div class="sub-desc">(optional) The scope (<tt>this</tt> reference) in which to execute the
<code>run</code> function. Defaults to the task config object.</div></li>
<li><code>duration</code> : Number<div class="sub-desc">(optional) The length of time in milliseconds to execute
the task before stopping automatically (defaults to indefinite).</div></li>
<li><code>repeat</code> : Number<div class="sub-desc">(optional) The number of times to execute the task before
stopping automatically (defaults to indefinite).</div></li>
</ul>]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The task]]></Summary>
                  </Return>
                </Method>
                <Method Name="stop">
                  <Summary><![CDATA[Stops an existing running task.]]></Summary>
                  <Parameters>
                    <Param Name="task" Type="Object">
                      <Summary><![CDATA[The task to stop]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object">
                    <Summary><![CDATA[The task]]></Summary>
                  </Return>
                </Method>
                <Method Name="stopAll">
                  <Summary><![CDATA[Stops all tasks that are currently running.]]></Summary>
                  <Parameters />
                </Method>
              </Methods>
              <Events />
            </Class>
            <Class Name="TextMetrics" FullName="Ext.util.TextMetrics" Package="util" DefinedIn="util\TextMetrics.js" Singleton="true">
              <Summary><![CDATA[Provides precise pixel measurements for blocks of text so that you can determine exactly how high and
wide, in pixels, a given block of text will be. Note that when measuring text, it should be plain text and
should not contain any HTML, otherwise it may not be measured correctly.]]></Summary>
              <ConfigOptions />
              <Properties />
              <Methods>
                <Method Name="bind">
                  <Summary><![CDATA[Binds this TextMetrics instance to an element from which to copy existing CSS styles
that can affect the size of the rendered text]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="String/HTMLElement">
                      <Summary><![CDATA[The element, dom node or id]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
                <Method Name="createInstance">
                  <Summary><![CDATA[Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces
the overhead of multiple calls to initialize the style properties on each measurement.]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="String/HTMLElement">
                      <Summary><![CDATA[The element, dom node or id that the instance will be bound to]]></Summary>
                    </Param>
                    <Param Name="fixedWidth" Type="Number" Optional="true">
                      <Summary><![CDATA[If the text will be multiline, you have to set a fixed width
in order to accurately measure the text height]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Ext.util.TextMetrics.Instance">
                    <Summary><![CDATA[instance The new instance]]></Summary>
                  </Return>
                </Method>
                <Method Name="getHeight">
                  <Summary><![CDATA[Returns the measured height of the specified text.  For multiline text, be sure to call
{@link #setFixedWidth} if necessary.]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The text to measure]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[height The height in pixels]]></Summary>
                  </Return>
                </Method>
                <Method Name="getSize">
                  <Summary><![CDATA[Returns the size of the specified text based on the internal element's style and width properties]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The text to measure]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object} An object containing the text's size {width: (width), height: (height)" />
                </Method>
                <Method Name="getTextWidth">
                  <Summary><![CDATA[Returns the width in pixels of the passed text, or the width of the text in this Element.]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The text to measure. Defaults to the innerHTML of the element.]]></Summary>
                    </Param>
                    <Param Name="min" Type="Number" Optional="true">
                      <Summary><![CDATA[The minumum value to return.]]></Summary>
                    </Param>
                    <Param Name="max" Type="Number" Optional="true">
                      <Summary><![CDATA[The maximum value to return.
@member Ext.Element getTextWidth]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[The text width in pixels.]]></Summary>
                  </Return>
                </Method>
                <Method Name="getWidth">
                  <Summary><![CDATA[Returns the measured width of the specified text]]></Summary>
                  <Parameters>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The text to measure]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Number">
                    <Summary><![CDATA[width The width in pixels]]></Summary>
                  </Return>
                </Method>
                <Method Name="measure">
                  <Summary><![CDATA[Measures the size of the specified text]]></Summary>
                  <Parameters>
                    <Param Name="el" Type="String/HTMLElement">
                      <Summary><![CDATA[The element, dom node or id from which to copy existing CSS styles
that can affect the size of the rendered text]]></Summary>
                    </Param>
                    <Param Name="text" Type="String">
                      <Summary><![CDATA[The text to measure]]></Summary>
                    </Param>
                    <Param Name="fixedWidth" Type="Number" Optional="true">
                      <Summary><![CDATA[If the text will be multiline, you have to set a fixed width
in order to accurately measure the text height]]></Summary>
                    </Param>
                  </Parameters>
                  <Return Type="Object} An object containing the text's size {width: (width), height: (height)" />
                </Method>
                <Method Name="setFixedWidth">
                  <Summary><![CDATA[Sets a fixed width on the internal measurement element.  If the text will be multiline, you have
to set a fixed width in order to accurately measure the text height.]]></Summary>
                  <Parameters>
                    <Param Name="width" Type="Number">
                      <Summary><![CDATA[The width to set on the element]]></Summary>
                    </Param>
                  </Parameters>
                </Method>
              </Methods>
              <Events />
            </Class>
          </Classes>
        </Package>
      </Packages>
      <Classes>
        <Class Name="Action" FullName="Ext.Action" Package="Ext" DefinedIn="widgets\Action.js">
          <Summary><![CDATA[<p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it
can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI
updates across any components that support the Action interface (primarily {@link Ext.Toolbar}, {@link Ext.Button}
and {@link Ext.menu.Menu} components).</p>
<p>Aside from supporting the config object interface, any component that needs to use Actions must also support
the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),
setDisabled(boolean), setVisible(boolean) and setHandler(function).</p>
Example usage:<br>
<pre><code>
// Define the shared action.  Each component below will have the same
// display text and icon, and will display the same message on click.
var action = new Ext.Action({
   {@link #text}: 'Do something',
   {@link #handler}: function () {
        Ext.Msg.alert('Click', 'You did something.');
    },
   {@link #iconCls}: 'do-something',
   {@link #itemId}: 'myAction'
});

var panel = new Ext.Panel({
    title: 'Actions',
    width: 500,
    height: 300,
    tbar: [
        // Add the action directly to a toolbar as a menu button
        action,
       {
            text: 'Action Menu',
            // Add the action to a menu as a text item
            menu: [action]
        }
    ],
    items: [
        // Add the action to the panel body as a standard button
        new Ext.Button(action)
    ],
    renderTo: Ext.getBody()
});

// Change the text for all components using the action
action.setText('Something else');

// Reference an action through a container using the itemId
var btn = panel.getComponent('myAction');
var aRef = btn.baseAction;
aRef.setText('New text');
</code></pre>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The configuration options]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="disabled" Type="Boolean" />
            <ConfigOption Name="handler" Type="Function">
              <Summary><![CDATA[when the component's primary event is triggered (defaults to undefined).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hidden" Type="Boolean" />
            <ConfigOption Name="iconCls" Type="String">
              <Summary><![CDATA[The CSS class selector that specifies a background image to be used as the header icon for
all components using this action (defaults to '').
<p>An example of specifying a custom icon class would be something like:
</p><pre><code>
// specify the property in the config for the class:
     ...
     iconCls: 'do-something'

// css class that specifies background image to be used as the icon image:
.do-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="itemId" Type="String">
              <Summary><![CDATA[See {@link Ext.Component}.{@link Ext.Component#itemId itemId}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scope" Type="Object" />
            <ConfigOption Name="text" Type="String" />
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="disable">
              <Summary><![CDATA[Disables all components using this action.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="each">
              <Summary><![CDATA[Executes the specified function once for each component currently tied to this action.  The function passed
in should accept a single argument that will be an object that supports the basic Action config/method interface.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to execute for each component]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[The scope in which the function will execute]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="enable">
              <Summary><![CDATA[Enables all components using this action.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="execute">
              <Summary><![CDATA[Executes this action manually using the handler function specified in the original config object
or the handler function set with <code>{@link #setHandler}</code>.  Any arguments passed to this
function will be passed on to the handler function.]]></Summary>
              <Parameters>
                <Param Name="arg1" Type="Mixed" Optional="true">
                  <Summary><![CDATA[Variable number of arguments passed to the handler function]]></Summary>
                </Param>
                <Param Name="arg2" Type="Mixed" Optional="true" />
                <Param Name="etc..." Type="Mixed" Optional="true" />
              </Parameters>
            </Method>
            <Method Name="getIconClass">
              <Summary><![CDATA[Gets the icon CSS class currently used by all components using this action.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="getText">
              <Summary><![CDATA[Gets the text currently displayed by all components using this action.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="hide">
              <Summary><![CDATA[Hides all components using this action.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="isDisabled">
              <Summary><![CDATA[Returns true if the components using this action are currently disabled, else returns false.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="isHidden">
              <Summary><![CDATA[Returns true if the components using this action are currently hidden, else returns false.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="setDisabled">
              <Summary><![CDATA[Sets the disabled state of all components using this action.  Shortcut method
for {@link #enable} and {@link #disable}.]]></Summary>
              <Parameters>
                <Param Name="disabled" Type="Boolean">
                  <Summary><![CDATA[True to disable the component, false to enable it]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setHandler">
              <Summary><![CDATA[Sets the function that will be called by each component using this action when its primary event is triggered.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function that will be invoked by the action's components.  The function
will be called with no arguments.]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[The scope in which the function will execute]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setHidden">
              <Summary><![CDATA[Sets the hidden state of all components using this action.  Shortcut method
for <code>{@link #hide}</code> and <code>{@link #show}</code>.]]></Summary>
              <Parameters>
                <Param Name="hidden" Type="Boolean">
                  <Summary><![CDATA[True to hide the component, false to show it]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setIconClass">
              <Summary><![CDATA[Sets the icon CSS class for all components using this action.  The class should supply
a background image that will be used as the icon image.]]></Summary>
              <Parameters>
                <Param Name="cls" Type="String">
                  <Summary><![CDATA[The CSS class supplying the icon image]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setText">
              <Summary><![CDATA[Sets the text to be displayed by all components using this action.]]></Summary>
              <Parameters>
                <Param Name="text" Type="String">
                  <Summary><![CDATA[The text to display]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Shows all components using this action.]]></Summary>
              <Parameters />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Ajax" FullName="Ext.Ajax" Package="Ext" DefinedIn="data\core\Connection.js" Extends="Ext.data.Connection" Singleton="true">
          <Summary><![CDATA[<p>The global Ajax request class that provides a simple way to make Ajax requests
with maximum flexibility.</p>
<p>Since Ext.Ajax is a singleton, you can set common properties/events for it once
and override them at the request function level only if necessary.</p>
<p>Common <b>Properties</b> you may want to set are:<div class="mdetail-params"><ul>
<li><b><tt>{@link #method}</tt></b><p class="sub-desc"></p></li>
<li><b><tt>{@link #extraParams}</tt></b><p class="sub-desc"></p></li>
<li><b><tt>{@link #url}</tt></b><p class="sub-desc"></p></li>
</ul></div>
<pre><code>
// Default headers to pass in every request
Ext.Ajax.defaultHeaders = {
    'Powered-By': 'Ext'
};
</code></pre>
</p>
<p>Common <b>Events</b> you may want to set are:<div class="mdetail-params"><ul>
<li><b><tt>{@link Ext.data.Connection#beforerequest beforerequest}</tt></b><p class="sub-desc"></p></li>
<li><b><tt>{@link Ext.data.Connection#requestcomplete requestcomplete}</tt></b><p class="sub-desc"></p></li>
<li><b><tt>{@link Ext.data.Connection#requestexception requestexception}</tt></b><p class="sub-desc"></p></li>
</ul></div>
<pre><code>
// Example: show a spinner during all Ajax requests
Ext.Ajax.on('beforerequest', this.showSpinner, this);
Ext.Ajax.on('requestcomplete', this.hideSpinner, this);
Ext.Ajax.on('requestexception', this.hideSpinner, this);
</code></pre>
</p>
<p>An example request:</p>
<pre><code>
// Basic request
Ext.Ajax.{@link Ext.data.Connection#request request}({
   url: 'foo.php',
   success: someFn,
   failure: otherFn,
   headers: {
       'my-header': 'foo'
   },
   params: { foo: 'bar' }
});

// Simple ajax form submission
Ext.Ajax.{@link Ext.data.Connection#request request}({
    form: 'some-form',
    params: 'foo=bar'
});
</code></pre>
</p>]]></Summary>
          <ConfigOptions>
            <ConfigOption Name="autoAbort" Type="Boolean" />
            <ConfigOption Name="defaultHeaders" Type="Object" />
            <ConfigOption Name="disableCaching" Type="Boolean" />
            <ConfigOption Name="extraParams" Type="Object" />
            <ConfigOption Name="method" Type="String" />
            <ConfigOption Name="timeout" Type="Number" />
            <ConfigOption Name="url" Type="String" />
          </ConfigOptions>
          <Properties>
            <Property Name="autoAbort">
              <Summary><![CDATA[Whether a new request should abort any pending requests. (defaults to false)]]></Summary>
            </Property>
            <Property Name="defaultHeaders">
              <Summary><![CDATA[An object containing request headers which are added to each request made by this object
(defaults to undefined).]]></Summary>
            </Property>
            <Property Name="disableCaching">
              <Summary><![CDATA[True to add a unique cache-buster param to GET requests. (defaults to true)]]></Summary>
            </Property>
            <Property Name="extraParams">
              <Summary><![CDATA[An object containing properties which are used as extra parameters to each request made
by this object (defaults to undefined). Session information and other data that you need
to pass with each request are commonly put here.]]></Summary>
            </Property>
            <Property Name="method">
              <Summary><![CDATA[The default HTTP method to be used for requests. Note that this is case-sensitive and
should be all caps (defaults to undefined; if not set but params are present will use
<tt>"POST"</tt>, otherwise will use <tt>"GET"</tt>.)]]></Summary>
            </Property>
            <Property Name="timeout">
              <Summary><![CDATA[The timeout in milliseconds to be used for requests. (defaults to 30000)]]></Summary>
            </Property>
            <Property Name="url">
              <Summary><![CDATA[The default URL to be used for requests to the server. (defaults to undefined)
If the server receives all requests through one URL, setting this once is easier than
entering it on every request.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="serializeForm">
              <Summary><![CDATA[Serialize the passed form into a url encoded string]]></Summary>
              <Parameters>
                <Param Name="form" Type="String/HTMLElement" />
              </Parameters>
              <Return Type="String" />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="BoxComponent" FullName="Ext.BoxComponent" Package="Ext" DefinedIn="widgets\BoxComponent.js" Xtype="box" Extends="Ext.Component" Subclasses="Ext.form.Field,Ext.form.Label,Ext.Button,Ext.Container,Ext.DataView,Ext.FlashComponent,Ext.ProgressBar,Ext.Slider,Ext.Spacer,Ext.Toolbar.Item">
          <Summary><![CDATA[<p>Base class for any {@link Ext.Component Component} that is to be sized as a box, using width and height.</p>
<p>BoxComponent provides automatic box model adjustments for sizing and positioning and will work correctly
within the Component rendering model.</p>
<p>A BoxComponent may be created as a custom Component which encapsulates any HTML element, either a pre-existing
element, or one that is created to your specifications at render time. Usually, to participate in layouts,
a Component will need to be a <b>Box</b>Component in order to have its width and height managed.</p>
<p>To use a pre-existing element as a BoxComponent, configure it so that you preset the <b>el</b> property to the
element to reference:<pre><code>
var pageHeader = new Ext.BoxComponent({
    el: 'my-header-div'
});</code></pre>
This may then be {@link Ext.Container#add added} to a {@link Ext.Container Container} as a child item.</p>
<p>To create a BoxComponent based around a HTML element to be created at render time, use the
{@link Ext.Component#autoEl autoEl} config option which takes the form of a
{@link Ext.DomHelper DomHelper} specification:<pre><code>
var myImage = new Ext.BoxComponent({
    autoEl: {
        tag: 'img',
        src: '/images/my-image.jpg'
    }
});</code></pre></p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Ext.Element/String/Object">
                <Summary><![CDATA[The configuration options.]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="autoHeight" Type="Boolean">
              <Summary><![CDATA[<p>True to use height:'auto', false to use fixed height (or allow it to be managed by its parent
Container's {@link Ext.Container#layout layout manager}. Defaults to false.</p>
<p><b>Note</b>: Although many components inherit this config option, not all will
function as expected with a height of 'auto'. Setting autoHeight:true means that the
browser will manage height based on the element's contents, and that Ext will not manage it at all.</p>
<p>If the <i>browser</i> is managing the height, be aware that resizes performed by the browser in response
to changes within the structure of the Component cannot be detected. Therefore changes to the height might
result in elements needing to be synchronized with the new height. Example:</p><pre><code>
var w = new Ext.Window({
    title: 'Window',
    width: 600,
    autoHeight: true,
    items: {
        title: 'Collapse Me',
        height: 400,
        collapsible: true,
        border: false,
        listeners: {
            beforecollapse: function () {
                w.el.shadow.hide();
            },
            beforeexpand: function () {
                w.el.shadow.hide();
            },
            collapse: function () {
                w.syncShadow();
            },
            expand: function () {
                w.syncShadow();
            }
        }
    }
}).show();
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoWidth" Type="Boolean">
              <Summary><![CDATA[<p>True to use width:'auto', false to use fixed width (or allow it to be managed by its parent
Container's {@link Ext.Container#layout layout manager}. Defaults to false.</p>
<p><b>Note</b>: Although many components  inherit this config option, not all will
function as expected with a width of 'auto'. Setting autoWidth:true means that the
browser will manage width based on the element's contents, and that Ext will not manage it at all.</p>
<p>If the <i>browser</i> is managing the width, be aware that resizes performed by the browser in response
to changes within the structure of the Component cannot be detected. Therefore changes to the width might
result in elements needing to be synchronized with the new width. For example, where the target element is:</p><pre><code>
&lt;div id='grid-container' style='margin-left:25%;width:50%'>&lt;/div>
</code></pre>
A Panel rendered into that target element must listen for browser window resize in order to relay its
child items when the browser changes its width:<pre><code>
var myPanel = new Ext.Panel({
    renderTo: 'grid-container',
    monitorResize: true, // relay on browser resize
    title: 'Panel',
    height: 400,
    autoWidth: true,
    layout: 'hbox',
    layoutConfig: {
        align: 'stretch'
    },
    defaults: {
        flex: 1
    },
    items: [{
        title: 'Box 1',
    }, {
        title: 'Box 2'
    }, {
        title: 'Box 3'
    }],
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="height" Type="Number">
              <Summary><![CDATA[The height of this component in pixels (defaults to auto).
<b>Note</b> to express this dimension as a percentage or offset see {@link Ext.Component#anchor}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="margins" Type="Object">
              <Summary><![CDATA[by a Container which has been configured to use the <b>{@link Ext.layout.BorderLayout BorderLayout}</b>
or one of the two <b>{@link Ext.layout.BoxLayout BoxLayout} subclasses.</b></p>
<p>An object containing margins to apply to this BoxComponent in the
format:</p><pre><code>
{
    top: (top margin),
    right: (right margin),
    bottom: (bottom margin),
    left: (left margin)
}</code></pre>
<p>May also be a string containing space-separated, numeric margin values. The order of the
sides associated with each value matches the way CSS processes margin values:</p>
<p><div class="mdetail-params"><ul>
<li>If there is only one value, it applies to all sides.</li>
<li>If there are two values, the top and bottom borders are set to the first value and the
right and left are set to the second.</li>
<li>If there are three values, the top is set to the first value, the left and right are set
to the second, and the bottom is set to the third.</li>
<li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>
</ul></div></p>
<p>Defaults to:</p><pre><code>
{top:0, right:0, bottom:0, left:0}
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="pageX" Type="Number">
              <Summary><![CDATA[The page level x coordinate for this component if contained within a positioning container.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="pageY" Type="Number">
              <Summary><![CDATA[The page level y coordinate for this component if contained within a positioning container.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="region" Type="String">
              <Summary><![CDATA[by a Container which has been configured to use the <b>{@link Ext.layout.BorderLayout BorderLayout}</b>
layout manager (e.g. specifying <tt>layout:'border'</tt>).</p><br>
<p>See {@link Ext.layout.BorderLayout} also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="width" Type="Number">
              <Summary><![CDATA[The width of this component in pixels (defaults to auto).
<b>Note</b> to express this dimension as a percentage or offset see {@link Ext.Component#anchor}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="x" Type="Number">
              <Summary><![CDATA[The local x (left) coordinate for this component if contained within a positioning container.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="y" Type="Number">
              <Summary><![CDATA[The local y (top) coordinate for this component if contained within a positioning container.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="getBox">
              <Summary><![CDATA[Gets the current box measurements of the component's underlying element.]]></Summary>
              <Parameters>
                <Param Name="local" Type="Boolean" Optional="true">
                  <Summary><![CDATA[If true the element's left and top are returned instead of page XY (defaults to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Object} box An object in the format {x, y, width, height" />
            </Method>
            <Method Name="getHeight">
              <Summary><![CDATA[Gets the current height of the component's underlying element.]]></Summary>
              <Parameters />
              <Return Type="Number" />
            </Method>
            <Method Name="getOuterSize">
              <Summary><![CDATA[Gets the current size of the component's underlying element, including space taken by its margins.]]></Summary>
              <Parameters />
              <Return Type="Object} An object containing the element's size {width: (element width + left/right margins), height: (element height + top/bottom margins)" />
            </Method>
            <Method Name="getPosition">
              <Summary><![CDATA[Gets the current XY position of the component's underlying element.]]></Summary>
              <Parameters>
                <Param Name="local" Type="Boolean" Optional="true">
                  <Summary><![CDATA[If true the element's left and top are returned instead of page XY (defaults to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[The XY position of the element (e.g., [100, 200])]]></Summary>
              </Return>
            </Method>
            <Method Name="getResizeEl">
              <Summary><![CDATA[<p>Returns the outermost Element of this Component which defines the Components overall size.</p>
<p><i>Usually</i> this will return the same Element as <code>{@link #getEl}</code>,
but in some cases, a Component may have some more wrapping Elements around its main
active Element.</p>
<p>An example is a ComboBox. It is encased in a <i>wrapping</i> Element which
contains both the <code>&lt;input></code> Element (which is what would be returned
by its <code>{@link #getEl}</code> method, <i>and</i> the trigger button Element.
This Element is returned as the <code>resizeEl</code>.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="getSize">
              <Summary><![CDATA[Gets the current size of the component's underlying element.]]></Summary>
              <Parameters />
              <Return Type="Object} An object containing the element's size {width: (element width), height: (element height)" />
            </Method>
            <Method Name="getWidth">
              <Summary><![CDATA[Gets the current width of the component's underlying element.]]></Summary>
              <Parameters />
              <Return Type="Number" />
            </Method>
            <Method Name="setHeight">
              <Summary><![CDATA[Sets the height of the component.  This method fires the {@link #resize} event.]]></Summary>
              <Parameters>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The new height to set. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
<li>A String used to set the CSS height style.</li>
<li><i>undefined</i> to leave the height unchanged.</li>
</ul></div>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.BoxComponent">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setPagePosition">
              <Summary><![CDATA[Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.
This method fires the {@link #move} event.]]></Summary>
              <Parameters>
                <Param Name="x" Type="Number">
                  <Summary><![CDATA[The new x position]]></Summary>
                </Param>
                <Param Name="y" Type="Number">
                  <Summary><![CDATA[The new y position]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.BoxComponent">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setPosition">
              <Summary><![CDATA[Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.
This method fires the {@link #move} event.]]></Summary>
              <Parameters>
                <Param Name="left" Type="Number">
                  <Summary><![CDATA[The new left]]></Summary>
                </Param>
                <Param Name="top" Type="Number">
                  <Summary><![CDATA[The new top]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.BoxComponent">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setSize">
              <Summary><![CDATA[Sets the width and height of this BoxComponent. This method fires the {@link #resize} event. This method can accept
either width and height as separate arguments, or you can pass a size object like <code>{width:10, height:20}</code>.]]></Summary>
              <Parameters>
                <Param Name="width" Type="Mixed">
                  <Summary><![CDATA[The new width to set. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
<li>A String used to set the CSS width style.</li>
<li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>
<li><code>undefined</code> to leave the width unchanged.</li>
</ul></div>]]></Summary>
                </Param>
                <Param Name="height" Type="Mixed">
                  <Summary><![CDATA[The new height to set (not required if a size object is passed as the first arg).
This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
<li><code>undefined</code> to leave the height unchanged.</li>
</ul></div>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.BoxComponent">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setWidth">
              <Summary><![CDATA[Sets the width of the component.  This method fires the {@link #resize} event.]]></Summary>
              <Parameters>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The new width to setThis may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>
<li>A String used to set the CSS width style.</li>
</ul></div>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.BoxComponent">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="syncSize">
              <Summary><![CDATA[Force the component's size to recalculate based on the underlying element's current height and width.]]></Summary>
              <Parameters />
              <Return Type="Ext.BoxComponent">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="updateBox">
              <Summary><![CDATA[Sets the current box measurements of the component's underlying element.]]></Summary>
              <Parameters>
                <Param Name="box" Type="Object">
                  <Summary><![CDATA[An object in the format {x, y, width, height}]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.BoxComponent">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="move">
              <Summary><![CDATA[Fires after the component is moved.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="x" Type="Number">
                  <Summary><![CDATA[The new x position]]></Summary>
                </Param>
                <Param Name="y" Type="Number">
                  <Summary><![CDATA[The new y position]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="resize">
              <Summary><![CDATA[Fires after the component is resized.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="adjWidth" Type="Number">
                  <Summary><![CDATA[The box-adjusted width that was set]]></Summary>
                </Param>
                <Param Name="adjHeight" Type="Number">
                  <Summary><![CDATA[The box-adjusted height that was set]]></Summary>
                </Param>
                <Param Name="rawWidth" Type="Number">
                  <Summary><![CDATA[The width that was originally specified]]></Summary>
                </Param>
                <Param Name="rawHeight" Type="Number">
                  <Summary><![CDATA[The height that was originally specified]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Button" FullName="Ext.Button" Package="Ext" DefinedIn="widgets\Button.js" Xtype="button" Extends="Ext.BoxComponent" Subclasses="Ext.SplitButton">
          <Summary><![CDATA[Simple Button class
@cfg {String} text The button text to be used as innerHTML (html tags are accepted)
@cfg {String} icon The path to an image to display in the button (the image will be set as the background-image
CSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')
@cfg {Function} handler A function called when the button is clicked (can be used instead of click event).
The handler is passed the following parameters:<div class="mdetail-params"><ul>
<li><code>b</code> : Button<div class="sub-desc">This Button.</div></li>
<li><code>e</code> : EventObject<div class="sub-desc">The click event.</div></li>
</ul></div>
@cfg {Number} minWidth The minimum width for this button (used to give a set of buttons a common width).
See also {@link Ext.Panel}.<tt>{@link Ext.Panel#minButtonWidth minButtonWidth}</tt>.
@cfg {String/Object} tooltip The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config object
@cfg {Boolean} hidden True to start hidden (defaults to false)
@cfg {Boolean} disabled True to start disabled (defaults to false)
@cfg {Boolean} pressed True to start pressed (only if enableToggle = true)
@cfg {String} toggleGroup The group this toggle button is a member of (only 1 per group can be pressed)
@cfg {Boolean/Object} repeat True to repeat fire the click event while the mouse is down. This can also be
a {@link Ext.util.ClickRepeater ClickRepeater} config object (defaults to false).]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new button.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="allowDepress" Type="Boolean">
              <Summary><![CDATA[False to not allow a pressed Button to be depressed (defaults to undefined). Only valid when {@link #enableToggle} is true.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="arrowAlign" Type="String" Optional="true">
              <Summary><![CDATA[<p>The side of the Button box to render the arrow if the button has an associated {@link #menu}.
Two values are allowed:</p>
<ul class="mdetail-params">
<li>'right'<div class="sub-desc"></div></li>
<li>'bottom'<div class="sub-desc"></div></li>
</ul>
<p>Defaults to <b><tt>'right'</tt></b>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoEl" Type="String" />
            <ConfigOption Name="buttonSelector" Type="String" Optional="true">
              <Summary><![CDATA[<p>A {@link Ext.DomQuery DomQuery} selector which is used to extract the active, clickable element from the
DOM structure created.</p>
<p>When a custom {@link #template} is used, you  must ensure that this selector results in the selection of
a focussable element.</p>
<p>Defaults to <b><tt>'button:first-child'</tt></b>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="clickEvent" Type="String">
              <Summary><![CDATA[The type of event to map to the button's event handler (defaults to 'click')]]></Summary>
            </ConfigOption>
            <ConfigOption Name="cls" Type="String">
              <Summary><![CDATA[A CSS class string to apply to the button's main element.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="enableToggle" Type="Boolean">
              <Summary><![CDATA[True to enable pressed/not pressed toggling (defaults to false)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="handleMouseEvents" Type="Boolean">
              <Summary><![CDATA[False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="iconAlign" Type="String" Optional="true">
              <Summary><![CDATA[<p>The side of the Button box to render the icon. Four values are allowed:</p>
<ul class="mdetail-params">
<li>'top'<div class="sub-desc"></div></li>
<li>'right'<div class="sub-desc"></div></li>
<li>'bottom'<div class="sub-desc"></div></li>
<li>'left'<div class="sub-desc"></div></li>
</ul>
<p>Defaults to <b><tt>'left'</tt></b>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="iconCls" Type="String">
              <Summary><![CDATA[A css class which sets a background image to be used as the icon for this button]]></Summary>
            </ConfigOption>
            <ConfigOption Name="menu" Type="Mixed">
              <Summary><![CDATA[Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="menuAlign" Type="String">
              <Summary><![CDATA[The position to align the menu to (see {@link Ext.Element#alignTo} for more details, defaults to 'tl-bl?').]]></Summary>
            </ConfigOption>
            <ConfigOption Name="overflowText" Type="String">
              <Summary><![CDATA[text to be used if this item is shown in the overflow menu. See also
{@link Ext.Toolbar.Item}.<code>{@link Ext.Toolbar.Item#overflowText overflowText}</code>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scale" Type="String" Optional="true">
              <Summary><![CDATA[<p>The size of the Button. Three values are allowed:</p>
<ul class="mdetail-params">
<li>'small'<div class="sub-desc">Results in the button element being 16px high.</div></li>
<li>'medium'<div class="sub-desc">Results in the button element being 24px high.</div></li>
<li>'large'<div class="sub-desc">Results in the button element being 32px high.</div></li>
</ul>
<p>Defaults to <b><tt>'small'</tt></b>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scope" Type="Object">
              <Summary><![CDATA[<code>{@link #handler}</code> and <code>{@link #toggleHandler}</code> is
executed. Defaults to this Button.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tabIndex" Type="Number" />
            <ConfigOption Name="template" Type="Ext.Template">
              <Summary><![CDATA[<p>A {@link Ext.Template Template} used to create the Button's DOM structure.</p>
Instances, or subclasses which need a different DOM structure may provide a different
template layout in conjunction with an implementation of {@link #getTemplateArgs}.
@type Ext.Template
@property template]]></Summary>
            </ConfigOption>
            <ConfigOption Name="toggleHandler" Type="Function">
              <Summary><![CDATA[Function called when a Button with {@link #enableToggle} set to true is clicked. Two arguments are passed:<ul class="mdetail-params">
<li><b>button</b> : Ext.Button<div class="sub-desc">this Button object</div></li>
<li><b>state</b> : Boolean<div class="sub-desc">The next state if the Button, true means pressed.</div></li>
</ul>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tooltipType" Type="String">
              <Summary><![CDATA[The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="type" Type="String">
              <Summary><![CDATA[submit, reset or button - defaults to 'button']]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="btnEl">
              <Summary><![CDATA[An {@link Ext.Element Element} encapsulating the Button's clickable element. By default,
this references a <tt>&lt;button&gt;</tt> element. Read only.]]></Summary>
            </Property>
            <Property Name="menu">
              <Summary><![CDATA[The {@link Ext.menu.Menu Menu} object associated with this Button when configured with the {@link #menu} config option.]]></Summary>
            </Property>
            <Property Name="ownerCt">
              <Summary><![CDATA[The Button's owner {@link Ext.Panel} (defaults to undefined, and is set automatically when
the Button is added to a container).  Read-only.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="focus">
              <Summary><![CDATA[Focus the button]]></Summary>
              <Parameters />
            </Method>
            <Method Name="getPressed">
              <Summary><![CDATA[Gets the pressed button in the passed group or null]]></Summary>
              <Parameters>
                <Param Name="group" Type="String" />
              </Parameters>
            </Method>
            <Method Name="getTemplateArgs">
              <Summary><![CDATA[<p>This method returns an object which provides substitution parameters for the {@link #template Template} used
to create this Button's DOM structure.</p>
<p>Instances or subclasses which use a different Template to create a different DOM structure may need to provide their
own implementation of this method.</p>
<p>The default implementation which provides data for the default {@link #template} returns an Array containing the
following items:</p><div class="mdetail-params"><ul>
<li>The Button's {@link #text}</li>
<li>The &lt;button&gt;'s {@link #type}</li>
<li>The {@link iconCls} applied to the &lt;button&gt; {@link #btnEl element}</li>
<li>The {@link #cls} applied to the Button's main {@link #getEl Element}</li>
<li>A CSS class name controlling the Button's {@link #scale} and {@link #iconAlign icon alignment}</li>
<li>A CSS class name which applies an arrow to the Button if configured with a {@link #menu}</li>
</ul></div>]]></Summary>
              <Parameters />
              <Return Type="Object">
                <Summary><![CDATA[Substitution data for a Template.]]></Summary>
              </Return>
            </Method>
            <Method Name="getText">
              <Summary><![CDATA[Gets the text for this Button]]></Summary>
              <Parameters />
              <Return Type="String">
                <Summary><![CDATA[The button text]]></Summary>
              </Return>
            </Method>
            <Method Name="hasVisibleMenu">
              <Summary><![CDATA[Returns true if the button has a menu and it is visible]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="hideMenu">
              <Summary><![CDATA[Hide this button's menu (if it has one)]]></Summary>
              <Parameters />
            </Method>
            <Method Name="setHandler">
              <Summary><![CDATA[Assigns this Button's click handler]]></Summary>
              <Parameters>
                <Param Name="handler" Type="Function">
                  <Summary><![CDATA[The function to call when the button is clicked]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[Scope for the function passed in. Defaults to this Button.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setIconClass">
              <Summary><![CDATA[Sets the CSS class that provides a background image to use as the button's icon.  This method also changes
the value of the {@link iconCls} config internally.]]></Summary>
              <Parameters>
                <Param Name="cls" Type="String">
                  <Summary><![CDATA[The CSS class providing the icon image]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setText">
              <Summary><![CDATA[Sets this Button's text]]></Summary>
              <Parameters>
                <Param Name="text" Type="String">
                  <Summary><![CDATA[The button text]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setTooltip">
              <Summary><![CDATA[Sets the tooltip for this Button.]]></Summary>
              <Parameters>
                <Param Name="tooltip." Type="String/Object">
                  <Summary><![CDATA[This may be:<div class="mdesc-details"><ul>
<li><b>String</b> : A string to be used as innerHTML (html tags are accepted) to show in a tooltip</li>
<li><b>Object</b> : A configuration object for {@link Ext.QuickTips#register}.</li>
</ul></div>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="showMenu">
              <Summary><![CDATA[Show this button's menu (if it has one)]]></Summary>
              <Parameters />
            </Method>
            <Method Name="toggle">
              <Summary><![CDATA[If a state it passed, it becomes the pressed state otherwise the current state is toggled.]]></Summary>
              <Parameters>
                <Param Name="state" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Force a particular state]]></Summary>
                </Param>
                <Param Name="supressEvent" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to stop events being fired when calling this method.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="click">
              <Summary><![CDATA[Fires when this button is clicked.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="EventObject">
                  <Summary><![CDATA[The click event]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="menuhide">
              <Summary><![CDATA[If this button has a menu, this event fires when it is hidden.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="menu" Type="Menu" />
              </Parameters>
            </Event>
            <Event Name="menushow">
              <Summary><![CDATA[If this button has a menu, this event fires when it is shown.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="menu" Type="Menu" />
              </Parameters>
            </Event>
            <Event Name="menutriggerout">
              <Summary><![CDATA[If this button has a menu, this event fires when the mouse leaves the menu triggering element.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="menu" Type="Menu" />
                <Param Name="e" Type="EventObject" />
              </Parameters>
            </Event>
            <Event Name="menutriggerover">
              <Summary><![CDATA[If this button has a menu, this event fires when the mouse enters the menu triggering element.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="menu" Type="Menu" />
                <Param Name="e" Type="EventObject" />
              </Parameters>
            </Event>
            <Event Name="mouseout">
              <Summary><![CDATA[Fires when the mouse exits the button.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="Event">
                  <Summary><![CDATA[The event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseover">
              <Summary><![CDATA[Fires when the mouse hovers over the button.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="Event">
                  <Summary><![CDATA[The event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="toggle">
              <Summary><![CDATA[Fires when the 'pressed' state of this button changes (only if enableToggle = true).]]></Summary>
              <Parameters>
                <Param Name="el" Type="Button">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="pressed" Type="Boolean" />
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="ButtonGroup" FullName="Ext.ButtonGroup" Package="Ext" DefinedIn="widgets\ButtonGroup.js" Xtype="buttongroup" Extends="Ext.Panel">
          <Summary><![CDATA[Container for a group of buttons. Example usage:
<pre><code>
var p = new Ext.Panel({
    title: 'Panel with Button Group',
    width: 300,
    height:200,
    renderTo: document.body,
    html: 'whatever',
    tbar: [{
        xtype: 'buttongroup',
       {@link #columns}: 3,
        title: 'Clipboard',
        items: [{
            text: 'Paste',
            scale: 'large',
            rowspan: 3, iconCls: 'add',
            iconAlign: 'top',
            cls: 'x-btn-as-arrow'
        },{
            xtype:'splitbutton',
            text: 'Menu Button',
            scale: 'large',
            rowspan: 3,
            iconCls: 'add',
            iconAlign: 'top',
            arrowAlign:'bottom',
            menu: [{text: 'Menu Item 1'}]
        },{
            xtype:'splitbutton', text: 'Cut', iconCls: 'add16', menu: [{text: 'Cut Menu Item'}]
        },{
            text: 'Copy', iconCls: 'add16'
        },{
            text: 'Format', iconCls: 'add16'
        }]
    }]
});
</code></pre>]]></Summary>
          <ConfigOptions>
            <ConfigOption Name="baseCls" Type="String" />
            <ConfigOption Name="columns" Type="Number">
              <Summary><![CDATA[{@link #layout configured layout manager}. See {@link Ext.layout.TableLayout#columns}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="frame" Type="Boolean" />
            <ConfigOption Name="layout" Type="String" />
            <ConfigOption Name="tools" Type="Array" />
          </ConfigOptions>
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="ColorPalette" FullName="Ext.ColorPalette" Package="Ext" DefinedIn="widgets\ColorPalette.js" Xtype="colorpalette" Extends="Ext.Component">
          <Summary><![CDATA[Simple color palette class for choosing colors.  The palette can be rendered to any container.<br />
Here's an example of typical usage:
<pre><code>
var cp = new Ext.ColorPalette({value:'993300'});  // initial selected color
cp.render('my-div');

cp.on('select', function (palette, selColor) {
    // do something with selColor
});
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new ColorPalette.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="allowReselect" Type="Boolean" />
            <ConfigOption Name="autoEl" Type="String" />
            <ConfigOption Name="handler" Type="Function">
              <Summary><![CDATA[Optional. A function that will handle the select event of this palette.
The handler is passed the following parameters:<div class="mdetail-params"><ul>
<li><code>palette</code> : ColorPalette<div class="sub-desc">The {@link #palette Ext.ColorPalette}.</div></li>
<li><code>color</code> : String<div class="sub-desc">The 6-digit color hex code (without the # symbol).</div></li>
</ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="itemCls" Type="String">
              <Summary><![CDATA[The CSS class to apply to the containing element (defaults to 'x-color-palette')]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scope" Type="Object">
              <Summary><![CDATA[The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
function will be called.  Defaults to this ColorPalette instance.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tpl" Type="String" />
            <ConfigOption Name="value" Type="String">
              <Summary><![CDATA[The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that
the hex codes are case-sensitive.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="select">
              <Summary><![CDATA[Selects the specified color in the palette (fires the {@link #select} event)]]></Summary>
              <Parameters>
                <Param Name="color" Type="String">
                  <Summary><![CDATA[A valid 6-digit color hex code (# will be stripped if included)]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="select">
              <Summary><![CDATA[Fires when a color is selected.]]></Summary>
              <Parameters>
                <Param Name="el" Type="ColorPalette">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="color" Type="String">
                  <Summary><![CDATA[The 6-digit color hex code (without the # symbol)]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Component" FullName="Ext.Component" Package="Ext" DefinedIn="widgets\Component.js" Extends="Ext.util.Observable" Subclasses="Ext.menu.BaseItem,Ext.BoxComponent,Ext.ColorPalette,Ext.DatePicker,Ext.Editor">
          <Summary><![CDATA[<p>Base class for all Ext components.  All subclasses of Component may participate in the automated
Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.
Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,
or they may be added dynamically via the {@link Ext.Container#add add} method.</p>
<p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>
<p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via
{@link Ext#getCmp}, passing the {@link #id}.</p>
<p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or
{@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>
<p>See the <a href="http://extjs.com/learn/Tutorial:Creating_new_UI_controls">Creating new UI controls</a> tutorial for details on how
and to either extend or augment ExtJs base classes to create custom Components.</p>
<p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the
xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>
<pre>
xtype            Class
-------------    ------------------
box             {@link Ext.BoxComponent}
button          {@link Ext.Button}
buttongroup     {@link Ext.ButtonGroup}
colorpalette    {@link Ext.ColorPalette}
component       {@link Ext.Component}
container       {@link Ext.Container}
cycle           {@link Ext.CycleButton}
dataview        {@link Ext.DataView}
datepicker      {@link Ext.DatePicker}
editor          {@link Ext.Editor}
editorgrid      {@link Ext.grid.EditorGridPanel}
flash           {@link Ext.FlashComponent}
grid            {@link Ext.grid.GridPanel}
listview        {@link Ext.ListView}
panel           {@link Ext.Panel}
progress        {@link Ext.ProgressBar}
propertygrid    {@link Ext.grid.PropertyGrid}
slider          {@link Ext.Slider}
spacer          {@link Ext.Spacer}
splitbutton     {@link Ext.SplitButton}
tabpanel        {@link Ext.TabPanel}
treepanel       {@link Ext.tree.TreePanel}
viewport        {@link Ext.ViewPort}
window          {@link Ext.Window}

Toolbar components
---------------------------------------
paging          {@link Ext.PagingToolbar}
toolbar         {@link Ext.Toolbar}
tbbutton        {@link Ext.Toolbar.Button}        (deprecated; use button)
tbfill          {@link Ext.Toolbar.Fill}
tbitem          {@link Ext.Toolbar.Item}
tbseparator     {@link Ext.Toolbar.Separator}
tbspacer        {@link Ext.Toolbar.Spacer}
tbsplit         {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)
tbtext          {@link Ext.Toolbar.TextItem}

Menu components
---------------------------------------
menu            {@link Ext.menu.Menu}
colormenu       {@link Ext.menu.ColorMenu}
datemenu        {@link Ext.menu.DateMenu}
menubaseitem    {@link Ext.menu.BaseItem}
menucheckitem   {@link Ext.menu.CheckItem}
menuitem        {@link Ext.menu.Item}
menuseparator   {@link Ext.menu.Separator}
menutextitem    {@link Ext.menu.TextItem}

Form components
---------------------------------------
form            {@link Ext.FormPanel}
checkbox        {@link Ext.form.Checkbox}
checkboxgroup   {@link Ext.form.CheckboxGroup}
combo           {@link Ext.form.ComboBox}
datefield       {@link Ext.form.DateField}
displayfield    {@link Ext.form.DisplayField}
field           {@link Ext.form.Field}
fieldset        {@link Ext.form.FieldSet}
hidden          {@link Ext.form.Hidden}
htmleditor      {@link Ext.form.HtmlEditor}
label           {@link Ext.form.Label}
numberfield     {@link Ext.form.NumberField}
radio           {@link Ext.form.Radio}
radiogroup      {@link Ext.form.RadioGroup}
textarea        {@link Ext.form.TextArea}
textfield       {@link Ext.form.TextField}
timefield       {@link Ext.form.TimeField}
trigger         {@link Ext.form.TriggerField}

Chart components
---------------------------------------
chart           {@link Ext.chart.Chart}
barchart        {@link Ext.chart.BarChart}
cartesianchart  {@link Ext.chart.CartesianChart}
columnchart     {@link Ext.chart.ColumnChart}
linechart       {@link Ext.chart.LineChart}
piechart        {@link Ext.chart.PieChart}

Store xtypes
---------------------------------------
arraystore      {@link Ext.data.ArrayStore}
directstore     {@link Ext.data.DirectStore}
groupingstore   {@link Ext.data.GroupingStore}
jsonstore       {@link Ext.data.JsonStore}
simplestore     {@link Ext.data.SimpleStore}      (deprecated; use arraystore)
store           {@link Ext.data.Store}
xmlstore        {@link Ext.data.XmlStore}
</pre>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Ext.Element/String/Object">
                <Summary><![CDATA[The configuration options may be specified as either: <div class="mdetail-params"><ul> <li><b>an element</b> : <p class="sub-desc">it is set as the internal element and its id used as the component id</p></li> <li><b>a string</b> : <p class="sub-desc">it is assumed to be the id of an existing element and is used as the component id</p></li> <li><b>anything else</b> : <p class="sub-desc">it is assumed to be a standard config object and is applied to the component</p></li> </ul></div>]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="allowDomMove" Type="Boolean">
              <Summary><![CDATA[Whether the component can move the Dom node when rendering (defaults to true).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="anchor" Type="String">
              <Summary><![CDATA[by a Container which has been configured to use an <b>{@link Ext.layout.AnchorLayout AnchorLayout}</b>
based layout manager, for example:<div class="mdetail-params"><ul>
<li>{@link Ext.form.FormPanel}</li>
<li>specifying <code>layout: 'anchor' // or 'form', or 'absolute'</code></li>
</ul></div></p>
<p>See {@link Ext.layout.AnchorLayout}.{@link Ext.layout.AnchorLayout#anchor anchor} also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="applyTo" Type="Mixed">
              <Summary><![CDATA[<p>Specify the id of the element, a DOM element or an existing Element corresponding to a DIV
that is already present in the document that specifies some structural markup for this
component.</p><div><ul>
<li><b>Description</b> : <ul>
<div class="sub-desc">When <tt>applyTo</tt> is used, constituent parts of the component can also be specified
by id or CSS class name within the main element, and the component being created may attempt
to create its subcomponents from that markup if applicable.</div>
</ul></li>
<li><b>Notes</b> : <ul>
<div class="sub-desc">When using this config, a call to render() is not required.</div>
<div class="sub-desc">If applyTo is specified, any value passed for {@link #renderTo} will be ignored and the target
element's parent node will automatically be used as the component's container.</div>
</ul></li>
</ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoEl" Type="Mixed">
              <Summary><![CDATA[<p>A tag name or {@link Ext.DomHelper DomHelper} spec used to create the {@link #getEl Element} which will
encapsulate this Component.</p>
<p>You do not normally need to specify this. For the base classes {@link Ext.Component}, {@link Ext.BoxComponent},
and {@link Ext.Container}, this defaults to <b><tt>'div'</tt></b>. The more complex Ext classes use a more complex
DOM structure created by their own onRender methods.</p>
<p>This is intended to allow the developer to create application-specific utility Components encapsulated by
different DOM elements. Example usage:</p><pre><code>
{
    xtype: 'box',
    autoEl: {
        tag: 'img',
        src: 'http://www.example.com/example.jpg'
    }
}, {
    xtype: 'box',
    autoEl: {
        tag: 'blockquote',
        html: 'autoEl is cool!'
    }
}, {
    xtype: 'container',
    autoEl: 'ul',
    cls: 'ux-unordered-list',
    items: {
        xtype: 'box',
        autoEl: 'li',
        html: 'First list item'
    }
}
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoShow" Type="Boolean">
              <Summary><![CDATA[True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove
them on render (defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="clearCls" Type="String">
              <Summary><![CDATA[directly after each form field wrapper to provide field clearing (defaults to
<tt>'x-form-clear-left'</tt>).</p>
<br><p><b>Note</b>: this config is only used when this Component is rendered by a Container
which has been configured to use the <b>{@link Ext.layout.FormLayout FormLayout}</b> layout
manager (e.g. {@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>) and either a
<tt>{@link #fieldLabel}</tt> is specified or <tt>isFormField=true</tt> is specified.</p><br>
<p>See {@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl} also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="cls" Type="String">
              <Summary><![CDATA[An optional extra CSS class that will be added to this component's Element (defaults to '').  This can be
useful for adding customized styles to the component or any of its children using standard CSS rules.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="ctCls" Type="String">
              <Summary><![CDATA[<p>An optional extra CSS class that will be added to this component's container. This can be useful for
adding customized styles to the container or any of its children using standard CSS rules.  See
{@link Ext.layout.ContainerLayout}.{@link Ext.layout.ContainerLayout#extraCls extraCls} also.</p>
<p><b>Note</b>: <tt>ctCls</tt> defaults to <tt>''</tt> except for the following class
which assigns a value by default:
<div class="mdetail-params"><ul>
<li>{@link Ext.layout.Box Box Layout} : <tt>'x-box-layout-ct'</tt></li>
</ul></div>
To configure the above Class with an extra CSS class append to the default.  For example,
for BoxLayout (Hbox and Vbox):<pre><code>
ctCls: 'x-box-layout-ct custom-class'
</code></pre>
</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabled" Type="Boolean">
              <Summary><![CDATA[Render this component disabled (default is false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabledClass" Type="String">
              <Summary><![CDATA[CSS class added to the component when it is disabled (defaults to 'x-item-disabled').]]></Summary>
            </ConfigOption>
            <ConfigOption Name="fieldLabel" Type="String">
              <Summary><![CDATA[<br><p><b>Note</b>: this config is only used when this Component is rendered by a Container which
has been configured to use the <b>{@link Ext.layout.FormLayout FormLayout}</b> layout manager (e.g.
{@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>).</p><br>
<p>Also see <tt>{@link #hideLabel}</tt> and
{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.</p>
Example use:<pre><code>
new Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'textfield',
        fieldLabel: 'Name'
    }]
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hidden" Type="Boolean">
              <Summary><![CDATA[Render this component hidden (default is false). If <tt>true</tt>, the
{@link #hide} method will be called internally.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hideLabel" Type="Boolean">
              <Summary><![CDATA[({@link #fieldLabel label} and {@link #labelSeparator separator}). Defaults to <tt>false</tt>.
By default, even if you do not specify a <tt>{@link #fieldLabel}</tt> the space will still be
reserved so that the field will line up with other fields that do have labels.
Setting this to <tt>true</tt> will cause the field to not reserve that space.</p>
<br><p><b>Note</b>: see the note for <tt>{@link #clearCls}</tt>.</p><br>
Example use:<pre><code>
new Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'textfield'
        hideLabel: true
    }]
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hideMode" Type="String">
              <Summary><![CDATA[<p>How this component should be hidden. Supported values are <tt>'visibility'</tt>
(css visibility), <tt>'offsets'</tt> (negative offset position) and <tt>'display'</tt>
(css display).</p>
<br><p><b>Note</b>: the default of <tt>'display'</tt> is generally preferred
since items are automatically laid out when they are first shown (no sizing
is done while hidden).</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hideParent" Type="Boolean">
              <Summary><![CDATA[True to hide and show the component's container when hide/show is called on the component, false to hide
and show the component itself (defaults to false).  For example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button when adding it to its parent container.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="id" Type="String">
              <Summary><![CDATA[<p>The <b>unique</b> id of this component (defaults to an {@link #getId auto-assigned id}).
You should assign an id if you need to be able to access the component later and you do
not have an object reference available (e.g., using {@link Ext}.{@link Ext#getCmp getCmp}).</p>
<p>Note that this id will also be used as the element id for the containing HTML element
that is rendered to the page for this component. This allows you to write id-based CSS
rules to style the specific instance of this component uniquely, and also to select
sub-elements using this component's id as the parent.</p>
<p><b>Note</b>: to avoid complications imposed by a unique <tt>id</tt> also see
<code>{@link #itemId}</code> and <code>{@link #ref}</code>.</p>
<p><b>Note</b>: to access the container of an item see <code>{@link #ownerCt}</code>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="itemCls" Type="String">
              <Summary><![CDATA[<p><b>Note</b>: this config is only used when this Component is rendered by a Container which
has been configured to use the <b>{@link Ext.layout.FormLayout FormLayout}</b> layout manager (e.g.
{@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>).</p><br>
<p>An additional CSS class to apply to the div wrapping the form item
element of this field.  If supplied, <tt>itemCls</tt> at the <b>field</b> level will override
the default <tt>itemCls</tt> supplied at the <b>container</b> level. The value specified for
<tt>itemCls</tt> will be added to the default class (<tt>'x-form-item'</tt>).</p>
<p>Since it is applied to the item wrapper (see
{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}), it allows
you to write standard CSS rules that can apply to the field, the label (if specified), or
any other element within the markup for the field.</p>
<br><p><b>Note</b>: see the note for <tt>{@link #fieldLabel}</tt>.</p><br>
Example use:<pre><code>
// Apply a style to the field&#39;s label:
&lt;style>
    .required .x-form-item-label {font-weight:bold;color:red;}
&lt;/style>

new Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'textfield',
        fieldLabel: 'Name',
        itemCls: 'required' //this label will be styled
    },{
        xtype: 'textfield',
        fieldLabel: 'Favorite Color'
    }]
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="itemId" Type="String">
              <Summary><![CDATA[<p>An <tt>itemId</tt> can be used as an alternative way to get a reference to a component
when no object reference is available.  Instead of using an <code>{@link #id}</code> with
{@link Ext}.{@link Ext#getCmp getCmp}, use <code>itemId</code> with
{@link Ext.Container}.{@link Ext.Container#getComponent getComponent} which will retrieve
<code>itemId</code>'s or <tt>{@link #id}</tt>'s. Since <code>itemId</code>'s are an index to the
container's internal MixedCollection, the <code>itemId</code> is scoped locally to the container --
avoiding potential conflicts with {@link Ext.ComponentMgr} which requires a <b>unique</b>
<code>{@link #id}</code>.</p>
<pre><code>
var c = new Ext.Panel({ //
   {@link Ext.BoxComponent#height height}: 300,
   {@link #renderTo}: document.body,
   {@link Ext.Container#layout layout}: 'auto',
   {@link Ext.Container#items items}: [
       {
            itemId: 'p1',
           {@link Ext.Panel#title title}: 'Panel 1',
           {@link Ext.BoxComponent#height height}: 150
        },
       {
            itemId: 'p2',
           {@link Ext.Panel#title title}: 'Panel 2',
           {@link Ext.BoxComponent#height height}: 150
        }
    ]
})
p1 = c.{@link Ext.Container#getComponent getComponent}('p1'); // not the same as {@link Ext#getCmp Ext.getCmp()}
p2 = p1.{@link #ownerCt}.{@link Ext.Container#getComponent getComponent}('p2'); // reference via a sibling
</code></pre>
<p>Also see <tt>{@link #id}</tt> and <code>{@link #ref}</code>.</p>
<p><b>Note</b>: to access the container of an item see <tt>{@link #ownerCt}</tt>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="labelSeparator" Type="String">
              <Summary><![CDATA[<tt>{@link #fieldLabel}</tt>.  This property may be configured at various levels.
The order of precedence is:
<div class="mdetail-params"><ul>
<li>field / component level</li>
<li>container level</li>
<li>{@link Ext.layout.FormLayout#labelSeparator layout level} (defaults to colon <tt>':'</tt>)</li>
</ul></div>
To display no separator for this field's label specify empty string ''.</p>
<br><p><b>Note</b>: see the note for <tt>{@link #clearCls}</tt>.</p><br>
<p>Also see <tt>{@link #hideLabel}</tt> and
{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.</p>
Example use:<pre><code>
new Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    layoutConfig: {
        labelSeparator: '~'   // layout config has lowest priority (defaults to ':')
    },
   {@link Ext.layout.FormLayout#labelSeparator labelSeparator}: '>>',     // config at container level
    items: [{
        xtype: 'textfield',
        fieldLabel: 'Field 1',
        labelSeparator: '...' // field/component level config supersedes others
    },{
        xtype: 'textfield',
        fieldLabel: 'Field 2' // labelSeparator will be '='
    }]
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="labelStyle" Type="String">
              <Summary><![CDATA[label.  Defaults to the container's labelStyle value if set (e.g.,
<tt>{@link Ext.layout.FormLayout#labelStyle}</tt> , or '').</p>
<br><p><b>Note</b>: see the note for <code>{@link #clearCls}</code>.</p><br>
<p>Also see <code>{@link #hideLabel}</code> and
<code>{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.</code></p>
Example use:<pre><code>
new Ext.FormPanel({
    height: 100,
    renderTo: Ext.getBody(),
    items: [{
        xtype: 'textfield',
        fieldLabel: 'Name',
        labelStyle: 'font-weight:bold;'
    }]
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="overCls" Type="String">
              <Summary><![CDATA[An optional extra CSS class that will be added to this component's Element when the mouse moves
over the Element, and removed when the mouse moves out. (defaults to '').  This can be
useful for adding customized 'active' or 'hover' styles to the component or any of its children using standard CSS rules.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="plugins" Type="Object/Array">
              <Summary><![CDATA[An object or array of objects that will provide custom functionality for this component.  The only
requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.
When a component is created, if any plugins are available, the component will call the init method on each
plugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the
component as needed to provide its functionality.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="ptype" Type="String">
              <Summary><![CDATA[The registered <tt>ptype</tt> to create. This config option is not used when passing
a config object into a constructor. This config option is used only when
lazy instantiation is being used, and a Plugin is being
specified not as a fully instantiated Component, but as a <i>Component config
object</i>. The <tt>ptype</tt> will be looked up at render time up to determine what
type of Plugin to create.<br><br>
If you create your own Plugins, you may register them using
{@link Ext.ComponentMgr#registerPlugin} in order to be able to
take advantage of lazy instantiation and rendering.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="ref" Type="String">
              <Summary><![CDATA[<p>A path specification, relative to the Component's {@link #ownerCt} specifying into which
ancestor Container to place a named reference to this Component.</p>
<p>The ancestor axis can be traversed by using '/' characters in the path.
For example, to put a reference to a Toolbar Button into <i>the Panel which owns the Toolbar</i>:</p><pre><code>
var myGrid = new Ext.grid.EditorGridPanel({
    title: 'My EditorGridPanel',
    store: myStore,
    colModel: myColModel,
    tbar: [{
        text: 'Save',
        handler: saveChanges,
        disabled: true,
        ref: '../saveButton'
    }],
    listeners: {
        afteredit: function () {
//          The button reference is in the GridPanel
            myGrid.saveButton.enable();
        }
    }
});
</code></pre>
<p>In the code above, if the ref had been <code>'saveButton'</code> the reference would
have been placed into the Toolbar. Each '/' in the ref moves up one level from the
Component's {@link #ownerCt}.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="renderTo" Type="Mixed">
              <Summary><![CDATA[<p>Specify the id of the element, a DOM element or an existing Element that this component
will be rendered into.</p><div><ul>
<li><b>Notes</b> : <ul>
<div class="sub-desc">Do <u>not</u> use this option if the Component is to be a child item of
a {@link Ext.Container Container}. It is the responsibility of the
{@link Ext.Container Container}'s {@link Ext.Container#layout layout manager}
to render and manage its child items.</div>
<div class="sub-desc">When using this config, a call to render() is not required.</div>
</ul></li>
</ul></div>
<p>See <tt>{@link #render}</tt> also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="stateEvents" Type="Array">
              <Summary><![CDATA[<p>An array of events that, when fired, should trigger this component to
save its state (defaults to none). <code>stateEvents</code> may be any type
of event supported by this component, including browser or custom events
(e.g., <tt>['click', 'customerchange']</tt>).</p>
<p>See <code>{@link #stateful}</code> for an explanation of saving and
restoring Component state.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="stateful" Type="Boolean">
              <Summary><![CDATA[<p>A flag which causes the Component to attempt to restore the state of
internal properties from a saved state on startup. The component must have
either a <code>{@link #stateId}</code> or <code>{@link #id}</code> assigned
for state to be managed. Auto-generated ids are not guaranteed to be stable
across page loads and cannot be relied upon to save and restore the same
state for a component.<p>
<p>For state saving to work, the state manager's provider must have been
set to an implementation of {@link Ext.state.Provider} which overrides the
{@link Ext.state.Provider#set set} and {@link Ext.state.Provider#get get}
methods to save and recall name/value pairs. A built-in implementation,
{@link Ext.state.CookieProvider} is available.</p>
<p>To set the state provider for the current page:</p>
<pre><code>
Ext.state.Manager.setProvider(new Ext.state.CookieProvider({
    expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now
}));
</code></pre>
<p>A stateful Component attempts to save state when one of the events
listed in the <code>{@link #stateEvents}</code> configuration fires.</p>
<p>To save state, a stateful Component first serializes its state by
calling <b><code>getState</code></b>. By default, this function does
nothing. The developer must provide an implementation which returns an
object hash which represents the Component's restorable state.</p>
<p>The value yielded by getState is passed to {@link Ext.state.Manager#set}
which uses the configured {@link Ext.state.Provider} to save the object
keyed by the Component's <code>{@link stateId}</code>, or, if that is not
specified, its <code>{@link #id}</code>.</p>
<p>During construction, a stateful Component attempts to <i>restore</i>
its state by calling {@link Ext.state.Manager#get} passing the
<code>{@link #stateId}</code>, or, if that is not specified, the
<code>{@link #id}</code>.</p>
<p>The resulting object is passed to <b><code>applyState</code></b>.
The default implementation of <code>applyState</code> simply copies
properties into the object, but a developer may override this to support
more behaviour.</p>
<p>You can perform extra processing on state save and restore by attaching
handlers to the {@link #beforestaterestore}, {@link #staterestore},
{@link #beforestatesave} and {@link #statesave} events.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="stateId" Type="String">
              <Summary><![CDATA[The unique id for this component to use for state management purposes
(defaults to the component id if one was set, otherwise null if the
component is using a generated id).
<p>See <code>{@link #stateful}</code> for an explanation of saving and
restoring Component state.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="style" Type="String">
              <Summary><![CDATA[A custom style specification to be applied to this component's Element.  Should be a valid argument to
{@link Ext.Element#applyStyles}.
<pre><code>
new Ext.Panel({
    title: 'Some Title',
    renderTo: Ext.getBody(),
    width: 400, height: 300,
    layout: 'form',
    items: [{
        xtype: 'textarea',
        style: {
            width: '95%',
            marginBottom: '10px'
        }
    },
        new Ext.Button({
            text: 'Send',
            minWidth: '100',
            style: {
                marginBottom: '10px'
            }
        })
    ]
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="xtype" Type="String">
              <Summary><![CDATA[The registered <tt>xtype</tt> to create. This config option is not used when passing
a config object into a constructor. This config option is used only when
lazy instantiation is being used, and a child item of a Container is being
specified not as a fully instantiated Component, but as a <i>Component config
object</i>. The <tt>xtype</tt> will be looked up at render time up to determine what
type of child Component to create.<br><br>
The predefined xtypes are listed {@link Ext.Component here}.
<br><br>
If you subclass Components to create your own Components, you may register
them using {@link Ext.ComponentMgr#registerType} in order to be able to
take advantage of lazy instantiation and rendering.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="disabled">
              <Summary><![CDATA[True if this component is disabled. Read-only.]]></Summary>
            </Property>
            <Property Name="el">
              <Summary><![CDATA[<p>The {@link Ext.Element} which encapsulates this Component. Read-only.</p>
<p>This will <i>usually</i> be a &lt;DIV> element created by the class's onRender method, but
that may be overridden using the <code>{@link #autoEl}</code> config.</p>
<br><p><b>Note</b>: this element will not be available until this Component has been rendered.</p><br>
<p>To add listeners for <b>DOM events</b> to this Component (as opposed to listeners
for this Component's own Observable events), see the {@link Ext.util.Observable#listeners listeners}
config for a suggestion, or use a render listener directly:</p><pre><code>
new Ext.Panel({
title: 'The Clickable Panel',
listeners: {
render: function (p) {
// Append the Panel to the click handler&#39;s argument list.
p.getEl().on('click', handlePanelClick.createDelegate(null, [p], true));
},
single: true  // Remove the listener after first invocation
}
});
</code></pre>
<p>See also <tt>{@link #getEl getEl}</p>]]></Summary>
            </Property>
            <Property Name="hidden">
              <Summary><![CDATA[True if this component is hidden. Read-only.]]></Summary>
            </Property>
            <Property Name="initialConfig">
              <Summary><![CDATA[This Component's initial configuration specification. Read-only.]]></Summary>
            </Property>
            <Property Name="ownerCt">
              <Summary><![CDATA[The component's owner {@link Ext.Container} (defaults to undefined, and is set automatically when
the component is added to a container).  Read-only.
<p><b>Note</b>: to access items within the container see <tt>{@link #itemId}</tt>.</p>]]></Summary>
            </Property>
            <Property Name="rendered">
              <Summary><![CDATA[True if this component has been rendered. Read-only.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="addClass">
              <Summary><![CDATA[Adds a CSS class to the component's underlying element.]]></Summary>
              <Parameters>
                <Param Name="cls" Type="string">
                  <Summary><![CDATA[The CSS class name to add]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="applyToMarkup">
              <Summary><![CDATA[Apply this component to existing markup that is valid. With this function, no call to render() is required.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement" />
              </Parameters>
            </Method>
            <Method Name="cloneConfig">
              <Summary><![CDATA[Clone the current component using the original config values passed into this instance by default.]]></Summary>
              <Parameters>
                <Param Name="overrides" Type="Object">
                  <Summary><![CDATA[A new config containing any properties to override in the cloned version.
An id property can be passed on this object, otherwise one will be generated to avoid duplicates.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[clone The cloned copy of this component]]></Summary>
              </Return>
            </Method>
            <Method Name="destroy">
              <Summary><![CDATA[Destroys this component by purging any event listeners, removing the component's element from the DOM,
removing the component from its {@link Ext.Container} (if applicable) and unregistering it from
{@link Ext.ComponentMgr}.  Destruction is generally handled automatically by the framework and this method
should usually not need to be called directly.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="disable">
              <Summary><![CDATA[Disable this component and fire the 'disable' event.]]></Summary>
              <Parameters />
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="enable">
              <Summary><![CDATA[Enable this component and fire the 'enable' event.]]></Summary>
              <Parameters />
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="findParentBy">
              <Summary><![CDATA[Find a container above this component at any level by a custom function. If the passed function returns
true, the container will be returned.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The custom function to call with the arguments (container, this component).]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Container">
                <Summary><![CDATA[The first Container for which the custom function returns true]]></Summary>
              </Return>
            </Method>
            <Method Name="findParentByType">
              <Summary><![CDATA[Find a container above this component at any level by xtype or class]]></Summary>
              <Parameters>
                <Param Name="xtype" Type="String/Class">
                  <Summary><![CDATA[The xtype string for a component, or the class of the component directly]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Container">
                <Summary><![CDATA[The first Container which matches the given xtype or class]]></Summary>
              </Return>
            </Method>
            <Method Name="focus">
              <Summary><![CDATA[Try to focus this component.]]></Summary>
              <Parameters>
                <Param Name="selectText" Type="Boolean" Optional="true">
                  <Summary><![CDATA[If applicable, true to also select the text in this component]]></Summary>
                </Param>
                <Param Name="delay" Type="Boolean/Number" Optional="true">
                  <Summary><![CDATA[Delay the focus this number of milliseconds (true for 10 milliseconds)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getBubbleTarget">
              <Summary><![CDATA[Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.]]></Summary>
              <Parameters />
              <Return Type="Ext.Container">
                <Summary><![CDATA[the Container which owns this Component.]]></Summary>
              </Return>
            </Method>
            <Method Name="getEl">
              <Summary><![CDATA[<p>Returns the {@link Ext.Element} which encapsulates this Component.</p>
<p>This will <i>usually</i> be a &lt;DIV> element created by the class's onRender method, but
that may be overridden using the {@link #autoEl} config.</p>
<br><p><b>Note</b>: this element will not be available until this Component has been rendered.</p><br>
<p>To add listeners for <b>DOM events</b> to this Component (as opposed to listeners
for this Component's own Observable events), see the {@link #listeners} config for a suggestion,
or use a render listener directly:</p><pre><code>
new Ext.Panel({
    title: 'The Clickable Panel',
    listeners: {
        render: function (p) {
            // Append the Panel to the click handler&#39;s argument list.
            p.getEl().on('click', handlePanelClick.createDelegate(null, [p], true));
        },
        single: true  // Remove the listener after first invocation
    }
});
</code></pre>]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element which encapsulates this Component.]]></Summary>
              </Return>
            </Method>
            <Method Name="getId">
              <Summary><![CDATA[Returns the <code>id</code> of this component or automatically generates and
returns an <code>id</code> if an <code>id</code> is not defined yet:<pre><code>
'ext-comp-' + (++Ext.Component.AUTO_ID)
</code></pre>]]></Summary>
              <Parameters />
              <Return Type="String">
                <Summary><![CDATA[id]]></Summary>
              </Return>
            </Method>
            <Method Name="getItemId">
              <Summary><![CDATA[Returns the <code>{@link #itemId}</code> of this component.  If an
<code>{@link #itemId}</code> was not assigned through configuration the
<code>id</code> is returned using <code>{@link #getId}</code>.]]></Summary>
              <Parameters />
              <Return Type="String" />
            </Method>
            <Method Name="getXType">
              <Summary><![CDATA[Gets the xtype for this component as registered with {@link Ext.ComponentMgr}. For a list of all
available xtypes, see the {@link Ext.Component} header. Example usage:
<pre><code>
var t = new Ext.form.TextField();
alert(t.getXType());  // alerts 'textfield'
</code></pre>]]></Summary>
              <Parameters />
              <Return Type="String">
                <Summary><![CDATA[The xtype]]></Summary>
              </Return>
            </Method>
            <Method Name="getXTypes">
              <Summary><![CDATA[<p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all
available xtypes, see the {@link Ext.Component} header.</p>
<p><b>If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.</b></p>
<p>Example usage:</p>
<pre><code>
var t = new Ext.form.TextField();
alert(t.getXTypes());  // alerts 'component/box/field/textfield'
</code></pre>]]></Summary>
              <Parameters />
              <Return Type="String">
                <Summary><![CDATA[The xtype hierarchy string]]></Summary>
              </Return>
            </Method>
            <Method Name="hide">
              <Summary><![CDATA[Hide this component.  Listen to the '{@link #beforehide}' event and return
<tt>false</tt> to cancel hiding the component.  Fires the '{@link #hide}'
event after hiding the component. Note this method is called internally if
the component is configured to be <code>{@link #hidden}</code>.]]></Summary>
              <Parameters />
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="isVisible">
              <Summary><![CDATA[Returns true if this component is visible.]]></Summary>
              <Parameters />
              <Return Type="Boolean">
                <Summary><![CDATA[True if this component is visible, false otherwise.]]></Summary>
              </Return>
            </Method>
            <Method Name="isXType">
              <Summary><![CDATA[<p>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended
from the xtype (default) or whether it is directly of the xtype specified (shallow = true).</p>
<p><b>If using your own subclasses, be aware that a Component must register its own xtype
to participate in determination of inherited xtypes.</b></p>
<p>For a list of all available xtypes, see the {@link Ext.Component} header.</p>
<p>Example usage:</p>
<pre><code>
var t = new Ext.form.TextField();
var isText = t.isXType('textfield');        // true
var isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent
var isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="xtype" Type="String">
                  <Summary><![CDATA[The xtype to check for this Component]]></Summary>
                </Param>
                <Param Name="shallow" Type="Boolean" Optional="true">
                  <Summary><![CDATA[False to check whether this Component is descended from the xtype (this is
the default), or true to check whether this Component is directly of the specified xtype.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[True if this component descends from the specified xtype, false otherwise.]]></Summary>
              </Return>
            </Method>
            <Method Name="nextSibling">
              <Summary><![CDATA[Returns the next component in the owning container]]></Summary>
              <Parameters />
            </Method>
            <Method Name="previousSibling">
              <Summary><![CDATA[Returns the previous component in the owning container]]></Summary>
              <Parameters />
            </Method>
            <Method Name="removeClass">
              <Summary><![CDATA[Removes a CSS class from the component's underlying element.]]></Summary>
              <Parameters>
                <Param Name="cls" Type="string">
                  <Summary><![CDATA[The CSS class name to remove]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="render">
              <Summary><![CDATA[<p>Render this Component into the passed HTML element.</p>
<p><b>If you are using a {@link Ext.Container Container} object to house this Component, then
do not use the render method.</b></p>
<p>A Container's child Components are rendered by that Container's
{@link Ext.Container#layout layout} manager when the Container is first rendered.</p>
<p>Certain layout managers allow dynamic addition of child components. Those that do
include {@link Ext.layout.CardLayout}, {@link Ext.layout.AnchorLayout},
{@link Ext.layout.FormLayout}, {@link Ext.layout.TableLayout}.</p>
<p>If the Container is already rendered when a new child Component is added, you may need to call
the Container's {@link Ext.Container#doLayout doLayout} to refresh the view which causes any
unrendered child Components to be rendered. This is required so that you can add multiple
child components if needed while only refreshing the layout once.</p>
<p>When creating complex UIs, it is important to remember that sizing and positioning
of child items is the responsibility of the Container's {@link Ext.Container#layout layout} manager.
If you expect child items to be sized in response to user interactions, you must
configure the Container with a layout manager which creates and manages the type of layout you
have in mind.</p>
<p><b>Omitting the Container's {@link Ext.Container#layout layout} config means that a basic
layout manager is used which does nothing but render child components sequentially into the
Container. No sizing or positioning will be performed in this situation.</b></p>]]></Summary>
              <Parameters>
                <Param Name="container" Type="Element/HTMLElement/String" Optional="true">
                  <Summary><![CDATA[The element this Component should be
rendered into. If it is being created from existing markup, this should be omitted.]]></Summary>
                </Param>
                <Param Name="position" Type="String/Number" Optional="true">
                  <Summary><![CDATA[The element ID or DOM node index within the container <b>before</b>
which this component will be inserted (defaults to appending to the end of the container)]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setDisabled">
              <Summary><![CDATA[Convenience function for setting disabled/enabled by boolean.]]></Summary>
              <Parameters>
                <Param Name="disabled" Type="Boolean" />
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setVisible">
              <Summary><![CDATA[Convenience function to hide or show this component by boolean.]]></Summary>
              <Parameters>
                <Param Name="visible" Type="Boolean">
                  <Summary><![CDATA[True to show, false to hide]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Show this component.  Listen to the '{@link #beforeshow}' event and return
<tt>false</tt> to cancel showing the component.  Fires the '{@link #show}'
event after showing the component.]]></Summary>
              <Parameters />
              <Return Type="Ext.Component">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="afterrender">
              <Summary><![CDATA[<p>Fires after the component rendering is finished.</p> <p>The afterrender event is fired after this Component has been {@link #rendered}, been postprocesed by any afterRender method defined for the Component, and, if {@link #stateful}, after state has been restored.</p>.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforedestroy">
              <Summary><![CDATA[Fires before the component is {@link #destroy}ed. Return false from an event handler to stop the {@link #destroy}.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforehide">
              <Summary><![CDATA[Fires before the component is hidden by calling the {@link #hide} method. Return false from an event handler to stop the hide.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforerender">
              <Summary><![CDATA[Fires before the component is {@link #rendered}. Return false from an event handler to stop the {@link #render}.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforeshow">
              <Summary><![CDATA[Fires before the component is shown by calling the {@link #show} method. Return false from an event handler to stop the show.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforestaterestore">
              <Summary><![CDATA[Fires before the state of the component is restored. Return false from an event handler to stop the restore. event is not vetoed, then the state object is passed to <b><tt>applyState</tt></b>. By default, that simply copies property values into this Component. The method maybe overriden to provide custom state restoration.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="state" Type="Object">
                  <Summary><![CDATA[The hash of state values returned from the StateProvider. If this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforestatesave">
              <Summary><![CDATA[Fires before the state of the component is saved to the configured state provider. Return false to stop the save. <b><tt>getState()</tt></b> on the Component. This method must be provided by the developer to return whetever representation of state is required, by default, Ext.Component has a null implementation.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="state" Type="Object">
                  <Summary><![CDATA[The hash of state values. This is determined by calling]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="destroy">
              <Summary><![CDATA[Fires after the component is {@link #destroy}ed.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="disable">
              <Summary><![CDATA[Fires after the component is disabled.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="enable">
              <Summary><![CDATA[Fires after the component is enabled.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="hide">
              <Summary><![CDATA[Fires after the component is hidden. Fires after the component is hidden when calling the {@link #hide} method.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="render">
              <Summary><![CDATA[Fires after the component markup is {@link #rendered}.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="show">
              <Summary><![CDATA[Fires after the component is shown when calling the {@link #show} method.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="staterestore">
              <Summary><![CDATA[Fires after the state of the component is restored. to <b><tt>applyState</tt></b>. By default, that simply copies property values into this Component. The method maybe overriden to provide custom state restoration.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="state" Type="Object">
                  <Summary><![CDATA[The hash of state values returned from the StateProvider. This is passed]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="statesave">
              <Summary><![CDATA[Fires after the state of the component is saved to the configured state provider. <b><tt>getState()</tt></b> on the Component. This method must be provided by the developer to return whetever representation of state is required, by default, Ext.Component has a null implementation.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Component">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="state" Type="Object">
                  <Summary><![CDATA[The hash of state values. This is determined by calling]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="ComponentMgr" FullName="Ext.ComponentMgr" Package="Ext" DefinedIn="widgets\ComponentMgr.js" Singleton="true">
          <Summary><![CDATA[<p>Provides a registry of all Components (instances of {@link Ext.Component} or any subclass
thereof) on a page so that they can be easily accessed by {@link Ext.Component component}
{@link Ext.Component#id id} (see {@link #get}, or the convenience method {@link Ext#getCmp Ext.getCmp}).</p>
<p>This object also provides a registry of available Component <i>classes</i>
indexed by a mnemonic code known as the Component's {@link Ext.Component#xtype xtype}.
The <tt>{@link Ext.Component#xtype xtype}</tt> provides a way to avoid instantiating child Components
when creating a full, nested config object for a complete Ext page.</p>
<p>A child Component may be specified simply as a <i>config object</i>
as long as the correct <tt>{@link Ext.Component#xtype xtype}</tt> is specified so that if and when the Component
needs rendering, the correct type can be looked up for lazy instantiation.</p>
<p>For a list of all available <tt>{@link Ext.Component#xtype xtypes}</tt>, see {@link Ext.Component}.</p>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="create">
              <Summary><![CDATA[Creates a new Component from the specified config object using the
config object's {@link Ext.component#xtype xtype} to determine the class to instantiate.]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[A configuration object for the Component you wish to create.]]></Summary>
                </Param>
                <Param Name="defaultType" Type="Constructor">
                  <Summary><![CDATA[The constructor to provide the default Component type if
the config object does not contain a <tt>xtype</tt>. (Optional if the config contains a <tt>xtype</tt>).]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[The newly instantiated Component.]]></Summary>
              </Return>
            </Method>
            <Method Name="createPlugin">
              <Summary><![CDATA[Creates a new Plugin from the specified config object using the
config object's {@link Ext.component#ptype ptype} to determine the class to instantiate.]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[A configuration object for the Plugin you wish to create.]]></Summary>
                </Param>
                <Param Name="defaultType" Type="Constructor">
                  <Summary><![CDATA[The constructor to provide the default Plugin type if
the config object does not contain a <tt>ptype</tt>. (Optional if the config contains a <tt>ptype</tt>).]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[The newly instantiated Plugin.]]></Summary>
              </Return>
            </Method>
            <Method Name="get">
              <Summary><![CDATA[Returns a component by {@link Ext.Component#id id}.
For additional details see {@link Ext.util.MixedCollection#get}.]]></Summary>
              <Parameters>
                <Param Name="id" Type="String">
                  <Summary><![CDATA[The component {@link Ext.Component#id id}
Class was found.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="isRegistered">
              <Summary><![CDATA[Checks if a Component type is registered.]]></Summary>
              <Parameters>
                <Param Name="xtype" Type="Ext.Component">
                  <Summary><![CDATA[The mnemonic string by which the Component class may be looked up]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[Whether the type is registered.]]></Summary>
              </Return>
            </Method>
            <Method Name="onAvailable">
              <Summary><![CDATA[Registers a function that will be called when a specified component is added to ComponentMgr]]></Summary>
              <Parameters>
                <Param Name="id" Type="String">
                  <Summary><![CDATA[The component {@link Ext.Component#id id}]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The callback function]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[The scope of the callback]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="preg">
              <Summary><![CDATA[Shorthand for {@link Ext.ComponentMgr#registerPlugin}]]></Summary>
              <Parameters>
                <Param Name="ptype" Type="String">
                  <Summary><![CDATA[The {@link Ext.component#ptype mnemonic string} by which the Plugin class
may be looked up.]]></Summary>
                </Param>
                <Param Name="cls" Type="Constructor">
                  <Summary><![CDATA[The new Plugin class.
@member Ext]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="reg">
              <Summary><![CDATA[Shorthand for {@link Ext.ComponentMgr#registerType}]]></Summary>
              <Parameters>
                <Param Name="xtype" Type="String">
                  <Summary><![CDATA[The {@link Ext.component#xtype mnemonic string} by which the Component class
may be looked up.]]></Summary>
                </Param>
                <Param Name="cls" Type="Constructor">
                  <Summary><![CDATA[The new Component class.
@member Ext]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="register">
              <Summary><![CDATA[Registers a component.]]></Summary>
              <Parameters>
                <Param Name="c" Type="Ext.Component">
                  <Summary><![CDATA[The component]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="registerPlugin">
              <Summary><![CDATA[<p>Registers a new Plugin constructor, keyed by a new
{@link Ext.Component#ptype}.</p>
<p>Use this method (or its alias {@link Ext#preg Ext.preg}) to register new
plugins for {@link Ext.Component}s so that lazy instantiation may be used when specifying
Plugins.</p>]]></Summary>
              <Parameters>
                <Param Name="ptype" Type="String">
                  <Summary><![CDATA[The mnemonic string by which the Plugin class may be looked up.]]></Summary>
                </Param>
                <Param Name="cls" Type="Constructor">
                  <Summary><![CDATA[The new Plugin class.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="registerType">
              <Summary><![CDATA[<p>Registers a new Component constructor, keyed by a new
{@link Ext.Component#xtype}.</p>
<p>Use this method (or its alias {@link Ext#reg Ext.reg}) to register new
subclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying
child Components.
see {@link Ext.Container#items}</p>]]></Summary>
              <Parameters>
                <Param Name="xtype" Type="String">
                  <Summary><![CDATA[The mnemonic string by which the Component class may be looked up.]]></Summary>
                </Param>
                <Param Name="cls" Type="Constructor">
                  <Summary><![CDATA[The new Component class.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="unregister">
              <Summary><![CDATA[Unregisters a component.]]></Summary>
              <Parameters>
                <Param Name="c" Type="Ext.Component">
                  <Summary><![CDATA[The component]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="CompositeElement" FullName="Ext.CompositeElement" Package="Ext" DefinedIn="core\CompositeElement.js" Extends="Ext.CompositeElementLite">
          <Summary><![CDATA[Standard composite class. Creates a Ext.Element for every element in the collection.
<br><br>
<b>NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element
actions will be performed on all the elements in this collection.</b>
<br><br>
All methods return <i>this</i> and can be chained.
 <pre><code>
 var els = Ext.select("#some-el div.some-class", true);
 // or select directly from an existing element
 var el = Ext.get('some-el');
 el.select('div.some-class', true);

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);
 </code></pre>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="add">
              <Summary><![CDATA[Adds elements to this composite.]]></Summary>
              <Parameters>
                <Param Name="els" Type="String/Array">
                  <Summary><![CDATA[A string CSS selector, an array of elements or an element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="each">
              <Summary><![CDATA[Iterates each <code>element</code> in this <code>composite</code>
calling the supplied function using {@link Ext#each}.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to be called with each
<code>element</code>. If the supplied function returns <tt>false</tt>,
iteration stops. This function is called with the following arguments:
<div class="mdetail-params"><ul>
<li><code>element</code> : <i>Object</i>
<div class="sub-desc">The element at the current <code>index</code>
in the <code>composite</code></div></li>
<li><code>composite</code> : <i>Object</i>
<div class="sub-desc">This composite.</div></li>
<li><code>index</code> : <i>Number</i>
<div class="sub-desc">The current index within the <code>composite</code>
</div></li>
</ul></div>]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope to call the specified function.
Defaults to the <code>element</code> at the current <code>index</code>
within the composite.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="item">
              <Summary><![CDATA[Returns the Element object at the specified index]]></Summary>
              <Parameters>
                <Param Name="index" Type="Number" />
              </Parameters>
              <Return Type="Ext.Element" />
            </Method>
            <Method Name="select">
              <Summary><![CDATA[Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
{@link Ext.CompositeElementLite CompositeElementLite} object.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String/Array">
                  <Summary><![CDATA[The CSS selector or an array of elements]]></Summary>
                </Param>
                <Param Name="unique" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to create a unique Ext.Element for each element (defaults to a shared flyweight object)]]></Summary>
                </Param>
                <Param Name="root" Type="HTMLElement/String" Optional="true">
                  <Summary><![CDATA[The root element of the query or id of the root
@member Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElementLite/CompositeElement" />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="CompositeElementLite" FullName="Ext.CompositeElementLite" Package="Ext" DefinedIn="core\CompositeElementLite-more.js,core\core\CompositeElementLite.js" Subclasses="Ext.CompositeElement">
          <Summary><![CDATA[
Flyweight composite class. Reuses the same Ext.Element for element operations.
 <pre><code>
 var els = Ext.select("#some-el div.some-class");
 // or select directly from an existing element
 var el = Ext.get('some-el');
 el.select('div.some-class');

 els.setWidth(100); // all elements become 100 width
 els.hide(true); // all elements fade out and hide
 // or
 els.setWidth(100).hide(true);
 </code></pre><br><br>
<b>NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element
actions will be performed on all the elements in this collection.</b>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="contains">
              <Summary><![CDATA[Returns true if this composite contains the passed element]]></Summary>
              <Parameters>
                <Param Name="ele" Type="Mixed} T">
                  <Summary><![CDATA[id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="fill">
              <Summary><![CDATA[Clears this composite and adds the elements returned by the passed selector.]]></Summary>
              <Parameters>
                <Param Name="els" Type="String/Array">
                  <Summary><![CDATA[A string CSS selector, an array of elements or an element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="filter">
              <Summary><![CDATA[Filters this composite to only elements that match the passed selector.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[A string CSS selector]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="first">
              <Summary><![CDATA[Returns the first Element]]></Summary>
              <Parameters />
              <Return Type="Ext.Element" />
            </Method>
            <Method Name="last">
              <Summary><![CDATA[Returns the last Element]]></Summary>
              <Parameters />
              <Return Type="Ext.Element" />
            </Method>
            <Method Name="removeElement">
              <Summary><![CDATA[Removes the specified element(s).]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The id of an element, the Element itself, the index of the element in this composite
or an array of any of those.]]></Summary>
                </Param>
                <Param Name="removeDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to also remove the element from the document]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="clear">
              <Summary><![CDATA[Removes all elements.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="each">
              <Summary><![CDATA[Calls the passed function passing (el, this, index) for each element in this composite. <b>The element
passed is the flyweight (shared) Ext.Element instance, so if you require a
a reference to the dom node, use el.dom.</b>]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to call]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The <i>this</i> object (defaults to the element)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getCount">
              <Summary><![CDATA[Returns the number of elements in this composite]]></Summary>
              <Parameters />
            </Method>
            <Method Name="indexOf">
              <Summary><![CDATA[Find the index of the passed element within the composite collection.]]></Summary>
              <Parameters>
                <Param Name="ele" Type="Mixed} T">
                  <Summary><![CDATA[id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="item">
              <Summary><![CDATA[Returns a flyweight Element of the dom element object at the specified index]]></Summary>
              <Parameters>
                <Param Name="index" Type="Number" />
              </Parameters>
              <Return Type="Ext.Element" />
            </Method>
            <Method Name="replaceElement">
              <Summary><![CDATA[Replaces the specified element with the passed element.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The id of an element, the Element itself, the index of the element in this composite
to replace.]]></Summary>
                </Param>
                <Param Name="replacement" Type="Mixed">
                  <Summary><![CDATA[The id of an element or the Element itself.]]></Summary>
                </Param>
                <Param Name="domReplace" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to remove and replace the element in the document too.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="select">
              <Summary><![CDATA[Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods
to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or
{@link Ext.CompositeElementLite CompositeElementLite} object.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String/Array">
                  <Summary><![CDATA[The CSS selector or an array of elements]]></Summary>
                </Param>
                <Param Name="unique" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to create a unique Ext.Element for each element (defaults to a shared flyweight object) <b>Not supported in core</b>]]></Summary>
                </Param>
                <Param Name="root" Type="HTMLElement/String" Optional="true">
                  <Summary><![CDATA[The root element of the query or id of the root
@member Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElementLite/CompositeElement" />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Container" FullName="Ext.Container" Package="Ext" DefinedIn="widgets\Container.js" Xtype="container" Extends="Ext.BoxComponent" Subclasses="Ext.menu.Menu,Ext.Panel,Ext.Toolbar,Ext.Viewport">
          <Summary><![CDATA[<p>Base class for any {@link Ext.BoxComponent} that may contain other Components. Containers handle the
basic behavior of containing items, namely adding, inserting and removing items.</p>

<p>The most commonly used Container classes are {@link Ext.Panel}, {@link Ext.Window} and {@link Ext.TabPanel}.
If you do not need the capabilities offered by the aforementioned classes you can create a lightweight
Container to be encapsulated by an HTML element to your specifications by using the
<tt><b>{@link Ext.Component#autoEl autoEl}</b></tt> config option. This is a useful technique when creating
embedded {@link Ext.layout.ColumnLayout column} layouts inside {@link Ext.form.FormPanel FormPanels}
for example.</p>

<p>The code below illustrates both how to explicitly create a Container, and how to implicitly
create one using the <b><tt>'container'</tt></b> xtype:<pre><code>
// explicitly create a Container
var embeddedColumns = new Ext.Container({
    autoEl: 'div',  // This is the default
    layout: 'column',
    defaults: {
        // implicitly create Container by specifying xtype
        xtype: 'container',
        autoEl: 'div', // This is the default.
        layout: 'form',
        columnWidth: 0.5,
        style: {
            padding: '10px'
        }
    },
//  The two items below will be Ext.Containers, each encapsulated by a &lt;DIV> element.
    items: [{
        items: {
            xtype: 'datefield',
            name: 'startDate',
            fieldLabel: 'Start date'
        }
    }, {
        items: {
            xtype: 'datefield',
            name: 'endDate',
            fieldLabel: 'End date'
        }
    }]
});</code></pre></p>

<p><u><b>Layout</b></u></p>
<p>Container classes delegate the rendering of child Components to a layout
manager class which must be configured into the Container using the
<code><b>{@link #layout}</b></code> configuration property.</p>
<p>When either specifying child <code>{@link #items}</code> of a Container,
or dynamically {@link #add adding} Components to a Container, remember to
consider how you wish the Container to arrange those child elements, and
whether those child elements need to be sized using one of Ext's built-in
<b><code>{@link #layout}</code></b> schemes. By default, Containers use the
{@link Ext.layout.ContainerLayout ContainerLayout} scheme which only
renders child components, appending them one after the other inside the
Container, and <b>does not apply any sizing</b> at all.</p>
<p>A common mistake is when a developer neglects to specify a
<b><code>{@link #layout}</code></b> (e.g. widgets like GridPanels or
TreePanels are added to Containers for which no <tt><b>{@link #layout}</b></tt>
has been specified). If a Container is left to use the default
{@link Ext.layout.ContainerLayout ContainerLayout} scheme, none of its
child components will be resized, or changed in any way when the Container
is resized.</p>
<p>Certain layout managers allow dynamic addition of child components.
Those that do include {@link Ext.layout.CardLayout},
{@link Ext.layout.AnchorLayout}, {@link Ext.layout.FormLayout}, and
{@link Ext.layout.TableLayout}. For example:<pre><code>
//  Create the GridPanel.
var myNewGrid = new Ext.grid.GridPanel({
    store: myStore,
    columns: myColumnModel,
    title: 'Results', // the title becomes the title of the tab
});

myTabPanel.add(myNewGrid); // {@link Ext.TabPanel} implicitly uses {@link Ext.layout.CardLayout CardLayout}
myTabPanel.{@link Ext.TabPanel#setActiveTab setActiveTab}(myNewGrid);
</code></pre></p>
<p>The example above adds a newly created GridPanel to a TabPanel. Note that
a TabPanel uses {@link Ext.layout.CardLayout} as its layout manager which
means all its child items are sized to {@link Ext.layout.FitLayout fit}
exactly into its client area.
<p><b><u>Overnesting is a common problem</u></b>.
An example of overnesting occurs when a GridPanel is added to a TabPanel
by wrapping the GridPanel <i>inside</i> a wrapping Panel (that has no
<tt><b>{@link #layout}</b></tt> specified) and then add that wrapping Panel
to the TabPanel. The point to realize is that a GridPanel <b>is</b> a
Component which can be added directly to a Container. If the wrapping Panel
has no <tt><b>{@link #layout}</b></tt> configuration, then the overnested
GridPanel will not be sized as expected.<p>

<p><u><b>Adding via remote configuration</b></u></p>

<p>A server side script can be used to add Components which are generated dynamically on the server.
An example of adding a GridPanel to a TabPanel where the GridPanel is generated by the server
based on certain parameters:
</p><pre><code>
// execute an Ajax request to invoke server side script:
Ext.Ajax.request({
    url: 'gen-invoice-grid.php',
    // send additional parameters to instruct server script
    params: {
        startDate: Ext.getCmp('start-date').getValue(),
        endDate: Ext.getCmp('end-date').getValue()
    },
    // process the response object to add it to the TabPanel:
    success: function (xhr) {
        var newComponent = eval(xhr.responseText); // see discussion below
        myTabPanel.add(newComponent); // add the component to the TabPanel
        myTabPanel.setActiveTab(newComponent);
    },
    failure: function () {
        Ext.Msg.alert("Grid create failed", "Server communication failure");
    }
});
</code></pre>
<p>The server script needs to return an executable Javascript statement which, when processed
using <tt>eval()</tt>, will return either a config object with an {@link Ext.Component#xtype xtype},
or an instantiated Component. The server might return this for example:</p><pre><code>
(function () {
    function formatDate(value) {
        return value ? value.dateFormat('M d, Y') : '';
    };

    var store = new Ext.data.Store({
        url: 'get-invoice-data.php',
        baseParams: {
            startDate: '01/01/2008',
            endDate: '01/31/2008'
        },
        reader: new Ext.data.JsonReader({
            record: 'transaction',
            idProperty: 'id',
            totalRecords: 'total'
        }, [
           'customer',
           'invNo',
          {name: 'date', type: 'date', dateFormat: 'm/d/Y'},
          {name: 'value', type: 'float'}
        ])
    });

    var grid = new Ext.grid.GridPanel({
        title: 'Invoice Report',
        bbar: new Ext.PagingToolbar(store),
        store: store,
        columns: [
           {header: "Customer", width: 250, dataIndex: 'customer', sortable: true},
           {header: "Invoice Number", width: 120, dataIndex: 'invNo', sortable: true},
           {header: "Invoice Date", width: 100, dataIndex: 'date', renderer: formatDate, sortable: true},
           {header: "Value", width: 120, dataIndex: 'value', renderer: 'usMoney', sortable: true}
        ],
    });
    store.load();
    return grid;  // return instantiated component
})();
</code></pre>
<p>When the above code fragment is passed through the <tt>eval</tt> function in the success handler
of the Ajax request, the code is executed by the Javascript processor, and the anonymous function
runs, and returns the instantiated grid component.</p>
<p>Note: since the code above is <i>generated</i> by a server script, the <tt>baseParams</tt> for
the Store, the metadata to allow generation of the Record layout, and the ColumnModel
can all be generated into the code since these are all known on the server.</p>]]></Summary>
          <ConfigOptions>
            <ConfigOption Name="activeItem" Type="String/Number">
              <Summary><![CDATA[A string component id or the numeric index of the component that should be initially activated within the
container's layout on render.  For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first
item in the container's collection).  activeItem only applies to layout styles that can display
items one at a time (like {@link Ext.layout.AccordionLayout}, {@link Ext.layout.CardLayout} and
{@link Ext.layout.FitLayout}).  Related to {@link Ext.layout.ContainerLayout#activeItem}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bufferResize" Type="Boolean/Number">
              <Summary><![CDATA[When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer
the frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers
with a large quantity of sub-components for which frequent layout calls would be expensive.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="defaults" Type="Object">
              <Summary><![CDATA[<p>A config object that will be applied to all components added to this container either via the {@link #items}
config or via the {@link #add} or {@link #insert} methods.  The <tt>defaults</tt> config can contain any
number of name/value property pairs to be added to each item, and should be valid for the types of items
being added to the container.  For example, to automatically apply padding to the body of each of a set of
contained {@link Ext.Panel} items, you could pass: <tt>defaults: {bodyStyle:'padding:15px'}</tt>.</p><br/>
<p><b>Note</b>: <tt>defaults</tt> will not be applied to config objects if the option is already specified.
For example:</p><pre><code>
defaults: {               // defaults are applied to items, not the container
    autoScroll:true
},
items: [
   {
        xtype: 'panel',   // defaults <b>do not</b> have precedence over
        id: 'panel1',     // options in config objects, so the defaults
        autoScroll: false // will not be applied here, panel1 will be autoScroll:false
    },
    new Ext.Panel({       // defaults <b>do</b> have precedence over options
        id: 'panel2',     // options in components, so the defaults
        autoScroll: false // will be applied here, panel2 will be autoScroll:true.
    })
]
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="items" Type="Object/Array">
              <Summary><![CDATA[<pre><b>** IMPORTANT</b>: be sure to <b>{@link #layout specify a <code>layout</code>} if needed ! **</b></pre>
<p>A single item, or an array of child Components to be added to this container,
for example:</p>
<pre><code>
// specifying a single item
items: {...},
layout: 'fit',    // specify a layout!

// specifying multiple items
items: [{...}, {...}],
layout: 'anchor', // specify a layout!
</code></pre>
<p>Each item may be:</p>
<div><ul class="mdetail-params">
<li>any type of object based on {@link Ext.Component}</li>
<li>a fully instanciated object or</li>
<li>an object literal that:</li>
<div><ul class="mdetail-params">
<li>has a specified <code>{@link Ext.Component#xtype xtype}</code></li>
<li>the {@link Ext.Component#xtype} specified is associated with the Component
desired and should be chosen from one of the available xtypes as listed
in {@link Ext.Component}.</li>
<li>If an <code>{@link Ext.Component#xtype xtype}</code> is not explicitly
specified, the {@link #defaultType} for that Container is used.</li>
<li>will be "lazily instanciated", avoiding the overhead of constructing a fully
instanciated Component object</li>
</ul></div></ul></div>
<p><b>Notes</b>:</p>
<div><ul class="mdetail-params">
<li>Ext uses lazy rendering. Child Components will only be rendered
should it become necessary. Items are automatically laid out when they are first
shown (no sizing is done while hidden), or in response to a {@link #doLayout} call.</li>
<li>Do not specify <code>{@link Ext.Panel#contentEl contentEl}</code>/
<code>{@link Ext.Panel#html html}</code> with <code>items</code>.</li>
</ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="layout" Type="String/Object">
              <Summary><![CDATA[<p><b>*Important</b>: In order for child items to be correctly sized and
positioned, typically a layout manager <b>must</b> be specified through
the <code>layout</code> configuration option.</p>
<br><p>The sizing and positioning of child {@link items} is the responsibility of
the Container's layout manager which creates and manages the type of layout
you have in mind.  For example:</p><pre><code>
new Ext.Window({
    width:300, height: 300,
    layout: 'fit', // explicitly set layout manager: override the default (layout:'auto')
    items: [{
        title: 'Panel inside a Window'
    }]
}).show();
</code></pre>
<p>If the {@link #layout} configuration is not explicitly specified for
a general purpose container (e.g. Container or Panel) the
{@link Ext.layout.ContainerLayout default layout manager} will be used
which does nothing but render child components sequentially into the
Container (no sizing or positioning will be performed in this situation).
Some container classes implicitly specify a default layout
(e.g. FormPanel specifies <code>layout:'form'</code>). Other specific
purpose classes internally specify/manage their internal layout (e.g.
GridPanel, TabPanel, TreePanel, Toolbar, Menu, etc.).</p>
<br><p><b><code>layout</code></b> may be specified as either as an Object or
as a String:</p><div><ul class="mdetail-params">

<li><u>Specify as an Object</u></li>
<div><ul class="mdetail-params">
<li>Example usage:</li>
<pre><code>
layout: {
    type: 'vbox',
    padding: '5',
    align: 'left'
}
</code></pre>

<li><tt><b>type</b></tt></li>
<br/><p>The layout type to be used for this container.  If not specified,
a default {@link Ext.layout.ContainerLayout} will be created and used.</p>
<br/><p>Valid layout <tt>type</tt> values are:</p>
<div class="sub-desc"><ul class="mdetail-params">
<li><tt><b>{@link Ext.layout.AbsoluteLayout absolute}</b></tt></li>
<li><tt><b>{@link Ext.layout.AccordionLayout accordion}</b></tt></li>
<li><tt><b>{@link Ext.layout.AnchorLayout anchor}</b></tt></li>
<li><tt><b>{@link Ext.layout.ContainerLayout auto}</b></tt> &nbsp;&nbsp;&nbsp; <b>Default</b></li>
<li><tt><b>{@link Ext.layout.BorderLayout border}</b></tt></li>
<li><tt><b>{@link Ext.layout.CardLayout card}</b></tt></li>
<li><tt><b>{@link Ext.layout.ColumnLayout column}</b></tt></li>
<li><tt><b>{@link Ext.layout.FitLayout fit}</b></tt></li>
<li><tt><b>{@link Ext.layout.FormLayout form}</b></tt></li>
<li><tt><b>{@link Ext.layout.HBoxLayout hbox}</b></tt></li>
<li><tt><b>{@link Ext.layout.MenuLayout menu}</b></tt></li>
<li><tt><b>{@link Ext.layout.TableLayout table}</b></tt></li>
<li><tt><b>{@link Ext.layout.ToolbarLayout toolbar}</b></tt></li>
<li><tt><b>{@link Ext.layout.VBoxLayout vbox}</b></tt></li>
</ul></div>

<li>Layout specific configuration properties</li>
<br/><p>Additional layout specific configuration properties may also be
specified. For complete details regarding the valid config options for
each layout type, see the layout class corresponding to the <tt>type</tt>
specified.</p>

</ul></div>

<li><u>Specify as a String</u></li>
<div><ul class="mdetail-params">
<li>Example usage:</li>
<pre><code>
layout: 'vbox',
layoutConfig: {
    padding: '5',
    align: 'left'
}
</code></pre>
<li><tt><b>layout</b></tt></li>
<br/><p>The layout <tt>type</tt> to be used for this container (see list
of valid layout type values above).</p><br/>
<li><tt><b>{@link #layoutConfig}</b></tt></li>
<br/><p>Additional layout specific configuration properties. For complete
details regarding the valid config options for each layout type, see the
layout class corresponding to the <tt>layout</tt> specified.</p>
</ul></div></ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="layoutConfig" Type="Object">
              <Summary><![CDATA[This is a config object containing properties specific to the chosen
<b><code>{@link #layout}</code></b> if <b><code>{@link #layout}</code></b>
has been specified as a <i>string</i>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="monitorResize" Type="Boolean">
              <Summary><![CDATA[True to automatically monitor window resize events to handle anything that is sensitive to the current size
of the viewport.  This value is typically managed by the chosen <code>{@link #layout}</code> and should not need
to be set manually.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="items">
              <Summary><![CDATA[The collection of components in this container as a {@link Ext.util.MixedCollection}]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="add">
              <Summary><![CDATA[<p>Adds {@link Ext.Component Component}(s) to this Container.</p>
<br><p><b>Description</b></u> :
<div><ul class="mdetail-params">
<li>Fires the {@link #beforeadd} event before adding</li>
<li>The Container's {@link #defaults default config values} will be applied
accordingly (see <code>{@link #defaults}</code> for details).</li>
<li>Fires the {@link #add} event after the component has been added.</li>
</ul></div>
<br><p><b>Notes</b></u> :
<div><ul class="mdetail-params">
<li>If the Container is <i>already rendered</i> when <tt>add</tt>
is called, you may need to call {@link #doLayout} to refresh the view which causes
any unrendered child Components to be rendered. This is required so that you can
<tt>add</tt> multiple child components if needed while only refreshing the layout
once. For example:<pre><code>
var tb = new {@link Ext.Toolbar}();
tb.render(document.body);  // toolbar is rendered
tb.add({text:'Button 1'}); // add multiple items ({@link #defaultType} for {@link Ext.Toolbar Toolbar} is 'button')
tb.add({text:'Button 2'});
tb.{@link #doLayout}();             // refresh the layout
</code></pre></li>
<li><i>Warning:</i> Containers directly managed by the BorderLayout layout manager
may not be removed or added.  See the Notes for {@link Ext.layout.BorderLayout BorderLayout}
for more details.</li>
</ul></div>]]></Summary>
              <Parameters>
                <Param Name="component" Type="Object/Array">
                  <Summary><![CDATA[
<p>Either a single component or an Array of components to add.  See
<code>{@link #items}</code> for additional information.</p>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[component The Component (or config object) that was added.]]></Summary>
              </Return>
            </Method>
            <Method Name="bubble">
              <Summary><![CDATA[Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (<i>this</i>) of
function call will be the scope provided or the current component. The arguments to the function
will be the args provided or the current component. If the function returns false at any point,
the bubble is stopped.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to call]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope of the function (defaults to current node)]]></Summary>
                </Param>
                <Param Name="args" Type="Array" Optional="true">
                  <Summary><![CDATA[The args to call the function with (default to passing the current component)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Container">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="cascade">
              <Summary><![CDATA[Cascades down the component/container heirarchy from this component (called first), calling the specified function with
each component. The scope (<i>this</i>) of
function call will be the scope provided or the current component. The arguments to the function
will be the args provided or the current component. If the function returns false at any point,
the cascade is stopped on that branch.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to call]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope of the function (defaults to current component)]]></Summary>
                </Param>
                <Param Name="args" Type="Array" Optional="true">
                  <Summary><![CDATA[The args to call the function with (defaults to passing the current component)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Container">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="doLayout">
              <Summary><![CDATA[Force this container's layout to be recalculated. A call to this function is required after adding a new component
to an already rendered container, or possibly after changing sizing/position properties of child components.]]></Summary>
              <Parameters>
                <Param Name="shallow" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to only calc the layout of this component, and let child components auto
calc layouts as required (defaults to false, which calls doLayout recursively for each subcontainer)]]></Summary>
                </Param>
                <Param Name="force" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to force a layout to occur, even if the item is hidden.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Container">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="find">
              <Summary><![CDATA[Find a component under this container at any level by property]]></Summary>
              <Parameters>
                <Param Name="prop" Type="String" />
                <Param Name="value" Type="String" />
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[Array of Ext.Components]]></Summary>
              </Return>
            </Method>
            <Method Name="findBy">
              <Summary><![CDATA[Find a component under this container at any level by a custom function. If the passed function returns
true, the component will be included in the results. The passed function is called with the arguments (component, this container).]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to call]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true" />
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[Array of Ext.Components]]></Summary>
              </Return>
            </Method>
            <Method Name="findById">
              <Summary><![CDATA[Find a component under this container at any level by id]]></Summary>
              <Parameters>
                <Param Name="id" Type="String" />
              </Parameters>
            </Method>
            <Method Name="findByType">
              <Summary><![CDATA[Find a component under this container at any level by xtype or class]]></Summary>
              <Parameters>
                <Param Name="xtype" Type="String/Class">
                  <Summary><![CDATA[The xtype string for a component, or the class of the component directly]]></Summary>
                </Param>
                <Param Name="shallow" Type="Boolean" Optional="true">
                  <Summary><![CDATA[False to check whether this Component is descended from the xtype (this is
the default), or true to check whether this Component is directly of the specified xtype.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[Array of Ext.Components]]></Summary>
              </Return>
            </Method>
            <Method Name="get">
              <Summary><![CDATA[Get a component contained by this container (alias for items.get(key))]]></Summary>
              <Parameters>
                <Param Name="key" Type="String/Number">
                  <Summary><![CDATA[The index or id of the component]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[Ext.Component]]></Summary>
              </Return>
            </Method>
            <Method Name="getComponent">
              <Summary><![CDATA[Examines this container's <code>{@link #items}</code> <b>property</b>
and gets a direct child component of this container.]]></Summary>
              <Parameters>
                <Param Name="comp" Type="String/Number">
                  <Summary><![CDATA[This parameter may be any of the following:
<div><ul class="mdetail-params">
<li>a <b><tt>String</tt></b> : representing the <code>{@link Ext.Component#itemId itemId}</code>
or <code>{@link Ext.Component#id id}</code> of the child component </li>
<li>a <b><tt>Number</tt></b> : representing the position of the child component
within the <code>{@link #items}</code> <b>property</b></li>
</ul></div>
<p>For additional information see {@link Ext.util.MixedCollection#get}.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getLayout">
              <Summary><![CDATA[Returns the layout currently in use by the container.  If the container does not currently have a layout
set, a default {@link Ext.layout.ContainerLayout} will be created and set as the container's layout.]]></Summary>
              <Parameters />
              <Return Type="ContainerLayout">
                <Summary><![CDATA[layout The container's layout]]></Summary>
              </Return>
            </Method>
            <Method Name="getLayoutTarget">
              <Summary><![CDATA[<p>Returns the Element to be used to contain the child Components of this Container.</p>
<p>An implementation is provided which returns the Container's {@link #getEl Element}, but
if there is a more complex structure to a Container, this may be overridden to return
the element into which the {@link #layout layout} renders child Components.</p>]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element to render child Components into.]]></Summary>
              </Return>
            </Method>
            <Method Name="insert">
              <Summary><![CDATA[Inserts a Component into this Container at a specified index. Fires the
{@link #beforeadd} event before inserting, then fires the {@link #add} event after the
Component has been inserted.]]></Summary>
              <Parameters>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index at which the Component will be inserted
into the Container's items collection]]></Summary>
                </Param>
                <Param Name="component" Type="Ext.Component">
                  <Summary><![CDATA[The child Component to insert.<br><br>
Ext uses lazy rendering, and will only render the inserted Component should
it become necessary.<br><br>
A Component config object may be passed in order to avoid the overhead of
constructing a real Component object if lazy rendering might mean that the
inserted Component will not be rendered immediately. To take advantage of
this 'lazy instantiation', set the {@link Ext.Component#xtype} config
property to the registered type of the Component wanted.<br><br>
For a list of all available xtypes, see {@link Ext.Component}.
inserted with the Container's default config values applied.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[component The Component (or config object) that was]]></Summary>
              </Return>
            </Method>
            <Method Name="remove">
              <Summary><![CDATA[Removes a component from this container.  Fires the {@link #beforeremove} event before removing, then fires
the {@link #remove} event after the component has been removed.]]></Summary>
              <Parameters>
                <Param Name="component" Type="Component/String">
                  <Summary><![CDATA[The component reference or id to remove.]]></Summary>
                </Param>
                <Param Name="autoDestroy" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
Defaults to the value of this Container's {@link #autoDestroy} config.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Component">
                <Summary><![CDATA[component The Component that was removed.]]></Summary>
              </Return>
            </Method>
            <Method Name="removeAll">
              <Summary><![CDATA[Removes all components from this container.]]></Summary>
              <Parameters>
                <Param Name="autoDestroy" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.
Defaults to the value of this Container's {@link #autoDestroy} config.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[Array of the destroyed components]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="add">
              <Summary><![CDATA[@bubbles Fires after any {@link Ext.Component} is added or inserted into the container.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Container">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="component" Type="Ext.Component">
                  <Summary><![CDATA[The component that was added]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index at which the component was added to the container's items collection]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="afterlayout">
              <Summary><![CDATA[Fires when the components in this container are arranged by the associated layout manager.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Container">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="layout" Type="ContainerLayout">
                  <Summary><![CDATA[The ContainerLayout implementation for this container]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforeadd">
              <Summary><![CDATA[Fires before any {@link Ext.Component} is added or inserted into the container. A handler can return false to cancel the add.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Container">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="component" Type="Ext.Component">
                  <Summary><![CDATA[The component being added]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index at which the component will be added to the container's items collection]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforeremove">
              <Summary><![CDATA[Fires before any {@link Ext.Component} is removed from the container. A handler can return false to cancel the remove.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Container">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="component" Type="Ext.Component">
                  <Summary><![CDATA[The component being removed]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="remove">
              <Summary><![CDATA[@bubbles Fires after any {@link Ext.Component} is removed from the container.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Container">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="component" Type="Ext.Component">
                  <Summary><![CDATA[The component that was removed]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="CycleButton" FullName="Ext.CycleButton" Package="Ext" DefinedIn="widgets\CycleButton.js" Xtype="cycle" Extends="Ext.SplitButton">
          <Summary><![CDATA[A specialized SplitButton that contains a menu of {@link Ext.menu.CheckItem} elements.  The button automatically
cycles through each menu item on click, raising the button's {@link #change} event (or calling the button's
{@link #changeHandler} function, if supplied) for the active menu item. Clicking on the arrow section of the
button displays the dropdown menu just like a normal SplitButton.  Example usage:
<pre><code>
var btn = new Ext.CycleButton({
    showText: true,
    prependText: 'View as ',
    items: [{
        text:'text only',
        iconCls:'view-text',
        checked:true
    },{
        text:'HTML',
        iconCls:'view-html'
    }],
    changeHandler:function (btn, item) {
        Ext.Msg.alert('Change View', item.text);
    }
});
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new split button.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="changeHandler" Type="Function">
              <Summary><![CDATA[item in the button's menu has changed.  If this callback is not supplied, the SplitButton will instead
fire the {@link #change} event on active item change.  The changeHandler function will be called with the
following argument list: (SplitButton this, Ext.menu.CheckItem item)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="forceIcon" Type="String">
              <Summary><![CDATA[icon will always be displayed regardless of which item is selected in the dropdown list.  This overrides the
default behavior of changing the button's icon to match the selected item's icon on change.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="items" Type="Array">
              <Summary><![CDATA[button's menu items (e.g., {text:'Foo', iconCls:'foo-icon'})]]></Summary>
            </ConfigOption>
            <ConfigOption Name="prependText" Type="String">
              <Summary><![CDATA[button's text (only applies when showText = true, defaults to '')]]></Summary>
            </ConfigOption>
            <ConfigOption Name="showText" Type="Boolean" />
          </ConfigOptions>
          <Properties>
            <Property Name="menu">
              <Summary><![CDATA[The {@link Ext.menu.Menu Menu} object used to display the {@link Ext.menu.CheckItem CheckItems} representing the available choices.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="getActiveItem">
              <Summary><![CDATA[Gets the currently active menu item.]]></Summary>
              <Parameters />
              <Return Type="Ext.menu.CheckItem">
                <Summary><![CDATA[The active item]]></Summary>
              </Return>
            </Method>
            <Method Name="setActiveItem">
              <Summary><![CDATA[Sets the button's active menu item.]]></Summary>
              <Parameters>
                <Param Name="item" Type="Ext.menu.CheckItem">
                  <Summary><![CDATA[The item to activate]]></Summary>
                </Param>
                <Param Name="suppressEvent" Type="Boolean">
                  <Summary><![CDATA[True to prevent the button's change event from firing (defaults to false)]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="toggleSelected">
              <Summary><![CDATA[This is normally called internally on button click, but can be called externally to advance the button's
active item programmatically to the next one in the menu.  If the current item is the last one in the menu
the active item will be set to the first item in the menu.]]></Summary>
              <Parameters />
            </Method>
          </Methods>
          <Events>
            <Event Name="change">
              <Summary><![CDATA[Fires after the button's active menu item has changed. Note that if a {@link #changeHandler} function is set on this CycleButton, it will be called instead on active item change and this change event will not be fired.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.CycleButton">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="item" Type="Ext.menu.CheckItem">
                  <Summary><![CDATA[The menu item that was selected]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="DataView" FullName="Ext.DataView" Package="Ext" DefinedIn="widgets\DataView.js" Xtype="dataview" Extends="Ext.BoxComponent" Subclasses="Ext.ListView">
          <Summary><![CDATA[A mechanism for displaying data using custom layout templates and formatting. DataView uses an {@link Ext.XTemplate}
as its internal templating mechanism, and is bound to an {@link Ext.data.Store}
so that as the data in the store changes the view is automatically updated to reflect the changes.  The view also
provides built-in behavior for many common events that can occur for its contained items including click, doubleclick,
mouseover, mouseout, etc. as well as a built-in selection model. <b>In order to use these features, an {@link #itemSelector}
config must be provided for the DataView to determine what nodes it will be working with.</b>

<p>The example below binds a DataView to a {@link Ext.data.Store} and renders it into an {@link Ext.Panel}.</p>
<pre><code>
var store = new Ext.data.JsonStore({
    url: 'get-images.php',
    root: 'images',
    fields: [
        'name', 'url',
       {name:'size', type: 'float'},
       {name:'lastmod', type:'date', dateFormat:'timestamp'}
    ]
});
store.load();

var tpl = new Ext.XTemplate(
    '&lt;tpl for="."&gt;',
        '&lt;div class="thumb-wrap" id="{name}"&gt;',
        '&lt;div class="thumb"&gt;&lt;img src="{url}" title="{name}"&gt;&lt;/div&gt;',
        '&lt;span class="x-editable"&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',
    '&lt;/tpl&gt;',
    '&lt;div class="x-clear"&gt;&lt;/div&gt;'
);

var panel = new Ext.Panel({
    id:'images-view',
    frame:true,
    width:535,
    autoHeight:true,
    collapsible:true,
    layout:'fit',
    title:'Simple DataView',

    items: new Ext.DataView({
        store: store,
        tpl: tpl,
        autoHeight:true,
        multiSelect: true,
        overClass:'x-view-over',
        itemSelector:'div.thumb-wrap',
        emptyText: 'No images to display'
    })
});
panel.render(document.body);
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new DataView.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="deferEmptyText" Type="Boolean" />
            <ConfigOption Name="emptyText" Type="String">
              <Summary><![CDATA[The text to display in the view when there is no data to display (defaults to '').]]></Summary>
            </ConfigOption>
            <ConfigOption Name="itemSelector" Type="String">
              <Summary><![CDATA[<b>This is a required setting</b>. A simple CSS selector (e.g. <tt>div.some-class</tt> or
<tt>span:first-child</tt>) that will be used to determine what nodes this DataView will be
working with.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="loadingText" Type="String">
              <Summary><![CDATA[A string to display during data load operations (defaults to undefined).  If specified, this text will be
displayed in a loading div and the view's contents will be cleared while loading, otherwise the view's
contents will continue to display normally until the new data is loaded and the contents are replaced.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="multiSelect" Type="Boolean">
              <Summary><![CDATA[True to allow selection of more than one item at a time, false to allow selection of only a single item
at a time or no selection at all, depending on the value of {@link #singleSelect} (defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="overClass" Type="String">
              <Summary><![CDATA[A CSS class to apply to each item in the view on mouseover (defaults to undefined).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="selectedClass" Type="String">
              <Summary><![CDATA[A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').]]></Summary>
            </ConfigOption>
            <ConfigOption Name="simpleSelect" Type="Boolean">
              <Summary><![CDATA[True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,
false to force the user to hold Ctrl or Shift to select more than on item (defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="singleSelect" Type="Boolean">
              <Summary><![CDATA[True to allow selection of exactly one item at a time, false to allow no selection at all (defaults to false).
Note that if {@link #multiSelect} = true, this value will be ignored.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="store" Type="Ext.data.Store">
              <Summary><![CDATA[The {@link Ext.data.Store} to bind this DataView to.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tpl" Type="String/Array">
              <Summary><![CDATA[The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should
be specified in the same format expected by the constructor of {@link Ext.XTemplate}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="trackOver" Type="Boolean" />
          </ConfigOptions>
          <Properties>
            <Property Name="setStore">
              <Summary><![CDATA[Changes the data store bound to this view and refreshes it. (deprecated in favor of bindStore)
@param {Store} store The store to bind to this view]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="bindStore">
              <Summary><![CDATA[Changes the data store bound to this view and refreshes it.]]></Summary>
              <Parameters>
                <Param Name="store" Type="Store">
                  <Summary><![CDATA[The store to bind to this view]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="clearSelections">
              <Summary><![CDATA[Clears all selections.]]></Summary>
              <Parameters>
                <Param Name="suppressEvent" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to skip firing of the selectionchange event]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="collectData">
              <Summary><![CDATA[<p>Function which can be overridden which returns the data object passed to this
DataView's {@link #tpl template} to render the whole DataView.</p>
<p>This is usually an Array of data objects, each element of which is processed by an
{@link Ext.XTemplate XTemplate} which uses <tt>'&lt;tpl for="."&gt;'</tt> to iterate over its supplied
data object as an Array. However, <i>named</i> properties may be placed into the data object to
provide non-repeating data such as headings, totals etc.</p>]]></Summary>
              <Parameters>
                <Param Name="records" Type="Array">
                  <Summary><![CDATA[An Array of {@link Ext.data.Record}s to be rendered into the DataView.]]></Summary>
                </Param>
                <Param Name="startIndex" Type="Number">
                  <Summary><![CDATA[the index number of the Record being prepared for rendering.
contain <i>named</i> properties.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[An Array of data objects to be processed by a repeating XTemplate. May also]]></Summary>
              </Return>
            </Method>
            <Method Name="deselect">
              <Summary><![CDATA[Deselects a node.]]></Summary>
              <Parameters>
                <Param Name="node" Type="HTMLElement/Number">
                  <Summary><![CDATA[The node to deselect]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="findItemFromChild">
              <Summary><![CDATA[Returns the template node the passed child belongs to, or null if it doesn't belong to one.]]></Summary>
              <Parameters>
                <Param Name="node" Type="HTMLElement" />
              </Parameters>
              <Return Type="HTMLElement">
                <Summary><![CDATA[The template node]]></Summary>
              </Return>
            </Method>
            <Method Name="getNode">
              <Summary><![CDATA[Gets a template node.]]></Summary>
              <Parameters>
                <Param Name="nodeInfo" Type="HTMLElement/String/Number">
                  <Summary><![CDATA[An HTMLElement template node, index of a template node or the id of a template node]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement">
                <Summary><![CDATA[The node or null if it wasn't found]]></Summary>
              </Return>
            </Method>
            <Method Name="getNodes">
              <Summary><![CDATA[Gets a range nodes.]]></Summary>
              <Parameters>
                <Param Name="start" Type="Number" Optional="true">
                  <Summary><![CDATA[The index of the first node in the range]]></Summary>
                </Param>
                <Param Name="end" Type="Number" Optional="true">
                  <Summary><![CDATA[The index of the last node in the range]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[An array of nodes]]></Summary>
              </Return>
            </Method>
            <Method Name="getRecord">
              <Summary><![CDATA[Gets a record from a node]]></Summary>
              <Parameters>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The node to evaluate]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Record} record The {@link Ext.data.Record">
                <Summary><![CDATA[object]]></Summary>
              </Return>
            </Method>
            <Method Name="getRecords">
              <Summary><![CDATA[Gets an array of the records from an array of nodes]]></Summary>
              <Parameters>
                <Param Name="nodes" Type="Array">
                  <Summary><![CDATA[The nodes to evaluate]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array} records The {@link Ext.data.Record">
                <Summary><![CDATA[objects]]></Summary>
              </Return>
            </Method>
            <Method Name="getSelectedIndexes">
              <Summary><![CDATA[Gets the indexes of the selected nodes.]]></Summary>
              <Parameters />
              <Return Type="Array">
                <Summary><![CDATA[An array of numeric indexes]]></Summary>
              </Return>
            </Method>
            <Method Name="getSelectedNodes">
              <Summary><![CDATA[Gets the currently selected nodes.]]></Summary>
              <Parameters />
              <Return Type="Array">
                <Summary><![CDATA[An array of HTMLElements]]></Summary>
              </Return>
            </Method>
            <Method Name="getSelectedRecords">
              <Summary><![CDATA[Gets an array of the selected records]]></Summary>
              <Parameters />
              <Return Type="Array} An array of {@link Ext.data.Record">
                <Summary><![CDATA[objects]]></Summary>
              </Return>
            </Method>
            <Method Name="getSelectionCount">
              <Summary><![CDATA[Gets the number of selected nodes.]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The node count]]></Summary>
              </Return>
            </Method>
            <Method Name="getStore">
              <Summary><![CDATA[Returns the store associated with this DataView.]]></Summary>
              <Parameters />
              <Return Type="Ext.data.Store">
                <Summary><![CDATA[The store]]></Summary>
              </Return>
            </Method>
            <Method Name="indexOf">
              <Summary><![CDATA[Finds the index of the passed node.]]></Summary>
              <Parameters>
                <Param Name="nodeInfo" Type="HTMLElement/String/Number">
                  <Summary><![CDATA[An HTMLElement template node, index of a template node or the id of a template node]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number">
                <Summary><![CDATA[The index of the node or -1]]></Summary>
              </Return>
            </Method>
            <Method Name="isSelected">
              <Summary><![CDATA[Returns true if the passed node is selected, else false.]]></Summary>
              <Parameters>
                <Param Name="node" Type="HTMLElement/Number">
                  <Summary><![CDATA[The node or node index to check]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[True if selected, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="prepareData">
              <Summary><![CDATA[Function which can be overridden to provide custom formatting for each Record that is used by this
DataView's {@link #tpl template} to render each node.]]></Summary>
              <Parameters>
                <Param Name="data" Type="Array/Object">
                  <Summary><![CDATA[The raw data object that was used to create the Record.]]></Summary>
                </Param>
                <Param Name="recordIndex" Type="Number">
                  <Summary><![CDATA[the index number of the Record being prepared for rendering.]]></Summary>
                </Param>
                <Param Name="record" Type="Record">
                  <Summary><![CDATA[The Record being prepared for rendering.
(either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array/Object} The formatted data in a format expected by the internal {@link #tpl template">
                <Summary><![CDATA['s overwrite() method.]]></Summary>
              </Return>
            </Method>
            <Method Name="refresh">
              <Summary><![CDATA[Refreshes the view by reloading the data from the store and re-rendering the template.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="refreshNode">
              <Summary><![CDATA[Refreshes an individual node's data from the store.]]></Summary>
              <Parameters>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The item's data index in the store]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="select">
              <Summary><![CDATA[Selects a set of nodes.]]></Summary>
              <Parameters>
                <Param Name="nodeInfo" Type="Array/HTMLElement/String/Number">
                  <Summary><![CDATA[An HTMLElement template node, index of a template node,
id of a template node or an array of any of those to select]]></Summary>
                </Param>
                <Param Name="keepExisting" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to keep existing selections]]></Summary>
                </Param>
                <Param Name="suppressEvent" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to skip firing of the selectionchange vent]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="selectRange">
              <Summary><![CDATA[Selects a range of nodes. All nodes between start and end are selected.]]></Summary>
              <Parameters>
                <Param Name="start" Type="Number">
                  <Summary><![CDATA[The index of the first node in the range]]></Summary>
                </Param>
                <Param Name="end" Type="Number">
                  <Summary><![CDATA[The index of the last node in the range]]></Summary>
                </Param>
                <Param Name="keepExisting" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to retain existing selections]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="beforeclick">
              <Summary><![CDATA[Fires before a click is processed. Returns false to cancel the default action.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index of the target node]]></Summary>
                </Param>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The target node]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforeselect">
              <Summary><![CDATA[Fires before a selection is made. If any handlers return false, the selection is cancelled.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The node to be selected]]></Summary>
                </Param>
                <Param Name="selections" Type="Array">
                  <Summary><![CDATA[Array of currently selected nodes]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="click">
              <Summary><![CDATA[Fires when a template node is clicked.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index of the target node]]></Summary>
                </Param>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The target node]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="containerclick">
              <Summary><![CDATA[Fires when a click occurs and it is not on a template node.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="containercontextmenu">
              <Summary><![CDATA[Fires when a right click occurs that is not on a template node.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="contextmenu">
              <Summary><![CDATA[Fires when a template node is right clicked.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index of the target node]]></Summary>
                </Param>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The target node]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="dblclick">
              <Summary><![CDATA[Fires when a template node is double clicked.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index of the target node]]></Summary>
                </Param>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The target node]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseenter">
              <Summary><![CDATA[Fires when the mouse enters a template node. trackOver:true or an overCls must be set to enable this event.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index of the target node]]></Summary>
                </Param>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The target node]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseleave">
              <Summary><![CDATA[Fires when the mouse leaves a template node. trackOver:true or an overCls must be set to enable this event.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index of the target node]]></Summary>
                </Param>
                <Param Name="node" Type="HTMLElement">
                  <Summary><![CDATA[The target node]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The raw event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="selectionchange">
              <Summary><![CDATA[Fires when the selected nodes change.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.DataView">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="selections" Type="Array">
                  <Summary><![CDATA[Array of the selected nodes]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="DatePicker" FullName="Ext.DatePicker" Package="Ext" DefinedIn="widgets\DatePicker.js" Xtype="datepicker" Extends="Ext.Component">
          <Summary><![CDATA[Simple date picker class.]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new DatePicker.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="autoEl" Type="String" />
            <ConfigOption Name="cancelText" Type="String">
              <Summary><![CDATA[The text to display on the cancel button (defaults to <tt>'Cancel'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="dayNames" Type="Array">
              <Summary><![CDATA[An array of textual day names which can be overriden for localization support (defaults to Date.dayNames)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabledDates" Type="Array">
              <Summary><![CDATA[An array of 'dates' to disable, as strings. These strings will be used to build a dynamic regular
expression so they are very powerful. Some examples:
<ul>
<li>['03/08/2003', '09/16/2003'] would disable those exact dates</li>
<li>['03/08', '09/16'] would disable those days for every year</li>
<li>['^03/08'] would only match the beginning (useful if you are using short years)</li>
<li>['03/../2006'] would disable every day in March 2006</li>
<li>['^03'] would disable every day in every March</li>
</ul>
Note that the format of the dates included in the array should exactly match the {@link #format} config.
In order to support regular expressions, if you are using a date format that has '.' in it, you will have to
escape the dot when restricting dates. For example: ['03\\.08\\.03'].]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabledDatesRE" Type="RegExp">
              <Summary><![CDATA[JavaScript regular expression used to disable a pattern of dates (defaults to null).  The {@link #disabledDates}
config will generate this regex internally, but if you specify disabledDatesRE it will take precedence over the
disabledDates value.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabledDatesText" Type="String">
              <Summary><![CDATA[The tooltip text to display when the date falls on a disabled date (defaults to <tt>'Disabled'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabledDays" Type="Array">
              <Summary><![CDATA[An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabledDaysText" Type="String">
              <Summary><![CDATA[The tooltip to display when the date falls on a disabled day (defaults to <tt>'Disabled'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="format" Type="String">
              <Summary><![CDATA[The default date format string which can be overriden for localization support.  The format must be
valid according to {@link Date#parseDate} (defaults to <tt>'m/d/y'</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="handler" Type="Function">
              <Summary><![CDATA[Optional. A function that will handle the select event of this picker.
The handler is passed the following parameters:<div class="mdetail-params"><ul>
<li><code>picker</code> : DatePicker<div class="sub-desc">The Ext.DatePicker.</div></li>
<li><code>date</code> : Date<div class="sub-desc">The selected date.</div></li>
</ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="maxDate" Type="Date">
              <Summary><![CDATA[Maximum allowable date (JavaScript date object, defaults to null)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="maxText" Type="String">
              <Summary><![CDATA[The error text to display if the maxDate validation fails (defaults to <tt>'This date is after the maximum date'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="minDate" Type="Date">
              <Summary><![CDATA[Minimum allowable date (JavaScript date object, defaults to null)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="minText" Type="String">
              <Summary><![CDATA[The error text to display if the minDate validation fails (defaults to <tt>'This date is before the minimum date'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="monthNames" Type="Array">
              <Summary><![CDATA[An array of textual month names which can be overriden for localization support (defaults to Date.monthNames)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="monthYearText" Type="String">
              <Summary><![CDATA[The header month selector tooltip (defaults to <tt>'Choose a month (Control+Up/Down to move years)'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="nextText" Type="String">
              <Summary><![CDATA[The next month navigation button tooltip (defaults to <tt>'Next Month (Control+Right)'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="okText" Type="String">
              <Summary><![CDATA[The text to display on the ok button (defaults to <tt>'&#160;OK&#160;'</tt> to give the user extra clicking room)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="prevText" Type="String">
              <Summary><![CDATA[The previous month navigation button tooltip (defaults to <tt>'Previous Month (Control+Left)'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scope" Type="Object">
              <Summary><![CDATA[The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>
function will be called.  Defaults to this DatePicker instance.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="showToday" Type="Boolean">
              <Summary><![CDATA[False to hide the footer area containing the Today button and disable the keyboard handler for spacebar
that selects the current date (defaults to <tt>true</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="startDay" Type="Number">
              <Summary><![CDATA[Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="todayText" Type="String">
              <Summary><![CDATA[The text to display on the button that selects the current date (defaults to <tt>'Today'</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="todayTip" Type="String">
              <Summary><![CDATA[The tooltip to display for the button that selects the current date (defaults to <tt>'{current date} (Spacebar)'</tt>)]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="getValue">
              <Summary><![CDATA[Gets the current selected value of the date field]]></Summary>
              <Parameters />
              <Return Type="Date">
                <Summary><![CDATA[The selected date]]></Summary>
              </Return>
            </Method>
            <Method Name="setDisabledDates">
              <Summary><![CDATA[Replaces any existing disabled dates with new values and refreshes the DatePicker.]]></Summary>
              <Parameters>
                <Param Name="disabledDates" Type="Array/RegExp">
                  <Summary><![CDATA[An array of date strings (see the {@link #disabledDates} config
for details on supported values), or a JavaScript regular expression used to disable a pattern of dates.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setDisabledDays">
              <Summary><![CDATA[Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.]]></Summary>
              <Parameters>
                <Param Name="disabledDays" Type="Array">
                  <Summary><![CDATA[An array of disabled day indexes. See the {@link #disabledDays} config
for details on supported values.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setMaxDate">
              <Summary><![CDATA[Replaces any existing {@link #maxDate} with the new value and refreshes the DatePicker.]]></Summary>
              <Parameters>
                <Param Name="value" Type="Date">
                  <Summary><![CDATA[The maximum date that can be selected]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setMinDate">
              <Summary><![CDATA[Replaces any existing {@link #minDate} with the new value and refreshes the DatePicker.]]></Summary>
              <Parameters>
                <Param Name="value" Type="Date">
                  <Summary><![CDATA[The minimum date that can be selected]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setValue">
              <Summary><![CDATA[Sets the value of the date field]]></Summary>
              <Parameters>
                <Param Name="value" Type="Date">
                  <Summary><![CDATA[The date to set]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="select">
              <Summary><![CDATA[Fires when a date is selected.]]></Summary>
              <Parameters>
                <Param Name="el" Type="DatePicker">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="date" Type="Date">
                  <Summary><![CDATA[The selected date]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Direct" FullName="Ext.Direct" Package="Ext" DefinedIn="direct\Direct.js" Extends="Ext.util.Observable" Singleton="true">
          <Summary><![CDATA[<p><b><u>Overview</u></b></p>

<p>Ext.Direct aims to streamline communication between the client and server
by providing a single interface that reduces the amount of common code
typically required to validate data and handle returned data packets
(reading data, error conditions, etc).</p>

<p>The Ext.direct namespace includes several classes for a closer integration
with the server-side. The Ext.data namespace also includes classes for working
with Ext.data.Stores which are backed by data from an Ext.Direct method.</p>

<p><b><u>Specification</u></b></p>

<p>For additional information consult the
<a href="http://extjs.com/products/extjs/direct.php">Ext.Direct Specification</a>.</p>

<p><b><u>Providers</u></b></p>

<p>Ext.Direct uses a provider architecture, where one or more providers are
used to transport data to and from the server. There are several providers
that exist in the core at the moment:</p><div class="mdetail-params"><ul>

<li>{@link Ext.direct.JsonProvider JsonProvider} for simple JSON operations</li>
<li>{@link Ext.direct.PollingProvider PollingProvider} for repeated requests</li>
<li>{@link Ext.direct.RemotingProvider RemotingProvider} exposes server side
on the client.</li>
</ul></div>

<p>A provider does not need to be invoked directly, providers are added via
{@link Ext.Direct}.{@link Ext.Direct#add add}.</p>

<p><b><u>Router</u></b></p>

<p>Ext.Direct utilizes a "router" on the server to direct requests from the client
to the appropriate server-side method. Because the Ext.Direct API is completely
platform-agnostic, you could completely swap out a Java based server solution
and replace it with one that uses C# without changing the client side JavaScript
at all.</p>

<p><b><u>Server side events</u></b></p>

<p>Custom events from the server may be handled by the client by adding
listeners, for example:</p>
<pre><code>
{"type":"event","name":"message","data":"Successfully polled at: 11:19:30 am"}

// add a handler for a 'message' event sent by the server 
Ext.Direct.on('message', function (e) {
    out.append(String.format('&lt;p>&lt;i>{0}&lt;/i>&lt;/p>', e.data));
            out.el.scrollTo('t', 100000, true);
});
</code></pre>]]></Summary>
          <ConfigOptions />
          <Properties>
            <Property Name="eventTypes">
              <Summary><![CDATA[Each event type implements a getData() method. The default event types are:
<div class="mdetail-params"><ul>
<li><b><tt>event</tt></b> : Ext.Direct.Event</li>
<li><b><tt>exception</tt></b> : Ext.Direct.ExceptionEvent</li>
<li><b><tt>rpc</tt></b> : Ext.Direct.RemotingEvent</li>
</ul></div>]]></Summary>
            </Property>
            <Property Name="exceptions">
              <Summary><![CDATA[Four types of possible exceptions which can occur:
<div class="mdetail-params"><ul>
<li><b><tt>Ext.Direct.exceptions.TRANSPORT</tt></b> : 'xhr'</li>
<li><b><tt>Ext.Direct.exceptions.PARSE</tt></b> : 'parse'</li>
<li><b><tt>Ext.Direct.exceptions.LOGIN</tt></b> : 'login'</li>
<li><b><tt>Ext.Direct.exceptions.SERVER</tt></b> : 'exception'</li>
</ul></div>]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="addProvider">
              <Summary><![CDATA[Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods.
If the provider is not already connected, it will auto-connect.
<pre><code>
var pollProv = new Ext.direct.PollingProvider({
    url: 'php/poll2.php'
}); 

Ext.Direct.addProvider(
   {
        "type":"remoting",       // create a {@link Ext.direct.RemotingProvider} 
        "url":"php\/router.php", // url to connect to the Ext.Direct server-side router.
        "actions":{              // each property within the actions object represents a Class 
            "TestAction":[       // array of methods within each server side Class   
           {
                "name":"doEcho", // name of method
                "len":1
            },{
                "name":"multiply",
                "len":1
            },{
                "name":"doForm",
                "formHandler":true, // handle form on server with Ext.Direct.Transaction 
                "len":1
            }]
        },
        "namespace":"myApplication",// namespace to create the Remoting Provider in
    },{
        type: 'polling', // create a {@link Ext.direct.PollingProvider} 
        url:  'php/poll.php'
    },
    pollProv // reference to previously created instance
);
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="provider" Type="Object/Array">
                  <Summary><![CDATA[Accepts either an Array of Provider descriptions (an instance
or config object for a Provider) or any number of Provider descriptions as arguments.  Each
Provider description instructs Ext.Direct how to create client-side stub methods.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getProvider">
              <Summary><![CDATA[Retrieve a {@link Ext.direct.Provider provider} by the
<b><tt>{@link Ext.direct.Provider#id id}</tt></b> specified when the provider is
{@link #addProvider added}.]]></Summary>
              <Parameters>
                <Param Name="id" Type="String">
                  <Summary><![CDATA[Unique identifier assigned to the provider when calling {@link #addProvider}]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="event">
              <Summary><![CDATA[Fires after an event.]]></Summary>
              <Parameters>
                <Param Name="e" Type="event">
                  <Summary><![CDATA[The {@link Ext.Direct#eventTypes Ext.Direct.Event type} that occurred.]]></Summary>
                </Param>
                <Param Name="provider" Type="Ext.direct.Provider">
                  <Summary><![CDATA[The {@link Ext.direct.Provider Provider}.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="exception">
              <Summary><![CDATA[Fires after an event exception.]]></Summary>
              <Parameters>
                <Param Name="e" Type="event">
                  <Summary><![CDATA[The {@link Ext.Direct#eventTypes Ext.Direct.Event type} that occurred.]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Direct.Transaction" FullName="Ext.Direct.Transaction" Package="Ext" DefinedIn="direct\Transaction.js" Extends="Object">
          <Summary><![CDATA[<p>Supporting Class for Ext.Direct (not intended to be used directly).</p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object" />
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="DomHelper" FullName="Ext.DomHelper" Package="Ext" DefinedIn="core\core\DomHelper.js,core\DomHelper-more.js" Singleton="true">
          <Summary><![CDATA[<p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating
elements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates
from your DOM building code.</p>

<p><b><u>DomHelper element specification object</u></b></p>
<p>A specification object is used when creating elements. Attributes of this object
are assumed to be element attributes, except for 4 special attributes:
<div class="mdetail-params"><ul>
<li><b><tt>tag</tt></b> : <div class="sub-desc">The tag name of the element</div></li>
<li><b><tt>children</tt></b> : or <tt>cn</tt><div class="sub-desc">An array of the
same kind of element definition objects to be created and appended. These can be nested
as deep as you want.</div></li>
<li><b><tt>cls</tt></b> : <div class="sub-desc">The class attribute of the element.
This will end up being either the "class" attribute on a HTML fragment or className
for a DOM node, depending on whether DomHelper is using fragments or DOM.</div></li>
<li><b><tt>html</tt></b> : <div class="sub-desc">The innerHTML for the element</div></li>
</ul></div></p>

<p><b><u>Insertion methods</u></b></p>
<p>Commonly used insertion methods:
<div class="mdetail-params"><ul>
<li><b><tt>{@link #append}</tt></b> : <div class="sub-desc"></div></li>
<li><b><tt>{@link #insertBefore}</tt></b> : <div class="sub-desc"></div></li>
<li><b><tt>{@link #insertAfter}</tt></b> : <div class="sub-desc"></div></li>
<li><b><tt>{@link #overwrite}</tt></b> : <div class="sub-desc"></div></li>
<li><b><tt>{@link #createTemplate}</tt></b> : <div class="sub-desc"></div></li>
<li><b><tt>{@link #insertHtml}</tt></b> : <div class="sub-desc"></div></li>
</ul></div></p>

<p><b><u>Example</u></b></p>
<p>This is an example, where an unordered list with 3 children items is appended to an existing
element with id <tt>'my-div'</tt>:<br>
 <pre><code>
var dh = Ext.DomHelper; // create shorthand alias
// specification object
var spec = {
    id: 'my-ul',
    tag: 'ul',
    cls: 'my-list',
    // append children after creating
    children: [     // may also specify 'cn' instead of 'children'
       {tag: 'li', id: 'item0', html: 'List Item 0'},
       {tag: 'li', id: 'item1', html: 'List Item 1'},
       {tag: 'li', id: 'item2', html: 'List Item 2'}
    ]
};
var list = dh.append(
    'my-div', // the context element 'my-div' can either be the id or the actual node
    spec      // the specification object
);
 </code></pre></p>
<p>Element creation specification parameters in this class may also be passed as an Array of
specification objects. This can be used to insert multiple sibling nodes into an existing
container very efficiently. For example, to add more list items to the example above:<pre><code>
dh.append('my-ul', [
   {tag: 'li', id: 'item3', html: 'List Item 3'},
   {tag: 'li', id: 'item4', html: 'List Item 4'}
]);
</code></pre></p>

<p><b><u>Templating</u></b></p>
<p>The real power is in the built-in templating. Instead of creating or appending any elements,
<tt>{@link #createTemplate}</tt> returns a Template object which can be used over and over to
insert new elements. Revisiting the example above, we could utilize templating this time:
<pre><code>
// create the node
var list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});
// get template
var tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});

for (var i = 0; i < 5, i++) {
    tpl.append(list, [i]); // use template to append to the actual node
}
</code></pre></p>
<p>An example using a template:<pre><code>
var html = '<a id="{0}" href="{1}" class="nav">{2}</a>';

var tpl = new Ext.DomHelper.createTemplate(html);
tpl.append('blog-roll', ['link1', 'http://www.jackslocum.com/', "Jack&#39;s Site"]);
tpl.append('blog-roll', ['link2', 'http://www.dustindiaz.com/', "Dustin&#39;s Site"]);
</code></pre></p>

<p>The same example using named parameters:<pre><code>
var html = '<a id="{id}" href="{url}" class="nav">{text}</a>';

var tpl = new Ext.DomHelper.createTemplate(html);
tpl.append('blog-roll', {
    id: 'link1',
    url: 'http://www.jackslocum.com/',
    text: "Jack&#39;s Site"
});
tpl.append('blog-roll', {
    id: 'link2',
    url: 'http://www.dustindiaz.com/',
    text: "Dustin&#39;s Site"
});
</code></pre></p>

<p><b><u>Compiling Templates</u></b></p>
<p>Templates are applied using regular expressions. The performance is great, but if
you are adding a bunch of DOM elements using the same template, you can increase
performance even further by {@link Ext.Template#compile "compiling"} the template.
The way "{@link Ext.Template#compile compile()}" works is the template is parsed and
broken up at the different variable points and a dynamic function is created and eval'ed.
The generated function performs string concatenation of these parts and the passed
variables instead of using regular expressions.
<pre><code>
var html = '<a id="{id}" href="{url}" class="nav">{text}</a>';

var tpl = new Ext.DomHelper.createTemplate(html);
tpl.compile();

//... use template like normal
</code></pre></p>

<p><b><u>Performance Boost</u></b></p>
<p>DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead
of DOM can significantly boost performance.</p>
<p>Element creation specification parameters may also be strings. If {@link #useDom} is <tt>false</tt>,
then the string is used as innerHTML. If {@link #useDom} is <tt>true</tt>, a string specification
results in the creation of a text node. Usage:</p>
<pre><code>
Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance
</code></pre>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="append">
              <Summary><![CDATA[Creates new DOM element(s) and appends them to el.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="o" Type="Object/String">
                  <Summary><![CDATA[The DOM object spec (and children) or raw HTML blob]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node]]></Summary>
              </Return>
            </Method>
            <Method Name="applyStyles">
              <Summary><![CDATA[Applies a style specification to an element.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[The element to apply styles to]]></Summary>
                </Param>
                <Param Name="styles" Type="String/Object/Function">
                  <Summary><![CDATA[A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or
a function which returns such a specification.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="insertAfter">
              <Summary><![CDATA[Creates new DOM element(s) and inserts them after el.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The DOM object spec (and children)]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node]]></Summary>
              </Return>
            </Method>
            <Method Name="insertBefore">
              <Summary><![CDATA[Creates new DOM element(s) and inserts them before el.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="o" Type="Object/String">
                  <Summary><![CDATA[The DOM object spec (and children) or raw HTML blob]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node]]></Summary>
              </Return>
            </Method>
            <Method Name="insertFirst">
              <Summary><![CDATA[Creates new DOM element(s) and inserts them as the first child of el.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="o" Type="Object/String">
                  <Summary><![CDATA[The DOM object spec (and children) or raw HTML blob]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node]]></Summary>
              </Return>
            </Method>
            <Method Name="insertHtml">
              <Summary><![CDATA[Inserts an HTML fragment into the DOM.]]></Summary>
              <Parameters>
                <Param Name="where" Type="String">
                  <Summary><![CDATA[Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd.]]></Summary>
                </Param>
                <Param Name="el" Type="HTMLElement">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="html" Type="String">
                  <Summary><![CDATA[The HTML fragmenet]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement">
                <Summary><![CDATA[The new node]]></Summary>
              </Return>
            </Method>
            <Method Name="markup">
              <Summary><![CDATA[Returns the markup for the passed Element(s) config.]]></Summary>
              <Parameters>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The DOM object spec (and children)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String" />
            </Method>
            <Method Name="overwrite">
              <Summary><![CDATA[Creates new DOM element(s) and overwrites the contents of el with them.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="o" Type="Object/String">
                  <Summary><![CDATA[The DOM object spec (and children) or raw HTML blob]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node]]></Summary>
              </Return>
            </Method>
            <Method Name="createTemplate">
              <Summary><![CDATA[    function createDom(o, parentNode) {
        var el,
        	doc = document,
        	useSet,
        	attr,
        	val,
        	cn;

        if (Ext.isArray(o)) {                       // Allow Arrays of siblings to be inserted
            el = doc.createDocumentFragment(); // in one shot using a DocumentFragment
	        Ext.each(o, function (v) {
                createDom(v, el);
            });
        } else if (Ext.isString(o)) {         // Allow a string as a child spec.
            el = doc.createTextNode(o);
        } else {
            el = doc.createElement( o.tag || 'div' );
            useSet = !!el.setAttribute; // In IE some elements don't have setAttribute
            Ext.iterate(o, function (attr, val) {
                if (!/tag|children|cn|html|style/.test(attr)) {
	                if (attr == 'cls') {
	                    el.className = val;
	                } else {
                        if (useSet) {
                            el.setAttribute(attr, val);
                        } else {
                            el[attr] = val;
                        }
	                }
                }
            });
            Ext.DomHelper.applyStyles(el, o.style);

            if ((cn = o.children || o.cn)) {
                createDom(cn, el);
            } else if (o.html) {
                el.innerHTML = o.html;
            }
        }
        if (parentNode) {
           parentNode.appendChild(el);
        }
        return el;
    }

	pub = {
		/**
Creates a new Ext.Template from the DOM object spec.]]></Summary>
              <Parameters>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The DOM object spec (and children)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Template">
                <Summary><![CDATA[The new template]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="DomQuery" FullName="Ext.DomQuery" Package="Ext" DefinedIn="core\core\DomQuery.js,core\DomQuery.js" Singleton="true">
          <Summary><![CDATA[Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).
<p>
DomQuery supports most of the <a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors">CSS3 selectors spec</a>, along with some custom selectors and basic XPath.</p>

<p>
All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example "div.foo:nth-child(odd)[@foo=bar].bar:first" would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.
</p>
<h4>Element Selectors:</h4>
<ul class="list">
    <li> <b>*</b> any element</li>
    <li> <b>E</b> an element with the tag E</li>
    <li> <b>E F</b> All descendent elements of E that have the tag F</li>
    <li> <b>E > F</b> or <b>E/F</b> all direct children elements of E that have the tag F</li>
    <li> <b>E + F</b> all elements with the tag F that are immediately preceded by an element with the tag E</li>
    <li> <b>E ~ F</b> all elements with the tag F that are preceded by a sibling element with the tag E</li>
</ul>
<h4>Attribute Selectors:</h4>
<p>The use of &#64; and quotes are optional. For example, div[&#64;foo='bar'] is also a valid attribute selector.</p>
<ul class="list">
    <li> <b>E[foo]</b> has an attribute "foo"</li>
    <li> <b>E[foo=bar]</b> has an attribute "foo" that equals "bar"</li>
    <li> <b>E[foo^=bar]</b> has an attribute "foo" that starts with "bar"</li>
    <li> <b>E[foo$=bar]</b> has an attribute "foo" that ends with "bar"</li>
    <li> <b>E[foo*=bar]</b> has an attribute "foo" that contains the substring "bar"</li>
    <li> <b>E[foo%=2]</b> has an attribute "foo" that is evenly divisible by 2</li>
    <li> <b>E[foo!=bar]</b> has an attribute "foo" that does not equal "bar"</li>
</ul>
<h4>Pseudo Classes:</h4>
<ul class="list">
    <li> <b>E:first-child</b> E is the first child of its parent</li>
    <li> <b>E:last-child</b> E is the last child of its parent</li>
    <li> <b>E:nth-child(<i>n</i>)</b> E is the <i>n</i>th child of its parent (1 based as per the spec)</li>
    <li> <b>E:nth-child(odd)</b> E is an odd child of its parent</li>
    <li> <b>E:nth-child(even)</b> E is an even child of its parent</li>
    <li> <b>E:only-child</b> E is the only child of its parent</li>
    <li> <b>E:checked</b> E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) </li>
    <li> <b>E:first</b> the first E in the resultset</li>
    <li> <b>E:last</b> the last E in the resultset</li>
    <li> <b>E:nth(<i>n</i>)</b> the <i>n</i>th E in the resultset (1 based)</li>
    <li> <b>E:odd</b> shortcut for :nth-child(odd)</li>
    <li> <b>E:even</b> shortcut for :nth-child(even)</li>
    <li> <b>E:contains(foo)</b> E's innerHTML contains the substring "foo"</li>
    <li> <b>E:nodeValue(foo)</b> E contains a textNode with a nodeValue that equals "foo"</li>
    <li> <b>E:not(S)</b> an E element that does not match simple selector S</li>
    <li> <b>E:has(S)</b> an E element that has a descendent that matches simple selector S</li>
    <li> <b>E:next(S)</b> an E element whose next sibling matches simple selector S</li>
    <li> <b>E:prev(S)</b> an E element whose previous sibling matches simple selector S</li>
</ul>
<h4>CSS Value Selectors:</h4>
<ul class="list">
    <li> <b>E{display=none}</b> css value "display" that equals "none"</li>
    <li> <b>E{display^=none}</b> css value "display" that starts with "none"</li>
    <li> <b>E{display$=none}</b> css value "display" that ends with "none"</li>
    <li> <b>E{display*=none}</b> css value "display" that contains the substring "none"</li>
    <li> <b>E{display%=2}</b> css value "display" that is evenly divisible by 2</li>
    <li> <b>E{display!=none}</b> css value "display" that does not equal "none"</li>
</ul>

Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).
<p>
DomQuery supports most of the <a href="http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors">CSS3 selectors spec</a>, along with some custom selectors and basic XPath.</p>

<p>
All selectors, attribute filters and pseudos below can be combined infinitely in any order. For example "div.foo:nth-child(odd)[@foo=bar].bar:first" would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.
</p>
<h4>Element Selectors:</h4>
<ul class="list">
    <li> <b>*</b> any element</li>
    <li> <b>E</b> an element with the tag E</li>
    <li> <b>E F</b> All descendent elements of E that have the tag F</li>
    <li> <b>E > F</b> or <b>E/F</b> all direct children elements of E that have the tag F</li>
    <li> <b>E + F</b> all elements with the tag F that are immediately preceded by an element with the tag E</li>
    <li> <b>E ~ F</b> all elements with the tag F that are preceded by a sibling element with the tag E</li>
</ul>
<h4>Attribute Selectors:</h4>
<p>The use of &#64; and quotes are optional. For example, div[&#64;foo='bar'] is also a valid attribute selector.</p>
<ul class="list">
    <li> <b>E[foo]</b> has an attribute "foo"</li>
    <li> <b>E[foo=bar]</b> has an attribute "foo" that equals "bar"</li>
    <li> <b>E[foo^=bar]</b> has an attribute "foo" that starts with "bar"</li>
    <li> <b>E[foo$=bar]</b> has an attribute "foo" that ends with "bar"</li>
    <li> <b>E[foo*=bar]</b> has an attribute "foo" that contains the substring "bar"</li>
    <li> <b>E[foo%=2]</b> has an attribute "foo" that is evenly divisible by 2</li>
    <li> <b>E[foo!=bar]</b> has an attribute "foo" that does not equal "bar"</li>
</ul>
<h4>Pseudo Classes:</h4>
<ul class="list">
    <li> <b>E:first-child</b> E is the first child of its parent</li>
    <li> <b>E:last-child</b> E is the last child of its parent</li>
    <li> <b>E:nth-child(<i>n</i>)</b> E is the <i>n</i>th child of its parent (1 based as per the spec)</li>
    <li> <b>E:nth-child(odd)</b> E is an odd child of its parent</li>
    <li> <b>E:nth-child(even)</b> E is an even child of its parent</li>
    <li> <b>E:only-child</b> E is the only child of its parent</li>
    <li> <b>E:checked</b> E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) </li>
    <li> <b>E:first</b> the first E in the resultset</li>
    <li> <b>E:last</b> the last E in the resultset</li>
    <li> <b>E:nth(<i>n</i>)</b> the <i>n</i>th E in the resultset (1 based)</li>
    <li> <b>E:odd</b> shortcut for :nth-child(odd)</li>
    <li> <b>E:even</b> shortcut for :nth-child(even)</li>
    <li> <b>E:contains(foo)</b> E's innerHTML contains the substring "foo"</li>
    <li> <b>E:nodeValue(foo)</b> E contains a textNode with a nodeValue that equals "foo"</li>
    <li> <b>E:not(S)</b> an E element that does not match simple selector S</li>
    <li> <b>E:has(S)</b> an E element that has a descendent that matches simple selector S</li>
    <li> <b>E:next(S)</b> an E element whose next sibling matches simple selector S</li>
    <li> <b>E:prev(S)</b> an E element whose previous sibling matches simple selector S</li>
</ul>
<h4>CSS Value Selectors:</h4>
<ul class="list">
    <li> <b>E{display=none}</b> css value "display" that equals "none"</li>
    <li> <b>E{display^=none}</b> css value "display" that starts with "none"</li>
    <li> <b>E{display$=none}</b> css value "display" that ends with "none"</li>
    <li> <b>E{display*=none}</b> css value "display" that contains the substring "none"</li>
    <li> <b>E{display%=2}</b> css value "display" that is evenly divisible by 2</li>
    <li> <b>E{display!=none}</b> css value "display" that does not equal "none"</li>
</ul>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="compile">
              <Summary><![CDATA[Compiles a selector/xpath query into a reusable function. The returned function
takes one parameter "root" (optional), which is the context node from where the query should start.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The selector/xpath query]]></Summary>
                </Param>
                <Param Name="type" Type="String" Optional="true">
                  <Summary><![CDATA[Either "select" (the default) or "simple" for a simple selector match]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Function" />
            </Method>
            <Method Name="filter">
              <Summary><![CDATA[Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)]]></Summary>
              <Parameters>
                <Param Name="el" Type="Array">
                  <Summary><![CDATA[An array of elements to filter]]></Summary>
                </Param>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The simple selector to test]]></Summary>
                </Param>
                <Param Name="nonMatches" Type="Boolean">
                  <Summary><![CDATA[If true, it returns the elements that DON'T match
the selector instead of the ones that match
no matches, and empty Array is returned.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[An Array of DOM elements which match the selector. If there are]]></Summary>
              </Return>
            </Method>
            <Method Name="is">
              <Summary><![CDATA[Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement/Array">
                  <Summary><![CDATA[An element id, element or array of elements]]></Summary>
                </Param>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The simple selector to test]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean" />
            </Method>
            <Method Name="query">
              <Summary><![CDATA[Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Ext.DomQuery#select}]]></Summary>
              <Parameters>
                <Param Name="path" Type="String">
                  <Summary><![CDATA[The selector/xpath query]]></Summary>
                </Param>
                <Param Name="root" Type="Node" Optional="true">
                  <Summary><![CDATA[The start of the query (defaults to document).
@member Ext]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array" />
            </Method>
            <Method Name="select">
              <Summary><![CDATA[Selects a group of elements.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The selector/xpath query (can be a comma separated list of selectors)]]></Summary>
                </Param>
                <Param Name="root" Type="Node" Optional="true">
                  <Summary><![CDATA[The start of the query (defaults to document).
no matches, and empty Array is returned.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[An Array of DOM elements which match the selector. If there are]]></Summary>
              </Return>
            </Method>
            <Method Name="selectNode">
              <Summary><![CDATA[Selects a single element.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The selector/xpath query]]></Summary>
                </Param>
                <Param Name="root" Type="Node" Optional="true">
                  <Summary><![CDATA[The start of the query (defaults to document).]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Element">
                <Summary><![CDATA[The DOM element which matched the selector.]]></Summary>
              </Return>
            </Method>
            <Method Name="selectNumber">
              <Summary><![CDATA[Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The selector/xpath query]]></Summary>
                </Param>
                <Param Name="root" Type="Node" Optional="true">
                  <Summary><![CDATA[The start of the query (defaults to document).]]></Summary>
                </Param>
                <Param Name="defaultValue" Type="Number" />
              </Parameters>
              <Return Type="Number" />
            </Method>
            <Method Name="selectValue">
              <Summary><![CDATA[Selects the value of a node, optionally replacing null with the defaultValue.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The selector/xpath query]]></Summary>
                </Param>
                <Param Name="root" Type="Node" Optional="true">
                  <Summary><![CDATA[The start of the query (defaults to document).]]></Summary>
                </Param>
                <Param Name="defaultValue" Type="String" />
              </Parameters>
              <Return Type="String" />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Editor" FullName="Ext.Editor" Package="Ext" DefinedIn="widgets\Editor.js" Xtype="editor" Extends="Ext.Component" Subclasses="Ext.tree.TreeEditor">
          <Summary><![CDATA[A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new Editor.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="alignment" Type="String">
              <Summary><![CDATA[The position to align to (see {@link Ext.Element#alignTo} for more details, defaults to "c-c?").]]></Summary>
            </ConfigOption>
            <ConfigOption Name="allowBlur" Type="Boolean">
              <Summary><![CDATA[True to {@link #completeEdit complete the editing process} if in edit mode when the
field is blurred. Defaults to <tt>false</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoSize" Type="Boolean/String">
              <Summary><![CDATA[True for the editor to automatically adopt the size of the element being edited, "width" to adopt the width only,
or "height" to adopt the height only (defaults to false)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="cancelOnEsc" Type="Boolean" />
            <ConfigOption Name="completeOnEnter" Type="Boolean" />
            <ConfigOption Name="constrain" Type="Boolean" />
            <ConfigOption Name="field" Type="Ext.form.Field">
              <Summary><![CDATA[The Field object (or descendant) or config object for field]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hideEl" Type="Boolean">
              <Summary><![CDATA[False to keep the bound element visible while the editor is displayed (defaults to true)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="ignoreNoChange" Type="Boolean">
              <Summary><![CDATA[True to skip the edit completion process (no save, no events fired) if the user completes an edit and
the value has not changed (defaults to false).  Applies only to string values - edits for other data types
will never be ignored.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="revertInvalid" Type="Boolean">
              <Summary><![CDATA[True to automatically revert the field value and cancel the edit when the user completes an edit and the field
validation fails (defaults to true)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="shadow" Type="Boolean/String">
              <Summary><![CDATA[for bottom-right shadow (defaults to "frame")]]></Summary>
            </ConfigOption>
            <ConfigOption Name="swallowKeys" Type="Boolean" />
            <ConfigOption Name="updateEl" Type="Boolean" />
            <ConfigOption Name="value" Type="Mixed">
              <Summary><![CDATA[The data value of the underlying field (defaults to "")]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="cancelEdit">
              <Summary><![CDATA[Cancels the editing process and hides the editor without persisting any changes.  The field value will be
reverted to the original starting value.]]></Summary>
              <Parameters>
                <Param Name="remainVisible" Type="Boolean">
                  <Summary><![CDATA[Override the default behavior and keep the editor visible after
cancel (defaults to false)]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="completeEdit">
              <Summary><![CDATA[Ends the editing process, persists the changed value to the underlying field, and hides the editor.]]></Summary>
              <Parameters>
                <Param Name="remainVisible" Type="Boolean">
                  <Summary><![CDATA[Override the default behavior and keep the editor visible after edit (defaults to false)]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getValue">
              <Summary><![CDATA[Gets the data value of the editor]]></Summary>
              <Parameters />
              <Return Type="Mixed">
                <Summary><![CDATA[The data value]]></Summary>
              </Return>
            </Method>
            <Method Name="realign">
              <Summary><![CDATA[Realigns the editor to the bound field based on the current alignment config value.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="setSize">
              <Summary><![CDATA[Sets the height and width of this editor.]]></Summary>
              <Parameters>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The new width]]></Summary>
                </Param>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The new height]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setValue">
              <Summary><![CDATA[Sets the data value of the editor]]></Summary>
              <Parameters>
                <Param Name="value" Type="Mixed">
                  <Summary><![CDATA[Any valid value supported by the underlying field]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="startEdit">
              <Summary><![CDATA[Starts the editing process and shows the editor.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The element to edit]]></Summary>
                </Param>
                <Param Name="value" Type="String" Optional="true">
                  <Summary><![CDATA[A value to initialize the editor with. If a value is not provided, it defaults
to the innerHTML of el.]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="beforecomplete">
              <Summary><![CDATA[Fires after a change has been made to the field, but before the change is reflected in the underlying field. Saving the change to the field can be canceled by returning false from the handler of this event. Note that if the value has not changed and ignoreNoChange = true, the editing will still end but this event will not fire since no edit actually occurred.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Editor">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="value" Type="Mixed">
                  <Summary><![CDATA[The current field value]]></Summary>
                </Param>
                <Param Name="startValue" Type="Mixed">
                  <Summary><![CDATA[The original field value]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforestartedit">
              <Summary><![CDATA[Fires when editing is initiated, but before the value changes. Editing can be canceled by returning false from the handler of this event.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Editor">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="boundEl" Type="Ext.Element">
                  <Summary><![CDATA[The underlying element bound to this editor]]></Summary>
                </Param>
                <Param Name="value" Type="Mixed">
                  <Summary><![CDATA[The field value being set]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="canceledit">
              <Summary><![CDATA[Fires after editing has been canceled and the editor's value has been reset.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Editor">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="value" Type="Mixed">
                  <Summary><![CDATA[The user-entered field value that was discarded]]></Summary>
                </Param>
                <Param Name="startValue" Type="Mixed">
                  <Summary><![CDATA[The original field value that was set back into the editor after cancel]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="complete">
              <Summary><![CDATA[Fires after editing is complete and any changed value has been written to the underlying field.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Editor">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="value" Type="Mixed">
                  <Summary><![CDATA[The current field value]]></Summary>
                </Param>
                <Param Name="startValue" Type="Mixed">
                  <Summary><![CDATA[The original field value]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="specialkey">
              <Summary><![CDATA[Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check {@link Ext.EventObject#getKey} to determine which key was pressed.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.form.Field">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The event object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="startedit">
              <Summary><![CDATA[Fires when this editor is displayed.]]></Summary>
              <Parameters>
                <Param Name="boundEl" Type="Ext.Element">
                  <Summary><![CDATA[The underlying element bound to this editor]]></Summary>
                </Param>
                <Param Name="value" Type="Mixed">
                  <Summary><![CDATA[The starting field value]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Element" FullName="Ext.Element" Package="Ext" DefinedIn="core\core\Element.fx.js,core\core\Element.insertion.js,core\core\Element.js,core\core\Element.position.js,core\core\Element.scroll.js,core\core\Element.style.js,core\core\Element.traversal.js,core\Element-more.js,core\Element.alignment.js,core\Element.dd.js,core\Element.fx-more.js,core\Element.insertion-more.js,core\Element.keys.js,core\Element.legacy.js,core\Element.position-more.js,core\Element.scroll-more.js,core\Element.style-more.js" Subclasses="Ext.Layer">
          <Summary><![CDATA[

<p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.</p>
<p>All instances of this class inherit the methods of {@link Ext.Fx} making visual effects easily available to all DOM elements.</p>
<p>Note that the events documented in this class are not Ext events, they encapsulate browser events. To
access the underlying browser event, see {@link Ext.EventObject#browserEvent}. Some older
browsers may not support the full range of events. Which events are supported is beyond the control of ExtJs.</p>
Usage:<br>
<pre><code>
// by id
var el = Ext.get("my-div");

// by DOM element reference
var el = Ext.get(myDivElement);
</code></pre>
<b>Animations</b><br />
<p>When an element is manipulated, by default there is no animation.</p>
<pre><code>
var el = Ext.get("my-div");

// no animation
el.setWidth(100);
</code></pre>
<p>Many of the functions for manipulating an element have an optional "animate" parameter.  This
parameter can be specified as boolean (<tt>true</tt>) for default animation effects.</p>
<pre><code>
// default animation
el.setWidth(100, true);
</code></pre>

<p>To configure the effects, an object literal with animation options to use as the Element animation
configuration object can also be specified. Note that the supported Element animation configuration
options are a subset of the {@link Ext.Fx} animation options specific to Fx effects.  The supported
Element animation configuration options are:</p>
<pre>
Option    Default   Description
--------- --------  ---------------------------------------------
{@link Ext.Fx#duration duration}  .35       The duration of the animation in seconds
{@link Ext.Fx#easing easing}    easeOut   The easing method
{@link Ext.Fx#callback callback}  none      A function to execute when the anim completes
{@link Ext.Fx#scope scope}     this      The scope (this) of the callback function
</pre>

<pre><code>
// Element animation options object
var opt = {
   {@link Ext.Fx#duration duration}: 1,
   {@link Ext.Fx#easing easing}: 'elasticIn',
   {@link Ext.Fx#callback callback}: this.foo,
   {@link Ext.Fx#scope scope}: this
};
// animation with some options set
el.setWidth(100, opt);
</code></pre>
<p>The Element animation object being used for the animation will be set on the options
object as "anim", which allows you to stop or manipulate the animation. Here is an example:</p>
<pre><code>
// using the "anim" property to get the Anim object
if (opt.anim.isAnimated()) {
    opt.anim.stop();
}
</code></pre>
<p>Also see the <tt>{@link #animate}</tt> method for another animation technique.</p>
<p><b> Composite (Collections of) Elements</b></p>
<p>For working with collections of Elements, see {@link Ext.CompositeElement}</p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="element" Type="String/HTMLElement" />
              <Param Name="forceNew" Type="Boolean" Optional="true">
                <Summary><![CDATA[By default the constructor checks to see if there is already an instance of this element in the cache and if there is it returns the same instance. This will skip that check (useful for extending this class).]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties>
            <Property Name="DISPLAY" Static="true">
              <Summary><![CDATA[Visibility mode constant for use with {@link #setVisibilityMode}. Use display to hide element]]></Summary>
            </Property>
            <Property Name="VISIBILITY" Static="true">
              <Summary><![CDATA[Visibility mode constant for use with {@link #setVisibilityMode}. Use visibility to hide element]]></Summary>
            </Property>
            <Property Name="autoBoxAdjust">
              <Summary><![CDATA[true to automatically adjust width and height settings for box-model issues (default to true)]]></Summary>
            </Property>
            <Property Name="dom">
              <Summary><![CDATA[The DOM element]]></Summary>
            </Property>
            <Property Name="id">
              <Summary><![CDATA[The DOM element ID]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="animate">
              <Summary><![CDATA[Perform custom animation on this element.
<div><ul class="mdetail-params">
<li><u>Animation Properties</u></li>

<p>The Animation Control Object enables gradual transitions for any member of an
element's style object that takes a numeric value including but not limited to
these properties:</p><div><ul class="mdetail-params">
<li><tt>bottom, top, left, right</tt></li>
<li><tt>height, width</tt></li>
<li><tt>margin, padding</tt></li>
<li><tt>borderWidth</tt></li>
<li><tt>opacity</tt></li>
<li><tt>fontSize</tt></li>
<li><tt>lineHeight</tt></li>
</ul></div>


<li><u>Animation Property Attributes</u></li>

<p>Each Animation Property is a config object with optional properties:</p>
<div><ul class="mdetail-params">
<li><tt>by</tt>*  : relative change - start at current value, change by this value</li>
<li><tt>from</tt> : ignore current value, start from this value</li>
<li><tt>to</tt>*  : start at current value, go to this value</li>
<li><tt>unit</tt> : any allowable unit specification</li>
<p>* do not specify both <tt>to</tt> and <tt>by</tt> for an animation property</p>
</ul></div>

<li><u>Animation Types</u></li>

<p>The supported animation types:</p><div><ul class="mdetail-params">
<li><tt>'run'</tt> : Default
<pre><code>
var el = Ext.get('complexEl');
el.animate(
    // animation control object
   {
        borderWidth: {to: 3, from: 0},
        opacity: {to: .3, from: 1},
        height: {to: 50, from: el.getHeight()},
        width: {to: 300, from: el.getWidth()},
        top  : {by: - 100, unit: 'px'},
    },
    0.35,      // animation duration
    null,      // callback
    'easeOut', // easing method
    'run'      // animation type ('run','color','motion','scroll')    
);
</code></pre>
</li>
<li><tt>'color'</tt>
<p>Animates transition of background, text, or border colors.</p>
<pre><code>
el.animate(
    // animation control object
   {
        color: { to: '#06e' },
        backgroundColor: { to: '#e06' }
    },
    0.35,      // animation duration
    null,      // callback
    'easeOut', // easing method
    'color'    // animation type ('run','color','motion','scroll')    
);
</code></pre>
</li>

<li><tt>'motion'</tt>
<p>Animates the motion of an element to/from specific points using optional bezier
way points during transit.</p>
<pre><code>
el.animate(
    // animation control object
   {
        borderWidth: {to: 3, from: 0},
        opacity: {to: .3, from: 1},
        height: {to: 50, from: el.getHeight()},
        width: {to: 300, from: el.getWidth()},
        top  : {by: - 100, unit: 'px'},
        points: {
            to: [50, 100],  // go to this point
            control: [      // optional bezier way points
                [ 600, 800],
                [-100, 200]
            ]
        }
    },
    3000,      // animation duration (milliseconds!)
    null,      // callback
    'easeOut', // easing method
    'motion'   // animation type ('run','color','motion','scroll')    
);
</code></pre>
</li>
<li><tt>'scroll'</tt>
<p>Animate horizontal or vertical scrolling of an overflowing page element.</p>
<pre><code>
el.animate(
    // animation control object
   {
        scroll: {to: [400, 300]}
    },
    0.35,      // animation duration
    null,      // callback
    'easeOut', // easing method
    'scroll'   // animation type ('run','color','motion','scroll')    
);
</code></pre>
</li>
</ul></div>

</ul></div>]]></Summary>
              <Parameters>
                <Param Name="args" Type="Object">
                  <Summary><![CDATA[The animation control args]]></Summary>
                </Param>
                <Param Name="duration" Type="Float" Optional="true">
                  <Summary><![CDATA[How long the animation lasts in seconds (defaults to <tt>.35</tt>)]]></Summary>
                </Param>
                <Param Name="onComplete" Type="Function" Optional="true">
                  <Summary><![CDATA[Function to call when animation completes]]></Summary>
                </Param>
                <Param Name="easing" Type="String" Optional="true">
                  <Summary><![CDATA[{@link Ext.Fx#easing} method to use (defaults to <tt>'easeOut'</tt>)]]></Summary>
                </Param>
                <Param Name="animType" Type="String" Optional="true">
                  <Summary><![CDATA[<tt>'run'</tt> is the default. Can also be <tt>'color'</tt>,
<tt>'motion'</tt>, or <tt>'scroll'</tt>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="hide">
              <Summary><![CDATA[Hide this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="isVisible">
              <Summary><![CDATA[Checks whether the element is currently visible using both visibility and display properties.]]></Summary>
              <Parameters />
              <Return Type="Boolean">
                <Summary><![CDATA[True if the element is currently visible, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="setDisplayed">
              <Summary><![CDATA[Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.]]></Summary>
              <Parameters>
                <Param Name="value" Type="Mixed">
                  <Summary><![CDATA[Boolean value to display the element using its default display, or a string to set the display directly.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setVisibilityMode">
              <Summary><![CDATA[Sets the element's visibility mode. When setVisible() is called it
will use this to determine whether to set the visibility or the display property.]]></Summary>
              <Parameters>
                <Param Name="visMode" Type="Number">
                  <Summary><![CDATA[Ext.Element.VISIBILITY or Ext.Element.DISPLAY]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setVisible">
              <Summary><![CDATA[Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use
the display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.]]></Summary>
              <Parameters>
                <Param Name="visible" Type="Boolean">
                  <Summary><![CDATA[Whether the element is visible]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation, or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Show this element - Uses display mode to determine whether to use "display" or "visibility". See {@link #setVisible}.]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="toggle">
              <Summary><![CDATA[Toggles the element's visibility or display, depending on visibility mode.]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation, or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="appendChild">
              <Summary><![CDATA[Appends the passed element(s) to this element]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement/Array/Element/CompositeElement" />
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="appendTo">
              <Summary><![CDATA[Appends this element to the passed element]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The new parent element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="createChild">
              <Summary><![CDATA[Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be
automatically generated with the specified attributes.]]></Summary>
                </Param>
                <Param Name="insertBefore" Type="HTMLElement" Optional="true">
                  <Summary><![CDATA[a child element of this element]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return the dom node instead of creating an Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The new child element]]></Summary>
              </Return>
            </Method>
            <Method Name="insertAfter">
              <Summary><![CDATA[Inserts this element after the passed element in the DOM]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The element to insert after]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="insertBefore">
              <Summary><![CDATA[Inserts this element before the passed element in the DOM]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The element before which this element will be inserted]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="insertFirst">
              <Summary><![CDATA[Inserts (or creates) an element (or DomHelper config) as the first child of this element]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed/Object">
                  <Summary><![CDATA[The id or element to insert or a DomHelper config to create and insert]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The new child]]></Summary>
              </Return>
            </Method>
            <Method Name="insertHtml">
              <Summary><![CDATA[Inserts an html fragment into this element]]></Summary>
              <Parameters>
                <Param Name="where" Type="String">
                  <Summary><![CDATA[Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd.]]></Summary>
                </Param>
                <Param Name="html" Type="String">
                  <Summary><![CDATA[The HTML fragment]]></Summary>
                </Param>
                <Param Name="returnEl" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return an Ext.Element (defaults to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The inserted node (or nearest related if more than 1 inserted)]]></Summary>
              </Return>
            </Method>
            <Method Name="replace">
              <Summary><![CDATA[Replaces the passed element with this element]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The element to replace]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="replaceWith">
              <Summary><![CDATA[Replaces this element with the passed element]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed/Object">
                  <Summary><![CDATA[The new element or a DomHelper config of an element to create]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="wrap">
              <Summary><![CDATA[Creates and wraps this element with another element]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object" Optional="true">
                  <Summary><![CDATA[DomHelper element config object for the wrapper element or null for an empty div]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return the raw DOM element instead of Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Element">
                <Summary><![CDATA[The newly created wrapper element]]></Summary>
              </Return>
            </Method>
            <Method Name="addListener">
              <Summary><![CDATA[Appends an event handler to this element.  The shorthand version {@link #on} is equivalent.]]></Summary>
              <Parameters>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[The type of event to handle]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The handler function the event invokes. This function is passed
the following parameters:<ul>
<li><b>evt</b> : EventObject<div class="sub-desc">The {@link Ext.EventObject EventObject} describing the event.</div></li>
<li><b>el</b> : HtmlElement<div class="sub-desc">The DOM element which was the target of the event.
Note that this may be filtered by using the <tt>delegate</tt> option.</div></li>
<li><b>o</b> : Object<div class="sub-desc">The options object from the addListener call.</div></li>
</ul>]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope (<code><b>this</b></code> reference) in which the handler function is executed.
<b>If omitted, defaults to this Element.</b>.]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[An object containing handler configuration properties.
This may contain any of the following properties:<ul>
<li><b>scope</b> Object : <div class="sub-desc">The scope (<code><b>this</b></code> reference) in which the handler function is executed.
<b>If omitted, defaults to this Element.</b></div></li>
<li><b>delegate</b> String: <div class="sub-desc">A simple selector to filter the target or look for a descendant of the target. See below for additional details.</div></li>
<li><b>stopEvent</b> Boolean: <div class="sub-desc">True to stop the event. That is stop propagation, and prevent the default action.</div></li>
<li><b>preventDefault</b> Boolean: <div class="sub-desc">True to prevent the default action</div></li>
<li><b>stopPropagation</b> Boolean: <div class="sub-desc">True to prevent event propagation</div></li>
<li><b>normalized</b> Boolean: <div class="sub-desc">False to pass a browser event to the handler function instead of an Ext.EventObject</div></li>
<li><b>target</b> Ext.Element: <div class="sub-desc">Only call the handler if the event was fired on the target Element, <i>not</i> if the event was bubbled up from a child node.</div></li>
<li><b>delay</b> Number: <div class="sub-desc">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>
<li><b>single</b> Boolean: <div class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
<li><b>buffer</b> Number: <div class="sub-desc">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
</ul><br>
<p>
<b>Combining Options</b><br>
In the following examples, the shorthand form {@link #on} is used rather than the more verbose
addListener.  The two are equivalent.  Using the options argument, it is possible to combine different
types of listeners:<br>
<br>
A delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the
options object. The options object is available as the third parameter in the handler function.<div style="margin: 5px 20px 20px;">
Code:<pre><code>
el.on('click', this.onClick, this, {
single: true,
delay: 100,
stopEvent : true,
forumId: 4
});</code></pre></p>
<p>
<b>Attaching multiple handlers in 1 call</b><br>
The method also allows for a single argument to be passed which is a config object containing properties
which specify multiple handlers.</p>
<p>
Code:<pre><code>
el.on({
'click' : {
fn: this.onClick,
scope: this,
delay: 100
},
'mouseover' : {
fn: this.onMouseOver,
scope: this
},
'mouseout' : {
fn: this.onMouseOut,
scope: this
}
});</code></pre>
<p>
Or a shorthand syntax:<br>
Code:<pre><code></p>
el.on({
'click' : this.onClick,
'mouseover' : this.onMouseOver,
'mouseout' : this.onMouseOut,
scope: this
});
</code></pre></p>
<p><b>delegate</b></p>
<p>This is a configuration option that you can pass along when registering a handler for
an event to assist with event delegation. Event delegation is a technique that is used to
reduce memory consumption and prevent exposure to memory-leaks. By registering an event
for a container element as opposed to each element within a container. By setting this
configuration option to a simple selector, the target element will be filtered to look for
a descendant of the target.
For example:<pre><code>
// using this markup:
&lt;div id='elId'>
&lt;p id='p1'>paragraph one&lt;/p>
&lt;p id='p2' class='clickable'>paragraph two&lt;/p>
&lt;p id='p3'>paragraph three&lt;/p>
&lt;/div>
// utilize event delegation to registering just one handler on the container element:
el = Ext.get('elId');
el.on(
'click',
function (e,t) {
// handle click
console.info(t.id); // 'p2'
},
this,
{
// filter the target element to be a descendant with the class 'clickable'
delegate: '.clickable'
}
);
</code></pre></p>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="blur">
              <Summary><![CDATA[Tries to blur the element. Any exceptions are caught and ignored.]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="contains">
              <Summary><![CDATA[Returns true if this element is an ancestor of the passed element]]></Summary>
              <Parameters>
                <Param Name="el" Type="HTMLElement/String">
                  <Summary><![CDATA[The element to check]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[True if this element is an ancestor of el, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="fly">
              <Summary><![CDATA[<p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -
the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>
<p>Use this to make one-time references to DOM elements which are not going to be accessed again either by
application code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}
will be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[The dom node or id]]></Summary>
                </Param>
                <Param Name="named" Type="String" Optional="true">
                  <Summary><![CDATA[Allows for creation of named reusable flyweights to prevent conflicts
(e.g. internally Ext uses "_global")
@member Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Element">
                <Summary><![CDATA[The shared Element object (or null if no matching element was found)]]></Summary>
              </Return>
            </Method>
            <Method Name="focus">
              <Summary><![CDATA[Tries to focus the element. Any exceptions are caught and ignored.]]></Summary>
              <Parameters>
                <Param Name="defer" Type="Number" Optional="true">
                  <Summary><![CDATA[Milliseconds to defer the focus]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="get">
              <Summary><![CDATA[Retrieves Ext.Element objects.
<p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method
retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by
its ID, use {@link Ext.ComponentMgr#get}.</p>
<p>Uses simple caching to consistently return the same object. Automatically fixes if an
object was recreated with the same id via AJAX or DOM.</p>]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The id of the node, a DOM Node or an existing Element.
@static
@member Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Element">
                <Summary><![CDATA[The Element object (or null if no matching element was found)]]></Summary>
              </Return>
            </Method>
            <Method Name="getAttribute">
              <Summary><![CDATA[Returns the value of an attribute from the element's underlying DOM node.]]></Summary>
              <Parameters>
                <Param Name="name" Type="String">
                  <Summary><![CDATA[The attribute name]]></Summary>
                </Param>
                <Param Name="namespace" Type="String" Optional="true">
                  <Summary><![CDATA[The namespace in which to look for the attribute]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String">
                <Summary><![CDATA[The attribute value]]></Summary>
              </Return>
            </Method>
            <Method Name="getAttributeNS">
              <Summary><![CDATA[Returns the value of a namespaced attribute from the element's underlying DOM node.]]></Summary>
              <Parameters>
                <Param Name="namespace" Type="String">
                  <Summary><![CDATA[The namespace in which to look for the attribute]]></Summary>
                </Param>
                <Param Name="name" Type="String">
                  <Summary><![CDATA[The attribute name
@deprecated]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String">
                <Summary><![CDATA[The attribute value]]></Summary>
              </Return>
            </Method>
            <Method Name="getValue">
              <Summary><![CDATA[Returns the value of the "value" attribute]]></Summary>
              <Parameters>
                <Param Name="asNumber" Type="Boolean">
                  <Summary><![CDATA[true to parse the value as a number]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String/Number" />
            </Method>
            <Method Name="hover">
              <Summary><![CDATA[Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.]]></Summary>
              <Parameters>
                <Param Name="overFn" Type="Function">
                  <Summary><![CDATA[The function to call when the mouse enters the Element.]]></Summary>
                </Param>
                <Param Name="outFn" Type="Function">
                  <Summary><![CDATA[The function to call when the mouse leaves the Element.]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope (<tt>this</tt> reference) in which the functions are executed. Defaults to the Element's DOM element.]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Options for the listener. See {@link Ext.util.Observable#addListener the <tt>options</tt> parameter}.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="is">
              <Summary><![CDATA[Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The simple selector to test]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[True if this element matches the selector, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="isBorderBox">
              <Summary><![CDATA[Tests various css rules/browsers to determine if this element uses a border box]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="load">
              <Summary><![CDATA[<p>Updates the <a href="http://developer.mozilla.org/en/DOM/element.innerHTML">innerHTML</a> of this Element
from a specified URL. Note that this is subject to the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">Same Origin Policy</a></p>
<p>Updating innerHTML of an element will <b>not</b> execute embedded <tt>&lt;script></tt> elements. This is a browser restriction.</p>]]></Summary>
              <Parameters>
                <Param Name="options." Type="Mixed">
                  <Summary><![CDATA[Either a sring containing the URL from which to load the HTML, or an {@link Ext.Ajax#request} options object specifying
exactly how to request the HTML.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="on">
              <Summary><![CDATA[Appends an event handler (shorthand for {@link #addListener}).]]></Summary>
              <Parameters>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[The type of event to handle]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The handler function the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope (this element) of the handler function]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[An object containing standard {@link #addListener} options
@member Ext.Element]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="remove">
              <Summary><![CDATA[Removes this element from the DOM and deletes it from the cache]]></Summary>
              <Parameters />
            </Method>
            <Method Name="removeAllListeners">
              <Summary><![CDATA[Removes all previous added listeners from this element]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="removeListener">
              <Summary><![CDATA[Removes an event handler from this element.  The shorthand version {@link #un} is equivalent.
<b>Note</b>: if a <i>scope</i> was explicitly specified when {@link #addListener adding} the
listener, the same scope must be specified here.
Example:
<pre><code>
el.removeListener('click', this.handlerFn);
// or
el.un('click', this.handlerFn);
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[the type of event to remove]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[the method the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope (The <tt>this</tt> reference) of the handler function. Defaults
to this Element.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="set">
              <Summary><![CDATA[Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)]]></Summary>
              <Parameters>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The object with the attributes]]></Summary>
                </Param>
                <Param Name="useSet" Type="Boolean" Optional="true">
                  <Summary><![CDATA[false to override the default setAttribute to use expandos.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="un">
              <Summary><![CDATA[Removes an event handler from this element (see {@link #removeListener} for additional notes).]]></Summary>
              <Parameters>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[the type of event to remove]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[the method the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope (The <tt>this</tt> reference) of the handler function. Defaults
to this Element.
@member Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="update">
              <Summary><![CDATA[Update the innerHTML of this element]]></Summary>
              <Parameters>
                <Param Name="html" Type="String">
                  <Summary><![CDATA[The new HTML]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="clearPositioning">
              <Summary><![CDATA[Clear positioning back to the default when the document was loaded]]></Summary>
              <Parameters>
                <Param Name="value" Type="String" Optional="true">
                  <Summary><![CDATA[The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getBottom">
              <Summary><![CDATA[Gets the bottom Y coordinate of the element (element Y position + element height)]]></Summary>
              <Parameters>
                <Param Name="local" Type="Boolean">
                  <Summary><![CDATA[True to get the local css position instead of page coordinate]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number" />
            </Method>
            <Method Name="getLeft">
              <Summary><![CDATA[Gets the left X coordinate]]></Summary>
              <Parameters>
                <Param Name="local" Type="Boolean">
                  <Summary><![CDATA[True to get the local css position instead of page coordinate]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number" />
            </Method>
            <Method Name="getOffsetsTo">
              <Summary><![CDATA[Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.]]></Summary>
              <Parameters>
                <Param Name="element" Type="Mixed">
                  <Summary><![CDATA[The element to get the offsets from.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[The XY page offsets (e.g. [100, -200])]]></Summary>
              </Return>
            </Method>
            <Method Name="getPositioning">
              <Summary><![CDATA[Gets an object with all CSS positioning properties. Useful along with setPostioning to get
snapshot before performing an update and then restoring the element.]]></Summary>
              <Parameters />
              <Return Type="Object" />
            </Method>
            <Method Name="getRight">
              <Summary><![CDATA[Gets the right X coordinate of the element (element X position + element width)]]></Summary>
              <Parameters>
                <Param Name="local" Type="Boolean">
                  <Summary><![CDATA[True to get the local css position instead of page coordinate]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number" />
            </Method>
            <Method Name="getTop">
              <Summary><![CDATA[Gets the top Y coordinate]]></Summary>
              <Parameters>
                <Param Name="local" Type="Boolean">
                  <Summary><![CDATA[True to get the local css position instead of page coordinate]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number" />
            </Method>
            <Method Name="getX">
              <Summary><![CDATA[Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The X position of the element]]></Summary>
              </Return>
            </Method>
            <Method Name="getXY">
              <Summary><![CDATA[Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters />
              <Return Type="Array">
                <Summary><![CDATA[The XY position of the element]]></Summary>
              </Return>
            </Method>
            <Method Name="getY">
              <Summary><![CDATA[Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The Y position of the element]]></Summary>
              </Return>
            </Method>
            <Method Name="moveTo">
              <Summary><![CDATA[Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters>
                <Param Name="x" Type="Number">
                  <Summary><![CDATA[X value for new position (coordinates are page-based)]]></Summary>
                </Param>
                <Param Name="y" Type="Number">
                  <Summary><![CDATA[Y value for new position (coordinates are page-based)]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation, or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="position">
              <Summary><![CDATA[Initializes positioning on this element. If a desired position is not passed, it will make the
the element positioned relative IF it is not already positioned.]]></Summary>
              <Parameters>
                <Param Name="pos" Type="String" Optional="true">
                  <Summary><![CDATA[Positioning to use "relative", "absolute" or "fixed"]]></Summary>
                </Param>
                <Param Name="zIndex" Type="Number" Optional="true">
                  <Summary><![CDATA[The zIndex to apply]]></Summary>
                </Param>
                <Param Name="x" Type="Number" Optional="true">
                  <Summary><![CDATA[Set the page X position]]></Summary>
                </Param>
                <Param Name="y" Type="Number" Optional="true">
                  <Summary><![CDATA[Set the page Y position]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setBottom">
              <Summary><![CDATA[Sets the element's CSS bottom style.]]></Summary>
              <Parameters>
                <Param Name="bottom" Type="String">
                  <Summary><![CDATA[The bottom CSS property value]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setLeft">
              <Summary><![CDATA[Sets the element's left position directly using CSS style (instead of {@link #setX}).]]></Summary>
              <Parameters>
                <Param Name="left" Type="String">
                  <Summary><![CDATA[The left CSS property value]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setLocation">
              <Summary><![CDATA[Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters>
                <Param Name="x" Type="Number">
                  <Summary><![CDATA[X value for new position (coordinates are page-based)]]></Summary>
                </Param>
                <Param Name="y" Type="Number">
                  <Summary><![CDATA[Y value for new position (coordinates are page-based)]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation, or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setPositioning">
              <Summary><![CDATA[Set positioning with an object returned by getPositioning().]]></Summary>
              <Parameters>
                <Param Name="posCfg" Type="Object" />
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setRight">
              <Summary><![CDATA[Sets the element's CSS right style.]]></Summary>
              <Parameters>
                <Param Name="right" Type="String">
                  <Summary><![CDATA[The right CSS property value]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setTop">
              <Summary><![CDATA[Sets the element's top position directly using CSS style (instead of {@link #setY}).]]></Summary>
              <Parameters>
                <Param Name="top" Type="String">
                  <Summary><![CDATA[The top CSS property value]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setX">
              <Summary><![CDATA[Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation, or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setXY">
              <Summary><![CDATA[Sets the position of the element in page coordinates, regardless of how the element is positioned.
The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters>
                <Param Name="pos" Type="Array">
                  <Summary><![CDATA[Contains X & Y [x, y] values for new position (coordinates are page-based)]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation, or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setY">
              <Summary><![CDATA[Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation, or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="translatePoints">
              <Summary><![CDATA[Translates the passed page coordinates into left/top css values for this element]]></Summary>
              <Parameters>
                <Param Name="x" Type="Number/Array">
                  <Summary><![CDATA[The page x or an array containing [x, y]]]></Summary>
                </Param>
                <Param Name="y" Type="Number" Optional="true">
                  <Summary><![CDATA[The page y, required if x is not an array]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Object} An object with left and top properties. e.g. {left: (value), top: (value)" />
            </Method>
            <Method Name="getScroll">
              <Summary><![CDATA[Returns the current scroll position of the element.]]></Summary>
              <Parameters />
              <Return Type="Object} An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)" />
            </Method>
            <Method Name="isScrollable">
              <Summary><![CDATA[Returns true if this element is scrollable.]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="scrollTo">
              <Summary><![CDATA[Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().]]></Summary>
              <Parameters>
                <Param Name="side" Type="String">
                  <Summary><![CDATA[Either "left" for scrollLeft values or "top" for scrollTop values.]]></Summary>
                </Param>
                <Param Name="value" Type="Number">
                  <Summary><![CDATA[The new scroll value.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="addClass">
              <Summary><![CDATA[Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.]]></Summary>
              <Parameters>
                <Param Name="className" Type="String/Array">
                  <Summary><![CDATA[The CSS class to add, or an array of classes]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="clearOpacity">
              <Summary><![CDATA[Clears any opacity settings from this element. Required in some cases for IE.]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="clip">
              <Summary><![CDATA[Store the current overflow setting and clip overflow on the element - use <tt>{@link #unclip}</tt> to remove]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getBorderWidth">
              <Summary><![CDATA[Gets the width of the border(s) for the specified side(s)]]></Summary>
              <Parameters>
                <Param Name="side" Type="String">
                  <Summary><![CDATA[Can be t, l, r, b or any combination of those to add multiple values. For example,
passing <tt>'lr'</tt> would get the border <b><u>l</u></b>eft width + the border <b><u>r</u></b>ight width.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number">
                <Summary><![CDATA[The width of the sides passed added together]]></Summary>
              </Return>
            </Method>
            <Method Name="getColor">
              <Summary><![CDATA[Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values
are convert to standard 6 digit hex color.]]></Summary>
              <Parameters>
                <Param Name="attr" Type="String">
                  <Summary><![CDATA[The css attribute]]></Summary>
                </Param>
                <Param Name="defaultValue" Type="String">
                  <Summary><![CDATA[The default value to use when a valid color isn't found]]></Summary>
                </Param>
                <Param Name="prefix" Type="String" Optional="true">
                  <Summary><![CDATA[defaults to #. Use an empty string when working with
color anims.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getHeight">
              <Summary><![CDATA[Returns the offset height of the element]]></Summary>
              <Parameters>
                <Param Name="contentHeight" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to get the height minus borders and padding]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number">
                <Summary><![CDATA[The element's height]]></Summary>
              </Return>
            </Method>
            <Method Name="getPadding">
              <Summary><![CDATA[Gets the width of the padding(s) for the specified side(s)]]></Summary>
              <Parameters>
                <Param Name="side" Type="String">
                  <Summary><![CDATA[Can be t, l, r, b or any combination of those to add multiple values. For example,
passing <tt>'lr'</tt> would get the padding <b><u>l</u></b>eft + the padding <b><u>r</u></b>ight.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number">
                <Summary><![CDATA[The padding of the sides passed added together]]></Summary>
              </Return>
            </Method>
            <Method Name="getStyle">
              <Summary><![CDATA[Normalizes currentStyle and computedStyle.]]></Summary>
              <Parameters>
                <Param Name="property" Type="String">
                  <Summary><![CDATA[The style property whose value is returned.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String">
                <Summary><![CDATA[The current value of the style property for this element.]]></Summary>
              </Return>
            </Method>
            <Method Name="getWidth">
              <Summary><![CDATA[Returns the offset width of the element]]></Summary>
              <Parameters>
                <Param Name="contentWidth" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to get the width minus borders and padding]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Number">
                <Summary><![CDATA[The element's width]]></Summary>
              </Return>
            </Method>
            <Method Name="hasClass">
              <Summary><![CDATA[Checks if the specified CSS class exists on this element's DOM node.]]></Summary>
              <Parameters>
                <Param Name="className" Type="String">
                  <Summary><![CDATA[The CSS class to check for]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[True if the class exists, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="radioClass">
              <Summary><![CDATA[Adds one or more CSS classes to this element and removes the same class(es) from all siblings.]]></Summary>
              <Parameters>
                <Param Name="className" Type="String/Array">
                  <Summary><![CDATA[The CSS class to add, or an array of classes]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="removeClass">
              <Summary><![CDATA[Removes one or more CSS classes from the element.]]></Summary>
              <Parameters>
                <Param Name="className" Type="String/Array">
                  <Summary><![CDATA[The CSS class to remove, or an array of classes]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="replaceClass">
              <Summary><![CDATA[Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.]]></Summary>
              <Parameters>
                <Param Name="oldClassName" Type="String">
                  <Summary><![CDATA[The CSS class to replace]]></Summary>
                </Param>
                <Param Name="newClassName" Type="String">
                  <Summary><![CDATA[The replacement CSS class]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setHeight">
              <Summary><![CDATA[Set the height of this Element.
<pre><code>
// change the height to 200px and animate with default configuration
Ext.fly('elementId').setHeight(200, true);

// change the height to 150px and animate with a custom configuration
Ext.fly('elId').setHeight(150, {
    duration : .5, // animation will have a duration of .5 seconds
    // will change the content to "finished"
    callback: function () { this.{@link #update}("finished"); } 
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="height" Type="Mixed">
                  <Summary><![CDATA[The new height. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels.)</li>
<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
</ul></div>]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setOpacity">
              <Summary><![CDATA[Set the opacity of the element]]></Summary>
              <Parameters>
                <Param Name="opacity" Type="Float">
                  <Summary><![CDATA[The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[a standard Element animation config object or <tt>true</tt> for
the default animation (<tt>{duration: .35, easing: 'easeIn'}</tt>)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setStyle">
              <Summary><![CDATA[Wrapper for setting style properties, also takes single object parameter of multiple styles.]]></Summary>
              <Parameters>
                <Param Name="property" Type="String/Object">
                  <Summary><![CDATA[The style property to be set, or an object of multiple styles.]]></Summary>
                </Param>
                <Param Name="value" Type="String" Optional="true">
                  <Summary><![CDATA[The value to apply to the given property, or null if an object was passed.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setWidth">
              <Summary><![CDATA[Set the width of this Element.]]></Summary>
              <Parameters>
                <Param Name="width" Type="Mixed">
                  <Summary><![CDATA[The new width. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels).</li>
<li>A String used to set the CSS width style. Animation may <b>not</b> be used.
</ul></div>]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="toggleClass">
              <Summary><![CDATA[Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).]]></Summary>
              <Parameters>
                <Param Name="className" Type="String">
                  <Summary><![CDATA[The CSS class to toggle]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="unclip">
              <Summary><![CDATA[Return clipping (overflow) to original clipping before <tt>{@link #clip}</tt> was called]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="child">
              <Summary><![CDATA[Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The CSS selector]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return the DOM node instead of Ext.Element (defaults to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The child Ext.Element (or DOM node if returnDom = true)]]></Summary>
              </Return>
            </Method>
            <Method Name="down">
              <Summary><![CDATA[Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The CSS selector]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return the DOM node instead of Ext.Element (defaults to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The child Ext.Element (or DOM node if returnDom = true)]]></Summary>
              </Return>
            </Method>
            <Method Name="findParent">
              <Summary><![CDATA[Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The simple selector to test]]></Summary>
                </Param>
                <Param Name="maxDepth" Type="Number/Mixed" Optional="true">
                  <Summary><![CDATA[The max depth to search as a number or element (defaults to 50 || document.body)]]></Summary>
                </Param>
                <Param Name="returnEl" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a Ext.Element object instead of DOM node]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement">
                <Summary><![CDATA[The matching DOM node (or null if no match was found)]]></Summary>
              </Return>
            </Method>
            <Method Name="findParentNode">
              <Summary><![CDATA[Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The simple selector to test]]></Summary>
                </Param>
                <Param Name="maxDepth" Type="Number/Mixed" Optional="true">
                  <Summary><![CDATA[The max depth to
search as a number or element (defaults to 10 || document.body)]]></Summary>
                </Param>
                <Param Name="returnEl" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a Ext.Element object instead of DOM node]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement">
                <Summary><![CDATA[The matching DOM node (or null if no match was found)]]></Summary>
              </Return>
            </Method>
            <Method Name="first">
              <Summary><![CDATA[Gets the first child, skipping text nodes]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String" Optional="true">
                  <Summary><![CDATA[Find the next sibling that matches the passed simple selector]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a raw dom node instead of an Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element/HTMLElement">
                <Summary><![CDATA[The first child or null]]></Summary>
              </Return>
            </Method>
            <Method Name="last">
              <Summary><![CDATA[Gets the last child, skipping text nodes]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String" Optional="true">
                  <Summary><![CDATA[Find the previous sibling that matches the passed simple selector]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a raw dom node instead of an Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element/HTMLElement">
                <Summary><![CDATA[The last child or null]]></Summary>
              </Return>
            </Method>
            <Method Name="next">
              <Summary><![CDATA[Gets the next sibling, skipping text nodes]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String" Optional="true">
                  <Summary><![CDATA[Find the next sibling that matches the passed simple selector]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a raw dom node instead of an Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element/HTMLElement">
                <Summary><![CDATA[The next sibling or null]]></Summary>
              </Return>
            </Method>
            <Method Name="parent">
              <Summary><![CDATA[Gets the parent node for this element, optionally chaining up trying to match a selector]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String" Optional="true">
                  <Summary><![CDATA[Find a parent node that matches the passed simple selector]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a raw dom node instead of an Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element/HTMLElement">
                <Summary><![CDATA[The parent node or null]]></Summary>
              </Return>
            </Method>
            <Method Name="prev">
              <Summary><![CDATA[Gets the previous sibling, skipping text nodes]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String" Optional="true">
                  <Summary><![CDATA[Find the previous sibling that matches the passed simple selector]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a raw dom node instead of an Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element/HTMLElement">
                <Summary><![CDATA[The previous sibling or null]]></Summary>
              </Return>
            </Method>
            <Method Name="query">
              <Summary><![CDATA[Selects child nodes based on the passed CSS selector (the selector should not contain an id).]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The CSS selector]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[An array of the matched nodes]]></Summary>
              </Return>
            </Method>
            <Method Name="select">
              <Summary><![CDATA[Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The CSS selector]]></Summary>
                </Param>
                <Param Name="unique" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to create a unique Ext.Element for each child (defaults to false, which creates a single shared flyweight object)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="CompositeElement/CompositeElementLite">
                <Summary><![CDATA[The composite element]]></Summary>
              </Return>
            </Method>
            <Method Name="up">
              <Summary><![CDATA[Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).
This is a shortcut for findParentNode() that always returns an Ext.Element.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String">
                  <Summary><![CDATA[The simple selector to test]]></Summary>
                </Param>
                <Param Name="maxDepth" Type="Number/Mixed" Optional="true">
                  <Summary><![CDATA[The max depth to
search as a number or element (defaults to 10 || document.body)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The matching DOM node (or null if no match was found)]]></Summary>
              </Return>
            </Method>
            <Method Name="clean">
              <Summary><![CDATA[Removes worthless text nodes]]></Summary>
              <Parameters>
                <Param Name="forceReclean" Type="Boolean" Optional="true">
                  <Summary><![CDATA[By default the element
keeps track if it has been cleaned already so
you can call this over and over. However, if you update the element and
need to force a reclean, you can pass true.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="createProxy">
              <Summary><![CDATA[Creates a proxy element of this element]]></Summary>
              <Parameters>
                <Param Name="config" Type="String/Object">
                  <Summary><![CDATA[The class name of the proxy element or a DomHelper config object]]></Summary>
                </Param>
                <Param Name="renderTo" Type="String/HTMLElement" Optional="true">
                  <Summary><![CDATA[The element or element id to render the proxy to (defaults to document.body)]]></Summary>
                </Param>
                <Param Name="matchBox" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to align and size the proxy to this element now (defaults to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The new proxy element]]></Summary>
              </Return>
            </Method>
            <Method Name="getUpdater">
              <Summary><![CDATA[Gets this element's {@link Ext.Updater Updater}]]></Summary>
              <Parameters />
              <Return Type="Ext.Updater">
                <Summary><![CDATA[The Updater]]></Summary>
              </Return>
            </Method>
            <Method Name="relayEvent">
              <Summary><![CDATA[Create an event handler on this element such that when the event fires and is handled by this element,
it will be relayed to another object (i.e., fired again as if it originated from that object instead).]]></Summary>
              <Parameters>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[The type of event to relay]]></Summary>
                </Param>
                <Param Name="object" Type="Object">
                  <Summary><![CDATA[Any object that extends {@link Ext.util.Observable} that will provide the context
for firing the relayed event]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="swallowEvent">
              <Summary><![CDATA[Stops the specified event(s) from bubbling and optionally prevents the default action]]></Summary>
              <Parameters>
                <Param Name="eventName" Type="String/Array">
                  <Summary><![CDATA[an event / array of events to stop from bubbling]]></Summary>
                </Param>
                <Param Name="preventDefault" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to prevent the default action too]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="alignTo">
              <Summary><![CDATA[Aligns this element with another element relative to the specified anchor points. If the other element is the
document it aligns it to the viewport.
The position parameter is optional, and can be specified in any one of the following formats:
<ul>
<li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner ("tl-bl").</li>
<li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.
The element being aligned will position its top-left corner (tl) to that point.  <i>This method has been
deprecated in favor of the newer two anchor syntax below</i>.</li>
<li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the
element's anchor point, and the second value is used as the target's anchor point.</li>
</ul>
In addition to the anchor points, the position parameter also supports the "?" character.  If "?" is passed at the end of
the position string, the element will attempt to align as specified, but the position will be adjusted to constrain to
the viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than
that specified in order to enforce the viewport constraints.
Following are all of the supported anchor positions:
<pre>
Value  Description
-----  -----------------------------
tl     The top left corner (default)
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
c      In the center of the element
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner
</pre>
Example Usage:
<pre><code>
// align el to other-el using the default positioning ("tl-bl", non-constrained)
el.alignTo("other-el");

// align the top left corner of el with the top right corner of other-el (constrained to viewport)
el.alignTo("other-el", "tr?");

// align the bottom right corner of el with the center left edge of other-el
el.alignTo("other-el", "br-l?");

// align the center of el with the bottom left corner of other-el and
// adjust the x position by -6 pixels (and the y position by 0)
el.alignTo("other-el", "c-bl", [-6, 0]);
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="element" Type="Mixed">
                  <Summary><![CDATA[The element to align to.]]></Summary>
                </Param>
                <Param Name="position" Type="String">
                  <Summary><![CDATA[The position to align to.]]></Summary>
                </Param>
                <Param Name="offsets" Type="Array" Optional="true">
                  <Summary><![CDATA[Offset the positioning by [x, y]]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="anchorTo">
              <Summary><![CDATA[Anchors an element to another element and realigns it when the window is resized.]]></Summary>
              <Parameters>
                <Param Name="element" Type="Mixed">
                  <Summary><![CDATA[The element to align to.]]></Summary>
                </Param>
                <Param Name="position" Type="String">
                  <Summary><![CDATA[The position to align to.]]></Summary>
                </Param>
                <Param Name="offsets" Type="Array" Optional="true">
                  <Summary><![CDATA[Offset the positioning by [x, y]]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[True for the default animation or a standard Element animation config object]]></Summary>
                </Param>
                <Param Name="monitorScroll" Type="Boolean/Number" Optional="true">
                  <Summary><![CDATA[True to monitor body scroll and reposition. If this parameter
is a number, it is used as the buffer delay (defaults to 50ms).]]></Summary>
                </Param>
                <Param Name="callback" Type="Function">
                  <Summary><![CDATA[The function to call after the animation finishes]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="center">
              <Summary><![CDATA[Centers the Element in either the viewport, or another Element.]]></Summary>
              <Parameters>
                <Param Name="centerIn" Type="Mixed" Optional="true">
                  <Summary><![CDATA[The element in which to center the element.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getAlignToXY">
              <Summary><![CDATA[Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the
supported position values.]]></Summary>
              <Parameters>
                <Param Name="element" Type="Mixed">
                  <Summary><![CDATA[The element to align to.]]></Summary>
                </Param>
                <Param Name="position" Type="String">
                  <Summary><![CDATA[The position to align to.]]></Summary>
                </Param>
                <Param Name="offsets" Type="Array" Optional="true">
                  <Summary><![CDATA[Offset the positioning by [x, y]]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[[x, y]]]></Summary>
              </Return>
            </Method>
            <Method Name="getAnchorXY">
              <Summary><![CDATA[Gets the x,y coordinates specified by the anchor position on the element.]]></Summary>
              <Parameters>
                <Param Name="anchor" Type="String" Optional="true">
                  <Summary><![CDATA[The specified anchor position (defaults to "c").  See {@link #alignTo}
for details on supported anchor positions.]]></Summary>
                </Param>
                <Param Name="local" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to get the local (element top/left-relative) anchor position instead
of page coordinates]]></Summary>
                </Param>
                <Param Name="size" Type="Object" Optional="true">
                  <Summary><![CDATA[An object containing the size to use for calculating anchor position
{width: (target width), height: (target height)} (defaults to the element's current size)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[[x, y] An array containing the element's x and y coordinates]]></Summary>
              </Return>
            </Method>
            <Method Name="getCenterXY">
              <Summary><![CDATA[Calculates the x, y to center this element on the screen]]></Summary>
              <Parameters />
              <Return Type="Array">
                <Summary><![CDATA[The x, y values [x, y]]]></Summary>
              </Return>
            </Method>
            <Method Name="initDD">
              <Summary><![CDATA[Initializes a {@link Ext.dd.DD} drag drop object for this element.]]></Summary>
              <Parameters>
                <Param Name="group" Type="String">
                  <Summary><![CDATA[The group the DD object is member of]]></Summary>
                </Param>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The DD config object]]></Summary>
                </Param>
                <Param Name="overrides" Type="Object">
                  <Summary><![CDATA[An object containing methods to override/implement on the DD object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.dd.DD">
                <Summary><![CDATA[The DD object]]></Summary>
              </Return>
            </Method>
            <Method Name="initDDProxy">
              <Summary><![CDATA[Initializes a {@link Ext.dd.DDProxy} object for this element.]]></Summary>
              <Parameters>
                <Param Name="group" Type="String">
                  <Summary><![CDATA[The group the DDProxy object is member of]]></Summary>
                </Param>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The DDProxy config object]]></Summary>
                </Param>
                <Param Name="overrides" Type="Object">
                  <Summary><![CDATA[An object containing methods to override/implement on the DDProxy object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.dd.DDProxy">
                <Summary><![CDATA[The DDProxy object]]></Summary>
              </Return>
            </Method>
            <Method Name="initDDTarget">
              <Summary><![CDATA[Initializes a {@link Ext.dd.DDTarget} object for this element.]]></Summary>
              <Parameters>
                <Param Name="group" Type="String">
                  <Summary><![CDATA[The group the DDTarget object is member of]]></Summary>
                </Param>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The DDTarget config object]]></Summary>
                </Param>
                <Param Name="overrides" Type="Object">
                  <Summary><![CDATA[An object containing methods to override/implement on the DDTarget object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.dd.DDTarget">
                <Summary><![CDATA[The DDTarget object]]></Summary>
              </Return>
            </Method>
            <Method Name="createShim">
              <Summary><![CDATA[Creates an iframe shim for this element to keep selects and other windowed objects from
showing through.]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[The new shim element]]></Summary>
              </Return>
            </Method>
            <Method Name="enableDisplayMode">
              <Summary><![CDATA[Convenience method for setVisibilityMode(Element.DISPLAY)]]></Summary>
              <Parameters>
                <Param Name="display" Type="String" Optional="true">
                  <Summary><![CDATA[What to set display to when visible]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="isDisplayed">
              <Summary><![CDATA[Returns true if display is not "none"]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="isMasked">
              <Summary><![CDATA[Returns true if this element is masked]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="mask">
              <Summary><![CDATA[Puts a mask over this element to disable user interaction. Requires core.css.
This method can only be applied to elements which accept child nodes.]]></Summary>
              <Parameters>
                <Param Name="msg" Type="String" Optional="true">
                  <Summary><![CDATA[A message to display in the mask]]></Summary>
                </Param>
                <Param Name="msgCls" Type="String" Optional="true">
                  <Summary><![CDATA[A css class to apply to the msg element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Element">
                <Summary><![CDATA[The mask element]]></Summary>
              </Return>
            </Method>
            <Method Name="unmask">
              <Summary><![CDATA[Removes a previously applied mask.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="insertSibling">
              <Summary><![CDATA[Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed/Object/Array">
                  <Summary><![CDATA[The id, element to insert or a DomHelper config to create and insert *or* an array of any of those.]]></Summary>
                </Param>
                <Param Name="where" Type="String" Optional="true">
                  <Summary><![CDATA['before' or 'after' defaults to before]]></Summary>
                </Param>
                <Param Name="returnDom" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return the raw DOM element instead of Ext.Element]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[the inserted Element]]></Summary>
              </Return>
            </Method>
            <Method Name="addKeyListener">
              <Summary><![CDATA[Convenience method for constructing a KeyMap]]></Summary>
              <Parameters>
                <Param Name="key" Type="Number/Array/Object/String">
                  <Summary><![CDATA[Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:
{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to call]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope of the function]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.KeyMap">
                <Summary><![CDATA[The KeyMap created]]></Summary>
              </Return>
            </Method>
            <Method Name="addKeyMap">
              <Summary><![CDATA[Creates a KeyMap for this element]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The KeyMap config. See {@link Ext.KeyMap} for more details]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.KeyMap">
                <Summary><![CDATA[The KeyMap created]]></Summary>
              </Return>
            </Method>
            <Method Name="autoHeight">
              <Summary><![CDATA[Measures the element's content height and updates height to match. Note: this function uses setTimeout so
the new height may not be available immediately.]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Animate the transition (defaults to false)]]></Summary>
                </Param>
                <Param Name="duration" Type="Float" Optional="true">
                  <Summary><![CDATA[Length of the animation in seconds (defaults to .35)]]></Summary>
                </Param>
                <Param Name="onComplete" Type="Function" Optional="true">
                  <Summary><![CDATA[Function to call when animation completes]]></Summary>
                </Param>
                <Param Name="easing" Type="String" Optional="true">
                  <Summary><![CDATA[Easing method to use (defaults to easeOut)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getBox">
              <Summary><![CDATA[Return a box {x, y, width, height} that can be used to set another elements
size/location to match this element.]]></Summary>
              <Parameters>
                <Param Name="contentBox" Type="Boolean" Optional="true">
                  <Summary><![CDATA[If true a box for the content of the element is returned.]]></Summary>
                </Param>
                <Param Name="local" Type="Boolean" Optional="true">
                  <Summary><![CDATA[If true the element's left and top are returned instead of page x/y.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Object} box An object in the format {x, y, width, height" />
            </Method>
            <Method Name="getRegion">
              <Summary><![CDATA[Returns the region of the given element.
The element must be part of the DOM tree to have a region (display:none or elements not appended return false).]]></Summary>
              <Parameters />
              <Return Type="Region">
                <Summary><![CDATA[A Ext.lib.Region containing "top, left, bottom, right" member data.]]></Summary>
              </Return>
            </Method>
            <Method Name="move">
              <Summary><![CDATA[Move this element relative to its current position.]]></Summary>
              <Parameters>
                <Param Name="direction" Type="String">
                  <Summary><![CDATA[Possible values are: "l" (or "left"), "r" (or "right"), "t" (or "top", or "up"), "b" (or "bottom", or "down").]]></Summary>
                </Param>
                <Param Name="distance" Type="Number">
                  <Summary><![CDATA[How far to move the element in pixels]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setBounds">
              <Summary><![CDATA[Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.]]></Summary>
              <Parameters>
                <Param Name="x" Type="Number">
                  <Summary><![CDATA[X value for new position (coordinates are page-based)]]></Summary>
                </Param>
                <Param Name="y" Type="Number">
                  <Summary><![CDATA[Y value for new position (coordinates are page-based)]]></Summary>
                </Param>
                <Param Name="width" Type="Mixed">
                  <Summary><![CDATA[The new width. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels)</li>
<li>A String used to set the CSS width style. Animation may <b>not</b> be used.
</ul></div>]]></Summary>
                </Param>
                <Param Name="height" Type="Mixed">
                  <Summary><![CDATA[The new height. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels)</li>
<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
</ul></div>]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setBox">
              <Summary><![CDATA[Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.]]></Summary>
              <Parameters>
                <Param Name="box" Type="Object">
                  <Summary><![CDATA[The box to fill {x, y, width, height}]]></Summary>
                </Param>
                <Param Name="adjust" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Whether to adjust for box-model issues automatically]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setLeftTop">
              <Summary><![CDATA[Quick set left and top adding default units]]></Summary>
              <Parameters>
                <Param Name="left" Type="String">
                  <Summary><![CDATA[The left CSS property value]]></Summary>
                </Param>
                <Param Name="top" Type="String">
                  <Summary><![CDATA[The top CSS property value]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setRegion">
              <Summary><![CDATA[Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.]]></Summary>
              <Parameters>
                <Param Name="region" Type="Ext.lib.Region">
                  <Summary><![CDATA[The region to fill]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="scroll">
              <Summary><![CDATA[Scrolls this element the specified direction. Does bounds checking to make sure the scroll is
within this element's scrollable range.]]></Summary>
              <Parameters>
                <Param Name="direction" Type="String">
                  <Summary><![CDATA[Possible values are: "l" (or "left"), "r" (or "right"), "t" (or "top", or "up"), "b" (or "bottom", or "down").]]></Summary>
                </Param>
                <Param Name="distance" Type="Number">
                  <Summary><![CDATA[How far to scroll the element in pixels]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object
was scrolled as far as it could go.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[Returns true if a scroll was triggered or false if the element]]></Summary>
              </Return>
            </Method>
            <Method Name="scrollIntoView">
              <Summary><![CDATA[Scrolls this element into view within the passed container.]]></Summary>
              <Parameters>
                <Param Name="container" Type="Mixed" Optional="true">
                  <Summary><![CDATA[The container element to scroll (defaults to document.body).  Should be a
string (id), dom node, or Ext.Element.]]></Summary>
                </Param>
                <Param Name="hscroll" Type="Boolean" Optional="true">
                  <Summary><![CDATA[False to disable horizontal scroll (defaults to true)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="addClassOnClick">
              <Summary><![CDATA[Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)]]></Summary>
              <Parameters>
                <Param Name="className" Type="String" />
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="addClassOnFocus">
              <Summary><![CDATA[Sets up event handlers to add and remove a css class when this element has the focus]]></Summary>
              <Parameters>
                <Param Name="className" Type="String" />
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="addClassOnOver">
              <Summary><![CDATA[Sets up event handlers to add and remove a css class when the mouse is over this element]]></Summary>
              <Parameters>
                <Param Name="className" Type="String" />
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="applyStyles">
              <Summary><![CDATA[More flexible version of {@link #setStyle} for setting style properties.]]></Summary>
              <Parameters>
                <Param Name="styles" Type="String/Object/Function">
                  <Summary><![CDATA[A style specification string, e.g. "width:100px", or object in the form {width:"100px"}, or
a function which returns such a specification.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="boxWrap">
              <Summary><![CDATA[<p>Wraps the specified element with a special 9 element markup/CSS block that renders by default as
a gray container with a gradient background, rounded corners and a 4-way shadow.</p>
<p>This special markup is used throughout Ext when box wrapping elements ({@link Ext.Button},
{@link Ext.Panel} when <tt>{@link Ext.Panel#frame frame=true}</tt>, {@link Ext.Window}).  The markup
is of this form:</p>
<pre><code>
Ext.Element.boxMarkup =
    &#39;&lt;div class="{0}-tl">&lt;div class="{0}-tr">&lt;div class="{0}-tc">&lt;/div>&lt;/div>&lt;/div>
     &lt;div class="{0}-ml">&lt;div class="{0}-mr">&lt;div class="{0}-mc">&lt;/div>&lt;/div>&lt;/div>
     &lt;div class="{0}-bl">&lt;div class="{0}-br">&lt;div class="{0}-bc">&lt;/div>&lt;/div>&lt;/div>&#39;;
</code></pre>
<p>Example usage:</p>
<pre><code>
// Basic box wrap
Ext.get("foo").boxWrap();

// You can also add a custom class and use CSS inheritance rules to customize the box look.
// 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example
// for how to create a custom box wrap style.
Ext.get("foo").boxWrap().addClass("x-box-blue");
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="class" Type="String" Optional="true">
                  <Summary><![CDATA[A base CSS class to apply to the containing wrapper element
(defaults to <tt>'x-box'</tt>). Note that there are a number of CSS rules that are dependent on
this name to make the overall effect work, so if you supply an alternate base class, make sure you
also supply all of the necessary rules.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getComputedHeight">
              <Summary><![CDATA[Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders
when needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements
if a height has not been set using CSS.]]></Summary>
              <Parameters />
              <Return Type="Number" />
            </Method>
            <Method Name="getComputedWidth">
              <Summary><![CDATA[Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders
when needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements
if a width has not been set using CSS.]]></Summary>
              <Parameters />
              <Return Type="Number" />
            </Method>
            <Method Name="getFrameWidth">
              <Summary><![CDATA[Returns the sum width of the padding and borders for the passed "sides". See getBorderWidth()
	     for more information about the sides.]]></Summary>
              <Parameters>
                <Param Name="sides" Type="String" />
              </Parameters>
              <Return Type="Number" />
            </Method>
            <Method Name="getMargins">
              <Summary><![CDATA[Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,
then it returns the calculated width of the sides (see getPadding)]]></Summary>
              <Parameters>
                <Param Name="sides" Type="String" Optional="true">
                  <Summary><![CDATA[Any combination of l, r, t, b to get the sum of those sides]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Object/Number" />
            </Method>
            <Method Name="getSize">
              <Summary><![CDATA[Returns the size of the element.]]></Summary>
              <Parameters>
                <Param Name="contentSize" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to get the width/size minus borders and padding]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Object} An object containing the element's size {width: (element width), height: (element height)" />
            </Method>
            <Method Name="getStyles">
              <Summary><![CDATA[Returns an object with properties matching the styles requested.
For example, el.getStyles('color', 'font-size', 'width') might return
{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.]]></Summary>
              <Parameters>
                <Param Name="style1" Type="String">
                  <Summary><![CDATA[A style name]]></Summary>
                </Param>
                <Param Name="style2" Type="String">
                  <Summary><![CDATA[A style name]]></Summary>
                </Param>
                <Param Name="etc." Type="String" />
              </Parameters>
              <Return Type="Object">
                <Summary><![CDATA[The style object]]></Summary>
              </Return>
            </Method>
            <Method Name="getViewSize">
              <Summary><![CDATA[Returns the width and height of the viewport.
<pre><code>
        var vpSize = Ext.getBody().getViewSize();

        // all Windows created afterwards will have a default value of 90% height and 95% width
        Ext.Window.override({
            width: vpSize.width * 0.9,
            height: vpSize.height * 0.95
        });
        // To handle window resizing you would have to hook onto onWindowResize.
        </code></pre>]]></Summary>
              <Parameters />
              <Return Type="Object} An object containing the viewport's size {width: (viewport width), height: (viewport height)" />
            </Method>
            <Method Name="repaint">
              <Summary><![CDATA[Forces the browser to repaint this element]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setSize">
              <Summary><![CDATA[Set the size of this Element. If animation is true, both width and height will be animated concurrently.]]></Summary>
              <Parameters>
                <Param Name="width" Type="Mixed">
                  <Summary><![CDATA[The new width. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels).</li>
<li>A String used to set the CSS width style. Animation may <b>not</b> be used.
<li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>
</ul></div>]]></Summary>
                </Param>
                <Param Name="height" Type="Mixed">
                  <Summary><![CDATA[The new height. This may be one of:<div class="mdetail-params"><ul>
<li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels).</li>
<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>
</ul></div>]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean/Object" Optional="true">
                  <Summary><![CDATA[true for the default animation or a standard Element animation config object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="unselectable">
              <Summary><![CDATA[Disables text selection for this element (normalized across browsers)]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="abort">
              <Summary><![CDATA[Fires when an object/image is stopped from loading before completely loaded.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="blur">
              <Summary><![CDATA[Fires when an element loses focus either via the pointing device or by tabbing navigation.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="change">
              <Summary><![CDATA[Fires when a control loses the input focus and its value has been modified since gaining focus.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="click">
              <Summary><![CDATA[Fires when a mouse click is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="contextmenu">
              <Summary><![CDATA[Fires when a right click is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="dblclick">
              <Summary><![CDATA[Fires when a mouse double click is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMActivate">
              <Summary><![CDATA[Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMAttrModified">
              <Summary><![CDATA[Where supported. Fires when an attribute has been modified.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMCharacterDataModified">
              <Summary><![CDATA[Where supported. Fires when the character data has been modified.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMFocusIn">
              <Summary><![CDATA[Where supported. Similar to HTML focus event, but can be applied to any focusable element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMFocusOut">
              <Summary><![CDATA[Where supported. Similar to HTML blur event, but can be applied to any focusable element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMNodeInserted">
              <Summary><![CDATA[Where supported. Fires when a node has been added as a child of another node.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMNodeInsertedIntoDocument">
              <Summary><![CDATA[Where supported. Fires when a node is being inserted into a document.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMNodeRemoved">
              <Summary><![CDATA[Where supported. Fires when a descendant node of the element is removed.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMNodeRemovedFromDocument">
              <Summary><![CDATA[Where supported. Fires when a node is being removed from a document.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="DOMSubtreeModified">
              <Summary><![CDATA[Where supported. Fires when the subtree is modified.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="error">
              <Summary><![CDATA[Fires when an object/image/frame cannot be loaded properly.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="focus">
              <Summary><![CDATA[Fires when an element receives focus either via the pointing device or by tab navigation.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="keydown">
              <Summary><![CDATA[Fires when a keydown is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="keypress">
              <Summary><![CDATA[Fires when a keypress is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="keyup">
              <Summary><![CDATA[Fires when a keyup is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="load">
              <Summary><![CDATA[Fires when the user agent finishes loading all content within the element. Only supported by window, frames, objects and images.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mousedown">
              <Summary><![CDATA[Fires when a mousedown is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseenter">
              <Summary><![CDATA[Fires when the mouse enters the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseleave">
              <Summary><![CDATA[Fires when the mouse leaves the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mousemove">
              <Summary><![CDATA[Fires when a mousemove is detected with the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseout">
              <Summary><![CDATA[Fires when a mouseout is detected with the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseover">
              <Summary><![CDATA[Fires when a mouseover is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="mouseup">
              <Summary><![CDATA[Fires when a mouseup is detected within the element.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="reset">
              <Summary><![CDATA[Fires when a form is reset.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="resize">
              <Summary><![CDATA[Fires when a document view is resized.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="scroll">
              <Summary><![CDATA[Fires when a document view is scrolled.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="select">
              <Summary><![CDATA[Fires when a user selects some text in a text field, including input and textarea.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="submit">
              <Summary><![CDATA[Fires when a form is submitted.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="unload">
              <Summary><![CDATA[Fires when the user agent removes all content from a window or frame. For elements, it fires when the target element or any of its content has been removed.]]></Summary>
              <Parameters>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The {@link Ext.EventObject} encapsulating the DOM event.]]></Summary>
                </Param>
                <Param Name="t" Type="HtmlElement">
                  <Summary><![CDATA[The target of the event.]]></Summary>
                </Param>
                <Param Name="o" Type="Object">
                  <Summary><![CDATA[The options configuration passed to the {@link #addListener} call.]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Error" FullName="Ext.Error" Package="Ext" DefinedIn="core\Error.js" Extends="Error" Subclasses="Ext.data.Api.Error,Ext.data.DataProxy.Error,Ext.data.DataReader.Error,Ext.data.Store.Error">
          <Summary><![CDATA[<p>A base error class. Future implementations are intended to provide more
robust error handling throughout the framework (<b>in the debug build only</b>)
to check for common errors and problems. The messages issued by this class
will aid error checking. Error checks will be automatically removed in the
production build so that performance is not negatively impacted.</p>
<p>Some sample messages currently implemented:</p><pre>
"DataProxy attempted to execute an API-action but found an undefined
url / function. Please review your Proxy url/api-configuration."
</pre><pre>
"Could not locate your "root" property in your server response.
Please review your JsonReader config to ensure the config-property
"root" matches the property your server-response.  See the JsonReader
docs for additional assistance."
</pre>
<p>An example of the code used for generating error messages:</p><pre><code>
try {
    generateError({
        foo: 'bar'
    });
}
catch (e) {
    console.error(e);
}
function generateError(data) {
    throw new Ext.Error('foo-error', data);
}
</code></pre>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="message" Type="String" />
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="getMessage">
              <Summary><![CDATA[getMessage]]></Summary>
              <Parameters />
              <Return Type="String" />
            </Method>
            <Method Name="getName">
              <Summary><![CDATA[getName]]></Summary>
              <Parameters />
              <Return Type="String" />
            </Method>
            <Method Name="toJson">
              <Summary><![CDATA[toJson]]></Summary>
              <Parameters />
              <Return Type="String" />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="EventManager" FullName="Ext.EventManager" Package="Ext" DefinedIn="core\core\EventManager.js,core\EventManager-more.js" Singleton="true">
          <Summary><![CDATA[Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides
several useful events directly.
See {@link Ext.EventObject} for more details on normalized event objects.]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="addListener">
              <Summary><![CDATA[Appends an event handler to an element.  The shorthand version {@link #on} is equivalent.  Typically you will
use {@link Ext.Element#addListener} directly on an Element in favor of calling this version.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[The html element or id to assign the event handler to]]></Summary>
                </Param>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[The type of event to listen for]]></Summary>
                </Param>
                <Param Name="handler" Type="Function">
                  <Summary><![CDATA[The handler function the event invokes This function is passed
the following parameters:<ul>
<li>evt : EventObject<div class="sub-desc">The {@link Ext.EventObject EventObject} describing the event.</div></li>
<li>t : Element<div class="sub-desc">The {@link Ext.Element Element} which was the target of the event.
Note that this may be filtered by using the <tt>delegate</tt> option.</div></li>
<li>o : Object<div class="sub-desc">The options object from the addListener call.</div></li>
</ul>]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope (<b><code>this</code></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>.]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[An object containing handler configuration properties.
This may contain any of the following properties:<ul>
<li>scope : Object<div class="sub-desc">The scope (<b><code>this</code></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>.</div></li>
<li>delegate : String<div class="sub-desc">A simple selector to filter the target or look for a descendant of the target</div></li>
<li>stopEvent : Boolean<div class="sub-desc">True to stop the event. That is stop propagation, and prevent the default action.</div></li>
<li>preventDefault : Boolean<div class="sub-desc">True to prevent the default action</div></li>
<li>stopPropagation : Boolean<div class="sub-desc">True to prevent event propagation</div></li>
<li>normalized : Boolean<div class="sub-desc">False to pass a browser event to the handler function instead of an Ext.EventObject</div></li>
<li>delay : Number<div class="sub-desc">The number of milliseconds to delay the invocation of the handler after te event fires.</div></li>
<li>single : Boolean<div class="sub-desc">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>
<li>buffer : Number<div class="sub-desc">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed
by the specified number of milliseconds. If the event fires again within that time, the original
handler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>
<li>target : Element<div class="sub-desc">Only call the handler if the event was fired on the target Element, <i>not</i> if the event was bubbled up from a child node.</div></li>
</ul><br>
<p>See {@link Ext.Element#addListener} for examples of how to use these options.</p>]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="on">
              <Summary><![CDATA[Appends an event handler to an element.  Shorthand for {@link #addListener}.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[The html element or id to assign the event handler to]]></Summary>
                </Param>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[The type of event to listen for]]></Summary>
                </Param>
                <Param Name="handler" Type="Function">
                  <Summary><![CDATA[The handler function the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope in which to execute the handler
function (the handler function's "this" context)]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[An object containing standard {@link #addListener} options
@member Ext.EventManager]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="onDocumentReady">
              <Summary><![CDATA[Fires when the document is ready (before onload and before images are loaded). Can be
accessed shorthanded as Ext.onReady().]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The method the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[An object that becomes the scope of the handler]]></Summary>
                </Param>
                <Param Name="options" Type="boolean" Optional="true">
                  <Summary><![CDATA[An object containing standard {@link #addListener} options]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="onReady">
              <Summary><![CDATA[Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Ext.EventManager#onDocumentReady}.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The method the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[An object that becomes the scope of the handler]]></Summary>
                </Param>
                <Param Name="options" Type="boolean" Optional="true">
                  <Summary><![CDATA[An object containing standard {@link #addListener} options
@member Ext]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="removeAll">
              <Summary><![CDATA[Removes all event handers from an element.  Typically you will use {@link Ext.Element#removeAllListeners}
directly on an Element in favor of calling this version.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[The id or html element from which to remove the event]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="removeListener">
              <Summary><![CDATA[Removes an event handler from an element.  The shorthand version {@link #un} is equivalent.  Typically
you will use {@link Ext.Element#removeListener} directly on an Element in favor of calling this version.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[The id or html element from which to remove the event]]></Summary>
                </Param>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[The type of event]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The handler function to remove]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="un">
              <Summary><![CDATA[Removes an event handler from an element.  Shorthand for {@link #removeListener}.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[The id or html element from which to remove the event]]></Summary>
                </Param>
                <Param Name="eventName" Type="String">
                  <Summary><![CDATA[The type of event]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The handler function to remove
@member Ext.EventManager]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[True if a listener was actually removed, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="hasModifier">
              <Summary><![CDATA[    BACKSPACE: 8,
    /** Key constant @type Number */
    TAB: 9,
    /** Key constant @type Number */
    NUM_CENTER: 12,
    /** Key constant @type Number */
    ENTER: 13,
    /** Key constant @type Number */
    RETURN: 13,
    /** Key constant @type Number */
    SHIFT: 16,
    /** Key constant @type Number */
    CTRL: 17,
    CONTROL : 17, // legacy
    /** Key constant @type Number */
    ALT: 18,
    /** Key constant @type Number */
    PAUSE: 19,
    /** Key constant @type Number */
    CAPS_LOCK: 20,
    /** Key constant @type Number */
    ESC: 27,
    /** Key constant @type Number */
    SPACE: 32,
    /** Key constant @type Number */
    PAGE_UP: 33,
    PAGEUP : 33, // legacy
    /** Key constant @type Number */
    PAGE_DOWN: 34,
    PAGEDOWN : 34, // legacy
    /** Key constant @type Number */
    END: 35,
    /** Key constant @type Number */
    HOME: 36,
    /** Key constant @type Number */
    LEFT: 37,
    /** Key constant @type Number */
    UP: 38,
    /** Key constant @type Number */
    RIGHT: 39,
    /** Key constant @type Number */
    DOWN: 40,
    /** Key constant @type Number */
    PRINT_SCREEN: 44,
    /** Key constant @type Number */
    INSERT: 45,
    /** Key constant @type Number */
    DELETE: 46,
    /** Key constant @type Number */
    ZERO: 48,
    /** Key constant @type Number */
    ONE: 49,
    /** Key constant @type Number */
    TWO: 50,
    /** Key constant @type Number */
    THREE: 51,
    /** Key constant @type Number */
    FOUR: 52,
    /** Key constant @type Number */
    FIVE: 53,
    /** Key constant @type Number */
    SIX: 54,
    /** Key constant @type Number */
    SEVEN: 55,
    /** Key constant @type Number */
    EIGHT: 56,
    /** Key constant @type Number */
    NINE: 57,
    /** Key constant @type Number */
    A: 65,
    /** Key constant @type Number */
    B: 66,
    /** Key constant @type Number */
    C: 67,
    /** Key constant @type Number */
    D: 68,
    /** Key constant @type Number */
    E: 69,
    /** Key constant @type Number */
    F: 70,
    /** Key constant @type Number */
    G: 71,
    /** Key constant @type Number */
    H: 72,
    /** Key constant @type Number */
    I: 73,
    /** Key constant @type Number */
    J: 74,
    /** Key constant @type Number */
    K: 75,
    /** Key constant @type Number */
    L: 76,
    /** Key constant @type Number */
    M: 77,
    /** Key constant @type Number */
    N: 78,
    /** Key constant @type Number */
    O: 79,
    /** Key constant @type Number */
    P: 80,
    /** Key constant @type Number */
    Q: 81,
    /** Key constant @type Number */
    R: 82,
    /** Key constant @type Number */
    S: 83,
    /** Key constant @type Number */
    T: 84,
    /** Key constant @type Number */
    U: 85,
    /** Key constant @type Number */
    V: 86,
    /** Key constant @type Number */
    W: 87,
    /** Key constant @type Number */
    X: 88,
    /** Key constant @type Number */
    Y: 89,
    /** Key constant @type Number */
    Z: 90,
    /** Key constant @type Number */
    CONTEXT_MENU: 93,
    /** Key constant @type Number */
    NUM_ZERO: 96,
    /** Key constant @type Number */
    NUM_ONE: 97,
    /** Key constant @type Number */
    NUM_TWO: 98,
    /** Key constant @type Number */
    NUM_THREE: 99,
    /** Key constant @type Number */
    NUM_FOUR: 100,
    /** Key constant @type Number */
    NUM_FIVE: 101,
    /** Key constant @type Number */
    NUM_SIX: 102,
    /** Key constant @type Number */
    NUM_SEVEN: 103,
    /** Key constant @type Number */
    NUM_EIGHT: 104,
    /** Key constant @type Number */
    NUM_NINE: 105,
    /** Key constant @type Number */
    NUM_MULTIPLY: 106,
    /** Key constant @type Number */
    NUM_PLUS: 107,
    /** Key constant @type Number */
    NUM_MINUS: 109,
    /** Key constant @type Number */
    NUM_PERIOD: 110,
    /** Key constant @type Number */
    NUM_DIVISION: 111,
    /** Key constant @type Number */
    F1: 112,
    /** Key constant @type Number */
    F2: 113,
    /** Key constant @type Number */
    F3: 114,
    /** Key constant @type Number */
    F4: 115,
    /** Key constant @type Number */
    F5: 116,
    /** Key constant @type Number */
    F6: 117,
    /** Key constant @type Number */
    F7: 118,
    /** Key constant @type Number */
    F8: 119,
    /** Key constant @type Number */
    F9: 120,
    /** Key constant @type Number */
    F10: 121,
    /** Key constant @type Number */
    F11: 122,
    /** Key constant @type Number */
    F12: 123,	
    
    /** @private */
    isNavKeyPress : function () {
        var me = this,
        	k = this.normalizeKey(me.keyCode);		
        return (k >= 33 && k <= 40) ||  // Page Up/Down, End, Home, Left, Up, Right, Down
		k == me.RETURN ||
		k == me.TAB ||
		k == me.ESC;
    },

    isSpecialKey : function () {
        var k = this.normalizeKey(this.keyCode);
        return (this.type == 'keypress' && this.ctrlKey) ||
		this.isNavKeyPress() ||
        (k == this.BACKSPACE) || // Backspace
		(k >= 16 && k <= 20) || // Shift, Ctrl, Alt, Pause, Caps Lock
		(k >= 44 && k <= 45);   // Print Screen, Insert
    },
	
	getPoint : function () {
	    return new Ext.lib.Point(this.xy[0], this.xy[1]);
	},

    /**
Returns true if the control, meta, shift or alt key was pressed during this event.]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="onTextResize">
              <Summary><![CDATA[Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The method the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[An object that becomes the scope of the handler]]></Summary>
                </Param>
                <Param Name="options" Type="boolean" />
              </Parameters>
            </Method>
            <Method Name="onWindowResize">
              <Summary><![CDATA[Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The method the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[An object that becomes the scope of the handler]]></Summary>
                </Param>
                <Param Name="options" Type="boolean" />
              </Parameters>
            </Method>
            <Method Name="removeResizeListener">
              <Summary><![CDATA[Removes the passed window resize listener.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The method the event invokes]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[The scope of handler]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="EventObject" FullName="Ext.EventObject" Package="Ext" DefinedIn="core\core\EventManager.js" Singleton="true">
          <Summary><![CDATA[Just as {@link Ext.Element} wraps around a native DOM node, Ext.EventObject
wraps the browser's native event-object normalizing cross-browser differences,
such as which mouse button is clicked, keys pressed, mechanisms to stop
event-propagation along with a method to prevent default actions from taking place.
<p>For example:</p>
<pre><code>
function handleClick(e, t) { // e is not a standard event object, it is a Ext.EventObject
    e.preventDefault();
    var target = e.getTarget(); // same as t (the target HTMLElement)
    ...
}
var myDiv = {@link Ext#get Ext.get}("myDiv");  // get reference to an {@link Ext.Element}
myDiv.on(         // 'on' is shorthand for addListener
    "click",      // perform an action on click of myDiv
    handleClick   // reference to the action handler
);  
// other methods to do the same:
Ext.EventManager.on("myDiv", 'click', handleClick);
Ext.EventManager.addListener("myDiv", 'click', handleClick);
 </code></pre>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="getCharCode">
              <Summary><![CDATA[Gets the character code for the event.]]></Summary>
              <Parameters />
              <Return Type="Number" />
            </Method>
            <Method Name="getKey">
              <Summary><![CDATA[Returns a normalized keyCode for the event.]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The key code]]></Summary>
              </Return>
            </Method>
            <Method Name="getPageX">
              <Summary><![CDATA[Gets the x coordinate of the event.]]></Summary>
              <Parameters />
              <Return Type="Number" />
            </Method>
            <Method Name="getPageY">
              <Summary><![CDATA[Gets the y coordinate of the event.]]></Summary>
              <Parameters />
              <Return Type="Number" />
            </Method>
            <Method Name="getRelatedTarget">
              <Summary><![CDATA[Gets the related target.]]></Summary>
              <Parameters />
              <Return Type="HTMLElement" />
            </Method>
            <Method Name="getTarget">
              <Summary><![CDATA[Gets the target for the event.]]></Summary>
              <Parameters>
                <Param Name="selector" Type="String" Optional="true">
                  <Summary><![CDATA[A simple selector to filter the target or look for an ancestor of the target]]></Summary>
                </Param>
                <Param Name="maxDepth" Type="Number/Mixed" Optional="true">
                  <Summary><![CDATA[The max depth to
search as a number or element (defaults to 10 || document.body)]]></Summary>
                </Param>
                <Param Name="returnEl" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to return a Ext.Element object instead of DOM node]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLelement" />
            </Method>
            <Method Name="getWheelDelta">
              <Summary><![CDATA[Normalizes mouse wheel delta across browsers]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The delta]]></Summary>
              </Return>
            </Method>
            <Method Name="getXY">
              <Summary><![CDATA[Gets the page coordinates of the event.]]></Summary>
              <Parameters />
              <Return Type="Array">
                <Summary><![CDATA[The xy values like [x, y]]]></Summary>
              </Return>
            </Method>
            <Method Name="preventDefault">
              <Summary><![CDATA[Prevents the browsers default handling of the event.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="stopEvent">
              <Summary><![CDATA[        setEvent : function (e) {
	        var me = this;
            if (e == me || (e && e.browserEvent)) { // already wrapped
                return e;
            }
            me.browserEvent = e;
            if (e) {
                // normalize buttons
                me.button = e.button ? btnMap[e.button] : (e.which ? e.which - 1 : -1);
                if (e.type == 'click' && me.button == -1) {
                    me.button = 0;
                }
                me.type = e.type;
                me.shiftKey = e.shiftKey;
                // mac metaKey behaves like ctrlKey
                me.ctrlKey = e.ctrlKey || e.metaKey || false;
                me.altKey = e.altKey;
                // in getKey these will be normalized for the mac
                me.keyCode = e.keyCode;
                me.charCode = e.charCode;
                // cache the target for the delayed and or buffered events
                me.target = E.getTarget(e);
                // same for XY
                me.xy = E.getXY(e);
            } else {
                me.button = -1;
                me.shiftKey = false;
                me.ctrlKey = false;
                me.altKey = false;
                me.keyCode = 0;
                me.charCode = 0;
                me.target = null;
                me.xy = [0, 0];
            }
            return me;
        },

        /**
Stop the event (preventDefault and stopPropagation)]]></Summary>
              <Parameters />
            </Method>
            <Method Name="stopPropagation">
              <Summary><![CDATA[Cancels bubbling of the event.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="within">
              <Summary><![CDATA[Returns true if the target of this event is a child of el.  Unless the allowEl parameter is set, it will return false if if the target is el.
Example usage:<pre><code>
		// Handle click on any child of an element
		Ext.getBody().on('click', function (e) {
			if (e.within('some-el')) {
				alert('Clicked on a child of some-el!');
			}
		});
		
		// Handle click directly on an element, ignoring clicks on child nodes
		Ext.getBody().on('click', function (e,t) {
			if ((t.id == 'some-el') && !e.within(t, true)) {
				alert('Clicked directly on some-el!');
			}
		});
		</code></pre>]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The id, DOM element or Ext.Element to check]]></Summary>
                </Param>
                <Param Name="related" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to test if the related target is within el instead of the target]]></Summary>
                </Param>
                <Param Name="allowEl" Type="Boolean">
                  <Summary><![CDATA[{optional} true to also check if the passed element is the target or related target]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean" />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="FlashComponent" FullName="Ext.FlashComponent" Package="Ext" DefinedIn="widgets\chart\FlashComponent.js" Xtype="flash" Extends="Ext.BoxComponent" Subclasses="Ext.chart.Chart">
          <ConfigOptions>
            <ConfigOption Name="backgroundColor" Type="String">
              <Summary><![CDATA[The background color of the chart. Defaults to <tt>'#ffffff'</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="expressInstall" Type="Boolean">
              <Summary><![CDATA[True to prompt the user to install flash if not installed. Note that this uses
Ext.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to <tt>false</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="flashParams" Type="Object">
              <Summary><![CDATA[A set of key value pairs to be passed to the flash object as parameters. Possible parameters can be found here:
http://kb2.adobe.com/cps/127/tn_12701.html Defaults to <tt>undefined</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="flashVars" Type="Object">
              <Summary><![CDATA[A set of key value pairs to be passed to the flash object as flash variables. Defaults to <tt>undefined</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="flashVersion" Type="String">
              <Summary><![CDATA[Indicates the version the flash content was published for. Defaults to <tt>'9.0.45'</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="url" Type="String">
              <Summary><![CDATA[The URL of the chart to include. Defaults to <tt>undefined</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="wmode" Type="String">
              <Summary><![CDATA[The wmode of the flash object. This can be used to control layering. Defaults to <tt>'opaque'</tt>.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="EXPRESS_INSTALL_URL" Static="true">
              <Summary><![CDATA[Sets the url for installing flash if it doesn't exist. This should be set to a local resource.]]></Summary>
            </Property>
          </Properties>
          <Methods />
          <Events />
        </Class>
        <Class Name="FlashProxy" FullName="Ext.FlashProxy" Package="Ext" DefinedIn="widgets\chart\EventProxy.js" Singleton="true">
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="Fx" FullName="Ext.Fx" Package="Ext" DefinedIn="core\core\Fx.js,core\Fx.js">
          <Summary><![CDATA[<p>A class to provide basic animation and visual effects support.  <b>Note:</b> This class is automatically applied
to the {@link Ext.Element} interface when included, so all effects calls should be performed via {@link Ext.Element}.
Conversely, since the effects are not actually defined in {@link Ext.Element}, Ext.Fx <b>must</b> be
{@link Ext#enableFx included} in order for the Element effects to work.</p><br/>

<p><b><u>Method Chaining</u></b></p>
<p>It is important to note that although the Fx methods and many non-Fx Element methods support "method chaining" in that
they return the Element object itself as the method return value, it is not always possible to mix the two in a single
method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.
Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,
while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the
expected results and should be done with care.  Also see <tt>{@link #callback}</tt>.</p><br/>

<p><b><u>Anchor Options for Motion Effects</u></b></p>
<p>Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element
that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:</p>
<pre>
Value  Description
-----  -----------------------------
tl     The top left corner
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner
</pre>
<b>Note</b>: some Fx methods accept specific custom config parameters.  The options shown in the Config Options
section below are common options that can be passed to any Fx method unless otherwise noted.</b>

@cfg {Function} callback A function called when the effect is finished.  Note that effects are queued internally by the
Fx class, so a callback is not required to specify another effect -- effects can simply be chained together
and called in sequence (see note for <b><u>Method Chaining</u></b> above), for example:<pre><code>
el.slideIn().highlight();
</code></pre>
The callback is intended for any additional code that should run once a particular effect has completed. The Element
being operated upon is passed as the first parameter.

@cfg {Object} scope The scope of the <tt>{@link #callback}</tt> function

@cfg {String} easing A valid Ext.lib.Easing value for the effect:</p><div class="mdetail-params"><ul>
<li><b><tt>backBoth</tt></b></li>
<li><b><tt>backIn</tt></b></li>
<li><b><tt>backOut</tt></b></li>
<li><b><tt>bounceBoth</tt></b></li>
<li><b><tt>bounceIn</tt></b></li>
<li><b><tt>bounceOut</tt></b></li>
<li><b><tt>easeBoth</tt></b></li>
<li><b><tt>easeBothStrong</tt></b></li>
<li><b><tt>easeIn</tt></b></li>
<li><b><tt>easeInStrong</tt></b></li>
<li><b><tt>easeNone</tt></b></li>
<li><b><tt>easeOut</tt></b></li>
<li><b><tt>easeOutStrong</tt></b></li>
<li><b><tt>elasticBoth</tt></b></li>
<li><b><tt>elasticIn</tt></b></li>
<li><b><tt>elasticOut</tt></b></li>
</ul></div>

@cfg {String} afterCls A css class to apply after the effect
@cfg {Number} duration The length of time (in seconds) that the effect should last

@cfg {Number} endOpacity Only applicable for {@link #fadeIn} or {@link #fadeOut}, a number between
<tt>0</tt> and <tt>1</tt> inclusive to configure the ending opacity value.

@cfg {Boolean} remove Whether the Element should be removed from the DOM and destroyed after the effect finishes
@cfg {Boolean} useDisplay Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to
effects that end with the element being visually hidden, ignored otherwise)
@cfg {String/Object/Function} afterStyle A style specification string, e.g. <tt>"width:100px"</tt>, or an object
in the form <tt>{width:"100px"}</tt>, or a function which returns such a specification that will be applied to the
Element after the effect finishes.
@cfg {Boolean} block Whether the effect should block other effects from queueing while it runs
@cfg {Boolean} concurrent Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence
@cfg {Boolean} stopFx Whether preceding effects should be stopped and removed before running current effect (only applies to non blocking effects)

<p>A class to provide basic animation and visual effects support.  <b>Note:</b> This class is automatically applied
to the {@link Ext.Element} interface when included, so all effects calls should be performed via {@link Ext.Element}.
Conversely, since the effects are not actually defined in {@link Ext.Element}, Ext.Fx <b>must</b> be
{@link Ext#enableFx included} in order for the Element effects to work.</p><br/>

<p><b><u>Method Chaining</u></b></p>
<p>It is important to note that although the Fx methods and many non-Fx Element methods support "method chaining" in that
they return the Element object itself as the method return value, it is not always possible to mix the two in a single
method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.
Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,
while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the
expected results and should be done with care.  Also see <tt>{@link #callback}</tt>.</p><br/>

<p><b><u>Anchor Options for Motion Effects</u></b></p>
<p>Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element
that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:</p>
<pre>
Value  Description
-----  -----------------------------
tl     The top left corner
t      The center of the top edge
tr     The top right corner
l      The center of the left edge
r      The center of the right edge
bl     The bottom left corner
b      The center of the bottom edge
br     The bottom right corner
</pre>
<b>Note</b>: some Fx methods accept specific custom config parameters.  The options shown in the Config Options
section below are common options that can be passed to any Fx method unless otherwise noted.</b>

@cfg {Function} callback A function called when the effect is finished.  Note that effects are queued internally by the
Fx class, so a callback is not required to specify another effect -- effects can simply be chained together
and called in sequence (see note for <b><u>Method Chaining</u></b> above), for example:<pre><code>
el.slideIn().highlight();
</code></pre>
The callback is intended for any additional code that should run once a particular effect has completed. The Element
being operated upon is passed as the first parameter.

@cfg {Object} scope The scope of the <tt>{@link #callback}</tt> function

@cfg {String} easing A valid Ext.lib.Easing value for the effect:</p><div class="mdetail-params"><ul>
<li><b><tt>backBoth</tt></b></li>
<li><b><tt>backIn</tt></b></li>
<li><b><tt>backOut</tt></b></li>
<li><b><tt>bounceBoth</tt></b></li>
<li><b><tt>bounceIn</tt></b></li>
<li><b><tt>bounceOut</tt></b></li>
<li><b><tt>easeBoth</tt></b></li>
<li><b><tt>easeBothStrong</tt></b></li>
<li><b><tt>easeIn</tt></b></li>
<li><b><tt>easeInStrong</tt></b></li>
<li><b><tt>easeNone</tt></b></li>
<li><b><tt>easeOut</tt></b></li>
<li><b><tt>easeOutStrong</tt></b></li>
<li><b><tt>elasticBoth</tt></b></li>
<li><b><tt>elasticIn</tt></b></li>
<li><b><tt>elasticOut</tt></b></li>
</ul></div>

@cfg {String} afterCls A css class to apply after the effect
@cfg {Number} duration The length of time (in seconds) that the effect should last

@cfg {Number} endOpacity Only applicable for {@link #fadeIn} or {@link #fadeOut}, a number between
<tt>0</tt> and <tt>1</tt> inclusive to configure the ending opacity value.

@cfg {Boolean} remove Whether the Element should be removed from the DOM and destroyed after the effect finishes
@cfg {Boolean} useDisplay Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to
effects that end with the element being visually hidden, ignored otherwise)
@cfg {String/Object/Function} afterStyle A style specification string, e.g. <tt>"width:100px"</tt>, or an object
in the form <tt>{width:"100px"}</tt>, or a function which returns such a specification that will be applied to the
Element after the effect finishes.
@cfg {Boolean} block Whether the effect should block other effects from queueing while it runs
@cfg {Boolean} concurrent Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence
@cfg {Boolean} stopFx Whether preceding effects should be stopped and removed before running current effect (only applies to non blocking effects)]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="fadeIn">
              <Summary><![CDATA[Fade an element in (from transparent to opaque).  The ending opacity can be specified
using the <tt>{@link #endOpacity}</tt> config option.
Usage:
<pre><code>
// default: fade in from opacity 0 to 100%
el.fadeIn();

// custom: fade in from opacity 0 to 75% over 2 seconds
el.fadeIn({ endOpacity: .75, duration: 2});

// common config options shown with default values
el.fadeIn({
    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="fadeOut">
              <Summary><![CDATA[Fade an element out (from opaque to transparent).  The ending opacity can be specified
using the <tt>{@link #endOpacity}</tt> config option.  Note that IE may require
<tt>{@link #useDisplay}:true</tt> in order to redisplay correctly.
Usage:
<pre><code>
// default: fade out from the element's current opacity to 0
el.fadeOut();

// custom: fade out from the element's current opacity to 25% over 2 seconds
el.fadeOut({ endOpacity: .25, duration: 2});

// common config options shown with default values
el.fadeOut({
    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="frame">
              <Summary><![CDATA[Shows a ripple of exploding, attenuating borders to draw attention to an Element.
Usage:
<pre><code>
// default: a single light blue ripple
el.frame();

// custom: 3 red ripples lasting 3 seconds total
el.frame("ff0000", 3, { duration: 3 });

// common config options shown with default values
el.frame("C3DAF9", 1, {
    duration: 1 //duration of each individual ripple.
    // Note: Easing is not configurable and will be ignored if included
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="color" Type="String" Optional="true">
                  <Summary><![CDATA[The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9').]]></Summary>
                </Param>
                <Param Name="count" Type="Number" Optional="true">
                  <Summary><![CDATA[The number of ripples to display (defaults to 1)]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="ghost">
              <Summary><![CDATA[Slides the element while fading it out of view.  An anchor point can be optionally passed to set the
ending point of the effect.
Usage:
<pre><code>
// default: slide the element downward while fading out
el.ghost();

// custom: slide the element out to the right with a 2-second duration
el.ghost('r', { duration: 2 });

// common config options shown with default values
el.ghost('b', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="anchor" Type="String" Optional="true">
                  <Summary><![CDATA[One of the valid Fx anchor positions (defaults to bottom: 'b')]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="hasActiveFx">
              <Summary><![CDATA[Returns true if the element has any effects actively running or queued, else returns false.]]></Summary>
              <Parameters />
              <Return Type="Boolean">
                <Summary><![CDATA[True if element has active effects, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="hasFxBlock">
              <Summary><![CDATA[Returns true if the element is currently blocking so that no other effect can be queued
until this effect is finished, else returns false if blocking is not set.  This is commonly
used to ensure that an effect initiated by a user action runs to completion prior to the
same effect being restarted (e.g., firing only one effect even if the user clicks several times).]]></Summary>
              <Parameters />
              <Return Type="Boolean">
                <Summary><![CDATA[True if blocking, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="highlight">
              <Summary><![CDATA[Highlights the Element by setting a color (applies to the background-color by default, but can be
changed using the "attr" config option) and then fading back to the original color. If no original
color is available, you should provide the "endColor" config option which will be cleared after the animation.
Usage:
<pre><code>
// default: highlight background to yellow
el.highlight();

// custom: highlight foreground text to blue for 2 seconds
el.highlight("0000ff", { attr: 'color', duration: 2 });

// common config options shown with default values
el.highlight("ffff9c", {
    attr: "background-color", //can be any valid CSS property (attribute) that supports a color value
    endColor: (current color) or "ffffff",
    easing: 'easeIn',
    duration: 1
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="color" Type="String" Optional="true">
                  <Summary><![CDATA[The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="pause">
              <Summary><![CDATA[Creates a pause before any subsequent queued effects begin.  If there are
no effects queued after the pause it will have no effect.
Usage:
<pre><code>
el.pause(1);
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="seconds" Type="Number">
                  <Summary><![CDATA[The length of time to pause (in seconds)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="puff">
              <Summary><![CDATA[Fades the element out while slowly expanding it in all directions.  When the effect is completed, the
element will be hidden (visibility = 'hidden') but block elements will still take up space in the document.
The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
<pre><code>
// default
el.puff();

// common config options shown with default values
el.puff({
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="scale">
              <Summary><![CDATA[Animates the transition of an element's dimensions from a starting height/width
to an ending height/width.  This method is a convenience implementation of {@link shift}.
Usage:
<pre><code>
// change height and width to 100x100 pixels
el.scale(100, 100);

// common config options shown with default values.  The height and width will default to
// the element&#39;s existing values if passed as null.
el.scale(
    [element&#39;s width],
    [element&#39;s height], {
        easing: 'easeOut',
        duration: .35
    }
);
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The new width (pass undefined to keep the original width)]]></Summary>
                </Param>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The new height (pass undefined to keep the original height)]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="sequenceFx">
              <Summary><![CDATA[Ensures that all effects queued after sequenceFx is called on the element are
run in sequence.  This is the opposite of {@link #syncFx}.]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="shift">
              <Summary><![CDATA[Animates the transition of any combination of an element's dimensions, xy position and/or opacity.
Any of these properties not specified in the config object will not be changed.  This effect
requires that at least one new dimension, position or opacity setting must be passed in on
the config object in order for the function to have any effect.
Usage:
<pre><code>
// slide the element horizontally to x position 200 while changing the height and opacity
el.shift({ x: 200, height: 50, opacity: .8 });

// common config options shown with default values.
el.shift({
    width: [element&#39;s width],
    height: [element&#39;s height],
    x: [element&#39;s x position],
    y: [element&#39;s y position],
    opacity: [element&#39;s opacity],
    easing: 'easeOut',
    duration: .35
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="options" Type="Object">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="slideIn">
              <Summary><![CDATA[Slides the element into view.  An anchor point can be optionally passed to set the point of
origin for the slide effect.  This function automatically handles wrapping the element with
a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
<pre><code>
// default: slide the element in from the top
el.slideIn();

// custom: slide the element in from the right with a 2-second duration
el.slideIn('r', { duration: 2 });

// common config options shown with default values
el.slideIn('t', {
    easing: 'easeOut',
    duration: .5
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="anchor" Type="String" Optional="true">
                  <Summary><![CDATA[One of the valid Fx anchor positions (defaults to top: 't')]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="slideOut">
              <Summary><![CDATA[Slides the element out of view.  An anchor point can be optionally passed to set the end point
for the slide effect.  When the effect is completed, the element will be hidden (visibility =
'hidden') but block elements will still take up space in the document.  The element must be removed
from the DOM using the 'remove' config option if desired.  This function automatically handles
wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.
Usage:
<pre><code>
// default: slide the element out to the top
el.slideOut();

// custom: slide the element out to the right with a 2-second duration
el.slideOut('r', { duration: 2 });

// common config options shown with default values
el.slideOut('t', {
    easing: 'easeOut',
    duration: .5,
    remove: false,
    useDisplay: false
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="anchor" Type="String" Optional="true">
                  <Summary><![CDATA[One of the valid Fx anchor positions (defaults to top: 't')]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="stopFx">
              <Summary><![CDATA[Stops any running effects and clears the element's internal effects queue if it contains
any additional effects that haven't started yet.]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="switchOff">
              <Summary><![CDATA[Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).
When the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still
take up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.
Usage:
<pre><code>
// default
el.switchOff();

// all config options shown with default values
el.switchOff({
    easing: 'easeIn',
    duration: .3,
    remove: false,
    useDisplay: false
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[Object literal with any of the Fx config options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
            <Method Name="syncFx">
              <Summary><![CDATA[Ensures that all effects queued after syncFx is called on the element are
run concurrently.  This is the opposite of {@link #sequenceFx}.]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[The Element]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="History" FullName="Ext.History" Package="Ext" DefinedIn="util\History.js" Extends="Ext.util.Observable" Singleton="true">
          <Summary><![CDATA[History management component that allows you to register arbitrary tokens that signify application
history state on navigation actions.  You can then handle the history {@link #change} event in order
to reset your application UI to the appropriate state when the user navigates forward or backward through
the browser history stack.]]></Summary>
          <ConfigOptions />
          <Properties>
            <Property Name="fieldId">
              <Summary><![CDATA[The id of the hidden field required for storing the current history token.]]></Summary>
            </Property>
            <Property Name="iframeId">
              <Summary><![CDATA[The id of the iframe required by IE to manage the history stack.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="add">
              <Summary><![CDATA[Add a new token to the history stack. This can be any arbitrary value, although it would
commonly be the concatenation of a component id and another id marking the specifc history
state of that component.  Example usage:
<pre><code>
// Handle tab changes on a TabPanel
tabPanel.on('tabchange', function (tabPanel, tab) {
    Ext.History.add(tabPanel.id + ':' + tab.id);
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="token" Type="String">
                  <Summary><![CDATA[The value that defines a particular application-specific history state]]></Summary>
                </Param>
                <Param Name="preventDuplicates" Type="Boolean">
                  <Summary><![CDATA[When true, if the passed token matches the current token
it will not save a new history step. Set to false if the same state can be saved more than once
at the same history stack location (defaults to true).]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="back">
              <Summary><![CDATA[Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).]]></Summary>
              <Parameters />
            </Method>
            <Method Name="forward">
              <Summary><![CDATA[Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).]]></Summary>
              <Parameters />
            </Method>
            <Method Name="getToken">
              <Summary><![CDATA[Retrieves the currently-active history token.]]></Summary>
              <Parameters />
              <Return Type="String">
                <Summary><![CDATA[The token]]></Summary>
              </Return>
            </Method>
            <Method Name="init">
              <Summary><![CDATA[Initialize the global History instance.]]></Summary>
              <Parameters>
                <Param Name="onReady" Type="Boolean" Optional="true">
                  <Summary><![CDATA[A callback function that will be called once the history
component is fully initialized.]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The callback scope]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="KeyMap" FullName="Ext.KeyMap" Package="Ext" DefinedIn="util\KeyMap.js">
          <Summary><![CDATA[Handles mapping keys to actions for an element. One key map can be used for multiple actions.
The constructor accepts the same config object as defined by {@link #addBinding}.
If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key
combination it will call the function with this signature (if the match is a multi-key
combination the callback will still be called only once): (String key, Ext.EventObject e)
A KeyMap can also handle a string representation of keys.<br />
Usage:
 <pre><code>
// map one key by key code
var map = new Ext.KeyMap("my-element", {
    key: 13, // or Ext.EventObject.ENTER
    fn: myHandler,
    scope: myObject
});

// map multiple keys to one action by string
var map = new Ext.KeyMap("my-element", {
    key: "a\r\n\t",
    fn: myHandler,
    scope: myObject
});

// map multiple keys to multiple actions by strings and array of codes
var map = new Ext.KeyMap("my-element", [
   {
        key: [10,13],
        fn: function () { alert("Return was pressed"); }
    }, {
        key: "abc",
        fn: function () { alert('a, b or c was pressed'); }
    }, {
        key: "\t",
        ctrl:true,
        shift:true,
        fn: function () { alert('Control + shift + tab was pressed.'); }
    }
]);
</code></pre>
<b>Note: A KeyMap starts enabled</b>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="el" Type="Mixed">
                <Summary><![CDATA[The element to bind to]]></Summary>
              </Param>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config (see {@link #addBinding})]]></Summary>
              </Param>
              <Param Name="eventName" Type="String" Optional="true">
                <Summary><![CDATA[The event to bind to (defaults to "keydown")]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="addBinding">
              <Summary><![CDATA[Add a new binding to this KeyMap. The following config object properties are supported:
<pre>
Property    Type             Description
----------  ---------------  ----------------------------------------------------------------------
key         String/Array     A single keycode or an array of keycodes to handle
shift       Boolean          True to handle key only when shift is pressed, False to handle the key only when shift is not pressed (defaults to undefined)
ctrl        Boolean          True to handle key only when ctrl is pressed, False to handle the key only when ctrl is not pressed (defaults to undefined)
alt         Boolean          True to handle key only when alt is pressed, False to handle the key only when alt is not pressed (defaults to undefined)
handler     Function         The function to call when KeyMap finds the expected key combination
fn          Function         Alias of handler (for backwards-compatibility)
scope       Object           The scope of the callback function
stopEvent   Boolean          True to stop the event from bubbling and prevent the default browser action if the key was handled by the KeyMap (defaults to false)
</pre>

Usage:
<pre><code>
// Create a KeyMap
var map = new Ext.KeyMap(document, {
    key: Ext.EventObject.ENTER,
    fn: handleKey,
    scope: this
});

//Add a new binding to the existing KeyMap later
map.addBinding({
    key: 'abc',
    shift: true,
    fn: handleKey,
    scope: this
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object/Array">
                  <Summary><![CDATA[A single KeyMap config or an array of configs]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="disable">
              <Summary><![CDATA[Disable this KeyMap]]></Summary>
              <Parameters />
            </Method>
            <Method Name="enable">
              <Summary><![CDATA[Enables this KeyMap]]></Summary>
              <Parameters />
            </Method>
            <Method Name="isEnabled">
              <Summary><![CDATA[Returns true if this KeyMap is enabled]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="on">
              <Summary><![CDATA[Shorthand for adding a single key listener]]></Summary>
              <Parameters>
                <Param Name="key" Type="Number/Array/Object">
                  <Summary><![CDATA[Either the numeric key code, array of key codes or an object with the
following options:
{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}]]></Summary>
                </Param>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to call]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope of the function]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setDisabled">
              <Summary><![CDATA[Convenience function for setting disabled/enabled by boolean.]]></Summary>
              <Parameters>
                <Param Name="disabled" Type="Boolean" />
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="KeyNav" FullName="Ext.KeyNav" Package="Ext" DefinedIn="util\KeyNav.js">
          <Summary><![CDATA[<p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind
navigation keys to function calls that will get called when the keys are pressed, providing an easy
way to implement custom navigation schemes for any UI component.</p>
<p>The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,
pageUp, pageDown, del, home, end.  Usage:</p>
 <pre><code>
var nav = new Ext.KeyNav("my-element", {
    "left" : function (e) {
        this.moveLeft(e.ctrlKey);
    },
    "right" : function (e) {
        this.moveRight(e.ctrlKey);
    },
    "enter" : function (e) {
        this.save();
    },
    scope : this
});
</code></pre>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="el" Type="Mixed">
                <Summary><![CDATA[The element to bind to]]></Summary>
              </Param>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="defaultEventAction" Type="String">
              <Summary><![CDATA[The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are
{@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and
{@link Ext.EventObject#stopPropagation} (defaults to 'stopEvent')]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabled" Type="Boolean">
              <Summary><![CDATA[True to disable this KeyNav instance (defaults to false)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="forceKeyDown" Type="Boolean">
              <Summary><![CDATA[Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since
IE does not propagate special keys on keypress, but setting this to true will force other browsers to also
handle keydown instead of keypress.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="disable">
              <Summary><![CDATA[Disable this KeyNav]]></Summary>
              <Parameters />
            </Method>
            <Method Name="enable">
              <Summary><![CDATA[Enable this KeyNav]]></Summary>
              <Parameters />
            </Method>
            <Method Name="setDisabled">
              <Summary><![CDATA[Convenience function for setting disabled/enabled by boolean.]]></Summary>
              <Parameters>
                <Param Name="disabled" Type="Boolean" />
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Layer" FullName="Ext.Layer" Package="Ext" DefinedIn="widgets\Layer.js" Extends="Ext.Element">
          <Summary><![CDATA[An extended {@link Ext.Element} object that supports a shadow and shim, constrain to viewport and
automatic maintaining of shadow/shim positions.
@cfg {Boolean} shim False to disable the iframe shim in browsers which need one (defaults to true)
@cfg {String/Boolean} shadow True to automatically create an {@link Ext.Shadow}, or a string indicating the
shadow's display {@link Ext.Shadow#mode}. False to disable the shadow. (defaults to false)
@cfg {Object} dh DomHelper object config to create element with (defaults to {tag: 'div', cls: 'x-layer'}).
@cfg {Boolean} constrain False to disable constrain to viewport (defaults to true)
@cfg {String} cls CSS class to add to the element
@cfg {Number} zindex Starting z-index (defaults to 11000)
@cfg {Number} shadowOffset Number of pixels to offset the shadow (defaults to 4)
@cfg {Boolean} useDisplay
Defaults to use css offsets to hide the Layer. Specify <tt>true</tt>
to use css style <tt>'display:none;'</tt> to hide the Layer.]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[An object with config options.]]></Summary>
              </Param>
              <Param Name="existingEl" Type="String/HTMLElement" Optional="true">
                <Summary><![CDATA[Uses an existing DOM element. If the element is not found it creates it.]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="setZIndex">
              <Summary><![CDATA[Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically
incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow
element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).]]></Summary>
              <Parameters>
                <Param Name="zindex" Type="Number">
                  <Summary><![CDATA[The new z-index to set]]></Summary>
                </Param>
              </Parameters>
              <Return Type="this">
                <Summary><![CDATA[The Layer]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="ListView" FullName="Ext.ListView" Package="Ext" DefinedIn="widgets\list\ListView.js" Xtype="listview" Extends="Ext.DataView">
          <Summary><![CDATA[<p>Ext.ListView is a fast and light-weight implentation of a
{@link Ext.grid.GridPanel Grid} like view with the following characteristics:</p>
<div class="mdetail-params"><ul>
<li>resizable columns</li>
<li>selectable</li>
<li>column widths are initially proportioned by percentage based on the container
width and number of columns</li>
<li>uses templates to render the data in any required format</li>
<li>no horizontal scrolling</li>
<li>no editing</li>
</ul></div>
<p>Example usage:</p>
<pre><code>
// consume JSON of this form:
{
   "images":[
     {
         "name":"dance_fever.jpg",
         "size":2067,
         "lastmod":1236974993000,
         "url":"images\/thumbs\/dance_fever.jpg"
      },
     {
         "name":"zack_sink.jpg",
         "size":2303,
         "lastmod":1236974993000,
         "url":"images\/thumbs\/zack_sink.jpg"
      }
   ]
} 
var store = new Ext.data.JsonStore({
    url: 'get-images.php',
    root: 'images',
    fields: [
        'name', 'url',
       {name:'size', type: 'float'},
       {name:'lastmod', type:'date', dateFormat:'timestamp'}
    ]
});
store.load();

var listView = new Ext.ListView({
    store: store,
    multiSelect: true,
    emptyText: 'No images to display',
    reserveScrollOffset: true,
    columns: [{
        header: 'File',
        width: .5,
        dataIndex: 'name'
    },{
        header: 'Last Modified',
        width: .35, 
        dataIndex: 'lastmod',
        tpl: '{lastmod:date("m-d h:i a")}'
    },{
        header: 'Size',
        dataIndex: 'size',
        tpl: '{size:fileSize}', // format using Ext.util.Format.fileSize()
        align: 'right'
    }]
});

// put it in a Panel so it looks pretty
var panel = new Ext.Panel({
    id:'images-view',
    width:425,
    height:250,
    collapsible:true,
    layout:'fit',
    title:'Simple ListView <i>(0 items selected)</i>',
    items: listView
});
panel.render(document.body);

// little bit of feedback
listView.on('selectionchange', function (view, nodes) {
    var l = nodes.length;
    var s = l != 1 ? 's' : '';
    panel.setTitle('Simple ListView <i>('+l+' item'+s+' selected)</i>');
});
</code></pre>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object" />
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="columnResize" Type="Boolean/Object">
              <Summary><![CDATA[Specify <tt>true</tt> or specify a configuration object for {@link Ext.ListView.ColumnResizer}
to enable the columns to be resizable (defaults to <tt>true</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="columns" Type="Array">
              <Summary><![CDATA[<pre><code>
{
    align: 'right',
    dataIndex: 'size',
    header: 'Size',
    tpl: '{size:fileSize}',
    width: .35
}
</code></pre>
Acceptable properties for each column configuration object are:
<div class="mdetail-params"><ul>
<li><b><tt>align</tt></b> : String<div class="sub-desc">Set the CSS text-align property
of the column. Defaults to <tt>'left'</tt>.</div></li>
<li><b><tt>dataIndex</tt></b> : String<div class="sub-desc">See {@link Ext.grid.Column}.
{@link Ext.grid.Column#dataIndex dataIndex} for details.</div></li>
<li><b><tt>header</tt></b> : String<div class="sub-desc">See {@link Ext.grid.Column}.
{@link Ext.grid.Column#header header} for details.</div></li>
<li><b><tt>tpl</tt></b> : String<div class="sub-desc">Specify a string to pass as the
configuration string for {@link Ext.XTemplate}.  By default an {@link Ext.XTemplate}
will be implicitly created using the <tt>dataIndex</tt>.</div></li>
<li><b><tt>width</tt></b> : Number<div class="sub-desc">Percentage of the container width
this column should be allocated.  Columns that have no width specified will be
allocated with an equal percentage to fill 100% of the container width.  To easily take
advantage of the full container width, leave the width of at least one column undefined.
Note that if you do not want to take up the full width of the container, the width of
every column needs to be explicitly defined.</div></li>
</ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="columnSort" Type="Boolean/Object">
              <Summary><![CDATA[Specify <tt>true</tt> or specify a configuration object for {@link Ext.ListView.Sorter}
to enable the columns to be sortable (defaults to <tt>true</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hideHeaders" Type="Boolean">
              <Summary><![CDATA[<tt>true</tt> to hide the {@link #internalTpl header row} (defaults to <tt>false</tt> so
the {@link #internalTpl header row} will be shown).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="internalTpl" Type="String/Array">
              <Summary><![CDATA[The template to be used for the header row.  See {@link #tpl} for more details.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="itemSelector" Type="String">
              <Summary><![CDATA[Defaults to <tt>'dl'</tt> to work with the preconfigured <b><tt>{@link Ext.DataView#tpl tpl}</tt></b>.
This setting specifies the CSS selector (e.g. <tt>div.some-class</tt> or <tt>span:first-child</tt>)
that will be used to determine what nodes the ListView will be working with.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="overClass" Type="String">
              <Summary><![CDATA[<tt>'x-list-over'</tt>). An example overriding the default styling:
    <pre><code>
    .x-list-over {background-color: orange;}
    </code></pre>
@type String]]></Summary>
            </ConfigOption>
            <ConfigOption Name="reserveScrollOffset" Type="Boolean">
              <Summary><![CDATA[By default will defer accounting for the configured <b><tt>{@link #scrollOffset}</tt></b>
for 10 milliseconds.  Specify <tt>true</tt> to account for the configured
<b><tt>{@link #scrollOffset}</tt></b> immediately.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scrollOffset" Type="Number">
              <Summary><![CDATA[<tt>undefined</tt>). If an explicit value isn't specified, this will be automatically
calculated.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="selectedClass" Type="String">
              <Summary><![CDATA[<tt>'x-list-selected'</tt>). An example overriding the default styling:
    <pre><code>
    .x-list-selected {background-color: yellow;}
    </code></pre>
@type String]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="disableHeaders">
              <Summary><![CDATA[Set this property to <tt>true</tt> to disable the header click handler disabling sort
(defaults to <tt>false</tt>).]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="collectData">
              <Summary><![CDATA[<p>Function which can be overridden which returns the data object passed to this
view's {@link #tpl template} to render the whole ListView. The returned object
shall contain the following properties:</p>
<div class="mdetail-params"><ul>
<li><b>columns</b> : String<div class="sub-desc">See <tt>{@link #columns}</tt></div></li>
<li><b>rows</b> : String<div class="sub-desc">See
<tt>{@link Ext.DataView}.{@link Ext.DataView#collectData collectData}</div></li>
</ul></div>]]></Summary>
              <Parameters>
                <Param Name="records" Type="Array">
                  <Summary><![CDATA[An Array of {@link Ext.data.Record}s to be rendered into the DataView.]]></Summary>
                </Param>
                <Param Name="startIndex" Type="Number">
                  <Summary><![CDATA[the index number of the Record being prepared for rendering.
XTemplate as described above.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Object">
                <Summary><![CDATA[A data object containing properties to be processed by a repeating]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="ListView.ColumnResizer" FullName="Ext.ListView.ColumnResizer" Package="Ext" DefinedIn="widgets\list\ColumnResizer.js" Extends="Ext.util.Observable">
          <Summary><![CDATA[<p>Supporting Class for Ext.ListView.</p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object" />
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="minPct" Type="Number" />
          </ConfigOptions>
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="ListView.Sorter" FullName="Ext.ListView.Sorter" Package="Ext" DefinedIn="widgets\list\Sorter.js" Extends="Ext.util.Observable">
          <Summary><![CDATA[<p>Supporting Class for Ext.ListView.</p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object" />
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="sortClasses" Type="Array">
              <Summary><![CDATA[The CSS classes applied to a header when it is sorted. (defaults to <tt>["sort-asc", "sort-desc"]</tt>)]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="LoadMask" FullName="Ext.LoadMask" Package="Ext" DefinedIn="widgets\LoadMask.js">
          <Summary><![CDATA[A simple utility class for generically masking elements while loading data.  If the {@link #store}
config option is specified, the masking will be automatically synchronized with the store's loading
process and the mask element will be cached for reuse.  For all other elements, this mask will replace the
element's Updater load indicator and will be destroyed after the initial load.
<p>Example usage:</p>
<pre><code>
// Basic mask:
var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
myMask.show();
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new LoadMask.]]></Summary>
            <Parameters>
              <Param Name="el" Type="Mixed">
                <Summary><![CDATA[The element or DOM node, or its id]]></Summary>
              </Param>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="msg" Type="String">
              <Summary><![CDATA[The text to display in a centered loading message box (defaults to 'Loading...')]]></Summary>
            </ConfigOption>
            <ConfigOption Name="msgCls" Type="String">
              <Summary><![CDATA[The CSS class to apply to the loading message element (defaults to "x-mask-loading")]]></Summary>
            </ConfigOption>
            <ConfigOption Name="removeMask" Type="Boolean">
              <Summary><![CDATA[True to create a single-use mask that is automatically destroyed after loading (useful for page loads),
False to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="store" Type="Ext.data.Store">
              <Summary><![CDATA[Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and
hidden on either load sucess, or load fail.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="disable">
              <Summary><![CDATA[Disables the mask to prevent it from being displayed]]></Summary>
              <Parameters />
            </Method>
            <Method Name="enable">
              <Summary><![CDATA[Enables the mask so that it can be displayed]]></Summary>
              <Parameters />
            </Method>
            <Method Name="hide">
              <Summary><![CDATA[Hide this LoadMask.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Show this LoadMask over the configured Element.]]></Summary>
              <Parameters />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="MessageBox" FullName="Ext.MessageBox" Package="Ext" DefinedIn="widgets\MessageBox.js" Singleton="true">
          <Summary><![CDATA[<p>Utility class for generating different styles of message boxes.  The alias Ext.Msg can also be used.<p/>
<p>Note that the MessageBox is asynchronous.  Unlike a regular JavaScript <code>alert</code> (which will halt
browser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code
that should only run <em>after</em> some user feedback from the MessageBox, you must use a callback function
(see the <code>function</code> parameter for {@link #show} for more details).</p>
<p>Example usage:</p>
<pre><code>
// Basic alert:
Ext.Msg.alert('Status', 'Changes saved successfully.');

// Prompt for user data and process the result using a callback:
Ext.Msg.prompt('Name', 'Please enter your name:', function (btn, text) {
    if (btn == 'ok') {
        // process text value and close...
    }
});

// Show a dialog using config options:
Ext.Msg.show({
   title:'Save Changes?',
   msg: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',
   buttons: Ext.Msg.YESNOCANCEL,
   fn: processResult,
   animEl: 'elId',
   icon: Ext.MessageBox.QUESTION
});
</code></pre>]]></Summary>
          <ConfigOptions />
          <Properties>
            <Property Name="Msg">
              <Summary><![CDATA[Shorthand for {@link Ext.MessageBox}]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="alert">
              <Summary><![CDATA[Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).
If a callback function is passed it will be called after the user clicks the button, and the
id of the button that was clicked will be passed as the only parameter to the callback
(could also be the top-right close button).]]></Summary>
              <Parameters>
                <Param Name="title" Type="String">
                  <Summary><![CDATA[The title bar text]]></Summary>
                </Param>
                <Param Name="msg" Type="String">
                  <Summary><![CDATA[The message box body text]]></Summary>
                </Param>
                <Param Name="fn" Type="Function" Optional="true">
                  <Summary><![CDATA[The callback function invoked after the message box is closed]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope of the callback function]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="confirm">
              <Summary><![CDATA[Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).
If a callback function is passed it will be called after the user clicks either button,
and the id of the button that was clicked will be passed as the only parameter to the callback
(could also be the top-right close button).]]></Summary>
              <Parameters>
                <Param Name="title" Type="String">
                  <Summary><![CDATA[The title bar text]]></Summary>
                </Param>
                <Param Name="msg" Type="String">
                  <Summary><![CDATA[The message box body text]]></Summary>
                </Param>
                <Param Name="fn" Type="Function" Optional="true">
                  <Summary><![CDATA[The callback function invoked after the message box is closed]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope of the callback function]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getDialog">
              <Summary><![CDATA[Returns a reference to the underlying {@link Ext.Window} element]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[The window]]></Summary>
              </Return>
            </Method>
            <Method Name="hide">
              <Summary><![CDATA[Hides the message box if it is displayed]]></Summary>
              <Parameters />
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="isVisible">
              <Summary><![CDATA[Returns true if the message box is currently displayed]]></Summary>
              <Parameters />
              <Return Type="Boolean">
                <Summary><![CDATA[True if the message box is visible, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="progress">
              <Summary><![CDATA[Displays a message box with a progress bar.  This message box has no buttons and is not closeable by
the user.  You are responsible for updating the progress bar as needed via {@link Ext.MessageBox#updateProgress}
and closing the message box when the process is complete.]]></Summary>
              <Parameters>
                <Param Name="title" Type="String">
                  <Summary><![CDATA[The title bar text]]></Summary>
                </Param>
                <Param Name="msg" Type="String">
                  <Summary><![CDATA[The message box body text]]></Summary>
                </Param>
                <Param Name="progressText" Type="String" Optional="true">
                  <Summary><![CDATA[The text to display inside the progress bar (defaults to '')]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="prompt">
              <Summary><![CDATA[Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).
The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user
clicks either button, and the id of the button that was clicked (could also be the top-right
close button) and the text that was entered will be passed as the two parameters to the callback.]]></Summary>
              <Parameters>
                <Param Name="title" Type="String">
                  <Summary><![CDATA[The title bar text]]></Summary>
                </Param>
                <Param Name="msg" Type="String">
                  <Summary><![CDATA[The message box body text]]></Summary>
                </Param>
                <Param Name="fn" Type="Function" Optional="true">
                  <Summary><![CDATA[The callback function invoked after the message box is closed]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope of the callback function]]></Summary>
                </Param>
                <Param Name="multiline" Type="Boolean/Number" Optional="true">
                  <Summary><![CDATA[True to create a multiline textbox using the defaultTextHeight
property, or the height in pixels to create the textbox (defaults to false / single-line)]]></Summary>
                </Param>
                <Param Name="value" Type="String" Optional="true">
                  <Summary><![CDATA[Default value of the text input element (defaults to '')]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setIcon">
              <Summary><![CDATA[Adds the specified icon to the dialog.  By default, the class 'ext-mb-icon' is applied for default
styling, and the class passed in is expected to supply the background image url. Pass in empty string ('')
to clear any existing icon. This method must be called before the MessageBox is shown.
The following built-in icon classes are supported, but you can also pass in a custom class name:
<pre>
Ext.MessageBox.INFO
Ext.MessageBox.WARNING
Ext.MessageBox.QUESTION
Ext.MessageBox.ERROR
</pre>]]></Summary>
              <Parameters>
                <Param Name="icon" Type="String">
                  <Summary><![CDATA[A CSS classname specifying the icon's background image url, or empty string to clear the icon]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Displays a new message box, or reinitializes an existing message box, based on the config options
passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,
although those calls are basic shortcuts and do not support all of the config options allowed here.]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The following config options are supported: <ul>
<li><b>animEl</b> : String/Element<div class="sub-desc">An id or Element from which the message box should animate as it
opens and closes (defaults to undefined)</div></li>
<li><b>buttons</b> : Object/Boolean<div class="sub-desc">A button config object (e.g., Ext.MessageBox.OKCANCEL or {ok:'Foo',
cancel:'Bar'}), or false to not show any buttons (defaults to false)</div></li>
<li><b>closable</b> : Boolean<div class="sub-desc">False to hide the top-right close button (defaults to true). Note that
progress and wait dialogs will ignore this property and always hide the close button as they can only
be closed programmatically.</div></li>
<li><b>cls</b> : String<div class="sub-desc">A custom CSS class to apply to the message box's container element</div></li>
<li><b>defaultTextHeight</b> : Number<div class="sub-desc">The default height in pixels of the message box's multiline textarea
if displayed (defaults to 75)</div></li>
<li><b>fn</b> : Function<div class="sub-desc">A callback function which is called when the dialog is dismissed either
by clicking on the configured buttons, or on the dialog close button, or by pressing
the return button to enter input.
<p>Progress and wait dialogs will ignore this option since they do not respond to user
actions and can only be closed programmatically, so any required function should be called
by the same code after it closes the dialog. Parameters passed:<ul>
<li><b>buttonId</b> : String<div class="sub-desc">The ID of the button pressed, one of:<div class="sub-desc"><ul>
<li><tt>ok</tt></li>
<li><tt>yes</tt></li>
<li><tt>no</tt></li>
<li><tt>cancel</tt></li>
</ul></div></div></li>
<li><b>text</b> : String<div class="sub-desc">Value of the input field if either <tt><a href="#show-option-prompt" ext:member="show-option-prompt" ext:cls="Ext.MessageBox">prompt</a></tt>
or <tt><a href="#show-option-multiline" ext:member="show-option-multiline" ext:cls="Ext.MessageBox">multiline</a></tt> is true</div></li>
<li><b>opt</b> : Object<div class="sub-desc">The config object passed to show.</div></li>
</ul></p></div></li>
<li><b>scope</b> : Object<div class="sub-desc">The scope of the callback function</div></li>
<li><b>icon</b> : String<div class="sub-desc">A CSS class that provides a background image to be used as the body icon for the
dialog (e.g. Ext.MessageBox.WARNING or 'custom-class') (defaults to '')</div></li>
<li><b>iconCls</b> : String<div class="sub-desc">The standard {@link Ext.Window#iconCls} to
add an optional header icon (defaults to '')</div></li>
<li><b>maxWidth</b> : Number<div class="sub-desc">The maximum width in pixels of the message box (defaults to 600)</div></li>
<li><b>minWidth</b> : Number<div class="sub-desc">The minimum width in pixels of the message box (defaults to 100)</div></li>
<li><b>modal</b> : Boolean<div class="sub-desc">False to allow user interaction with the page while the message box is
displayed (defaults to true)</div></li>
<li><b>msg</b> : String<div class="sub-desc">A string that will replace the existing message box body text (defaults to the
XHTML-compliant non-breaking space character '&amp;#160;')</div></li>
<li><a id="show-option-multiline"></a><b>multiline</b> : Boolean<div class="sub-desc">
True to prompt the user to enter multi-line text (defaults to false)</div></li>
<li><b>progress</b> : Boolean<div class="sub-desc">True to display a progress bar (defaults to false)</div></li>
<li><b>progressText</b> : String<div class="sub-desc">The text to display inside the progress bar if progress = true (defaults to '')</div></li>
<li><a id="show-option-prompt"></a><b>prompt</b> : Boolean<div class="sub-desc">True to prompt the user to enter single-line text (defaults to false)</div></li>
<li><b>proxyDrag</b> : Boolean<div class="sub-desc">True to display a lightweight proxy while dragging (defaults to false)</div></li>
<li><b>title</b> : String<div class="sub-desc">The title text</div></li>
<li><b>value</b> : String<div class="sub-desc">The string value to set into the active textbox element if displayed</div></li>
<li><b>wait</b> : Boolean<div class="sub-desc">True to display a progress bar (defaults to false)</div></li>
<li><b>waitConfig</b> : Object<div class="sub-desc">A {@link Ext.ProgressBar#waitConfig} object (applies only if wait = true)</div></li>
<li><b>width</b> : Number<div class="sub-desc">The width of the dialog in pixels</div></li>
</ul>
Example usage:
<pre><code>
Ext.Msg.show({
title: 'Address',
msg: 'Please enter your address:',
width: 300,
buttons: Ext.MessageBox.OKCANCEL,
multiline: true,
fn: saveAddress,
animEl: 'addAddressBtn',
icon: Ext.MessageBox.INFO
});
</code></pre>]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="updateProgress">
              <Summary><![CDATA[Updates a progress-style message box's text and progress bar. Only relevant on message boxes
initiated via {@link Ext.MessageBox#progress} or {@link Ext.MessageBox#wait},
or by calling {@link Ext.MessageBox#show} with progress: true.]]></Summary>
              <Parameters>
                <Param Name="value" Type="Number">
                  <Summary><![CDATA[Any number between 0 and 1 (e.g., .5, defaults to 0)]]></Summary>
                </Param>
                <Param Name="progressText" Type="String">
                  <Summary><![CDATA[The progress text to display inside the progress bar (defaults to '')]]></Summary>
                </Param>
                <Param Name="msg" Type="String">
                  <Summary><![CDATA[The message box's body text is replaced with the specified string (defaults to undefined
so that any existing body text will not get overwritten by default unless a new value is passed in)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="updateText">
              <Summary><![CDATA[Updates the message box body text]]></Summary>
              <Parameters>
                <Param Name="text" Type="String" Optional="true">
                  <Summary><![CDATA[Replaces the message box element's innerHTML with the specified string (defaults to
the XHTML-compliant non-breaking space character '&amp;#160;')]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="wait">
              <Summary><![CDATA[Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user
interaction while waiting for a long-running process to complete that does not have defined intervals.
You are responsible for closing the message box when the process is complete.]]></Summary>
              <Parameters>
                <Param Name="msg" Type="String">
                  <Summary><![CDATA[The message box body text]]></Summary>
                </Param>
                <Param Name="title" Type="String" Optional="true">
                  <Summary><![CDATA[The title bar text]]></Summary>
                </Param>
                <Param Name="config" Type="Object" Optional="true">
                  <Summary><![CDATA[A {@link Ext.ProgressBar#waitConfig} object]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.MessageBox">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="PagingToolbar" FullName="Ext.PagingToolbar" Package="Ext" DefinedIn="widgets\PagingToolbar.js" Xtype="paging" Extends="Ext.Toolbar">
          <Summary><![CDATA[<p>As the amount of records increases, the time required for the browser to render
them increases. Paging is used to reduce the amount of data exchanged with the client.
Note: if there are more records/rows than can be viewed in the available screen area, vertical
scrollbars will be added.</p>
<p>Paging is typically handled on the server side (see exception below). The client sends
parameters to the server side, which the server needs to interpret and then respond with the
approprate data.</p>
<p><b>Ext.PagingToolbar</b> is a specialized toolbar that is bound to a {@link Ext.data.Store}
and provides automatic paging control. This Component {@link Ext.data.Store#load load}s blocks
of data into the <tt>{@link #store}</tt> by passing {@link Ext.data.Store#paramNames paramNames} used for
paging criteria.</p>
<p>PagingToolbar is typically used as one of the Grid's toolbars:</p>
<pre><code>
Ext.QuickTips.init(); // to display button quicktips

var myStore = new Ext.data.Store({
    reader: new Ext.data.JsonReader({
       {@link Ext.data.JsonReader#totalProperty totalProperty}: 'results', 
        ...
    }),
    ...
});

var myPageSize = 25;  // server script should only send back 25 items at a time

var grid = new Ext.grid.GridPanel({
    ...
    store: myStore,
    bbar: new Ext.PagingToolbar({
       {@link #store}: myStore,       // grid and PagingToolbar using same store
       {@link #displayInfo}: true,
       {@link #pageSize}: myPageSize,
       {@link #prependButtons}: true,
        items: [
            'text 1'
        ]
    })
});
</code></pre>

<p>To use paging, pass the paging requirements to the server when the store is first loaded.</p>
<pre><code>
store.load({
    params: {
        // specify params for the first page load if using paging
        start: 0,          
        limit: myPageSize,
        // other params
        foo:   'bar'
    }
});
</code></pre>

<p>If using {@link Ext.data.Store#autoLoad store's autoLoad} configuration:</p>
<pre><code>
var myStore = new Ext.data.Store({
   {@link Ext.data.Store#autoLoad autoLoad}: {params:{start: 0, limit: 25}},
    ...
});
</code></pre>

<p>The packet sent back from the server would have this form:</p>
<pre><code>
{
    "success": true,
    "results": 2000, 
    "rows": [ // <b>*Note:</b> this must be an Array 
       { "id":  1, "name": "Bill", "occupation": "Gardener" },
       { "id":  2, "name":  "Ben", "occupation": "Horticulturalist" },
        ...
       { "id": 25, "name":  "Sue", "occupation": "Botanist" }
    ]
}
</code></pre>
<p><u>Paging with Local Data</u></p>
<p>Paging can also be accomplished with local data using extensions:</p>
<div class="mdetail-params"><ul>
<li><a href="http://extjs.com/forum/showthread.php?t=71532">Ext.ux.data.PagingStore</a></li>
<li>Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)</li>
</ul></div>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="afterPageText" Type="String">
              <Summary><![CDATA[Customizable piece of the default paging text (defaults to <tt>'of {0}'</tt>). Note that
this string is formatted using <tt>{0}</tt> as a token that is replaced by the number of
total pages. This token should be preserved when overriding this string if showing the
total page count is desired.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="beforePageText" Type="String">
              <Summary><![CDATA[The text displayed before the input item (defaults to <tt>'Page'</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="displayInfo" Type="Boolean">
              <Summary><![CDATA[<tt>true</tt> to display the displayMsg (defaults to <tt>false</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="displayMsg" Type="String">
              <Summary><![CDATA[The paging status message to display (defaults to <tt>'Displaying {0} - {1} of {2}'</tt>).
Note that this string is formatted using the braced numbers <tt>{0}-{2}</tt> as tokens
that are replaced by the values for start, end and total respectively. These tokens should
be preserved when overriding this string if showing those values is desired.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="emptyMsg" Type="String">
              <Summary><![CDATA[The message to display when no records are found (defaults to 'No data to display')]]></Summary>
            </ConfigOption>
            <ConfigOption Name="firstText" Type="String">
              <Summary><![CDATA[The quicktip text displayed for the first page button (defaults to <tt>'First Page'</tt>).
<b>Note</b>: quick tips must be initialized for the quicktip to show.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="lastText" Type="String">
              <Summary><![CDATA[The quicktip text displayed for the last page button (defaults to <tt>'Last Page'</tt>).
<b>Note</b>: quick tips must be initialized for the quicktip to show.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="nextText" Type="String">
              <Summary><![CDATA[The quicktip text displayed for the next page button (defaults to <tt>'Next Page'</tt>).
<b>Note</b>: quick tips must be initialized for the quicktip to show.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="pageSize" Type="Number">
              <Summary><![CDATA[The number of records to display per page (defaults to <tt>20</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="prependButtons" Type="Boolean">
              <Summary><![CDATA[<tt>true</tt> to insert any configured <tt>items</tt> <i>before</i> the paging buttons.
Defaults to <tt>false</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="prevText" Type="String">
              <Summary><![CDATA[The quicktip text displayed for the previous page button (defaults to <tt>'Previous Page'</tt>).
<b>Note</b>: quick tips must be initialized for the quicktip to show.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="refreshText" Type="String">
              <Summary><![CDATA[The quicktip text displayed for the Refresh button (defaults to <tt>'Refresh'</tt>).
<b>Note</b>: quick tips must be initialized for the quicktip to show.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="store" Type="Ext.data.Store">
              <Summary><![CDATA[The {@link Ext.data.Store} the paging toolbar should use as its data source (required).]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="cursor">
              <Summary><![CDATA[Indicator for the record position.  This property might be used to get the active page
number for example:<pre><code>
// t is reference to the paging toolbar instance
var activePage = Math.ceil((t.cursor + t.pageSize) / t.pageSize);
</code></pre>]]></Summary>
            </Property>
            <Property Name="pageSize">
              <Summary><![CDATA[The number of records to display per page.  See also <tt>{@link #cursor}</tt>.]]></Summary>
            </Property>
            <Property Name="paramNames">
              <Summary><![CDATA[<p><b>Deprecated</b>. <code>paramNames</code> should be set in the <b>data store</b>
(see {@link Ext.data.Store#paramNames}).</p>
<br><p>Object mapping of parameter names used for load calls, initially set to:</p>
<pre>{start: 'start', limit: 'limit'}</pre>
@deprecated]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="bind">
              <Summary><![CDATA[Binds the paging toolbar to the specified {@link Ext.data.Store} <b>(deprecated)</b>]]></Summary>
              <Parameters>
                <Param Name="store" Type="Ext.data.Store">
                  <Summary><![CDATA[The data store to bind]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="bindStore">
              <Summary><![CDATA[Binds the paging toolbar to the specified {@link Ext.data.Store}]]></Summary>
              <Parameters>
                <Param Name="store" Type="Store">
                  <Summary><![CDATA[The store to bind to this toolbar]]></Summary>
                </Param>
                <Param Name="initial" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to not remove listeners]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="changePage">
              <Summary><![CDATA[Change the active page]]></Summary>
              <Parameters>
                <Param Name="page" Type="Integer">
                  <Summary><![CDATA[The page to display]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="doRefresh">
              <Summary><![CDATA[Refresh the current page, has the same effect as clicking the 'refresh' button.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="moveFirst">
              <Summary><![CDATA[Move to the first page, has the same effect as clicking the 'first' button.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="moveLast">
              <Summary><![CDATA[Move to the last page, has the same effect as clicking the 'last' button.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="moveNext">
              <Summary><![CDATA[Move to the next page, has the same effect as clicking the 'next' button.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="movePrevious">
              <Summary><![CDATA[Move to the previous page, has the same effect as clicking the 'previous' button.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="unbind">
              <Summary><![CDATA[Unbinds the paging toolbar from the specified {@link Ext.data.Store} <b>(deprecated)</b>]]></Summary>
              <Parameters>
                <Param Name="store" Type="Ext.data.Store">
                  <Summary><![CDATA[The data store to unbind]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="beforechange">
              <Summary><![CDATA[Fires just before the active page is changed. Return false to prevent the active page from being changed. loading the required page. This will contain:<ul> <li><code>start</code> : Number <div class="sub-desc">The starting row number for the next page of records to be retrieved from the server</div></li> <li><code>limit</code> : Number <div class="sub-desc">The number of records to be retrieved from the server</div></li> </ul> <p>(note: the names of the <b>start</b> and <b>limit</b> properties are determined by the store's {@link Ext.data.Store#paramNames paramNames} property.)</p> <p>Parameters may be added as required in the event handler.</p>.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.PagingToolbar">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="params" Type="Object">
                  <Summary><![CDATA[An object hash of the parameters which the PagingToolbar will send when]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="change">
              <Summary><![CDATA[Fires after the active page has been changed. <li><code>total</code> : Number <div class="sub-desc">The total number of records in the dataset as returned by the server</div></li> <li><code>activePage</code> : Number <div class="sub-desc">The current page number</div></li> <li><code>pages</code> : Number <div class="sub-desc">The total number of pages (calculated from the total number of records in the dataset as returned by the server and the current {@link #pageSize})</div></li> </ul>.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.PagingToolbar">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="pageData" Type="Object">
                  <Summary><![CDATA[An object that has these properties:<ul>]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Panel" FullName="Ext.Panel" Package="Ext" DefinedIn="widgets\Panel.js" Xtype="panel" Extends="Ext.Container" Subclasses="Ext.form.FieldSet,Ext.form.FormPanel,Ext.grid.GridPanel,Ext.tree.TreePanel,Ext.ButtonGroup,Ext.TabPanel,Ext.Tip,Ext.Window">
          <Summary><![CDATA[<p>Panel is a container that has specific functionality and structural components that make
it the perfect building block for application-oriented user interfaces.</p>
<p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable
of being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>
<p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components
to a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether
those child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By
default, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders
child components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>
at all.</p>
<p>A Panel may also contain {@link #bbar bottom} and {@link #tbar top} toolbars, along with separate
{@link #header}, {@link #footer} and {@link #body} sections (see {@link #frame} for additional
information).</p>
<p>Panel also provides built-in {@link #collapsible expandable and collapsible behavior}, along with
a variety of {@link #tools prebuilt tool buttons} that can be wired up to provide other customized
behavior.  Panels can be easily dropped into any {@link Ext.Container Container} or layout, and the
layout and rendering pipeline is {@link Ext.Container#add completely managed by the framework}.</p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="animCollapse" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to animate the transition when the panel is collapsed, <code>false</code> to skip the
animation (defaults to <code>true</code> if the {@link Ext.Fx} class is available, otherwise <code>false</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="applyTo" Type="Mixed">
              <Summary><![CDATA[<p>The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in
the document that specifies some panel-specific structural markup.  When <code>applyTo</code> is used,
constituent parts of the panel can be specified by CSS class name within the main element, and the panel
will automatically create those components from that markup. Any required components not specified in the
markup will be autogenerated if necessary.</p>
<p>The following class names are supported (baseCls will be replaced by {@link #baseCls}):</p>
<ul><li>baseCls + '-header'</li>
<li>baseCls + '-header-text'</li>
<li>baseCls + '-bwrap'</li>
<li>baseCls + '-tbar'</li>
<li>baseCls + '-body'</li>
<li>baseCls + '-bbar'</li>
<li>baseCls + '-footer'</li></ul>
<p>Using this config, a call to render() is not required.  If applyTo is specified, any value passed for
{@link #renderTo} will be ignored and the target element's parent node will automatically be used as the
panel's container.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoEl" Type="String" />
            <ConfigOption Name="autoHeight" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to use height:'auto', <code>false</code> to use fixed height (defaults to <code>false</code>).
<b>Note</b>: Setting <code>autoHeight: true</code> means that the browser will manage the panel's height
based on its contents, and that Ext will not manage it at all. If the panel is within a layout that
manages dimensions (<code>fit</code>, <code>border</code>, etc.) then setting <code>autoHeight: true</code>
can cause issues with scrolling and will not generally work as expected since the panel will take
on the height of its contents rather than the height required by the Ext layout.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoLoad" Type="Object/String/Function">
              <Summary><![CDATA[A valid url spec according to the Updater {@link Ext.Updater#update} method.
If autoLoad is not null, the panel will attempt to load its contents
immediately upon render.<p>
The URL will become the default URL for this panel's {@link #body} element,
so it may be {@link Ext.Element#refresh refresh}ed at any time.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoScroll" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to use overflow:'auto' on the panel's body element and show scroll bars automatically when
necessary, <code>false</code> to clip any overflowing content (defaults to <code>false</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="baseCls" Type="String">
              <Summary><![CDATA[The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).
<p>Another option available by default is to specify <code>'x-plain'</code> which strips all styling
except for required attributes for Ext layouts to function (e.g. overflow:hidden).
See <code>{@link #unstyled}</code> also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bbar" Type="Object/Array">
              <Summary><![CDATA[<p>The bottom toolbar of the panel. This can be a {@link Ext.Toolbar} object, a toolbar config, or an array of
buttons/button configs to be added to the toolbar.  Note that this is not available as a property after render.
To access the bottom toolbar after render, use {@link #getBottomToolbar}.</p>
<p><b>Note:</b> Although a Toolbar may contain Field components, these will <b>not</b> be updated by a load
of an ancestor FormPanel. A Panel's toolbars are not part of the standard Container->Component hierarchy, and
so are not scanned to collect form items. However, the values <b>will</b> be submitted because form
submission parameters are collected from the DOM tree.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bbarCfg" Type="Object">
              <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
of this Panel's {@link #bbar} Element.  See <code>{@link #bodyCfg}</code> also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bodyBorder" Type="Boolean">
              <Summary><![CDATA[True to display an interior border on the body element of the panel, false to hide it (defaults to true).
This only applies when {@link #border} == true.  If border == true and bodyBorder == false, the border will display
as a 1px wide inset border, giving the entire body element an inset appearance.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bodyCfg" Type="Object">
              <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} element specification object may be specified for any
Panel Element.</p>
<p>By default, the Default element in the table below will be used for the html markup to
create a child element with the commensurate Default class name (<code>baseCls</code> will be
replaced by <code>{@link #baseCls}</code>):</p>
<pre>
Panel      Default  Default             Custom      Additional       Additional
Element    element  class               element     class            style
========   ==========================   =========   ==============   ===========
{@link #header}     div     {@link #baseCls}+'-header'  {@link #headerCfg}   headerCssClass   headerStyle
{@link #bwrap}      div     {@link #baseCls}+'-bwrap'    {@link #bwrapCfg}    bwrapCssClass    bwrapStyle
+ tbar     div     {@link #baseCls}+'-tbar'      {@link #tbarCfg}     tbarCssClass     tbarStyle
+ {@link #body}     div     {@link #baseCls}+'-body'      {@link #bodyCfg}    {@link #bodyCssClass}    {@link #bodyStyle}
+ bbar     div     {@link #baseCls}+'-bbar'      {@link #bbarCfg}     bbarCssClass     bbarStyle
+ {@link #footer}   div     {@link #baseCls}+'-footer'  {@link #footerCfg}   footerCssClass   footerStyle
</pre>
<p>Configuring a Custom element may be used, for example, to force the {@link #body} Element
to use a different form of markup than is created by default. An example of this might be
to {@link Ext.Element#createChild create a child} Panel containing a custom content, such as
a header, or forcing centering of all Panel content by having the body be a &lt;center&gt;
element:</p>
<pre><code>
new Ext.Panel({
    title: 'Message Title',
    renderTo: Ext.getBody(),
    width: 200, height: 130,
    <b>bodyCfg</b>: {
        tag: 'center',
        cls: 'x-panel-body',  // Default class not applied if Custom element specified
        html: 'Message'
    },
    footerCfg: {
        tag: 'h2',
        cls: 'x-panel-footer'        // same as the Default class
        html: 'footer html'
    },
    footerCssClass: 'custom-footer', // additional css class, see {@link Ext.element#addClass addClass}
    footerStyle:    'background-color:red' // see {@link #bodyStyle}
});
</code></pre>
<p>The example above also explicitly creates a <code>{@link #footer}</code> with custom markup and
styling applied.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bodyCssClass" Type="String/Object/Function">
              <Summary><![CDATA[Additional css class selector to be applied to the {@link #body} element in the format expected by
{@link Ext.Element#addClass} (defaults to null). See {@link #bodyCfg}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bodyStyle" Type="String/Object/Function">
              <Summary><![CDATA[Custom CSS styles to be applied to the {@link #body} element in the format expected by
{@link Ext.Element#applyStyles} (defaults to null). See {@link #bodyCfg}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="border" Type="Boolean">
              <Summary><![CDATA[True to display the borders of the panel's body element, false to hide them (defaults to true).  By default,
the border is a 2px wide inset border, but this can be further altered by setting {@link #bodyBorder} to false.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="buttonAlign" Type="String">
              <Summary><![CDATA[The alignment of any {@link #buttons} added to this panel.  Valid values are <code>'right'</code>,
<code>'left'</code> and <code>'center'</code> (defaults to <code>'right'</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="buttons" Type="Array">
              <Summary><![CDATA[<code>buttons</code> will be used as <code>{@link Ext.Container#items items}</code> for the toolbar in
the footer (<code>{@link #fbar}</code>). Typically the value of this configuration property will be
an array of {@link Ext.Button}s or {@link Ext.Button} configuration objects.
If an item is configured with <code>minWidth</code> or the Panel is configured with <code>minButtonWidth</code>,
that width will be applied to the item.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="bwrapCfg" Type="Object">
              <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
of this Panel's {@link #bwrap} Element.  See <code>{@link #bodyCfg}</code> also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="closable" Type="Boolean">
              <Summary><![CDATA[Panels themselves do not directly support being closed, but some Panel subclasses do (like
{@link Ext.Window}) or a Panel Class within an {@link Ext.TabPanel}.  Specify <code>true</code>
to enable closing in such situations. Defaults to <code>false</code>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="collapsed" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to render the panel collapsed, <code>false</code> to render it expanded (defaults to
<code>false</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="collapsedCls" Type="String">
              <Summary><![CDATA[A CSS class to add to the panel's element after it has been collapsed (defaults to
<code>'x-panel-collapsed'</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="collapseFirst" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to make sure the collapse/expand toggle button always renders first (to the left of)
any other tools in the panel's title bar, <code>false</code> to render it last (defaults to <code>true</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="collapsible" Type="Boolean">
              <Summary><![CDATA[True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into
the header tool button area, false to keep the panel statically sized with no button (defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="contentEl" Type="String">
              <Summary><![CDATA[<p>Optional. Specify an existing HTML element, or the <code>id</code> of an existing HTML element to use as this Panel's
<code><b>{@link #body}</b></code> content.</p>
<ul>
<li><b>Description</b> :
<div class="sub-desc">This config option is used to take an existing HTML element and place it in the body
of a new panel (it simply moves the specified DOM element into the body element of the Panel
<i>after the Panel is rendered</i> to use as the content (it is not going to be the actual panel itself).</div></li>
<li><b>Notes</b> :
<div class="sub-desc">The specified HTML element is appended to the Panel's {@link #body} Element by the
Panel's <code>afterRender</code> method <i>after any configured {@link #html HTML} has
been inserted</i>, and so the document will not contain this element at the time the
{@link #render} event is fired.</div>
<div class="sub-desc">The specified HTML element used will not participate in any <code><b>{@link Ext.Container#layout layout}</b></code>
scheme that the Panel may use. It is just HTML. Layouts operate on child <code><b>{@link Ext.Container#items items}</b></code>.</div>
<div class="sub-desc">Add either the <code>x-hidden</code> or the <code>x-hide-display</code> CSS class to
prevent a brief flicker of the content before it is rendered to the panel.</div></li>
</ul>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disabled" Type="Boolean">
              <Summary><![CDATA[Render this panel disabled (default is <code>false</code>). An important note when using the disabled
config on panels is that IE will often fail to initialize the disabled mask element correectly if
the panel's layout has not yet completed by the time the Panel is disabled during the render process.
If you experience this issue, you may need to instead use the {@link #afterlayout} event to initialize
the disabled state:
<pre><code>
new Ext.Panel({
    ...
    listeners: {
        'afterlayout': {
            fn: function (p) {
                p.disable();
            },
            single: true // important, as many layouts can occur
        }
    }
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="draggable" Type="Boolean/Object">
              <Summary><![CDATA[<p><code>true</code> to enable dragging of this Panel (defaults to <code>false</code>).</p>
<p>For custom drag/drop implementations, an <b>Ext.Panel.DD</b> config could also be passed
in this config instead of <code>true</code>. Ext.Panel.DD is an internal, undocumented class which
moves a proxy Element around in place of the Panel's element, but provides no other behaviour
during dragging or on drop. It is a subclass of {@link Ext.dd.DragSource}, so behaviour may be
added by implementing the interface methods of {@link Ext.dd.DragDrop} e.g.:
<pre><code>
new Ext.Panel({
    title: 'Drag me',
    x: 100,
    y: 100,
    renderTo: Ext.getBody(),
    floating: true,
    frame: true,
    width: 400,
    height: 200,
    draggable: {
//      Config option of Ext.Panel.DD class.
//      It&#39;s a floating Panel, so do not show a placeholder proxy in the original position.
        insertProxy: false,

//      Called for each mousemove event while dragging the DD object.
        onDrag : function (e) {
//          Record the x,y position of the drag proxy so that we can
//          position the Panel at end of drag.
            var pel = this.proxy.getEl();
            this.x = pel.getLeft(true);
            this.y = pel.getTop(true);

//          Keep the Shadow aligned if there is one.
            var s = this.panel.getEl().shadow;
            if (s) {
                s.realign(this.x, this.y, pel.getWidth(), pel.getHeight());
            }
        },

//      Called on the mouseup event.
        endDrag : function (e) {
            this.panel.setPosition(this.x, this.y);
        }
    }
}).show();
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="elements" Type="String">
              <Summary><![CDATA[A comma-delimited list of panel elements to initialize when the panel is rendered.  Normally, this list will be
generated automatically based on the items added to the panel at config time, but sometimes it might be useful to
make sure a structural element is rendered even if not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel has been rendered).  Adding those elements to this
list will allocate the required placeholders in the panel when it is rendered.  Valid values are<div class="mdetail-params"><ul>
<li><code>header</code></li>
<li><code>tbar</code> (top bar)</li>
<li><code>body</code></li>
<li><code>bbar</code> (bottom bar)</li>
<li><code>footer</code></li>
</ul></div>
Defaults to '<code>body</code>'.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="floating" Type="Mixed">
              <Summary><![CDATA[<p>This property is used to configure the underlying {@link Ext.Layer}. Acceptable values for this
configuration property are:</p><div class="mdetail-params"><ul>
<li><b><code>false</code></b> : <b>Default.</b><div class="sub-desc">Display the panel inline where it is
rendered.</div></li>
<li><b><code>true</code></b> : <div class="sub-desc">Float the panel (absolute position it with automatic
shimming and shadow).<ul>
<div class="sub-desc">Setting floating to true will create an Ext.Layer for this panel and display the
panel at negative offsets so that it is hidden.</div>
<div class="sub-desc">Since the panel will be absolute positioned, the position must be set explicitly
<i>after</i> render (e.g., <code>myPanel.setPosition(100,100);</code>).</div>
<div class="sub-desc"><b>Note</b>: when floating a panel you should always assign a fixed width,
otherwise it will be auto width and will expand to fill to the right edge of the viewport.</div>
</ul></div></li>
<li><b><code>{@link Ext.Layer object}</code></b> : <div class="sub-desc">The specified object will be used
as the configuration object for the {@link Ext.Layer} that will be created.</div></li>
</ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="footer" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to create the footer element explicitly, false to skip creating it. The footer
will be created automatically if <code>{@link #buttons}</code> or a <code>{@link #fbar}</code> have
been configured.  See <code>{@link #bodyCfg}</code> for an example.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="footerCfg" Type="Object">
              <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
of this Panel's {@link #footer} Element.  See <code>{@link #bodyCfg}</code> also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="frame" Type="Boolean">
              <Summary><![CDATA[<code>false</code> by default to render with plain 1px square borders. <code>true</code> to render with
9 elements, complete with custom rounded corners (also see {@link Ext.Element#boxWrap}).
<p>The template generated for each condition is depicted below:</p><pre><code>

// frame = false
&lt;div id="developer-specified-id-goes-here" class="x-panel">

    &lt;div class="x-panel-header">&lt;span class="x-panel-header-text">Title: (frame:false)&lt;/span>&lt;/div>

    &lt;div class="x-panel-bwrap">
        &lt;div class="x-panel-body">&lt;p>html value goes here&lt;/p>&lt;/div>
    &lt;/div>
&lt;/div>

// frame = true (create 9 elements)
&lt;div id="developer-specified-id-goes-here" class="x-panel">
    &lt;div class="x-panel-tl">&lt;div class="x-panel-tr">&lt;div class="x-panel-tc">
        &lt;div class="x-panel-header">&lt;span class="x-panel-header-text">Title: (frame:true)&lt;/span>&lt;/div>
    &lt;/div>&lt;/div>&lt;/div>

    &lt;div class="x-panel-bwrap">
        &lt;div class="x-panel-ml">&lt;div class="x-panel-mr">&lt;div class="x-panel-mc">
            &lt;div class="x-panel-body">&lt;p>html value goes here&lt;/p>&lt;/div>
        &lt;/div>&lt;/div>&lt;/div>

        &lt;div class="x-panel-bl">&lt;div class="x-panel-br">&lt;div class="x-panel-bc"/>
        &lt;/div>&lt;/div>&lt;/div>
&lt;/div>
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="header" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to create the Panel's header element explicitly, <code>false</code> to skip creating
it.  If a <code>{@link #title}</code> is set the header will be created automatically, otherwise it will not.
If a <code>{@link #title}</code> is set but <code>header</code> is explicitly set to <code>false</code>, the header
will not be rendered.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="headerAsText" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to display the panel <code>{@link #title}</code> in the <code>{@link #header}</code>,
<code>false</code> to hide it (defaults to <code>true</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="headerCfg" Type="Object">
              <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
of this Panel's {@link #header} Element.  See <code>{@link #bodyCfg}</code> also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hideCollapseTool" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to hide the expand/collapse toggle button when <code>{@link #collapsible} == true</code>,
<code>false</code> to display it (defaults to <code>false</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="html" Type="String/Object">
              <Summary><![CDATA[An HTML fragment, or a {@link Ext.DomHelper DomHelper} specification to use as the panel's body
content (defaults to ''). The HTML content is added by the Panel's {@link #afterRender} method,
and so the document will not contain this HTML at the time the {@link #render} event is fired.
This content is inserted into the body <i>before</i> any configured {@link #contentEl} is appended.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="iconCls" Type="String">
              <Summary><![CDATA[The CSS class selector that specifies a background image to be used as the header icon (defaults to '').
<p>An example of specifying a custom icon class would be something like:
</p><pre><code>
// specify the property in the config for the class:
     ...
     iconCls: 'my-icon'

// css class that specifies background image to be used as the icon image:
.my-icon { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="keys" Type="Object/Array">
              <Summary><![CDATA[A {@link Ext.KeyMap} config object (in the format expected by {@link Ext.KeyMap#addBinding}
used to assign custom key handling to this panel (defaults to <code>null</code>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="maskDisabled" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to mask the panel when it is {@link #disabled}, <code>false</code> to not mask it (defaults
to <code>true</code>).  Either way, the panel will always tell its contained elements to disable themselves
when it is disabled, but masking the panel can provide an additional visual cue that the panel is
disabled.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="minButtonWidth" Type="Number">
              <Summary><![CDATA[Minimum width in pixels of all {@link #buttons} in this panel (defaults to <code>75</code>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="preventBodyReset" Type="Boolean">
              <Summary><![CDATA[Defaults to <code>false</code>.  When set to <code>true</code>, an extra css class <code>'x-panel-normal'</code>
will be added to the panel's element, effectively applying css styles suggested by the W3C
(see http://www.w3.org/TR/CSS21/sample.html) to the Panel's <b>body</b> element (not the header,
footer, etc.).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="shadow" Type="Boolean/String">
              <Summary><![CDATA[<code>true</code> (or a valid Ext.Shadow {@link Ext.Shadow#mode} value) to display a shadow behind the
panel, <code>false</code> to display no shadow (defaults to <code>'sides'</code>).  Note that this option
only applies when <code>{@link #floating} = true</code>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="shadowOffset" Type="Number">
              <Summary><![CDATA[The number of pixels to offset the shadow if displayed (defaults to <code>4</code>). Note that this
option only applies when <code>{@link #floating} = true</code>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="shim" Type="Boolean">
              <Summary><![CDATA[<code>false</code> to disable the iframe shim in browsers which need one (defaults to <code>true</code>).
Note that this option only applies when <code>{@link #floating} = true</code>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tabTip" Type="String">
              <Summary><![CDATA[A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over
the tab of a Ext.Panel which is an item of a {@link Ext.TabPanel}. {@link Ext.QuickTips}.init()
must be called in order for the tips to render.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tbar" Type="Object/Array">
              <Summary><![CDATA[<p>The top toolbar of the panel. This can be a {@link Ext.Toolbar} object, a toolbar config, or an array of
buttons/button configs to be added to the toolbar.  Note that this is not available as a property after render.
To access the top toolbar after render, use {@link #getTopToolbar}.</p>
<p><b>Note:</b> Although a Toolbar may contain Field components, these will <b>not</b> be updated by a load
of an ancestor FormPanel. A Panel's toolbars are not part of the standard Container->Component hierarchy, and
so are not scanned to collect form items. However, the values <b>will</b> be submitted because form
submission parameters are collected from the DOM tree.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tbarCfg" Type="Object">
              <Summary><![CDATA[<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure
of this Panel's {@link #tbar} Element.  See <code>{@link #bodyCfg}</code> also.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="title" Type="String">
              <Summary><![CDATA[The title text to be used as innerHTML (html tags are accepted) to display in the panel
<code>{@link #header}</code> (defaults to ''). When a <code>title</code> is specified the
<code>{@link #header}</code> element will automatically be created and displayed unless
{@link #header} is explicitly set to <code>false</code>.  If you do not want to specify a
<code>title</code> at config time, but you may want one later, you must either specify a non-empty
<code>title</code> (a blank space ' ' will do) or <code>header:true</code> so that the container
element will get created.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="titleCollapse" Type="Boolean">
              <Summary><![CDATA[<code>true</code> to allow expanding and collapsing the panel (when <code>{@link #collapsible} = true</code>)
by clicking anywhere in the header bar, <code>false</code>) to allow it only by clicking to tool button
(defaults to <code>false</code>)). If this panel is a child item of a border layout also see the
{@link Ext.layout.BorderLayout.Region BorderLayout.Region}
<code>{@link Ext.layout.BorderLayout.Region#floatable floatable}</code> config option.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tools" Type="Array">
              <Summary><![CDATA[An array of tool button configs to be added to the header tool area. When rendered, each tool is
stored as an {@link Ext.Element Element} referenced by a public property called <code><b></b>tools.<i>&lt;tool-type&gt;</i></code>
<p>Each tool config may contain the following properties:
<div class="mdetail-params"><ul>
<li><b>id</b> : String<div class="sub-desc"><b>Required.</b> The type
of tool to create. By default, this assigns a CSS class of the form <code>x-tool-<i>&lt;tool-type&gt;</i></code> to the
resulting tool Element. Ext provides CSS rules, and an icon sprite containing images for the tool types listed below.
The developer may implement custom tools by supplying alternate CSS rules and background images:
<ul>
<div class="x-tool x-tool-toggle" style="float:left; margin-right:5;"> </div><div><code> toggle</code> (Created by default when {@link #collapsible} is <code>true</code>)</div>
<div class="x-tool x-tool-close" style="float:left; margin-right:5;"> </div><div><code> close</code></div>
<div class="x-tool x-tool-minimize" style="float:left; margin-right:5;"> </div><div><code> minimize</code></div>
<div class="x-tool x-tool-maximize" style="float:left; margin-right:5;"> </div><div><code> maximize</code></div>
<div class="x-tool x-tool-restore" style="float:left; margin-right:5;"> </div><div><code> restore</code></div>
<div class="x-tool x-tool-gear" style="float:left; margin-right:5;"> </div><div><code> gear</code></div>
<div class="x-tool x-tool-pin" style="float:left; margin-right:5;"> </div><div><code> pin</code></div>
<div class="x-tool x-tool-unpin" style="float:left; margin-right:5;"> </div><div><code> unpin</code></div>
<div class="x-tool x-tool-right" style="float:left; margin-right:5;"> </div><div><code> right</code></div>
<div class="x-tool x-tool-left" style="float:left; margin-right:5;"> </div><div><code> left</code></div>
<div class="x-tool x-tool-up" style="float:left; margin-right:5;"> </div><div><code> up</code></div>
<div class="x-tool x-tool-down" style="float:left; margin-right:5;"> </div><div><code> down</code></div>
<div class="x-tool x-tool-refresh" style="float:left; margin-right:5;"> </div><div><code> refresh</code></div>
<div class="x-tool x-tool-minus" style="float:left; margin-right:5;"> </div><div><code> minus</code></div>
<div class="x-tool x-tool-plus" style="float:left; margin-right:5;"> </div><div><code> plus</code></div>
<div class="x-tool x-tool-help" style="float:left; margin-right:5;"> </div><div><code> help</code></div>
<div class="x-tool x-tool-search" style="float:left; margin-right:5;"> </div><div><code> search</code></div>
<div class="x-tool x-tool-save" style="float:left; margin-right:5;"> </div><div><code> save</code></div>
<div class="x-tool x-tool-print" style="float:left; margin-right:5;"> </div><div><code> print</code></div>
</ul></div></li>
<li><b>handler</b> : Function<div class="sub-desc"><b>Required.</b> The function to
call when clicked. Arguments passed are:<ul>
<li><b>event</b> : Ext.EventObject<div class="sub-desc">The click event.</div></li>
<li><b>toolEl</b> : Ext.Element<div class="sub-desc">The tool Element.</div></li>
<li><b>panel</b> : Ext.Panel<div class="sub-desc">The host Panel</div></li>
<li><b>tc</b> : Ext.Panel<div class="sub-desc">The tool configuration object</div></li>
</ul></div></li>
<li><b>stopEvent</b> : Boolean<div class="sub-desc">Defaults to true. Specify as false to allow click event to propagate.</div></li>
<li><b>scope</b> : Object<div class="sub-desc">The scope in which to call the handler.</div></li>
<li><b>qtip</b> : String/Object<div class="sub-desc">A tip string, or
a config argument to {@link Ext.QuickTip#register}</div></li>
<li><b>hidden</b> : Boolean<div class="sub-desc">True to initially render hidden.</div></li>
<li><b>on</b> : Object<div class="sub-desc">A listener config object specifiying
event listeners in the format of an argument to {@link #addListener}</div></li>
</ul></div>
<p>Note that, apart from the toggle tool which is provided when a panel is collapsible, these
tools only provide the visual button. Any required functionality must be provided by adding
handlers that implement the necessary behavior.</p>
<p>Example usage:</p>
<pre><code>
tools:[{
    id:'refresh',
    qtip: 'Refresh form Data',
    // hidden:true,
    handler: function (event, toolEl, panel) {
        // refresh logic
    }
},
{
    id:'help',
    qtip: 'Get Help',
    handler: function (event, toolEl, panel) {
        // whatever
    }
}]
</code></pre>
<p>For the custom id of <code>'help'</code> define two relevant css classes with a link to
a 15x15 image:</p>
<pre><code>
.x-tool-help {background-image: url(images/help.png);}
.x-tool-help-over {background-image: url(images/help_over.png);}
// if using an image sprite:
.x-tool-help {background-image: url(images/help.png) no-repeat 0 0;}
.x-tool-help-over {background-position:-15px 0;}
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="toolTemplate" Type="Ext.Template/Ext.XTemplate">
              <Summary><![CDATA[<p>A Template used to create {@link #tools} in the {@link #header} Element. Defaults to:</p><pre><code>
new Ext.Template('&lt;div class="x-tool x-tool-{id}">&amp;#160;&lt;/div>')</code></pre>
<p>This may may be overridden to provide a custom DOM structure for tools based upon a more
complex XTemplate. The template's data is a single tool configuration object (Not the entire Array)
as specified in {@link #tools}.  In the following example an &lt;a> tag is used to provide a
visual indication when hovering over the tool:</p><pre><code>
var win = new Ext.Window({
    tools: [{
        id: 'download',
        href: '/MyPdfDoc.pdf'
    }],
    toolTemplate: new Ext.XTemplate(
        '&lt;tpl if="id==\'download\'">',
            '&lt;a class="x-tool x-tool-pdf" href="{href}">&lt;/a>',
        '&lt;/tpl>',
        '&lt;tpl if="id!=\'download\'">',
            '&lt;div class="x-tool x-tool-{id}">&amp;#160;&lt;/div>',
        '&lt;/tpl>'
    ),
    width:500,
    height:300,
    closeAction:'hide'
});</code></pre>
<p>Note that the CSS class 'x-tool-pdf' should have an associated style rule which provides an
appropriate background image, something like:</p>
    <pre><code>
    a.x-tool-pdf {background-image: url(../shared/extjs/images/pdf.gif)!important;}
    </code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="unstyled" Type="Boolean">
              <Summary><![CDATA[Overrides the <code>{@link #baseCls}</code> setting to <code>{@link #baseCls} = 'x-plain'</code> which renders
the panel unstyled except for required attributes for Ext layouts to function (e.g. overflow:hidden).]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="body">
              <Summary><![CDATA[The Panel's body {@link Ext.Element Element} which may be used to contain HTML content.
The content may be specified in the {@link #html} config, or it may be loaded using the
{@link autoLoad} config, or through the Panel's {@link #getUpdater Updater}. Read-only.
<p>If this is used to load visible HTML elements in either way, then
the Panel may not be used as a Layout for hosting nested Panels.</p>
<p>If this Panel is intended to be used as the host of a Layout (See {@link #layout}
then the body Element must not be loaded or changed - it is under the control
of the Panel's Layout.
<br><p><b>Note</b>: see the Note for <code>{@link Ext.Component#el el}</code> also.</p>]]></Summary>
            </Property>
            <Property Name="buttons">
              <Summary><![CDATA[This Panel's Array of buttons as created from the <code>{@link #buttons}</code>
config property. Read only.]]></Summary>
            </Property>
            <Property Name="bwrap">
              <Summary><![CDATA[The Panel's bwrap {@link Ext.Element Element} used to contain other Panel elements
(tbar, body, bbar, footer). See {@link #bodyCfg}. Read-only.]]></Summary>
            </Property>
            <Property Name="collapsed">
              <Summary><![CDATA[True if this panel is collapsed. Read-only.]]></Summary>
            </Property>
            <Property Name="dd">
              <Summary><![CDATA[<p>If this Panel is configured {@link #draggable}, this property will contain
an instance of {@link Ext.dd.DragSource} which handles dragging the Panel.</p>
The developer must provide implementations of the abstract methods of {@link Ext.dd.DragSource}
in order to supply behaviour for each stage of the drag/drop process. See {@link #draggable}.]]></Summary>
            </Property>
            <Property Name="footer">
              <Summary><![CDATA[The Panel's footer {@link Ext.Element Element}. Read-only.
<p>This Element is used to house the Panel's <code>{@link #buttons}</code> or <code>{@link #fbar}</code>.</p>
<br><p><b>Note</b>: see the Note for <code>{@link Ext.Component#el el}</code> also.</p>]]></Summary>
            </Property>
            <Property Name="header">
              <Summary><![CDATA[The Panel's header {@link Ext.Element Element}. Read-only.
<p>This Element is used to house the {@link #title} and {@link #tools}</p>
<br><p><b>Note</b>: see the Note for <code>{@link Ext.Component#el el}</code> also.</p>]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="addButton">
              <Summary><![CDATA[Adds a button to this panel.  Note that this method must be called prior to rendering.  The preferred
approach is to add buttons via the {@link #buttons} config.]]></Summary>
              <Parameters>
                <Param Name="config" Type="String/Object">
                  <Summary><![CDATA[A valid {@link Ext.Button} config.  A string will become the text for a default
button config, an object will be treated as a button config object.]]></Summary>
                </Param>
                <Param Name="handler" Type="Function">
                  <Summary><![CDATA[The function to be called on button {@link Ext.Button#click}]]></Summary>
                </Param>
                <Param Name="scope" Type="Object">
                  <Summary><![CDATA[The scope to use for the button handler function]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button">
                <Summary><![CDATA[The button that was added]]></Summary>
              </Return>
            </Method>
            <Method Name="collapse">
              <Summary><![CDATA[Collapses the panel body so that it becomes hidden.  Fires the {@link #beforecollapse} event which will
cancel the collapse action if it returns false.]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean">
                  <Summary><![CDATA[True to animate the transition, else false (defaults to the value of the
{@link #animCollapse} panel config)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Panel">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="expand">
              <Summary><![CDATA[Expands the panel body so that it becomes visible.  Fires the {@link #beforeexpand} event which will
cancel the expand action if it returns false.]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean">
                  <Summary><![CDATA[True to animate the transition, else false (defaults to the value of the
{@link #animCollapse} panel config)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Panel">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="getBottomToolbar">
              <Summary><![CDATA[Returns the {@link Ext.Toolbar toolbar} from the bottom (<code>{@link #bbar}</code>) section of the panel.]]></Summary>
              <Parameters />
              <Return Type="Ext.Toolbar">
                <Summary><![CDATA[The toolbar]]></Summary>
              </Return>
            </Method>
            <Method Name="getFrameHeight">
              <Summary><![CDATA[Returns the height in pixels of the framing elements of this panel (including any top and bottom bars and
header and footer elements, but not including the body height).  To retrieve the body height see {@link #getInnerHeight}.]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The frame height]]></Summary>
              </Return>
            </Method>
            <Method Name="getFrameWidth">
              <Summary><![CDATA[Returns the width in pixels of the framing elements of this panel (not including the body width).  To
retrieve the body width see {@link #getInnerWidth}.]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The frame width]]></Summary>
              </Return>
            </Method>
            <Method Name="getInnerHeight">
              <Summary><![CDATA[Returns the height in pixels of the body element (not including the height of any framing elements).
For the frame height see {@link #getFrameHeight}.]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The body height]]></Summary>
              </Return>
            </Method>
            <Method Name="getInnerWidth">
              <Summary><![CDATA[Returns the width in pixels of the body element (not including the width of any framing elements).
For the frame width see {@link #getFrameWidth}.]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The body width]]></Summary>
              </Return>
            </Method>
            <Method Name="getTool">
              <Summary><![CDATA[Retrieve a tool by id.]]></Summary>
              <Parameters>
                <Param Name="id" Type="String" />
              </Parameters>
              <Return Type="Object">
                <Summary><![CDATA[tool]]></Summary>
              </Return>
            </Method>
            <Method Name="getTopToolbar">
              <Summary><![CDATA[Returns the {@link Ext.Toolbar toolbar} from the top (<code>{@link #tbar}</code>) section of the panel.]]></Summary>
              <Parameters />
              <Return Type="Ext.Toolbar">
                <Summary><![CDATA[The toolbar]]></Summary>
              </Return>
            </Method>
            <Method Name="getUpdater">
              <Summary><![CDATA[Get the {@link Ext.Updater} for this panel. Enables you to perform Ajax updates of this panel's body.]]></Summary>
              <Parameters />
              <Return Type="Ext.Updater">
                <Summary><![CDATA[The Updater]]></Summary>
              </Return>
            </Method>
            <Method Name="load">
              <Summary><![CDATA[Loads this content panel immediately with content returned from an XHR call.]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object/String/Function">
                  <Summary><![CDATA[A config object containing any of the following options:
<pre><code>
panel.load({
url: 'your-url.php',
params: {param1: 'foo', param2: 'bar'}, // or a URL encoded string
callback: yourFunction,
scope: yourObject, // optional scope for the callback
discardUrl: false,
nocache: false,
text: 'Loading...',
timeout: 30,
scripts: false
});
</code></pre>
The only required property is url. The optional properties nocache, text and scripts
are shorthand for disableCaching, indicatorText and loadScripts and are used to set their
associated property on this panel Updater instance.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Panel">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setIconClass">
              <Summary><![CDATA[Sets the CSS class that provides the icon image for this panel.  This method will replace any existing
icon class if one has already been set and fire the {@link #iconchange} event after completion.]]></Summary>
              <Parameters>
                <Param Name="cls" Type="String">
                  <Summary><![CDATA[The new CSS class name]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setTitle">
              <Summary><![CDATA[<p>Sets the title text for the panel and optionally the {@link #iconCls icon class}.</p>
<p>In order to be able to set the title, a header element must have been created
for the Panel. This is triggered either by configuring the Panel with a non-blank <code>{@link #title}</code>,
or configuring it with <code><b>{@link #header}: true</b></code>.</p>]]></Summary>
              <Parameters>
                <Param Name="title" Type="String">
                  <Summary><![CDATA[The title text to set]]></Summary>
                </Param>
                <Param Name="iconCls" Type="String" Optional="true">
                  <Summary><![CDATA[{@link #iconCls iconCls} A user-defined CSS class that provides the icon image for this panel]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="toggleCollapse">
              <Summary><![CDATA[Shortcut for performing an {@link #expand} or {@link #collapse} based on the current state of the panel.]]></Summary>
              <Parameters>
                <Param Name="animate" Type="Boolean">
                  <Summary><![CDATA[True to animate the transition, else false (defaults to the value of the
{@link #animCollapse} panel config)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Panel">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="activate">
              <Summary><![CDATA[Fires after the Panel has been visually activated. Note that Panels do not directly support being activated, but some Panel subclasses do (like {@link Ext.Window}). Panels which are child Components of a TabPanel fire the activate and deactivate events under the control of the TabPanel.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[The Panel that has been activated.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforeclose">
              <Summary><![CDATA[Fires before the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like {@link Ext.Window}) or a Panel within a Ext.TabPanel. This event only applies to such subclasses. A handler can return false to cancel the close.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[The Panel being closed.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforecollapse">
              <Summary><![CDATA[Fires before the Panel is collapsed. A handler can return false to cancel the collapse.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[the Panel being collapsed.]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean">
                  <Summary><![CDATA[True if the collapse is animated, else false.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="beforeexpand">
              <Summary><![CDATA[Fires before the Panel is expanded. A handler can return false to cancel the expand.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[The Panel being expanded.]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean">
                  <Summary><![CDATA[True if the expand is animated, else false.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="bodyresize">
              <Summary><![CDATA[Fires after the Panel has been resized.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[the Panel which has been resized.]]></Summary>
                </Param>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The Panel's new width.]]></Summary>
                </Param>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The Panel's new height.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="close">
              <Summary><![CDATA[Fires after the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like {@link Ext.Window}) or a Panel within a Ext.TabPanel.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[The Panel that has been closed.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="collapse">
              <Summary><![CDATA[Fires after the Panel has been collapsed.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[the Panel that has been collapsed.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="deactivate">
              <Summary><![CDATA[Fires after the Panel has been visually deactivated. Note that Panels do not directly support being deactivated, but some Panel subclasses do (like {@link Ext.Window}). Panels which are child Components of a TabPanel fire the activate and deactivate events under the control of the TabPanel.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[The Panel that has been deactivated.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="expand">
              <Summary><![CDATA[Fires after the Panel has been expanded.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[The Panel that has been expanded.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="iconchange">
              <Summary><![CDATA[Fires after the Panel icon class has been {@link #iconCls set} or {@link #setIconClass changed}.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[the Panel which has had its {@link #iconCls icon class} changed.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="titlechange">
              <Summary><![CDATA[Fires after the Panel title has been {@link #title set} or {@link #setTitle changed}.]]></Summary>
              <Parameters>
                <Param Name="p" Type="Ext.Panel">
                  <Summary><![CDATA[the Panel which has had its title changed.]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="ProgressBar" FullName="Ext.ProgressBar" Package="Ext" DefinedIn="widgets\ProgressBar.js" Xtype="progress" Extends="Ext.BoxComponent">
          <Summary><![CDATA[<p>An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.</p>
<p>In manual mode, you are responsible for showing, updating (via {@link #updateProgress}) and clearing the
progress bar as needed from your own code.  This method is most appropriate when you want to show progress
throughout an operation that has predictable points of interest at which you can update the control.</p>
<p>In automatic mode, you simply call {@link #wait} and let the progress bar run indefinitely, only clearing it
once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time
and then clear itself.  Automatic mode is most appropriate for timed operations or asynchronous operations in
which you have no need for indicating intermediate progress.</p>
@cfg {Float} value A floating point value between 0 and 1 (e.g., .5, defaults to 0)
@cfg {String} text The progress bar text (defaults to '')
@cfg {Mixed} textEl The element to render the progress text to (defaults to the progress
bar's internal text element)
@cfg {String} id The progress bar element's id (defaults to an auto-generated id)]]></Summary>
          <ConfigOptions>
            <ConfigOption Name="animate" Type="Boolean">
              <Summary><![CDATA[True to animate the progress bar during transitions (defaults to false)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="baseCls" Type="String">
              <Summary><![CDATA[The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="isWaiting">
              <Summary><![CDATA[Returns true if the progress bar is currently in a {@link #wait} operation]]></Summary>
              <Parameters />
              <Return Type="Boolean">
                <Summary><![CDATA[True if waiting, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="reset">
              <Summary><![CDATA[Resets the progress bar value to 0 and text to empty string.  If hide = true, the progress
bar will also be hidden (using the {@link #hideMode} property internally).]]></Summary>
              <Parameters>
                <Param Name="hide" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to hide the progress bar (defaults to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.ProgressBar">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setSize">
              <Summary><![CDATA[Sets the size of the progress bar.]]></Summary>
              <Parameters>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The new width in pixels]]></Summary>
                </Param>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The new height in pixels]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.ProgressBar">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="syncProgressBar">
              <Summary><![CDATA[Synchronizes the inner bar width to the proper proportion of the total componet width based
on the current progress {@link #value}.  This will be called automatically when the ProgressBar
is resized by a layout, but if it is rendered auto width, this method can be called from
another resize handler to sync the ProgressBar if necessary.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="updateProgress">
              <Summary><![CDATA[Updates the progress bar value, and optionally its text.  If the text argument is not specified,
any existing text value will be unchanged.  To blank out existing text, pass ''.  Note that even
if the progress bar value exceeds 1, it will never automatically reset -- you are responsible for
determining when the progress is complete and calling {@link #reset} to clear and/or hide the control.]]></Summary>
              <Parameters>
                <Param Name="value" Type="Float" Optional="true">
                  <Summary><![CDATA[A floating point value between 0 and 1 (e.g., .5, defaults to 0)]]></Summary>
                </Param>
                <Param Name="text" Type="String" Optional="true">
                  <Summary><![CDATA[The string to display in the progress text element (defaults to '')]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Whether to animate the transition of the progress bar. If this value is
not specified, the default for the class is used (default to false)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.ProgressBar">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="updateText">
              <Summary><![CDATA[Updates the progress bar text.  If specified, textEl will be updated, otherwise the progress
bar itself will display the updated text.]]></Summary>
              <Parameters>
                <Param Name="text" Type="String" Optional="true">
                  <Summary><![CDATA[The string to display in the progress text element (defaults to '')]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.ProgressBar">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="wait">
              <Summary><![CDATA[Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress
bar will automatically reset after a fixed amount of time and optionally call a callback function
if specified.  If no duration is passed in, then the progress bar will run indefinitely and must
be manually cleared by calling {@link #reset}.  The wait method accepts a config object with
the following properties:
<pre>
Property   Type          Description
---------- ------------  ----------------------------------------------------------------------
duration   Number        The length of time in milliseconds that the progress bar should
                         run before resetting itself (defaults to undefined, in which case it
                         will run indefinitely until reset is called)
interval   Number        The length of time in milliseconds between each progress update
                         (defaults to 1000 ms)
animate    Boolean       Whether to animate the transition of the progress bar. If this value is
                         not specified, the default for the class is used.                                                   
increment  Number        The number of progress update segments to display within the progress
                         bar (defaults to 10).  If the bar reaches the end and is still
                         updating, it will automatically wrap back to the beginning.
text       String        Optional text to display in the progress bar element (defaults to '').
fn         Function      A callback function to execute after the progress bar finishes auto-
                         updating.  The function will be called with no arguments.  This function
                         will be ignored if duration is not specified since in that case the
                         progress bar can only be stopped programmatically, so any required function
                         should be called by the same code after it resets the progress bar.
scope      Object        The scope that is passed to the callback function (only applies when
                         duration and fn are both passed).
</pre>

Example usage:
<pre><code>
var p = new Ext.ProgressBar({
   renderTo: 'my-el'
});

//Wait for 5 seconds, then update the status el (progress bar will auto-reset)
p.wait({
   interval: 100, //bar will move fast!
   duration: 5000,
   increment: 15,
   text: 'Updating...',
   scope: this,
   fn: function () {
      Ext.fly('status').update('Done!');
   }
});

//Or update indefinitely until some async action completes, then reset manually
p.wait();
myAction.on('complete', function () {
    p.reset();
    Ext.fly('status').update('Done!');
});
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object" Optional="true">
                  <Summary><![CDATA[Configuration options]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.ProgressBar">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="update">
              <Summary><![CDATA[Fires after each update interval.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.ProgressBar">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="QuickTip" FullName="Ext.QuickTip" Package="Ext" DefinedIn="widgets\tips\QuickTip.js" Xtype="quicktip" Extends="Ext.ToolTip">
          <Summary><![CDATA[A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global
{@link Ext.QuickTips} instance.  See the QuickTips class header for additional usage details and examples.]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new Tip.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The configuration options]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="interceptTitles" Type="Boolean" />
            <ConfigOption Name="target" Type="Mixed" />
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="cancelShow">
              <Summary><![CDATA[Hides a visible tip or cancels an impending show for a particular element.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement/Element">
                  <Summary><![CDATA[The element that is the target of the tip.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="register">
              <Summary><![CDATA[Configures a new quick tip instance and assigns it to a target element.  The following config values are
supported (for example usage, see the {@link Ext.QuickTips} class header):
<div class="mdetail-params"><ul>
<li>autoHide</li>
<li>cls</li>
<li>dismissDelay (overrides the singleton value)</li>
<li>target (required)</li>
<li>text (required)</li>
<li>title</li>
<li>width</li></ul></div>]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The config object]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="unregister">
              <Summary><![CDATA[Removes this quick tip from its element and destroys it.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement/Element">
                  <Summary><![CDATA[The element from which the quick tip is to be removed.]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="QuickTips" FullName="Ext.QuickTips" Package="Ext" DefinedIn="widgets\tips\QuickTips.js" Singleton="true">
          <Summary><![CDATA[<p>Provides attractive and customizable tooltips for any element. The QuickTips
singleton is used to configure and manage tooltips globally for multiple elements
in a generic manner.  To create individual tooltips with maximum customizability,
you should consider either {@link Ext.Tip} or {@link Ext.ToolTip}.</p>
<p>Quicktips can be configured via tag attributes directly in markup, or by
registering quick tips programmatically via the {@link #register} method.</p>
<p>The singleton's instance of {@link Ext.QuickTip} is available via
{@link #getQuickTip}, and supports all the methods, and all the all the
configuration properties of Ext.QuickTip. These settings will apply to all
tooltips shown by the singleton.</p>
<p>Below is the summary of the configuration properties which can be used.
For detailed descriptions see {@link #getQuickTip}</p>
<p><b>QuickTips singleton configs (all are optional)</b></p>
<div class="mdetail-params"><ul><li>dismissDelay</li>
<li>hideDelay</li>
<li>maxWidth</li>
<li>minWidth</li>
<li>showDelay</li>
<li>trackMouse</li></ul></div>
<p><b>Target element configs (optional unless otherwise noted)</b></p>
<div class="mdetail-params"><ul><li>autoHide</li>
<li>cls</li>
<li>dismissDelay (overrides singleton value)</li>
<li>target (required)</li>
<li>text (required)</li>
<li>title</li>
<li>width</li></ul></div>
<p>Here is an example showing how some of these config options could be used:</p>
<pre><code>
// Init the singleton.  Any tag-based quick tips will start working.
Ext.QuickTips.init();

// Apply a set of config properties to the singleton
Ext.apply(Ext.QuickTips.getQuickTip(), {
    maxWidth: 200,
    minWidth: 100,
    showDelay: 50,
    trackMouse: true
});

// Manually register a quick tip for a specific element
Ext.QuickTips.register({
    target: 'my-div',
    title: 'My Tooltip',
    text: 'This tooltip was added in code',
    width: 100,
    dismissDelay: 20
});
</code></pre>
<p>To register a quick tip in markup, you simply add one or more of the valid QuickTip attributes prefixed with
the <b>ext:</b> namespace.  The HTML element itself is automatically set as the quick tip target. Here is the summary
of supported attributes (optional unless otherwise noted):</p>
<ul><li><b>hide</b>: Specifying "user" is equivalent to setting autoHide = false.  Any other value will be the
same as autoHide = true.</li>
<li><b>qclass</b>: A CSS class to be applied to the quick tip (equivalent to the 'cls' target element config).</li>
<li><b>qtip (required)</b>: The quick tip text (equivalent to the 'text' target element config).</li>
<li><b>qtitle</b>: The quick tip title (equivalent to the 'title' target element config).</li>
<li><b>qwidth</b>: The quick tip width (equivalent to the 'width' target element config).</li></ul>
<p>Here is an example of configuring an HTML element to display a tooltip from markup:</p>
<pre><code>
// Add a quick tip to an HTML button
&lt;input type="button" value="OK" ext:qtitle="OK Button" ext:qwidth="100"
     ext:qtip="This is a quick tip from markup!">&lt;/input>
</code></pre>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="disable">
              <Summary><![CDATA[Disable quick tips globally.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="enable">
              <Summary><![CDATA[Enable quick tips globally.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="getQuickTip">
              <Summary><![CDATA[Gets the global QuickTips instance.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="init">
              <Summary><![CDATA[Initialize the global QuickTips instance and prepare any quick tips.]]></Summary>
              <Parameters>
                <Param Name="autoRender" Type="Boolean">
                  <Summary><![CDATA[True to render the QuickTips container immediately to preload images. (Defaults to true)]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="isEnabled">
              <Summary><![CDATA[Returns true if quick tips are enabled, else false.]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="register">
              <Summary><![CDATA[Configures a new quick tip instance and assigns it to a target element.  See
{@link Ext.QuickTip#register} for details.]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The config object]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="tips">
              <Summary><![CDATA[Alias of {@link #register}.]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[The config object]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="unregister">
              <Summary><![CDATA[Removes any registered quick tip from the target element and destroys it.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement/Element">
                  <Summary><![CDATA[The element from which the quick tip is to be removed.]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Resizable" FullName="Ext.Resizable" Package="Ext" DefinedIn="widgets\Resizable.js" Extends="Ext.util.Observable">
          <Summary><![CDATA[<p>Applies drag handles to an element to make it resizable. The drag handles are inserted into the element
and positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap
the textarea in a div and set 'resizeChild' to true (or to the id of the element), <b>or</b> set wrap:true in your config and
the element will be wrapped for you automatically.</p>
<p>Here is the list of valid resize handles:</p>
<pre>
Value   Description
------  -------------------
 'n'     north
 's'     south
 'e'     east
 'w'     west
 'nw'    northwest
 'sw'    southwest
 'se'    southeast
 'ne'    northeast
 'all'   all
</pre>
<p>Here's an example showing the creation of a typical Resizable:</p>
<pre><code>
var resizer = new Ext.Resizable('element-id', {
    handles: 'all',
    minWidth: 200,
    minHeight: 100,
    maxWidth: 500,
    maxHeight: 400,
    pinned: true
});
resizer.on('resize', myHandler);
</code></pre>
<p>To hide a particular handle, set its display to none in CSS, or through script:<br>
resizer.east.setDisplayed(false);</p>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new resizable component.]]></Summary>
            <Parameters>
              <Param Name="el" Type="Mixed">
                <Summary><![CDATA[The id or element to resize]]></Summary>
              </Param>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[configuration options]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="adjustments" Type="Array/String">
              <Summary><![CDATA[resize operation's new size (defaults to <tt>[0, 0]</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="animate" Type="Boolean" />
            <ConfigOption Name="constrainTo" Type="Mixed" />
            <ConfigOption Name="disableTrackOver" Type="Boolean" />
            <ConfigOption Name="draggable" Type="Boolean" />
            <ConfigOption Name="duration" Type="Number" />
            <ConfigOption Name="dynamic" Type="Boolean" />
            <ConfigOption Name="easing" Type="String" />
            <ConfigOption Name="enabled" Type="Boolean" />
            <ConfigOption Name="handles" Type="String">
              <Summary><![CDATA[Specify either <tt>'all'</tt> or any of <tt>'n s e w ne nw se sw'</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="height" Type="Number" />
            <ConfigOption Name="heightIncrement" Type="Number">
              <Summary><![CDATA[(only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="maxHeight" Type="Number" />
            <ConfigOption Name="maxWidth" Type="Number" />
            <ConfigOption Name="minHeight" Type="Number" />
            <ConfigOption Name="minWidth" Type="Number" />
            <ConfigOption Name="minX" Type="Number" />
            <ConfigOption Name="minY" Type="Number" />
            <ConfigOption Name="multiDirectional" Type="Boolean" />
            <ConfigOption Name="pinned" Type="Boolean">
              <Summary><![CDATA[user mouses over the resizable borders. This is only applied at config time. (defaults to false)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="preserveRatio" Type="Boolean">
              <Summary><![CDATA[and width during resize (defaults to false)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="resizeChild" Type="Boolean/String/Element" />
            <ConfigOption Name="resizeRegion" Type="Ext.lib.Region" />
            <ConfigOption Name="transparent" Type="Boolean" />
            <ConfigOption Name="width" Type="Number" />
            <ConfigOption Name="widthIncrement" Type="Number">
              <Summary><![CDATA[(only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="wrap" Type="Boolean">
              <Summary><![CDATA[in favor of the handles config option (defaults to false)]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="enabled Writable. False if resizing is disabled." />
            <Property Name="proxy">
              <Summary><![CDATA[The proxy Element that is resized in place of the real Element during the resize operation.
This may be queried using {@link Ext.Element#getBox} to provide the new area to resize to.
Read only.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="destroy">
              <Summary><![CDATA[Destroys this resizable. If the element was wrapped and
removeEl is not true then the element remains.]]></Summary>
              <Parameters>
                <Param Name="removeEl" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to remove the element from the DOM]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getEl">
              <Summary><![CDATA[Returns the element this component is bound to.]]></Summary>
              <Parameters />
              <Return Type="Ext.Element" />
            </Method>
            <Method Name="getResizeChild">
              <Summary><![CDATA[Returns the resizeChild element (or null).]]></Summary>
              <Parameters />
              <Return Type="Ext.Element" />
            </Method>
            <Method Name="resizeElement">
              <Summary><![CDATA[<p>Performs resizing of the associated Element. This method is called internally by this
class, and should not be called by user code.</p>
<p>If a Resizable is being used to resize an Element which encapsulates a more complex UI
component such as a Panel, this method may be overridden by specifying an implementation
as a config option to provide appropriate behaviour at the end of the resize operation on
mouseup, for example resizing the Panel, and relaying the Panel's content.</p>
<p>The new area to be resized to is available by examining the state of the {@link #proxy}
Element. Example:
<pre><code>
new Ext.Panel({
    title: 'Resize me',
    x: 100,
    y: 100,
    renderTo: Ext.getBody(),
    floating: true,
    frame: true,
    width: 400,
    height: 200,
    listeners: {
        render: function (p) {
            new Ext.Resizable(p.getEl(), {
                handles: 'all',
                pinned: true,
                transparent: true,
                resizeElement: function () {
                    var box = this.proxy.getBox();
                    p.updateBox(box);
                    if (p.layout) {
                        p.doLayout();
                    }
                    return box;
                }
           });
       }
    }
}).show();
</code></pre>]]></Summary>
              <Parameters />
            </Method>
            <Method Name="resizeTo">
              <Summary><![CDATA[Perform a manual resize and fires the 'resize' event.]]></Summary>
              <Parameters>
                <Param Name="width" Type="Number" />
                <Param Name="height" Type="Number" />
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="beforeresize">
              <Summary><![CDATA[Fired before resize is allowed. Set {@link #enabled} to false to cancel resize.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Resizable">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The mousedown event]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="resize">
              <Summary><![CDATA[Fired after a resize.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Resizable">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The new width]]></Summary>
                </Param>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The new height]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The mouseup event]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Shadow" FullName="Ext.Shadow" Package="Ext" DefinedIn="widgets\Shadow.js">
          <Summary><![CDATA[Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,
and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced
functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class.]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new Shadow.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="mode" Type="String">
              <Summary><![CDATA[The shadow display mode.  Supports the following options:<div class="mdetail-params"><ul>
<li><b><tt>sides</tt></b> : Shadow displays on both sides and bottom only</li>
<li><b><tt>frame</tt></b> : Shadow displays equally on all four sides</li>
<li><b><tt>drop</tt></b> : Traditional bottom-right drop shadow</li>
</ul></div>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="offset" Type="String">
              <Summary><![CDATA[The number of pixels to offset the shadow from the element (defaults to <tt>4</tt>)]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="hide">
              <Summary><![CDATA[Hides this shadow]]></Summary>
              <Parameters />
            </Method>
            <Method Name="isVisible">
              <Summary><![CDATA[Returns true if the shadow is visible, else false]]></Summary>
              <Parameters />
            </Method>
            <Method Name="realign">
              <Summary><![CDATA[Direct alignment when values are already available. Show must be called at least once before
calling this method to ensure it is initialized.]]></Summary>
              <Parameters>
                <Param Name="left" Type="Number">
                  <Summary><![CDATA[The target element left position]]></Summary>
                </Param>
                <Param Name="top" Type="Number">
                  <Summary><![CDATA[The target element top position]]></Summary>
                </Param>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The target element width]]></Summary>
                </Param>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The target element height]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setZIndex">
              <Summary><![CDATA[Adjust the z-index of this shadow]]></Summary>
              <Parameters>
                <Param Name="zindex" Type="Number">
                  <Summary><![CDATA[The new z-index]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Displays the shadow under the target element]]></Summary>
              <Parameters>
                <Param Name="targetEl" Type="Mixed">
                  <Summary><![CDATA[The id or element under which the shadow should display]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Slider" FullName="Ext.Slider" Package="Ext" DefinedIn="widgets\Slider.js" Extends="Ext.BoxComponent">
          <Summary><![CDATA[Slider which supports vertical or horizontal orientation, keyboard adjustments,
configurable snapping, axis clicking and animation. Can be added as an item to
any container. Example usage:
<pre><code>
new Ext.Slider({
    renderTo: Ext.getBody(),
    width: 200,
    value: 50,
    increment: 10,
    minValue: 0,
    maxValue: 100
});
</code></pre>]]></Summary>
          <ConfigOptions>
            <ConfigOption Name="animate" Type="Boolean" />
            <ConfigOption Name="clickToChange" Type="Boolean" />
            <ConfigOption Name="decimalPrecision." Type="Number/Boolean">
              <Summary><![CDATA[<p>The number of decimal places to which to round the Slider's value. Defaults to 0.</p>
<p>To disable rounding, configure as <tt><b>false</b></tt>.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="increment" Type="Number" />
            <ConfigOption Name="keyIncrement" Type="Number" />
            <ConfigOption Name="maxValue" Type="Number" />
            <ConfigOption Name="minValue" Type="Number" />
            <ConfigOption Name="value" Type="Number" />
            <ConfigOption Name="vertical" Type="Boolean" />
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="getValue">
              <Summary><![CDATA[Returns the current value of the slider]]></Summary>
              <Parameters />
              <Return Type="Number">
                <Summary><![CDATA[The current value of the slider]]></Summary>
              </Return>
            </Method>
            <Method Name="setValue">
              <Summary><![CDATA[Programmatically sets the value of the Slider. Ensures that the value is constrained within
the minValue and maxValue.]]></Summary>
              <Parameters>
                <Param Name="value" Type="Number">
                  <Summary><![CDATA[The value to set the slider to. (This will be constrained within minValue and maxValue)]]></Summary>
                </Param>
                <Param Name="animate" Type="Boolean">
                  <Summary><![CDATA[Turn on or off animation, defaults to true]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="syncThumb">
              <Summary><![CDATA[Synchronizes the thumb position to the proper proportion of the total component width based
on the current slider {@link #value}.  This will be called automatically when the Slider
is resized by a layout, but if it is rendered auto width, this method can be called from
another resize handler to sync the Slider if necessary.]]></Summary>
              <Parameters />
            </Method>
          </Methods>
          <Events>
            <Event Name="beforechange">
              <Summary><![CDATA[Fires before the slider value is changed. By returning false from an event handler, you can cancel the event and prevent the slider from changing.]]></Summary>
              <Parameters>
                <Param Name="slider" Type="Ext.Slider">
                  <Summary><![CDATA[The slider]]></Summary>
                </Param>
                <Param Name="newValue" Type="Number">
                  <Summary><![CDATA[The new value which the slider is being changed to.]]></Summary>
                </Param>
                <Param Name="oldValue" Type="Number">
                  <Summary><![CDATA[The old value which the slider was previously.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="change">
              <Summary><![CDATA[Fires when the slider value is changed.]]></Summary>
              <Parameters>
                <Param Name="slider" Type="Ext.Slider">
                  <Summary><![CDATA[The slider]]></Summary>
                </Param>
                <Param Name="newValue" Type="Number">
                  <Summary><![CDATA[The new value which the slider has been changed to.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="changecomplete">
              <Summary><![CDATA[Fires when the slider value is changed by the user and any drag operations have completed.]]></Summary>
              <Parameters>
                <Param Name="slider" Type="Ext.Slider">
                  <Summary><![CDATA[The slider]]></Summary>
                </Param>
                <Param Name="newValue" Type="Number">
                  <Summary><![CDATA[The new value which the slider has been changed to.]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="drag">
              <Summary><![CDATA[Fires continuously during the drag operation while the mouse is moving.]]></Summary>
              <Parameters>
                <Param Name="slider" Type="Ext.Slider">
                  <Summary><![CDATA[The slider]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The event fired from Ext.dd.DragTracker]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="dragend">
              <Summary><![CDATA[Fires after the drag operation has completed.]]></Summary>
              <Parameters>
                <Param Name="slider" Type="Ext.Slider">
                  <Summary><![CDATA[The slider]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The event fired from Ext.dd.DragTracker]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="dragstart">
              <Summary><![CDATA[Fires after a drag operation has started.]]></Summary>
              <Parameters>
                <Param Name="slider" Type="Ext.Slider">
                  <Summary><![CDATA[The slider]]></Summary>
                </Param>
                <Param Name="e" Type="Ext.EventObject">
                  <Summary><![CDATA[The event fired from Ext.dd.DragTracker]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Spacer" FullName="Ext.Spacer" Package="Ext" DefinedIn="widgets\BoxComponent.js" Extends="Ext.BoxComponent">
          <Summary><![CDATA[<p>Used to provide a sizable space in a layout.</p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object" />
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="SplitBar" FullName="Ext.SplitBar" Package="Ext" DefinedIn="widgets\SplitBar.js" Extends="Ext.util.Observable">
          <Summary><![CDATA[Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).
<br><br>
Usage:
<pre><code>
var split = new Ext.SplitBar("elementToDrag", "elementToSize",
                   Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);
split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter("container"));
split.minSize = 100;
split.maxSize = 600;
split.animate = true;
split.on('moved', splitterMoved);
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new SplitBar.]]></Summary>
            <Parameters>
              <Param Name="dragElement" Type="Mixed">
                <Summary><![CDATA[The element to be dragged and act as the SplitBar.]]></Summary>
              </Param>
              <Param Name="resizingElement" Type="Mixed">
                <Summary><![CDATA[The element to be resized based on where the SplitBar element is dragged]]></Summary>
              </Param>
              <Param Name="orientation" Type="Number" Optional="true">
                <Summary><![CDATA[Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)]]></Summary>
              </Param>
              <Param Name="placement" Type="Number" Optional="true">
                <Summary><![CDATA[Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial position of the SplitBar).]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="SplitBar.AbsoluteLayoutAdapter" FullName="Ext.SplitBar.AbsoluteLayoutAdapter" Package="Ext" DefinedIn="widgets\SplitBar.js" Extends="Ext.SplitBar.BasicLayoutAdapter">
          <Summary><![CDATA[Adapter that  moves the splitter element to align with the resized sizing element.
Used with an absolute positioned SplitBar.
document.body, make sure you assign an id to the body element.]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="container" Type="Mixed">
                <Summary><![CDATA[The container that wraps around the absolute positioned content. If it's]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties>
            <Property Name="BOTTOM" Static="true">
              <Summary><![CDATA[Placement constant - The resizing element is positioned under splitter element]]></Summary>
            </Property>
            <Property Name="HORIZONTAL" Static="true">
              <Summary><![CDATA[Orientation constant - Create a horizontal SplitBar]]></Summary>
            </Property>
            <Property Name="LEFT" Static="true">
              <Summary><![CDATA[Placement constant - The resizing element is to the left of the splitter element]]></Summary>
            </Property>
            <Property Name="RIGHT" Static="true">
              <Summary><![CDATA[Placement constant - The resizing element is to the right of the splitter element]]></Summary>
            </Property>
            <Property Name="TOP" Static="true">
              <Summary><![CDATA[Placement constant - The resizing element is positioned above the splitter element]]></Summary>
            </Property>
            <Property Name="VERTICAL" Static="true">
              <Summary><![CDATA[Orientation constant - Create a vertical SplitBar]]></Summary>
            </Property>
          </Properties>
          <Methods />
          <Events />
        </Class>
        <Class Name="SplitBar.BasicLayoutAdapter" FullName="Ext.SplitBar.BasicLayoutAdapter" Package="Ext" DefinedIn="widgets\SplitBar.js" Subclasses="Ext.SplitBar.AbsoluteLayoutAdapter">
          <Summary><![CDATA[Default Adapter. It assumes the splitter and resizing element are not positioned
elements and only gets/sets the width of the element. Generally used for table based layouts.]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="getElementSize">
              <Summary><![CDATA[Called before drag operations to get the current size of the resizing element.]]></Summary>
              <Parameters>
                <Param Name="s" Type="Ext.SplitBar">
                  <Summary><![CDATA[The SplitBar using this adapter]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setElementSize">
              <Summary><![CDATA[Called after drag operations to set the size of the resizing element.]]></Summary>
              <Parameters>
                <Param Name="s" Type="Ext.SplitBar">
                  <Summary><![CDATA[The SplitBar using this adapter]]></Summary>
                </Param>
                <Param Name="newSize" Type="Number">
                  <Summary><![CDATA[The new size to set]]></Summary>
                </Param>
                <Param Name="onComplete" Type="Function">
                  <Summary><![CDATA[A function to be invoked when resizing is complete]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="SplitButton" FullName="Ext.SplitButton" Package="Ext" DefinedIn="widgets\SplitButton.js" Xtype="splitbutton" Extends="Ext.Button" Subclasses="Ext.CycleButton">
          <Summary><![CDATA[A split button that provides a built-in dropdown arrow that can fire an event separately from the default
click event of the button.  Typically this would be used to display a dropdown menu that provides additional
options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:
<pre><code>
// display a dropdown menu:
new Ext.SplitButton({
	renderTo: 'button-ct', // the container id
   	text: 'Options',
   	handler: optionsHandler, // handle a click on the button itself
   	menu: new Ext.menu.Menu({
        items: [
        	// these items will render as dropdown menu items when the arrow is clicked:
	       {text: 'Item 1', handler: item1Handler},
	       {text: 'Item 2', handler: item2Handler}
        ]
   	})
});

// Instead of showing a menu, you provide any type of custom
// functionality you want when the dropdown arrow is clicked:
new Ext.SplitButton({
	renderTo: 'button-ct',
   	text: 'Options',
   	handler: optionsHandler,
   	arrowHandler: myCustomHandler
});
</code></pre>
@cfg {Function} arrowHandler A function called when the arrow button is clicked (can be used instead of click event)
@cfg {String} arrowTooltip The title attribute of the arrow]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new menu button.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="setArrowHandler">
              <Summary><![CDATA[Sets this button's arrow click handler.]]></Summary>
              <Parameters>
                <Param Name="handler" Type="Function">
                  <Summary><![CDATA[The function to call when the arrow is clicked]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[Scope for the function passed above]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="arrowclick">
              <Summary><![CDATA[Fires when this button's arrow is clicked.]]></Summary>
              <Parameters>
                <Param Name="el" Type="MenuButton">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="e" Type="EventObject">
                  <Summary><![CDATA[The click event]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="StoreMgr" FullName="Ext.StoreMgr" Package="Ext" DefinedIn="data\StoreMgr.js" Extends="Ext.util.MixedCollection" Singleton="true">
          <Summary><![CDATA[The default global group of stores.]]></Summary>
          <ConfigOptions>
            <ConfigOption Name="listeners" Type="Object" />
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="lookup">
              <Summary><![CDATA[Gets a registered Store by id]]></Summary>
              <Parameters>
                <Param Name="id" Type="String/Object">
                  <Summary><![CDATA[The id of the Store, or a Store instance]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.data.Store" />
            </Method>
            <Method Name="register">
              <Summary><![CDATA[Registers one or more Stores with the StoreMgr. You do not normally need to register stores
manually.  Any store initialized with a {@link Ext.data.Store#storeId} will be auto-registered.]]></Summary>
              <Parameters>
                <Param Name="store1" Type="Ext.data.Store">
                  <Summary><![CDATA[A Store instance]]></Summary>
                </Param>
                <Param Name="store2" Type="Ext.data.Store" Optional="true" />
                <Param Name="etc..." Type="Ext.data.Store" Optional="true" />
              </Parameters>
            </Method>
            <Method Name="unregister">
              <Summary><![CDATA[Unregisters one or more Stores with the StoreMgr]]></Summary>
              <Parameters>
                <Param Name="id1" Type="String/Object">
                  <Summary><![CDATA[The id of the Store, or a Store instance]]></Summary>
                </Param>
                <Param Name="id2" Type="String/Object" Optional="true" />
                <Param Name="etc..." Type="String/Object" Optional="true" />
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="TabPanel" FullName="Ext.TabPanel" Package="Ext" DefinedIn="widgets\TabPanel.js" Xtype="tabpanel" Extends="Ext.Panel">
          <Summary><![CDATA[<p>A basic tab container. TabPanels can be used exactly like a standard {@link Ext.Panel}
for layout purposes, but also have special support for containing child Components
(<tt>{@link Ext.Container#items items}</tt>) that are managed using a
{@link Ext.layout.CardLayout CardLayout layout manager}, and displayed as separate tabs.</p>

<b>Note:</b> By default, a tab's close tool <i>destroys</i> the child tab Component
and all its descendants. This makes the child tab Component, and all its descendants <b>unusable</b>. To enable
re-use of a tab, configure the TabPanel with <b><code>{@link #autoDestroy autoDestroy: false}</code></b>.

<p><b><u>TabPanel header/footer elements</u></b></p>
<p>TabPanels use their {@link Ext.Panel#header header} or {@link Ext.Panel#footer footer} element
(depending on the {@link #tabPosition} configuration) to accommodate the tab selector buttons.
This means that a TabPanel will not display any configured title, and will not display any
configured header {@link Ext.Panel#tools tools}.</p>
<p>To display a header, embed the TabPanel in a {@link Ext.Panel Panel} which uses
<b><tt>{@link Ext.Container#layout layout:'fit'}</tt></b>.</p>

<p><b><u>Tab Events</u></b></p>
<p>There is no actual tab class &mdash; each tab is simply a {@link Ext.BoxComponent Component}
such as a {@link Ext.Panel Panel}. However, when rendered in a TabPanel, each child Component
can fire additional events that only exist for tabs and are not available from other Components.
These events are:</p>
<div><ul class="mdetail-params">
<li><tt><b>{@link Ext.Panel#activate activate}</b></tt> : Fires when this Component becomes
the active tab.</li>
<li><tt><b>{@link Ext.Panel#deactivate deactivate}</b></tt> : Fires when the Component that
was the active tab becomes deactivated.</li>
</ul></div>
<p><b><u>Creating TabPanels from Code</u></b></p>
<p>TabPanels can be created and rendered completely in code, as in this example:</p>
<pre><code>
var tabs = new Ext.TabPanel({
    renderTo: Ext.getBody(),
    activeTab: 0,
    items: [{
        title: 'Tab 1',
        html: 'A simple tab'
    },{
        title: 'Tab 2',
        html: 'Another one'
    }]
});
</code></pre>
<p><b><u>Creating TabPanels from Existing Markup</u></b></p>
<p>TabPanels can also be rendered from pre-existing markup in a couple of ways.</p>
<div><ul class="mdetail-params">

<li>Pre-Structured Markup</li>
<div class="sub-desc">
<p>A container div with one or more nested tab divs with class <tt>'x-tab'</tt> can be rendered entirely
from existing markup (See the {@link #autoTabs} example).</p>
</div>

<li>Un-Structured Markup</li>
<div class="sub-desc">
<p>A TabPanel can also be rendered from markup that is not strictly structured by simply specifying by id
which elements should be the container and the tabs. Using this method tab content can be pulled from different
elements within the page by id regardless of page structure. For example:</p>
<pre><code>
var tabs = new Ext.TabPanel({
    renderTo: 'my-tabs',
    activeTab: 0,
    items:[
       {contentEl:'tab1', title:'Tab 1'},
       {contentEl:'tab2', title:'Tab 2'}
    ]
});

// Note that the tabs do not have to be nested within the container (although they can be)
&lt;div id="my-tabs">&lt;/div>
&lt;div id="tab1" class="x-hide-display">A simple tab&lt;/div>
&lt;div id="tab2" class="x-hide-display">Another one&lt;/div>
</code></pre>
Note that the tab divs in this example contain the class <tt>'x-hide-display'</tt> so that they can be rendered
deferred without displaying outside the tabs. You could alternately set <tt>{@link #deferredRender} = false </tt>
to render all content tabs on page load.
</div>

</ul></div>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The configuration options]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="layoutOnTabChange" Type="Boolean">
              <Summary><![CDATA[Set to true to force a layout of the active tab when the tab is changed. Defaults to false.
See {@link Ext.layout.CardLayout}.<code>{@link Ext.layout.CardLayout#layoutOnCardChange layoutOnCardChange}</code>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tabCls" Type="String">
              <Summary><![CDATA[class name applied to the tab strip item representing the child Component, allowing special
styling to be applied.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="monitorResize" Type="Boolean">
              <Summary><![CDATA[browser resize (defaults to true).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="deferredRender" Type="Boolean">
              <Summary><![CDATA[<p><tt>true</tt> by default to defer the rendering of child <tt>{@link Ext.Container#items items}</tt>
to the browsers DOM until a tab is activated. <tt>false</tt> will render all contained
<tt>{@link Ext.Container#items items}</tt> as soon as the {@link Ext.layout.CardLayout layout}
is rendered. If there is a significant amount of content or a lot of heavy controls being
rendered into panels that are not displayed by default, setting this to <tt>true</tt> might
improve performance.</p>
<br><p>The <tt>deferredRender</tt> property is internally passed to the layout manager for
TabPanels ({@link Ext.layout.CardLayout}) as its {@link Ext.layout.CardLayout#deferredRender}
configuration value.</p>
<br><p><b>Note</b>: leaving <tt>deferredRender</tt> as <tt>true</tt> means that the content
within an unactivated tab will not be available. For example, this means that if the TabPanel
is within a {@link Ext.form.FormPanel form}, then until a tab is activated, any Fields within
unactivated tabs will not be rendered, and will therefore not be submitted and will not be
available to either {@link Ext.form.BasicForm#getValues getValues} or
{@link Ext.form.BasicForm#setValues setValues}.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tabWidth" Type="Number" />
            <ConfigOption Name="minTabWidth" Type="Number" />
            <ConfigOption Name="resizeTabs" Type="Boolean">
              <Summary><![CDATA[tab strip (defaults to false).  Setting this to true may cause specific widths that might be set per tab to
be overridden in order to fit them all into view (although {@link #minTabWidth} will always be honored).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="enableTabScroll" Type="Boolean">
              <Summary><![CDATA[overall TabPanel width. Only available with tabPosition:'top' (defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scrollIncrement" Type="Number">
              <Summary><![CDATA[(defaults to <tt>100</tt>, or if <tt>{@link #resizeTabs} = true</tt>, the calculated tab width).  Only
applies when <tt>{@link #enableTabScroll} = true</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scrollRepeatInterval" Type="Number">
              <Summary><![CDATA[continuously pressed (defaults to <tt>400</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="scrollDuration" Type="Float">
              <Summary><![CDATA[to <tt>.35</tt>). Only applies when <tt>{@link #animScroll} = true</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="animScroll" Type="Boolean">
              <Summary><![CDATA[to <tt>true</tt>).  Only applies when <tt>{@link #enableTabScroll} = true</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tabPosition" Type="String">
              <Summary><![CDATA[The only other supported value is <tt>'bottom'</tt>.  <b>Note</b>: tab scrolling is only supported for
<tt>tabPosition: 'top'</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="baseCls" Type="String" />
            <ConfigOption Name="autoTabs" Type="Boolean">
              <Summary><![CDATA[<p><tt>true</tt> to query the DOM for any divs with a class of 'x-tab' to be automatically converted
to tabs and added to this panel (defaults to <tt>false</tt>).  Note that the query will be executed within
the scope of the container element only (so that multiple tab panels from markup can be supported via this
method).</p>
<p>This method is only possible when the markup is structured correctly as a container with nested divs
containing the class <tt>'x-tab'</tt>. To create TabPanels without these limitations, or to pull tab content
from other elements on the page, see the example at the top of the class for generating tabs from markup.</p>
<p>There are a couple of things to note when using this method:<ul>
<li>When using the <tt>autoTabs</tt> config (as opposed to passing individual tab configs in the TabPanel's
{@link #items} collection), you must use <tt>{@link #applyTo}</tt> to correctly use the specified <tt>id</tt>
as the tab container. The <tt>autoTabs</tt> method <em>replaces</em> existing content with the TabPanel
components.</li>
<li>Make sure that you set <tt>{@link #deferredRender}: false</tt> so that the content elements for each
tab will be rendered into the TabPanel immediately upon page load, otherwise they will not be transformed
until each tab is activated and will be visible outside the TabPanel.</li>
</ul>Example usage:</p>
<pre><code>
var tabs = new Ext.TabPanel({
    applyTo: 'my-tabs',
    activeTab: 0,
    deferredRender: false,
    autoTabs: true
});

// This markup will be converted to a TabPanel from the code above
&lt;div id="my-tabs">
    &lt;div class="x-tab" title="Tab 1">A simple tab&lt;/div>
    &lt;div class="x-tab" title="Tab 2">Another one&lt;/div>
&lt;/div>
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoTabSelector" Type="String">
              <Summary><![CDATA[<tt>{@link #autoTabs} = true</tt> (defaults to <tt>'div.x-tab'</tt>).  This can be any valid selector
supported by {@link Ext.DomQuery#select}. Note that the query will be executed within the scope of this
tab panel only (so that multiple tab panels from markup can be supported on a page).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="activeTab" Type="String/Number">
              <Summary><![CDATA[activated on render (defaults to none).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="tabMargin" Type="Number">
              <Summary><![CDATA[tabs. If you change the margin in CSS, you will need to update this value so calculations are correct
with either <tt>{@link #resizeTabs}</tt> or scrolling tabs. (defaults to <tt>2</tt>)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="plain" Type="Boolean">
              <Summary><![CDATA[(defaults to <tt>false</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="wheelIncrement" Type="Number">
              <Summary><![CDATA[scrolling (defaults to <tt>20</tt>).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="layoutConfig" Type="Object">
              <Summary><![CDATA[TabPanel implicitly uses {@link Ext.layout.CardLayout} as its layout manager.
<code>layoutConfig</code> may be used to configure this layout manager.
<code>{@link #deferredRender}</code> and <code>{@link #layoutOnTabChange}</code>
configured on the TabPanel will be applied as configs to the layout manager.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="itemTpl" Type="Template/XTemplate">
              <Summary><![CDATA[{@link Ext.XTemplate XTemplate} which may be provided to process the data object returned from
<tt>{@link #getTemplateArgs}</tt> to produce a clickable selector element in the tab strip.</p>
<p>The main element created should be a <tt>&lt;li></tt> element. In order for a click event on
a selector element to be connected to its item, it must take its <i>id</i> from the TabPanel's
native <tt>{@link #getTemplateArgs}</tt>.</p>
<p>The child element which contains the title text must be marked by the CSS class
<tt>x-tab-strip-inner</tt>.</p>
<p>To enable closability, the created element should contain an element marked by the CSS class
<tt>x-tab-strip-close</tt>.</p>
<p>If a custom <tt>itemTpl</tt> is supplied, it is the developer's responsibility to create CSS
style rules to create the desired appearance.</p>
Below is an example of how to create customized tab selector items:<pre><code>
new Ext.TabPanel({
    renderTo: document.body,
    minTabWidth: 115,
    tabWidth: 135,
    enableTabScroll: true,
    width: 600,
    height: 250,
    defaults: {autoScroll:true},
    itemTpl: new Ext.XTemplate(
    '&lt;li class="{cls}" id="{id}" style="overflow:hidden">',
         '&lt;tpl if="closable">',
            '&lt;a class="x-tab-strip-close" onclick="return false;">&lt;/a>',
         '&lt;/tpl>',
         '&lt;a class="x-tab-right" href="#" onclick="return false;" style="padding-left:6px">',
            '&lt;em class="x-tab-left">',
                '&lt;span class="x-tab-strip-inner">',
                    '&lt;img src="{src}" style="float:left;margin:3px 3px 0 0">',
                    '&lt;span style="margin-left:20px" class="x-tab-strip-text {iconCls}">{text} {extra}&lt;/span>',
                '&lt;/span>',
            '&lt;/em>',
        '&lt;/a>',
    '&lt;/li>'
    ),
    getTemplateArgs: function (item) {
//      Call the native method to collect the base data. Like the ID!
        var result = Ext.TabPanel.prototype.getTemplateArgs.call(this, item);

//      Add stuff used in our template
        return Ext.apply(result, {
            closable: item.closable,
            src: item.iconSrc,
            extra: item.extraText || ''
        });
    },
    items: [{
        title: 'New Tab 1',
        iconSrc: '../shared/icons/fam/grid.png',
        html: 'Tab Body 1',
        closable: true
    }, {
        title: 'New Tab 2',
        iconSrc: '../shared/icons/fam/grid.png',
        html: 'Tab Body 2',
        extraText: 'Extra stuff in the tab button'
    }]
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="collapsible" Type="Boolean">
              <Summary><![CDATA[@hide]]></Summary>
            </ConfigOption>
            <ConfigOption Name="header" Type="String">
              <Summary><![CDATA[@hide]]></Summary>
            </ConfigOption>
            <ConfigOption Name="headerAsText" Type="Boolean">
              <Summary><![CDATA[@hide]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="readTabs">
              <Summary><![CDATA[True to scan the markup in this tab panel for <tt>{@link #autoTabs}</tt> using the
<tt>{@link #autoTabSelector}</tt>]]></Summary>
              <Parameters>
                <Param Name="removeExisting" Type="Boolean">
                  <Summary><![CDATA[True to remove existing tabs]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getTemplateArgs">
              <Summary><![CDATA[<p>Provides template arguments for rendering a tab selector item in the tab strip.</p>
<p>This method returns an object hash containing properties used by the TabPanel's <tt>{@link #itemTpl}</tt>
to create a formatted, clickable tab selector element. The properties which must be returned
are:</p><div class="mdetail-params"><ul>
<li><b>id</b> : String<div class="sub-desc">A unique identifier which links to the item</div></li>
<li><b>text</b> : String<div class="sub-desc">The text to display</div></li>
<li><b>cls</b> : String<div class="sub-desc">The CSS class name</div></li>
<li><b>iconCls</b> : String<div class="sub-desc">A CSS class to provide appearance for an icon.</div></li>
</ul></div>]]></Summary>
              <Parameters>
                <Param Name="item" Type="BoxComponent">
                  <Summary><![CDATA[The {@link Ext.BoxComponent BoxComponent} for which to create a selector element in the tab strip.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Object">
                <Summary><![CDATA[An object hash containing the properties required to render the selector element.]]></Summary>
              </Return>
            </Method>
            <Method Name="getTabEl">
              <Summary><![CDATA[Gets the DOM element for the tab strip item which activates the child panel with the specified
ID. Access this to change the visual treatment of the item, for example by changing the CSS class name.]]></Summary>
              <Parameters>
                <Param Name="tab" Type="Panel/Number/String">
                  <Summary><![CDATA[The tab component, or the tab's index, or the tabs id or itemId.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement">
                <Summary><![CDATA[The DOM node]]></Summary>
              </Return>
            </Method>
            <Method Name="beginUpdate">
              <Summary><![CDATA[Suspends any internal calculations or scrolling while doing a bulk operation. See {@link #endUpdate}]]></Summary>
              <Parameters />
            </Method>
            <Method Name="endUpdate">
              <Summary><![CDATA[Resumes calculations and scrolling at the end of a bulk operation. See {@link #beginUpdate}]]></Summary>
              <Parameters />
            </Method>
            <Method Name="hideTabStripItem">
              <Summary><![CDATA[Hides the tab strip item for the passed tab]]></Summary>
              <Parameters>
                <Param Name="item" Type="Number/String/Panel">
                  <Summary><![CDATA[The tab index, id or item]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="unhideTabStripItem">
              <Summary><![CDATA[Unhides the tab strip item for the passed tab]]></Summary>
              <Parameters>
                <Param Name="item" Type="Number/String/Panel">
                  <Summary><![CDATA[The tab index, id or item]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setActiveTab">
              <Summary><![CDATA[Sets the specified tab as the active tab. This method fires the {@link #beforetabchange} event which
can <tt>return false</tt> to cancel the tab change.]]></Summary>
              <Parameters>
                <Param Name="item" Type="String/Number">
                  <Summary><![CDATA[
The id or tab Panel to activate. This parameter may be any of the following:
<div><ul class="mdetail-params">
<li>a <b><tt>String</tt></b> : representing the <code>{@link Ext.Component#itemId itemId}</code>
or <code>{@link Ext.Component#id id}</code> of the child component </li>
<li>a <b><tt>Number</tt></b> : representing the position of the child component
within the <code>{@link Ext.Container#items items}</code> <b>property</b></li>
</ul></div>
<p>For additional information see {@link Ext.util.MixedCollection#get}.]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="getActiveTab">
              <Summary><![CDATA[Gets the currently active tab.]]></Summary>
              <Parameters />
              <Return Type="Panel">
                <Summary><![CDATA[The active tab]]></Summary>
              </Return>
            </Method>
            <Method Name="getItem">
              <Summary><![CDATA[Gets the specified tab by id.]]></Summary>
              <Parameters>
                <Param Name="id" Type="String">
                  <Summary><![CDATA[The tab id]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Panel">
                <Summary><![CDATA[The tab]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="beforetabchange">
              <Summary><![CDATA[Fires before the active tab changes. Handlers can <tt>return false</tt> to cancel the tab change.]]></Summary>
              <Parameters>
                <Param Name="el" Type="TabPanel">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="newTab" Type="Panel">
                  <Summary><![CDATA[The tab being activated]]></Summary>
                </Param>
                <Param Name="currentTab" Type="Panel">
                  <Summary><![CDATA[The current active tab]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="tabchange">
              <Summary><![CDATA[Fires after the active tab has changed.]]></Summary>
              <Parameters>
                <Param Name="el" Type="TabPanel">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="tab" Type="Panel">
                  <Summary><![CDATA[The new active tab]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="contextmenu">
              <Summary><![CDATA[Relays the contextmenu event from a tab selector element in the tab strip.]]></Summary>
              <Parameters>
                <Param Name="el" Type="TabPanel">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="tab" Type="Panel">
                  <Summary><![CDATA[The target tab]]></Summary>
                </Param>
                <Param Name="e" Type="EventObject" />
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="TaskMgr" FullName="Ext.TaskMgr" Package="Ext" DefinedIn="util\core\TaskMgr.js" Extends="Ext.util.TaskRunner" Singleton="true">
          <Summary><![CDATA[A static {@link Ext.util.TaskRunner} instance that can be used to start and stop arbitrary tasks.  See
{@link Ext.util.TaskRunner} for supported methods and task config properties.
<pre><code>
// Start a simple clock task that updates a div once per second
var task = {
    run: function () {
        Ext.fly('clock').update(new Date().format('g:i:s A'));
    },
    interval: 1000 //1 second
}
Ext.TaskMgr.start(task);
</code></pre>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="Template" FullName="Ext.Template" Package="Ext" DefinedIn="core\core\Template.js,core\Template-more.js" Subclasses="Ext.XTemplate">
          <Summary><![CDATA[<p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}
for greater performance.</p>
<p>For example usage {@link #Template see the constructor}.</p>]]></Summary>
          <Constructor>
            <Summary><![CDATA[An instance of this class may be created by passing to the constructor either
a single argument, or multiple arguments:
<div class="mdetail-params"><ul>
<li><b>single argument</b> : String/Array
<div class="sub-desc">
The single argument may be either a String or an Array:<ul>
<li><tt>String</tt> : </li><pre><code>
var t = new Ext.Template("&lt;div>Hello {0}.&lt;/div>");
t.{@link #append}('some-element', ['foo']);
</code></pre>
<li><tt>Array</tt> : </li>
An Array will be combined with <code>join('')</code>.
<pre><code>
var t = new Ext.Template([
  '&lt;div name="{id}"&gt;',
    '&lt;span class="{cls}"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',
  '&lt;/div&gt;',
]);
t.{@link #compile}();
t.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});
</code></pre>
</ul></div></li>
<li><b>multiple arguments</b> : String, Object, Array, ...
<div class="sub-desc">
Multiple arguments will be combined with <code>join('')</code>.
<pre><code>
var t = new Ext.Template(
  '&lt;div name="{id}"&gt;',
    '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
  '&lt;/div&gt;',
  // a configuration object:
 {
    compiled: true,   // {@link #compile} immediately
    disableFormats: true // See Notes below.
  } 
);
</code></pre>
<p><b>Notes</b>:</p>
<div class="mdetail-params"><ul>
<li>Formatting and <code>disableFormats</code> are not applicable for Ext Core.</li>
<li>For a list of available format functions, see {@link Ext.util.Format}.</li>
<li><code>disableFormats</code> reduces <code>{@link #apply}</code> time
when no formatting is required.</li>
</ul></div>
</div></li>
</ul></div>.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Mixed" />
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="compiled" Type="Boolean">
              <Summary><![CDATA[immediately (see <code>{@link #compile}</code>).
Defaults to <tt>false</tt>.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="re" Type="RegExp">
              <Summary><![CDATA[Defaults to:<pre><code>
re : /\{([\w-]+)\}/g                                     // for Ext Core
re : /\{([\w-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g      // for Ext JS
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="disableFormats" Type="Boolean">
              <Summary><![CDATA[functions in the template. If the template does not contain
{@link Ext.util.Format format functions}, setting <code>disableFormats</code>
to true will reduce <code>{@link #apply}</code> time. Defaults to <tt>false</tt>.
<pre><code>
var t = new Ext.Template(
    '&lt;div name="{id}"&gt;',
        '&lt;span class="{cls}"&gt;{name} {value}&lt;/span&gt;',
    '&lt;/div&gt;',
   {
        compiled: true,      // {@link #compile} immediately
        disableFormats: true // reduce <code>{@link #apply}</code> time since no formatting
    }    
);
</code></pre>
For a list of available format functions, see {@link Ext.util.Format}.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="re">
              <Summary><![CDATA[See <code>{@link #re}</code>.]]></Summary>
            </Property>
            <Property Name="disableFormats">
              <Summary><![CDATA[See <code>{@link #disableFormats}</code>.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="append">
              <Summary><![CDATA[Applies the supplied <code>values</code> to the template and appends
the new node(s) to the specified <code>el</code>.
<p>For example usage {@link #Template see the constructor}.</p>]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="values" Type="Object/Array">
                  <Summary><![CDATA[
The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
or an object (i.e. <code>{foo: 'bar'}</code>).]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return an Ext.Element (defaults to undefined)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node or Element]]></Summary>
              </Return>
            </Method>
            <Method Name="apply">
              <Summary><![CDATA[Alias for {@link #applyTemplate}
Returns an HTML fragment of this template with the specified <code>values</code> applied.]]></Summary>
              <Parameters>
                <Param Name="values" Type="Object/Array">
                  <Summary><![CDATA[
The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
or an object (i.e. <code>{foo: 'bar'}</code>).
@member Ext.Template]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String">
                <Summary><![CDATA[The HTML fragment]]></Summary>
              </Return>
            </Method>
            <Method Name="applyTemplate">
              <Summary><![CDATA[Returns an HTML fragment of this template with the specified <code>values</code> applied.]]></Summary>
              <Parameters>
                <Param Name="values" Type="Object/Array">
                  <Summary><![CDATA[
The template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)
or an object (i.e. <code>{foo: 'bar'}</code>).]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String">
                <Summary><![CDATA[The HTML fragment]]></Summary>
              </Return>
            </Method>
            <Method Name="compile">
              <Summary><![CDATA[Compiles the template into an internal function, eliminating the RegEx overhead.]]></Summary>
              <Parameters />
              <Return Type="Ext.Template">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="from">
              <Summary><![CDATA[Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/HTMLElement">
                  <Summary><![CDATA[A DOM element or its id]]></Summary>
                </Param>
                <Param Name="config" Type="Object">
                  <Summary><![CDATA[A configuration object
@static]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Template">
                <Summary><![CDATA[The created template]]></Summary>
              </Return>
            </Method>
            <Method Name="insertAfter">
              <Summary><![CDATA[Applies the supplied values to the template and inserts the new node(s) after el.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="values" Type="Object/Array">
                  <Summary><![CDATA[The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element (defaults to undefined)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node or Element]]></Summary>
              </Return>
            </Method>
            <Method Name="insertBefore">
              <Summary><![CDATA[Applies the supplied values to the template and inserts the new node(s) before el.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="values" Type="Object/Array">
                  <Summary><![CDATA[The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element (defaults to undefined)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node or Element]]></Summary>
              </Return>
            </Method>
            <Method Name="insertFirst">
              <Summary><![CDATA[Applies the supplied values to the template and inserts the new node(s) as the first child of el.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="values" Type="Object/Array">
                  <Summary><![CDATA[The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element (defaults to undefined)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node or Element]]></Summary>
              </Return>
            </Method>
            <Method Name="overwrite">
              <Summary><![CDATA[Applies the supplied values to the template and overwrites the content of el with the new node(s).]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The context element]]></Summary>
                </Param>
                <Param Name="values" Type="Object/Array">
                  <Summary><![CDATA[The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})]]></Summary>
                </Param>
                <Param Name="returnElement" Type="Boolean" Optional="true">
                  <Summary><![CDATA[true to return a Ext.Element (defaults to undefined)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="HTMLElement/Ext.Element">
                <Summary><![CDATA[The new node or Element]]></Summary>
              </Return>
            </Method>
            <Method Name="set">
              <Summary><![CDATA[Sets the HTML used as the template and optionally compiles it.]]></Summary>
              <Parameters>
                <Param Name="html" Type="String" />
                <Param Name="compile" Type="Boolean" Optional="true">
                  <Summary><![CDATA[True to compile the template (defaults to undefined)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Template">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Tip" FullName="Ext.Tip" Package="Ext" DefinedIn="widgets\tips\Tip.js" Xtype="tip" Extends="Ext.Panel" Subclasses="Ext.ToolTip">
          <Summary><![CDATA[This is the base class for {@link Ext.QuickTip} and {@link Ext.Tooltip} that provides the basic layout and
positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned
tips that are displayed programmatically, or it can be extended to provide custom tip implementations.]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new Tip.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The configuration options]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="closable" Type="Boolean" />
            <ConfigOption Name="defaultAlign" Type="String">
              <Summary><![CDATA[for this tip relative to its element of origin (defaults to "tl-bl?").]]></Summary>
            </ConfigOption>
            <ConfigOption Name="maxWidth" Type="Number" />
            <ConfigOption Name="minWidth" Type="Number" />
            <ConfigOption Name="shadow" Type="Boolean/String">
              <Summary><![CDATA[for bottom-right shadow (defaults to "sides").]]></Summary>
            </ConfigOption>
            <ConfigOption Name="width" Type="Number">
              <Summary><![CDATA[Width in pixels of the tip (defaults to auto).  Width will be ignored if it exceeds the bounds of
{@link #minWidth} or {@link #maxWidth}.  The maximum supported value is 500.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="showAt">
              <Summary><![CDATA[Shows this tip at the specified XY position.  Example usage:
<pre><code>
// Show the tip at x:50 and y:100
tip.showAt([50,100]);
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="xy" Type="Array">
                  <Summary><![CDATA[An array containing the x and y coordinates]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="showBy">
              <Summary><![CDATA[<b>Experimental</b>. Shows this tip at a position relative to another element using a standard {@link Ext.Element#alignTo}
anchor position value.  Example usage:
<pre><code>
// Show the tip at the default position ('tl-br?')
tip.showBy('my-el');

// Show the tip's top-left corner anchored to the element's top-right corner
tip.showBy('my-el', 'tl-tr');
</code></pre>]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[An HTMLElement, Ext.Element or string id of the target element to align to]]></Summary>
                </Param>
                <Param Name="position" Type="String" Optional="true">
                  <Summary><![CDATA[A valid {@link Ext.Element#alignTo} anchor position (defaults to 'tl-br?' or
{@link #defaultAlign} if specified).]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Toolbar" FullName="Ext.Toolbar" Package="Ext" DefinedIn="widgets\Toolbar.js" Xtype="toolbar" Extends="Ext.Container" Subclasses="Ext.PagingToolbar">
          <Summary><![CDATA[<p>Basic Toolbar class. Although the <tt>{@link Ext.Container#defaultType defaultType}</tt> for Toolbar
is <tt>{@link Ext.Button button}</tt>, Toolbar elements (child items for the Toolbar container) may
be virtually any type of Component. Toolbar elements can be created explicitly via their constructors,
or implicitly via their xtypes, and can be <tt>{@link #add}</tt>ed dynamically.</p>
<p>Some items have shortcut strings for creation:</p>
<pre>
<u>Shortcut</u>  <u>xtype</u>          <u>Class</u>                  <u>Description</u>
'->'      'tbfill'      {@link Ext.Toolbar.Fill}       begin using the right-justified button container
'-'       'tbseparator' {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items
' '       'tbspacer'    {@link Ext.Toolbar.Spacer}     add horiztonal space between elements
</pre>

Example usage of various elements:
<pre><code>
var tb = new Ext.Toolbar({
    renderTo: document.body,
    width: 600,
    height: 100,
    items: [
       {
            // xtype: 'button', // default for Toolbars, same as 'tbbutton'
            text: 'Button'
        },
       {
            xtype: 'splitbutton', // same as 'tbsplitbutton'
            text: 'Split Button'
        },
        // begin using the right-justified button container
        '->', // same as {xtype: 'tbfill'}, // Ext.Toolbar.Fill
       {
            xtype: 'textfield',
            name: 'field1',
            emptyText: 'enter search term'
        },
        // add a vertical separator bar between toolbar items
        '-', // same as {xtype: 'tbseparator'} to create Ext.Toolbar.Separator
        'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.Toolbar.TextItem
       {xtype: 'tbspacer'},// same as ' ' to create Ext.Toolbar.Spacer
        'text 2',
       {xtype: 'tbspacer', width: 50}, // add a 50px space
        'text 3'
    ]
});
</code></pre>
Example adding a ComboBox within a menu of a button:
<pre><code>
// ComboBox creation
var combo = new Ext.form.ComboBox({
    store: new Ext.data.ArrayStore({
        autoDestroy: true,
        fields: ['initials', 'fullname'],
        data : [
            ['FF', 'Fred Flintstone'],
            ['BR', 'Barney Rubble']
        ]
    }),
    displayField: 'fullname',
    typeAhead: true,
    mode: 'local',
    forceSelection: true,
    triggerAction: 'all',
    emptyText: 'Select a name...',
    selectOnFocus: true,
    width: 135,
    getListParent: function () {
        return this.el.up('.x-menu');
    },
    iconCls: 'no-icon' //use iconCls if placing within menu to shift to right side of menu
});

// put ComboBox in a Menu
var menu = new Ext.menu.Menu({
    id: 'mainMenu',
    items: [
        combo // A Field in a Menu
    ]
});

// add a Button with the menu
tb.add({
        text:'Button w/ Menu',
        menu: menu  // assign menu by instance
    });
tb.doLayout();
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Creates a new Toolbar.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object/Array">
                <Summary><![CDATA[A config object or an array of buttons to <tt>{@link #add}</tt>]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="layout" Type="String/Object">
              <Summary><![CDATA[This class assigns a default layout (<code>layout:'<b>toolbar</b>'</code>).
Developers <i>may</i> override this configuration option if another layout
is required (the constructor must be passed a configuration object in this
case instead of an array).
See {@link Ext.Container#layout} for additional information.]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="add">
              <Summary><![CDATA[<p>Adds element(s) to the toolbar -- this function takes a variable number of
arguments of mixed type and adds them to the toolbar.</p>
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="arg1" Type="Mixed">
                  <Summary><![CDATA[The following types of arguments are all valid:<br />
<ul>
<li>{@link Ext.Button} config: A valid button config object (equivalent to {@link #addButton})</li>
<li>HtmlElement: Any standard HTML element (equivalent to {@link #addElement})</li>
<li>Field: Any form field (equivalent to {@link #addField})</li>
<li>Item: Any subclass of {@link Ext.Toolbar.Item} (equivalent to {@link #addItem})</li>
<li>String: Any generic string (gets wrapped in a {@link Ext.Toolbar.TextItem}, equivalent to {@link #addText}).
Note that there are a few special strings that are treated differently as explained next.</li>
<li>'-': Creates a separator element (equivalent to {@link #addSeparator})</li>
<li>' ': Creates a spacer element (equivalent to {@link #addSpacer})</li>
<li>'->': Creates a fill element (equivalent to {@link #addFill})</li>
</ul>]]></Summary>
                </Param>
                <Param Name="arg2" Type="Mixed" />
                <Param Name="etc." Type="Mixed" />
              </Parameters>
            </Method>
            <Method Name="addButton">
              <Summary><![CDATA[Adds a button (or buttons). See {@link Ext.Button} for more info on the config.
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object/Array">
                  <Summary><![CDATA[A button config or array of configs]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button/Array" />
            </Method>
            <Method Name="addDom">
              <Summary><![CDATA[Adds a new element to the toolbar from the passed {@link Ext.DomHelper} config
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="config" Type="Object" />
              </Parameters>
              <Return Type="Ext.Toolbar.Item">
                <Summary><![CDATA[The element's item]]></Summary>
              </Return>
            </Method>
            <Method Name="addElement">
              <Summary><![CDATA[Adds any standard HTML element to the toolbar
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The element or id of the element to add]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Toolbar.Item">
                <Summary><![CDATA[The element's item]]></Summary>
              </Return>
            </Method>
            <Method Name="addField">
              <Summary><![CDATA[Adds a dynamically rendered Ext.form field (TextField, ComboBox, etc). Note: the field should not have
been rendered yet. For a field that has already been rendered, use {@link #addElement}.
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="field" Type="Ext.form.Field" />
              </Parameters>
              <Return Type="Ext.Toolbar.Item" />
            </Method>
            <Method Name="addFill">
              <Summary><![CDATA[Forces subsequent additions into the float:right toolbar
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters />
            </Method>
            <Method Name="addItem">
              <Summary><![CDATA[Adds any Toolbar.Item or subclass
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="item" Type="Ext.Toolbar.Item" />
              </Parameters>
              <Return Type="Ext.Toolbar.Item">
                <Summary><![CDATA[The item]]></Summary>
              </Return>
            </Method>
            <Method Name="addSeparator">
              <Summary><![CDATA[Adds a separator
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters />
              <Return Type="Ext.Toolbar.Item} The separator {@link Ext.Toolbar.Item item" />
            </Method>
            <Method Name="addSpacer">
              <Summary><![CDATA[Adds a spacer element
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters />
              <Return Type="Ext.Toolbar.Spacer">
                <Summary><![CDATA[The spacer item]]></Summary>
              </Return>
            </Method>
            <Method Name="addText">
              <Summary><![CDATA[Adds text to the toolbar
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="text" Type="String">
                  <Summary><![CDATA[The text to add]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Toolbar.Item">
                <Summary><![CDATA[The element's item]]></Summary>
              </Return>
            </Method>
            <Method Name="insertButton">
              <Summary><![CDATA[Inserts any {@link Ext.Toolbar.Item}/{@link Ext.Button} at the specified index.
<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>]]></Summary>
              <Parameters>
                <Param Name="index" Type="Number">
                  <Summary><![CDATA[The index where the item is to be inserted]]></Summary>
                </Param>
                <Param Name="item" Type="Object/Ext.Toolbar.Item/Ext.Button/Array">
                  <Summary><![CDATA[The button, or button config object to be
inserted, or an array of buttons/configs.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Button/Item" />
            </Method>
          </Methods>
          <Events>
            <Event Name="overflowchange">
              <Summary><![CDATA[Fires after the overflow state has changed.]]></Summary>
              <Parameters>
                <Param Name="c" Type="Object">
                  <Summary><![CDATA[The Container]]></Summary>
                </Param>
                <Param Name="lastOverflow" Type="Boolean">
                  <Summary><![CDATA[overflow state]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Toolbar.Fill" FullName="Ext.Toolbar.Fill" Package="Ext" DefinedIn="widgets\Toolbar.js" Xtype="tbfill" Extends="Ext.Toolbar.Spacer">
          <Summary><![CDATA[A non-rendering placeholder item which instructs the Toolbar's Layout to begin using
the right-justified button container.
<pre><code>
new Ext.Panel({
    tbar : [
        'Item 1',
       {xtype: 'tbfill'}, // or '->'
        'Item 2'
    ]
});
</code></pre>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="Toolbar.Item" FullName="Ext.Toolbar.Item" Package="Ext" DefinedIn="widgets\Toolbar.js" Xtype="tbitem" Extends="Ext.BoxComponent" Subclasses="Ext.Toolbar.Separator,Ext.Toolbar.Spacer,Ext.Toolbar.TextItem">
          <Summary><![CDATA[The base class that other non-interacting Toolbar Item classes should extend in order to
get some basic common toolbar item functionality.]]></Summary>
          <Constructor>
            <Summary><![CDATA[Creates a new Item.]]></Summary>
            <Parameters>
              <Param Name="el" Type="HTMLElement" />
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="overflowText" Type="String" />
          </ConfigOptions>
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="Toolbar.Separator" FullName="Ext.Toolbar.Separator" Package="Ext" DefinedIn="widgets\Toolbar.js" Xtype="tbseparator" Extends="Ext.Toolbar.Item">
          <Summary><![CDATA[A simple class that adds a vertical separator bar between toolbar items
(css class:<tt>'xtb-sep'</tt>). Example usage:
<pre><code>
new Ext.Panel({
    tbar : [
        'Item 1',
       {xtype: 'tbseparator'}, // or '-'
        'Item 2'
    ]
});
</code></pre>]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="Toolbar.Spacer" FullName="Ext.Toolbar.Spacer" Package="Ext" DefinedIn="widgets\Toolbar.js" Xtype="tbspacer" Extends="Ext.Toolbar.Item" Subclasses="Ext.Toolbar.Fill">
          <Summary><![CDATA[A simple element that adds extra horizontal space between items in a toolbar.
By default a 2px wide space is added via css specification:<pre><code>
.x-toolbar .xtb-spacer {
    width:2px;
}
</code></pre>
<p>Example usage:</p>
<pre><code>
new Ext.Panel({
    tbar : [
        'Item 1',
       {xtype: 'tbspacer'}, // or ' '
        'Item 2',
        // space width is also configurable via javascript
       {xtype: 'tbspacer', width: 50}, // add a 50px space
        'Item 3'
    ]
});
</code></pre>]]></Summary>
          <ConfigOptions>
            <ConfigOption Name="width" Type="Number">
              <Summary><![CDATA[The width of the spacer in pixels (defaults to 2px via css style <tt>.x-toolbar .xtb-spacer</tt>).]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="Toolbar.TextItem" FullName="Ext.Toolbar.TextItem" Package="Ext" DefinedIn="widgets\Toolbar.js" Xtype="tbtext" Extends="Ext.Toolbar.Item">
          <Summary><![CDATA[A simple class that renders text directly into a toolbar
(with css class:<tt>'xtb-text'</tt>). Example usage:
<pre><code>
new Ext.Panel({
    tbar : [
       {xtype: 'tbtext', text: 'Item 1'} // or simply 'Item 1'
    ]
});
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Creates a new TextItem.]]></Summary>
            <Parameters>
              <Param Name="text" Type="String/Object">
                <Summary><![CDATA[A text string, or a config object containing a <tt>text</tt> property]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="text" Type="String" />
          </ConfigOptions>
          <Properties />
          <Methods>
            <Method Name="setText">
              <Summary><![CDATA[Updates this item's text, setting the text to be used as innerHTML.]]></Summary>
              <Parameters>
                <Param Name="t" Type="String">
                  <Summary><![CDATA[The text to display (html accepted).]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="ToolTip" FullName="Ext.ToolTip" Package="Ext" DefinedIn="widgets\tips\ToolTip.js" Xtype="tooltip" Extends="Ext.Tip" Subclasses="Ext.QuickTip">
          <Summary><![CDATA[A standard tooltip implementation for providing additional information when hovering over a target element.]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new Tooltip.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The configuration options]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="anchorOffset" Type="Number">
              <Summary><![CDATA[default position of the anchor arrow (defaults to 0).  When the anchor
position is on the top or bottom of the tooltip, <code>anchorOffset</code>
will be used as a horizontal offset.  Likewise, when the anchor position
is on the left or right side, <code>anchorOffset</code> will be used as
a vertical offset.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="anchorToTarget" Type="Boolean">
              <Summary><![CDATA[element, false to anchor it relative to the mouse coordinates (defaults
to true).  When <code>anchorToTarget</code> is true, use
<code>{@link #defaultAlign}</code> to control tooltip alignment to the
target element.  When <code>anchorToTarget</code> is false, use
<code>{@link #anchorPosition}</code> instead to control alignment.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoHide" Type="Boolean">
              <Summary><![CDATA[mouse exits the target element or after the <code>{@link #dismissDelay}</code>
has expired if set (defaults to true).  If <code>{@link closable} = true</code>
a close tool button will be rendered into the tooltip header.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="delegate" Type="String">
              <Summary><![CDATA[selector which allows selection of individual elements within the
<code>{@link #target}</code> element to trigger showing and hiding the
ToolTip as the mouse moves within the target.</p>
<p>When specified, the child element of the target which caused a show
event is placed into the <code>{@link #triggerElement}</code> property
before the ToolTip is shown.</p>
<p>This may be useful when a Component has regular, repeating elements
in it, each of which need a Tooltip which contains information specific
to that element. For example:</p><pre><code>
var myGrid = new Ext.grid.gridPanel(gridConfig);
myGrid.on('render', function (grid) {
    var store = grid.getStore();  // Capture the Store.
    var view = grid.getView();    // Capture the GridView.
    myGrid.tip = new Ext.ToolTip({
        target: view.mainBody,    // The overall target element.
        delegate: '.x-grid3-row', // Each grid row causes its own seperate show and hide.
        trackMouse: true,         // Moving within the row should not hide the tip.
        renderTo: document.body,  // Render immediately so that tip.body can be
                                  //  referenced prior to the first show.
        listeners: {              // Change content dynamically depending on which element
                                  //  triggered the show.
            beforeshow: function updateTipBody(tip) {
                var rowIndex = view.findRowIndex(tip.triggerElement);
                tip.body.dom.innerHTML = 'Over Record ID ' + store.getAt(rowIndex).id;
            }
        }
    });
});
</code></pre>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="dismissDelay" Type="Number">
              <Summary><![CDATA[automatically hides (defaults to 5000). To disable automatic hiding, set
dismissDelay = 0.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="hideDelay" Type="Number">
              <Summary><![CDATA[target element but before the tooltip actually hides (defaults to 200).
Set to 0 for the tooltip to hide immediately.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="mouseOffset" Type="Array">
              <Summary><![CDATA[tooltip should be shown (defaults to [15,18]).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="showDelay" Type="Number">
              <Summary><![CDATA[after the mouse enters the target element (defaults to 500)]]></Summary>
            </ConfigOption>
            <ConfigOption Name="target" Type="Mixed">
              <Summary><![CDATA[for mouseover events to trigger showing this ToolTip.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="trackMouse" Type="Boolean">
              <Summary><![CDATA[moves over the target element (defaults to false).]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="triggerElement">
              <Summary><![CDATA[When a Tooltip is configured with the <code>{@link #delegate}</code>
option to cause selected child elements of the <code>{@link #target}</code>
Element to each trigger a seperate show event, this property is set to
the DOM element which triggered the show.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="hide">
              <Summary><![CDATA[Hides this tooltip if visible.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="initTarget">
              <Summary><![CDATA[Binds this ToolTip to the specified element. The tooltip will be displayed when the mouse moves over the element.]]></Summary>
              <Parameters>
                <Param Name="t" Type="Mixed">
                  <Summary><![CDATA[The Element, HtmlElement, or ID of an element to bind to]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Shows this tooltip at the current event target XY position.]]></Summary>
              <Parameters />
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Updater" FullName="Ext.Updater" Package="Ext" DefinedIn="util\UpdateManager.js" Extends="Ext.util.Observable">
          <Summary><![CDATA[Provides AJAX-style update capabilities for Element objects.  Updater can be used to {@link #update}
an {@link Ext.Element} once, or you can use {@link #startAutoRefresh} to set up an auto-updating
{@link Ext.Element Element} on a specific interval.<br><br>
Usage:<br>
<pre><code>
var el = Ext.get("foo"); // Get Ext.Element object
var mgr = el.getUpdater();
mgr.update({
        url: "http://myserver.com/index.php",
        params: {
            param1: "foo",
            param2: "bar"
        }
});
...
mgr.formUpdate("myFormId", "http://myserver.com/index.php");
<br>
// or directly (returns the same Updater instance)
var mgr = new Ext.Updater("myElementId");
mgr.startAutoRefresh(60, "http://myserver.com/index.php");
mgr.on("update", myFcnNeedsToKnow);
<br>
// short handed call directly from the element object
Ext.get("foo").load({
        url: "bar.php",
        scripts: true,
        params: "param1=foo&amp;param2=bar",
        text: "Loading Foo..."
});
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create new Updater directly.]]></Summary>
            <Parameters>
              <Param Name="el" Type="Mixed">
                <Summary><![CDATA[The element to update]]></Summary>
              </Param>
              <Param Name="forceNew" Type="Boolean" Optional="true">
                <Summary><![CDATA[By default the constructor checks to see if the passed element already has an Updater and if it does it returns the same instance. This will skip that check (useful for extending this class).]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties>
            <Property Name="defaultUrl">
              <Summary><![CDATA[Cached url to use for refreshes. Overwritten every time update() is called unless "discardUrl" param is set to true.]]></Summary>
            </Property>
            <Property Name="disableCaching">
              <Summary><![CDATA[Whether to append unique parameter on get request to disable caching (defaults to {@link Ext.Updater.defaults#disableCaching}).]]></Summary>
            </Property>
            <Property Name="el">
              <Summary><![CDATA[The Element object]]></Summary>
            </Property>
            <Property Name="indicatorText">
              <Summary><![CDATA[Text for loading indicator (defaults to {@link Ext.Updater.defaults#indicatorText}).]]></Summary>
            </Property>
            <Property Name="loadScripts">
              <Summary><![CDATA[True to process scripts in the output (defaults to {@link Ext.Updater.defaults#loadScripts}).]]></Summary>
            </Property>
            <Property Name="refreshDelegate">
              <Summary><![CDATA[Delegate for refresh() prebound to "this", use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments]]></Summary>
            </Property>
            <Property Name="renderer">
              <Summary><![CDATA[The renderer for this Updater (defaults to {@link Ext.Updater.BasicRenderer}).]]></Summary>
            </Property>
            <Property Name="showLoadIndicator">
              <Summary><![CDATA[Whether to show indicatorText when loading (defaults to {@link Ext.Updater.defaults#showLoadIndicator}).]]></Summary>
            </Property>
            <Property Name="sslBlankUrl">
              <Summary><![CDATA[Blank page URL to use with SSL file uploads (defaults to {@link Ext.Updater.defaults#sslBlankUrl}).]]></Summary>
            </Property>
            <Property Name="timeout">
              <Summary><![CDATA[Timeout for requests or form posts in seconds (defaults to {@link Ext.Updater.defaults#timeout}).]]></Summary>
            </Property>
            <Property Name="transaction">
              <Summary><![CDATA[Transaction object of the current executing transaction, or null if there is no active transaction.]]></Summary>
            </Property>
            <Property Name="updateDelegate">
              <Summary><![CDATA[Delegate for update() prebound to "this", use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="abort">
              <Summary><![CDATA[Aborts the currently executing transaction, if any.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="formUpdate">
              <Summary><![CDATA[<p>Performs an async form post, updating this element with the response. If the form has the attribute
enctype="<a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form-data</a>", it assumes it's a file upload.
Uses this.sslBlankUrl for SSL file uploads to prevent IE security warning.</p>
<p>File uploads are not performed using normal "Ajax" techniques, that is they are <b>not</b>
performed using XMLHttpRequests. Instead the form is submitted in the standard manner with the
DOM <tt>&lt;form></tt> element temporarily modified to have its
<a href="http://www.w3.org/TR/REC-html40/present/frames.html#adef-target">target</a> set to refer
to a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document
but removed after the return data has been gathered.</p>
<p>Be aware that file upload packets, sent with the content type <a href="http://www.faqs.org/rfcs/rfc2388.html">multipart/form-data</a>
and some server technologies (notably JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the packet content.</p>]]></Summary>
              <Parameters>
                <Param Name="form" Type="String/HTMLElement">
                  <Summary><![CDATA[The form Id or form element]]></Summary>
                </Param>
                <Param Name="url" Type="String" Optional="true">
                  <Summary><![CDATA[The url to pass the form to. If omitted the action attribute on the form will be used.]]></Summary>
                </Param>
                <Param Name="reset" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Whether to try to reset the form after the update]]></Summary>
                </Param>
                <Param Name="callback" Type="Function" Optional="true">
                  <Summary><![CDATA[Callback when transaction is complete. The following
parameters are passed:<ul>
<li><b>el</b> : Ext.Element<p class="sub-desc">The Element being updated.</p></li>
<li><b>success</b> : Boolean<p class="sub-desc">True for success, false for failure.</p></li>
<li><b>response</b> : XMLHttpRequest<p class="sub-desc">The XMLHttpRequest which processed the update.</p></li></ul>]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="formUpdateDelegate">
              <Summary><![CDATA[Delegate for formUpdate() prebound to "this", use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments
@type Function]]></Summary>
              <Parameters />
            </Method>
            <Method Name="getDefaultRenderer">
              <Summary><![CDATA[This is an overrideable method which returns a reference to a default
renderer class if none is specified when creating the Ext.Updater.
Defaults to {@link Ext.Updater.BasicRenderer}]]></Summary>
              <Parameters />
            </Method>
            <Method Name="getEl">
              <Summary><![CDATA[Get the Element this Updater is bound to]]></Summary>
              <Parameters />
              <Return Type="Ext.Element">
                <Summary><![CDATA[The element]]></Summary>
              </Return>
            </Method>
            <Method Name="getRenderer">
              <Summary><![CDATA[Returns the current content renderer for this Updater. See {@link Ext.Updater.BasicRenderer#render} for more details.]]></Summary>
              <Parameters />
              <Return Type="Object" />
            </Method>
            <Method Name="isAutoRefreshing">
              <Summary><![CDATA[Returns true if the Updater is currently set to auto refresh its content (see {@link #startAutoRefresh}), otherwise false.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="isUpdating">
              <Summary><![CDATA[Returns true if an update is in progress, otherwise false.]]></Summary>
              <Parameters />
              <Return Type="Boolean" />
            </Method>
            <Method Name="refresh">
              <Summary><![CDATA[Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately]]></Summary>
              <Parameters>
                <Param Name="callback" Type="Function" Optional="true">
                  <Summary><![CDATA[Callback when transaction is complete - called with signature (oElement, bSuccess)]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setDefaultUrl">
              <Summary><![CDATA[Sets the default URL used for updates.]]></Summary>
              <Parameters>
                <Param Name="defaultUrl" Type="String/Function">
                  <Summary><![CDATA[The url or a function to call to get the url]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setRenderer">
              <Summary><![CDATA[Sets the content renderer for this Updater. See {@link Ext.Updater.BasicRenderer#render} for more details.]]></Summary>
              <Parameters>
                <Param Name="renderer" Type="Object">
                  <Summary><![CDATA[The object implementing the render() method]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="showLoading">
              <Summary><![CDATA[Display the element's "loading" state. By default, the element is updated with {@link #indicatorText}. This
method may be overridden to perform a custom action while this Updater is actively updating its contents.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="startAutoRefresh">
              <Summary><![CDATA[Set this element to auto refresh.  Can be canceled by calling {@link #stopAutoRefresh}.]]></Summary>
              <Parameters>
                <Param Name="interval" Type="Number">
                  <Summary><![CDATA[How often to update (in seconds).]]></Summary>
                </Param>
                <Param Name="url" Type="String/Object/Function" Optional="true">
                  <Summary><![CDATA[The url for this request, a config object in the same format
supported by {@link #load}, or a function to call to get the url (defaults to the last used url).  Note that while
the url used in a load call can be reused by this method, other load config options will not be reused and must be
sepcified as part of a config object passed as this paramter if needed.]]></Summary>
                </Param>
                <Param Name="params" Type="String/Object" Optional="true">
                  <Summary><![CDATA[The parameters to pass as either a url encoded string
"&param1=1&param2=2" or as an object {param1: 1, param2: 2}]]></Summary>
                </Param>
                <Param Name="callback" Type="Function" Optional="true">
                  <Summary><![CDATA[Callback when transaction is complete - called with signature (oElement, bSuccess)]]></Summary>
                </Param>
                <Param Name="refreshNow" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Whether to execute the refresh now, or wait the interval]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="stopAutoRefresh">
              <Summary><![CDATA[Stop auto refresh on this element.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="update">
              <Summary><![CDATA[Performs an <b>asynchronous</b> request, updating this element with the response.
If params are specified it uses POST, otherwise it uses GET.<br><br>
<b>Note:</b> Due to the asynchronous nature of remote server requests, the Element
will not have been fully updated when the function returns. To post-process the returned
data, use the callback option, or an <b><tt>update</tt></b> event handler.]]></Summary>
              <Parameters>
                <Param Name="options" Type="Object">
                  <Summary><![CDATA[A config object containing any of the following options:<ul>
<li>url : <b>String/Function</b><p class="sub-desc">The URL to request or a function which
<i>returns</i> the URL (defaults to the value of {@link Ext.Ajax#url} if not specified).</p></li>
<li>method : <b>String</b><p class="sub-desc">The HTTP method to
use. Defaults to POST if the <tt>params</tt> argument is present, otherwise GET.</p></li>
<li>params : <b>String/Object/Function</b><p class="sub-desc">The
parameters to pass to the server (defaults to none). These may be specified as a url-encoded
string, or as an object containing properties which represent parameters,
or as a function, which returns such an object.</p></li>
<li>scripts : <b>Boolean</b><p class="sub-desc">If <tt>true</tt>
any &lt;script&gt; tags embedded in the response text will be extracted
and executed (defaults to {@link Ext.Updater.defaults#loadScripts}). If this option is specified,
the callback will be called <i>after</i> the execution of the scripts.</p></li>
<li>callback : <b>Function</b><p class="sub-desc">A function to
be called when the response from the server arrives. The following
parameters are passed:<ul>
<li><b>el</b> : Ext.Element<p class="sub-desc">The Element being updated.</p></li>
<li><b>success</b> : Boolean<p class="sub-desc">True for success, false for failure.</p></li>
<li><b>response</b> : XMLHttpRequest<p class="sub-desc">The XMLHttpRequest which processed the update.</p></li>
<li><b>options</b> : Object<p class="sub-desc">The config object passed to the update call.</p></li></ul>
</p></li>
<li>scope : <b>Object</b><p class="sub-desc">The scope in which
to execute the callback (The callback's <tt>this</tt> reference.) If the
<tt>params</tt> argument is a function, this scope is used for that function also.</p></li>
<li>discardUrl : <b>Boolean</b><p class="sub-desc">By default, the URL of this request becomes
the default URL for this Updater object, and will be subsequently used in {@link #refresh}
calls.  To bypass this behavior, pass <tt>discardUrl:true</tt> (defaults to false).</p></li>
<li>timeout : <b>Number</b><p class="sub-desc">The number of seconds to wait for a response before
timing out (defaults to {@link Ext.Updater.defaults#timeout}).</p></li>
<li>text : <b>String</b><p class="sub-desc">The text to use as the innerHTML of the
{@link Ext.Updater.defaults#indicatorText} div (defaults to 'Loading...').  To replace the entire div, not
just the text, override {@link Ext.Updater.defaults#indicatorText} directly.</p></li>
<li>nocache : <b>Boolean</b><p class="sub-desc">Only needed for GET
requests, this option causes an extra, auto-generated parameter to be appended to the request
to defeat caching (defaults to {@link Ext.Updater.defaults#disableCaching}).</p></li></ul>
<p>
For example:
<pre><code>
um.update({
url: "your-url.php",
params: {param1: "foo", param2: "bar"}, // or a URL encoded string
callback: yourFunction,
scope: yourObject, //(optional scope)
discardUrl: true,
nocache: true,
text: "Loading...",
timeout: 60,
scripts: false // Save time by avoiding RegExp execution.
});
</code></pre>]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events>
            <Event Name="beforeupdate">
              <Summary><![CDATA[Fired before an update is made, return false from your handler and the update is cancelled.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Element" />
                <Param Name="url" Type="String/Object/Function" />
                <Param Name="params" Type="String/Object" />
              </Parameters>
            </Event>
            <Event Name="failure">
              <Summary><![CDATA[Fired on update failure.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Element" />
                <Param Name="oResponseObject" Type="Object">
                  <Summary><![CDATA[The response Object]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="update">
              <Summary><![CDATA[Fired after successful update is made.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Element" />
                <Param Name="oResponseObject" Type="Object">
                  <Summary><![CDATA[The response Object]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="Updater.BasicRenderer" FullName="Ext.Updater.BasicRenderer" Package="Ext" DefinedIn="util\UpdateManager.js">
          <Summary><![CDATA[Default Content renderer. Updates the elements innerHTML with the responseText.]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="render">
              <Summary><![CDATA[This is called when the transaction is completed and it's time to update the element - The BasicRenderer
updates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),
create an object with a "render(el, response)" method and pass it to setRenderer on the Updater.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Element">
                  <Summary><![CDATA[The element being rendered]]></Summary>
                </Param>
                <Param Name="response" Type="Object">
                  <Summary><![CDATA[The XMLHttpRequest object]]></Summary>
                </Param>
                <Param Name="updateManager" Type="Updater">
                  <Summary><![CDATA[The calling update manager]]></Summary>
                </Param>
                <Param Name="callback" Type="Function">
                  <Summary><![CDATA[A callback that will need to be called if loadScripts is true on the Updater]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Updater.defaults" FullName="Ext.Updater.defaults" Package="Ext" DefinedIn="util\UpdateManager.js">
          <Summary><![CDATA[The defaults collection enables customizing the default properties of Updater]]></Summary>
          <ConfigOptions />
          <Properties>
            <Property Name="indicatorText : '&lt;div class">
              <Summary><![CDATA[Text for loading indicator (defaults to '&lt;div class="loading-indicator"&gt;Loading...&lt;/div&gt;').]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="updateElement">
              <Summary><![CDATA[Static convenience method. <b>This method is deprecated in favor of el.load({url:'foo.php', ...})</b>.
Usage:
<pre><code>Ext.Updater.updateElement("my-div", "stuff.php");</code></pre>]]></Summary>
              <Parameters>
                <Param Name="el" Type="Mixed">
                  <Summary><![CDATA[The element to update]]></Summary>
                </Param>
                <Param Name="url" Type="String">
                  <Summary><![CDATA[The url]]></Summary>
                </Param>
                <Param Name="params" Type="String/Object" Optional="true">
                  <Summary><![CDATA[Url encoded param string or an object of name/value pairs]]></Summary>
                </Param>
                <Param Name="options" Type="Object" Optional="true">
                  <Summary><![CDATA[A config object with any of the Updater properties you want to set - for
example: {disableCaching:true, indicatorText: "Loading data..."}
@static
@deprecated
@member Ext.Updater]]></Summary>
                </Param>
              </Parameters>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="Viewport" FullName="Ext.Viewport" Package="Ext" DefinedIn="widgets\Viewport.js" Xtype="viewport" Extends="Ext.Container">
          <Summary><![CDATA[<p>A specialized container representing the viewable application area (the browser viewport).</p>
<p>The Viewport renders itself to the document body, and automatically sizes itself to the size of
the browser viewport and manages window resizing. There may only be one Viewport created
in a page. Inner layouts are available by virtue of the fact that all {@link Ext.Panel Panel}s
added to the Viewport, either through its {@link #items}, or through the items, or the {@link #add}
method of any of its child Panels may themselves have a layout.</p>
<p>The Viewport does not provide scrolling, so child Panels within the Viewport should provide
for scrolling if needed using the {@link #autoScroll} config.</p>
<p>An example showing a classic application border layout:</p><pre><code>
new Ext.Viewport({
    layout: 'border',
    items: [{
        region: 'north',
        html: '&lt;h1 class="x-panel-header">Page Title&lt;/h1>',
        autoHeight: true,
        border: false,
        margins: '0 0 5 0'
    }, {
        region: 'west',
        collapsible: true,
        title: 'Navigation',
        width: 200
        // the west region might typically utilize a {@link Ext.tree.TreePanel TreePanel} or a Panel with {@link Ext.layout.AccordionLayout Accordion layout} 
    }, {
        region: 'south',
        title: 'Title for Panel',
        collapsible: true,
        html: 'Information goes here',
        split: true,
        height: 100,
        minHeight: 100
    }, {
        region: 'east',
        title: 'Title for the Grid Panel',
        collapsible: true,
        split: true,
        width: 200,
        xtype: 'grid',
        // remaining grid configuration not shown ...
        // notice that the GridPanel is added directly as the region
        // it is not "overnested" inside another Panel
    }, {
        region: 'center',
        xtype: 'tabpanel', // TabPanel itself has no title
        items: {
            title: 'Default Tab',
            html: 'The first tab\'s content. Others may be added dynamically'
        }
    }]
});
</code></pre>]]></Summary>
          <Constructor>
            <Summary><![CDATA[Create a new Viewport.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="allowDomMove" Type="Boolean" />
            <ConfigOption Name="applyTo" Type="Mixed" />
            <ConfigOption Name="autoHeight" Type="Boolean" />
            <ConfigOption Name="autoWidth" Type="Boolean" />
            <ConfigOption Name="deferHeight" Type="Boolean" />
            <ConfigOption Name="height" Type="Number" />
            <ConfigOption Name="hideParent" Type="Boolean" />
            <ConfigOption Name="monitorResize" Type="Boolean" />
            <ConfigOption Name="renderTo" Type="Mixed" />
            <ConfigOption Name="width" Type="Number" />
          </ConfigOptions>
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="Window" FullName="Ext.Window" Package="Ext" DefinedIn="widgets\Window.js" Xtype="window" Extends="Ext.Panel">
          <Summary><![CDATA[<p>A specialized panel intended for use as an application window.  Windows are floated, {@link #resizable}, and
{@link #draggable} by default.  Windows can be {@link #maximizable maximized} to fill the viewport,
restored to their prior size, and can be {@link #minimize}d.</p>
<p>Windows can also be linked to a {@link Ext.WindowGroup} or managed by the {@link Ext.WindowMgr} to provide
grouping, activation, to front, to back and other application-specific behavior.</p>
<p>By default, Windows will be rendered to document.body. To {@link #constrain} a Window to another element
specify {@link Ext.Component#renderTo renderTo}.</p>
<p><b>Note:</b> By default, the <code>{@link #closable close}</code> header tool <i>destroys</i> the Window resulting in
destruction of any child Components. This makes the Window object, and all its descendants <b>unusable</b>. To enable
re-use of a Window, use <b><code>{@link #closeAction closeAction: 'hide'}</code></b>.</p>]]></Summary>
          <Constructor>
            <Parameters>
              <Param Name="config" Type="Object">
                <Summary><![CDATA[The config object]]></Summary>
              </Param>
            </Parameters>
          </Constructor>
          <ConfigOptions>
            <ConfigOption Name="animateTarget" Type="String/Element">
              <Summary><![CDATA[Id or element from which the window should animate while opening (defaults to null with no animation).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="autoWidth" Type="Boolean" />
            <ConfigOption Name="baseCls" Type="String">
              <Summary><![CDATA[The base CSS class to apply to this panel's element (defaults to 'x-window').]]></Summary>
            </ConfigOption>
            <ConfigOption Name="closable" Type="Boolean">
              <Summary><![CDATA[<p>True to display the 'close' tool button and allow the user to close the window, false to
hide the button and disallow closing the window (defaults to true).</p>
<p>By default, when close is requested by either clicking the close button in the header
or pressing ESC when the Window has focus, the {@link #close} method will be called. This
will <i>{@link Ext.Component#destroy destroy}</i> the Window and its content meaning that
it may not be reused.</p>
<p>To make closing a Window <i>hide</i> the Window so that it may be reused, set
{@link #closeAction} to 'hide'.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="closeAction" Type="String">
              <Summary><![CDATA[<p>The action to take when the close header tool is clicked:
<div class="mdetail-params"><ul>
<li><b><code>'{@link #close}'</code></b> : <b>Default</b><div class="sub-desc">
{@link #close remove} the window from the DOM and {@link Ext.Component#destroy destroy}
it and all descendant Components. The window will <b>not</b> be available to be
redisplayed via the {@link #show} method.
</div></li>
<li><b><code>'{@link #hide}'</code></b> : <div class="sub-desc">
{@link #hide} the window by setting visibility to hidden and applying negative offsets.
The window will be available to be redisplayed via the {@link #show} method.
</div></li>
</ul></div>
<p><b>Note:</b> This setting does not affect the {@link #close} method
which will always {@link Ext.Component#destroy destroy} the window. To
programatically <i>hide</i> a window, call {@link #hide}.</p>]]></Summary>
            </ConfigOption>
            <ConfigOption Name="collapsed" Type="Boolean">
              <Summary><![CDATA[True to render the window collapsed, false to render it expanded (defaults to false). Note that if
{@link #expandOnShow} is true (the default) it will override the <tt>collapsed</tt> config and the window
will always be expanded when shown.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="constrain" Type="Boolean">
              <Summary><![CDATA[True to constrain the window within its containing element, false to allow it to fall outside of its
containing element. By default the window will be rendered to document.body.  To render and constrain the
window within another element specify {@link #renderTo}.
(defaults to false).  Optionally the header only can be constrained using {@link #constrainHeader}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="constrainHeader" Type="Boolean">
              <Summary><![CDATA[True to constrain the window header within its containing element (allowing the window body to fall outside
of its containing element) or false to allow the header to fall outside its containing element (defaults to
false). Optionally the entire window can be constrained using {@link #constrain}.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="defaultButton" Type="String/Number/Button">
              <Summary><![CDATA[The id / index of a button or a button instance to focus when this window received the focus.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="draggable" Type="Boolean">
              <Summary><![CDATA[True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true).  Note
that by default the window will be centered in the viewport, so if dragging is disabled the window may need
to be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="expandOnShow" Type="Boolean">
              <Summary><![CDATA[True to always expand the window when it is displayed, false to keep it in its current state (which may be
{@link #collapsed}) when displayed (defaults to true).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="initHidden" Type="Boolean">
              <Summary><![CDATA[True to hide the window until show() is explicitly called (defaults to true).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="manager" Type="Ext.WindowGroup">
              <Summary><![CDATA[A reference to the WindowGroup that should manage this window (defaults to {@link Ext.WindowMgr}).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="maximizable" Type="Boolean">
              <Summary><![CDATA[True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button
and disallow maximizing the window (defaults to false).  Note that when a window is maximized, the tool button
will automatically change to a 'restore' button with the appropriate behavior already built-in that will
restore the window to its previous size.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="maximized" Type="Boolean">
              <Summary><![CDATA[True to initially display the window in a maximized state. (Defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="minHeight" Type="Number">
              <Summary><![CDATA[The minimum height in pixels allowed for this window (defaults to 100).  Only applies when resizable = true.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="minimizable" Type="Boolean">
              <Summary><![CDATA[True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button
and disallow minimizing the window (defaults to false).  Note that this button provides no implementation --
the behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a
custom minimize behavior implemented for this option to be useful.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="minWidth" Type="Number">
              <Summary><![CDATA[The minimum width in pixels allowed for this window (defaults to 200).  Only applies when resizable = true.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="modal" Type="Boolean">
              <Summary><![CDATA[True to make the window modal and mask everything behind it when displayed, false to display it without
restricting access to other UI elements (defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="monitorResize" Type="Boolean">
              <Summary><![CDATA[This is automatically managed based on the value of constrain and constrainToHeader]]></Summary>
            </ConfigOption>
            <ConfigOption Name="onEsc" Type="Function">
              <Summary><![CDATA[Allows override of the built-in processing for the escape key. Default action
is to close the Window (performing whatever action is specified in {@link #closeAction}.
To prevent the Window closing when the escape key is pressed, specify this as
Ext.emptyFn (See {@link Ext#emptyFn}).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="plain" Type="Boolean">
              <Summary><![CDATA[True to render the window body with a transparent background so that it will blend into the framing
elements, false to add a lighter background color to visually highlight the body element and separate it
more distinctly from the surrounding frame (defaults to false).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="resizable" Type="Boolean">
              <Summary><![CDATA[True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="resizeHandles" Type="String">
              <Summary><![CDATA[A valid {@link Ext.Resizable} handles config string (defaults to 'all').  Only applies when resizable = true.]]></Summary>
            </ConfigOption>
            <ConfigOption Name="x" Type="Number">
              <Summary><![CDATA[The X position of the left edge of the window on initial showing. Defaults to centering the Window within
the width of the Window's container {@link Ext.Element Element) (The Element that the Window is rendered to).]]></Summary>
            </ConfigOption>
            <ConfigOption Name="y" Type="Number">
              <Summary><![CDATA[The Y position of the top edge of the window on initial showing. Defaults to centering the Window within
the height of the Window's container {@link Ext.Element Element) (The Element that the Window is rendered to).]]></Summary>
            </ConfigOption>
          </ConfigOptions>
          <Properties>
            <Property Name="dd">
              <Summary><![CDATA[If this Window is configured {@link #draggable}, this property will contain
an instance of {@link Ext.dd.DD} which handles dragging the Window's DOM Element.]]></Summary>
            </Property>
          </Properties>
          <Methods>
            <Method Name="alignTo">
              <Summary><![CDATA[Aligns the window to the specified element]]></Summary>
              <Parameters>
                <Param Name="element" Type="Mixed">
                  <Summary><![CDATA[The element to align to.]]></Summary>
                </Param>
                <Param Name="position" Type="String">
                  <Summary><![CDATA[The position to align to (see {@link Ext.Element#alignTo} for more details).]]></Summary>
                </Param>
                <Param Name="offsets" Type="Array" Optional="true">
                  <Summary><![CDATA[Offset the positioning by [x, y]]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="anchorTo">
              <Summary><![CDATA[Anchors this window to another element and realigns it when the window is resized or scrolled.]]></Summary>
              <Parameters>
                <Param Name="element" Type="Mixed">
                  <Summary><![CDATA[The element to align to.]]></Summary>
                </Param>
                <Param Name="position" Type="String">
                  <Summary><![CDATA[The position to align to (see {@link Ext.Element#alignTo} for more details)]]></Summary>
                </Param>
                <Param Name="offsets" Type="Array" Optional="true">
                  <Summary><![CDATA[Offset the positioning by [x, y]]]></Summary>
                </Param>
                <Param Name="monitorScroll" Type="Boolean/Number" Optional="true">
                  <Summary><![CDATA[true to monitor body scroll and reposition. If this parameter
is a number, it is used as the buffer delay (defaults to 50ms).]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="center">
              <Summary><![CDATA[Centers this window in the viewport]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="close">
              <Summary><![CDATA[<p>Closes the Window, removes it from the DOM, {@link Ext.Component#destroy destroy}s
the Window object and all its descendant Components. The {@link Ext.Panel#beforeclose beforeclose}
event is fired before the close happens and will cancel the close action if it returns false.<p>
<p><b>Note:</b> This method is not affected by the {@link #closeAction} setting which
only affects the action triggered when clicking the {@link #closable 'close' tool in the header}.
To hide the Window without destroying it, call {@link #hide}.</p>]]></Summary>
              <Parameters />
            </Method>
            <Method Name="focus">
              <Summary><![CDATA[Focuses the window.  If a defaultButton is set, it will receive focus, otherwise the
window itself will receive focus.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="hide">
              <Summary><![CDATA[Hides the window, setting it to invisible and applying negative offsets.]]></Summary>
              <Parameters>
                <Param Name="animateTarget" Type="String/Element" Optional="true">
                  <Summary><![CDATA[The target element or id to which the window should
animate while hiding (defaults to null with no animation)]]></Summary>
                </Param>
                <Param Name="callback" Type="Function" Optional="true">
                  <Summary><![CDATA[A callback function to call after the window is hidden]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope in which to execute the callback]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="maximize">
              <Summary><![CDATA[Fits the window within its current container and automatically replaces
the {@link #maximizable 'maximize' tool button} with the 'restore' tool button.
Also see {@link #toggleMaximize}.]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="minimize">
              <Summary><![CDATA[Placeholder method for minimizing the window.  By default, this method simply fires the {@link #minimize} event
since the behavior of minimizing a window is application-specific.  To implement custom minimize behavior,
either the minimize event can be handled or this method can be overridden.]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="restore">
              <Summary><![CDATA[Restores a {@link #maximizable maximized}  window back to its original
size and position prior to being maximized and also replaces
the 'restore' tool button with the 'maximize' tool button.
Also see {@link #toggleMaximize}.]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="setActive">
              <Summary><![CDATA[Makes this the active window by showing its shadow, or deactivates it by hiding its shadow.  This method also
fires the {@link #activate} or {@link #deactivate} event depending on which action occurred. This method is
called internally by {@link Ext.WindowMgr}.]]></Summary>
              <Parameters>
                <Param Name="active" Type="Boolean">
                  <Summary><![CDATA[True to activate the window, false to deactivate it (defaults to false)]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="setAnimateTarget">
              <Summary><![CDATA[Sets the target element from which the window should animate while opening.]]></Summary>
              <Parameters>
                <Param Name="el" Type="String/Element">
                  <Summary><![CDATA[The target element or id]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="show">
              <Summary><![CDATA[Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.]]></Summary>
              <Parameters>
                <Param Name="animateTarget" Type="String/Element" Optional="true">
                  <Summary><![CDATA[The target element or id from which the window should
animate while opening (defaults to null with no animation)]]></Summary>
                </Param>
                <Param Name="callback" Type="Function" Optional="true">
                  <Summary><![CDATA[A callback function to call after the window is displayed]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope in which to execute the callback]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="toBack">
              <Summary><![CDATA[Sends this window to the back of (lower z-index than) any other visible windows]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="toFront">
              <Summary><![CDATA[Brings this window to the front of any other visible windows]]></Summary>
              <Parameters>
                <Param Name="e" Type="Boolean" Optional="true">
                  <Summary><![CDATA[Specify <tt>false</tt> to prevent the window from being focused.]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
            <Method Name="toggleMaximize">
              <Summary><![CDATA[A shortcut method for toggling between {@link #maximize} and {@link #restore} based on the current maximized
state of the window.]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[this]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events>
            <Event Name="activate">
              <Summary><![CDATA[Fires after the window has been visually activated via {@link #setActive}.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Window">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="deactivate">
              <Summary><![CDATA[Fires after the window has been visually deactivated via {@link #setActive}.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Window">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="maximize">
              <Summary><![CDATA[Fires after the window has been maximized.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Window">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="minimize">
              <Summary><![CDATA[Fires after the window has been minimized.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Window">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="resize">
              <Summary><![CDATA[Fires after the window has been resized.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Window">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
                <Param Name="width" Type="Number">
                  <Summary><![CDATA[The window's new width]]></Summary>
                </Param>
                <Param Name="height" Type="Number">
                  <Summary><![CDATA[The window's new height]]></Summary>
                </Param>
              </Parameters>
            </Event>
            <Event Name="restore">
              <Summary><![CDATA[Fires after the window has been restored to its original size after being maximized.]]></Summary>
              <Parameters>
                <Param Name="el" Type="Ext.Window">
                  <Summary><![CDATA[this]]></Summary>
                </Param>
              </Parameters>
            </Event>
          </Events>
        </Class>
        <Class Name="WindowGroup" FullName="Ext.WindowGroup" Package="Ext" DefinedIn="widgets\WindowManager.js" Subclasses="Ext.WindowMgr">
          <Summary><![CDATA[An object that represents a group of {@link Ext.Window} instances and provides z-order management
and window activation behavior.]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="bringToFront">
              <Summary><![CDATA[Brings the specified window to the front of any other active windows.]]></Summary>
              <Parameters>
                <Param Name="win" Type="String/Object">
                  <Summary><![CDATA[The id of the window or a {@link Ext.Window} instance
if it was already in front]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Boolean">
                <Summary><![CDATA[True if the dialog was brought to the front, else false]]></Summary>
              </Return>
            </Method>
            <Method Name="each">
              <Summary><![CDATA[Executes the specified function once for every window in the group, passing each
window as the only parameter. Returning false from the function will stop the iteration.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The function to execute for each item]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope in which to execute the function]]></Summary>
                </Param>
              </Parameters>
            </Method>
            <Method Name="get">
              <Summary><![CDATA[Gets a registered window by id.]]></Summary>
              <Parameters>
                <Param Name="id" Type="String/Object">
                  <Summary><![CDATA[The id of the window or a {@link Ext.Window} instance]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Window" />
            </Method>
            <Method Name="getActive">
              <Summary><![CDATA[Gets the currently-active window in the group.]]></Summary>
              <Parameters />
              <Return Type="Ext.Window">
                <Summary><![CDATA[The active window]]></Summary>
              </Return>
            </Method>
            <Method Name="getBy">
              <Summary><![CDATA[Returns zero or more windows in the group using the custom search function passed to this method.
The function should accept a single {@link Ext.Window} reference as its only argument and should
return true if the window matches the search criteria, otherwise it should return false.]]></Summary>
              <Parameters>
                <Param Name="fn" Type="Function">
                  <Summary><![CDATA[The search function]]></Summary>
                </Param>
                <Param Name="scope" Type="Object" Optional="true">
                  <Summary><![CDATA[The scope in which to execute the function (defaults to the window
that gets passed to the function if not specified)]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Array">
                <Summary><![CDATA[An array of zero or more matching windows]]></Summary>
              </Return>
            </Method>
            <Method Name="hideAll">
              <Summary><![CDATA[Hides all windows in the group.]]></Summary>
              <Parameters />
            </Method>
            <Method Name="sendToBack">
              <Summary><![CDATA[Sends the specified window to the back of other active windows.]]></Summary>
              <Parameters>
                <Param Name="win" Type="String/Object">
                  <Summary><![CDATA[The id of the window or a {@link Ext.Window} instance]]></Summary>
                </Param>
              </Parameters>
              <Return Type="Ext.Window">
                <Summary><![CDATA[The window]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
        <Class Name="WindowMgr" FullName="Ext.WindowMgr" Package="Ext" DefinedIn="widgets\WindowManager.js" Extends="Ext.WindowGroup" Singleton="true">
          <Summary><![CDATA[The default global window group that is available automatically.  To have more than one group of windows
with separate z-order stacks, create additional instances of {@link Ext.WindowGroup} as needed.]]></Summary>
          <ConfigOptions />
          <Properties />
          <Methods />
          <Events />
        </Class>
        <Class Name="XTemplate" FullName="Ext.XTemplate" Package="Ext" DefinedIn="util\XTemplate.js" Extends="Ext.Template">
          <Summary><![CDATA[<p>A template class that supports advanced functionality like:<div class="mdetail-params"><ul>
<li>Autofilling arrays using templates and sub-templates</li>
<li>Conditional processing with basic comparison operators</li>
<li>Basic math function support</li>
<li>Execute arbitrary inline code with special built-in template variables</li>
<li>Custom member functions</li>
<li>Many special tags and built-in operators that aren't defined as part of
the API, but are supported in the templates that can be created</li>
</ul></div></p>
<p>XTemplate provides the templating mechanism built into:<div class="mdetail-params"><ul>
<li>{@link Ext.DataView}</li>
<li>{@link Ext.ListView}</li>
<li>{@link Ext.form.ComboBox}</li>
<li>{@link Ext.grid.TemplateColumn}</li>
<li>{@link Ext.grid.GroupingView}</li>
<li>{@link Ext.menu.Item}</li>
<li>{@link Ext.layout.MenuLayout}</li>
<li>{@link Ext.ColorPalette}</li>
</ul></div></p>

<p>For example usage {@link #XTemplate see the constructor}.</p>]]></Summary>
          <Constructor>
            <Summary><![CDATA[The {@link Ext.Template#Template Ext.Template constructor} describes
the acceptable parameters to pass to the constructor. The following
examples demonstrate all of the supported features.</p>

<div class="mdetail-params"><ul>

<li><b><u>Sample Data</u></b>
<div class="sub-desc">
<p>This is the data object used for reference in each code example:</p>
<pre><code>
var data = {
  name: 'Jack Slocum',
  title: 'Lead Developer',
  company: 'Ext JS, LLC',
  email: 'jack@extjs.com',
  address: '4 Red Bulls Drive',
  city: 'Cleveland',
  state: 'Ohio',
  zip: '44102',
  drinks: ['Red Bull', 'Coffee', 'Water'],
  kids: [{
    name: 'Sara Grace',
    age:3
  },{
    name: 'Zachary',
    age:2
  },{
    name: 'John James',
    age:0
  }]
};
</code></pre>
</div>
</li>


<li><b><u>Auto filling of arrays</u></b>
<div class="sub-desc">
<p>The <b><tt>tpl</tt></b> tag and the <b><tt>for</tt></b> operator are used
to process the provided data object:
<ul>
<li>If the value specified in <tt>for</tt> is an array, it will auto-fill,
repeating the template block inside the <tt>tpl</tt> tag for each item in the
array.</li>
<li>If <tt>for="."</tt> is specified, the data object provided is examined.</li>
<li>While processing an array, the special variable <tt>{#}</tt>
will provide the current array index + 1 (starts at 1, not 0).</li>
</ul>
</p>
<pre><code>
&lt;tpl <b>for</b>=".">...&lt;/tpl>    // loop through array at root node
&lt;tpl <b>for</b>="foo">...&lt;/tpl>   // loop through array at foo node
&lt;tpl <b>for</b>="foo.bar">...&lt;/tpl> // loop through array at foo.bar node
</code></pre>
Using the sample data above:
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>Kids: ',
  '&lt;tpl <b>for</b>=".">',    // process the data.kids node
    '&lt;p>{#}. {name}&lt;/p>', // use current array index to autonumber
  '&lt;/tpl>&lt;/p>'
);
tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object
</code></pre>
<p>An example illustrating how the <b><tt>for</tt></b> property can be leveraged
to access specified members of the provided data object to populate the template:</p>
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>Name: {name}&lt;/p>',
  '&lt;p>Title: {title}&lt;/p>',
  '&lt;p>Company: {company}&lt;/p>',
  '&lt;p>Kids: ',
  '&lt;tpl <b>for="kids"</b>>',   // interrogate the kids property within the data
    '&lt;p>{name}&lt;/p>',
  '&lt;/tpl>&lt;/p>'
);
tpl.overwrite(panel.body, data); // pass the root node of the data object
</code></pre>
<p>Flat arrays that contain values (and not objects) can be auto-rendered
using the special <b><tt>{.}</tt></b> variable inside a loop. This variable
will represent the value of the array at the current index:</p>
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>{name}\&#39;s favorite beverages:&lt;/p>',
  '&lt;tpl for="drinks">',
    '&lt;div> - {.}&lt;/div>',
  '&lt;/tpl>'
);
tpl.overwrite(panel.body, data);
</code></pre>
<p>When processing a sub-template, for example while looping through a child array,
you can access the parent object's members via the <b><tt>parent</tt></b> object:</p>
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>Name: {name}&lt;/p>',
  '&lt;p>Kids: ',
  '&lt;tpl for="kids">',
    '&lt;tpl if="age > 1">',
      '&lt;p>{name}&lt;/p>',
      '&lt;p>Dad: {<b>parent</b>.name}&lt;/p>',
    '&lt;/tpl>',
  '&lt;/tpl>&lt;/p>'
);
tpl.overwrite(panel.body, data);
</code></pre>
</div>
</li>


<li><b><u>Conditional processing with basic comparison operators</u></b>
<div class="sub-desc">
<p>The <b><tt>tpl</tt></b> tag and the <b><tt>if</tt></b> operator are used
to provide conditional checks for deciding whether or not to render specific
parts of the template. Notes:<div class="sub-desc"><ul>
<li>Double quotes must be encoded if used within the conditional</li>
<li>There is no <tt>else</tt> operator &mdash; if needed, two opposite
<tt>if</tt> statements should be used.</li>
</ul></div>
<pre><code>
&lt;tpl if="age &gt; 1 &amp;&amp; age &lt; 10">Child&lt;/tpl>
&lt;tpl if="age >= 10 && age < 18">Teenager&lt;/tpl>
&lt;tpl <b>if</b>="this.isGirl(name)">...&lt;/tpl>
&lt;tpl <b>if</b>="id==\'download\'">...&lt;/tpl>
&lt;tpl <b>if</b>="needsIcon">&lt;img src="{icon}" class="{iconCls}"/>&lt;/tpl>
// no good:
&lt;tpl if="name == "Jack"">Hello&lt;/tpl>
// encode &#34; if it is part of the condition, e.g.
&lt;tpl if="name == &#38;quot;Jack&#38;quot;">Hello&lt;/tpl>
</code></pre>
Using the sample data above:
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>Name: {name}&lt;/p>',
  '&lt;p>Kids: ',
  '&lt;tpl for="kids">',
    '&lt;tpl if="age > 1">',
      '&lt;p>{name}&lt;/p>',
    '&lt;/tpl>',
  '&lt;/tpl>&lt;/p>'
);
tpl.overwrite(panel.body, data);
</code></pre>
</div>
</li>


<li><b><u>Basic math support</u></b>
<div class="sub-desc">
<p>The following basic math operators may be applied directly on numeric
data values:</p><pre>
+ - * /
</pre>
For example:
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>Name: {name}&lt;/p>',
  '&lt;p>Kids: ',
  '&lt;tpl for="kids">',
    '&lt;tpl if="age &amp;gt; 1">', // <-- Note that the &gt; is encoded
      '&lt;p>{#}: {name}&lt;/p>', // <-- Auto-number each item
      '&lt;p>In 5 Years: {age+5}&lt;/p>', // <-- Basic math
      '&lt;p>Dad: {parent.name}&lt;/p>',
    '&lt;/tpl>',
  '&lt;/tpl>&lt;/p>'
);
tpl.overwrite(panel.body, data);
</code></pre>
</div>
</li>


<li><b><u>Execute arbitrary inline code with special built-in template variables</u></b>
<div class="sub-desc">
<p>Anything between <code>{[ ... ]}</code> is considered code to be executed
in the scope of the template. There are some special variables available in that code:
<ul>
<li><b><tt>values</tt></b>: The values in the current scope. If you are using
scope changing sub-templates, you can change what <tt>values</tt> is.</li>
<li><b><tt>parent</tt></b>: The scope (values) of the ancestor template.</li>
<li><b><tt>xindex</tt></b>: If you are in a looping template, the index of the
loop you are in (1-based).</li>
<li><b><tt>xcount</tt></b>: If you are in a looping template, the total length
of the array you are looping.</li>
<li><b><tt>fm</tt></b>: An alias for <tt>Ext.util.Format</tt>.</li>
</ul>
This example demonstrates basic row striping using an inline code block and the
<tt>xindex</tt> variable:</p>
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>Name: {name}&lt;/p>',
  '&lt;p>Company: {[values.company.toUpperCase() + ", " + values.title]}&lt;/p>',
  '&lt;p>Kids: ',
  '&lt;tpl for="kids">',
    '&lt;div class="{[xindex % 2 === 0 ? "even" : "odd"]}">',
    '{name}',
    '&lt;/div>',
  '&lt;/tpl>&lt;/p>'
);
tpl.overwrite(panel.body, data);
</code></pre>
</div>
</li>

<li><b><u>Template member functions</u></b>
<div class="sub-desc">
<p>One or more member functions can be specified in a configuration
object passed into the XTemplate constructor for more complex processing:</p>
<pre><code>
var tpl = new Ext.XTemplate(
  '&lt;p>Name: {name}&lt;/p>',
  '&lt;p>Kids: ',
  '&lt;tpl for="kids">',
    '&lt;tpl if="this.isGirl(name)">',
      '&lt;p>Girl: {name} - {age}&lt;/p>',
    '&lt;/tpl>',
    // use opposite if statement to simulate 'else' processing:
    '&lt;tpl if="this.isGirl(name) == false">',
      '&lt;p>Boy: {name} - {age}&lt;/p>',
    '&lt;/tpl>',
    '&lt;tpl if="this.isBaby(age)">',
      '&lt;p>{name} is a baby!&lt;/p>',
    '&lt;/tpl>',
  '&lt;/tpl>&lt;/p>',
 {
    // XTemplate configuration:
    compiled: true,
    disableFormats: true,
    // member functions:
    isGirl: function (name) {
      return name == 'Sara Grace';
    },
    isBaby: function (age) {
      return age < 1;
    }
  }
);
tpl.overwrite(panel.body, data);
</code></pre>
</div>
</li>

</ul></div>.]]></Summary>
            <Parameters>
              <Param Name="config" Type="Mixed" />
            </Parameters>
          </Constructor>
          <ConfigOptions />
          <Properties />
          <Methods>
            <Method Name="applyTemplate">
              <Summary><![CDATA[Returns an HTML fragment of this template with the specified values applied.]]></Summary>
              <Parameters>
                <Param Name="values" Type="Object">
                  <Summary><![CDATA[The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})]]></Summary>
                </Param>
              </Parameters>
              <Return Type="String">
                <Summary><![CDATA[The HTML fragment]]></Summary>
              </Return>
            </Method>
            <Method Name="compile">
              <Summary><![CDATA[Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.]]></Summary>
              <Parameters />
              <Return Type="Function">
                <Summary><![CDATA[The compiled function]]></Summary>
              </Return>
            </Method>
          </Methods>
          <Events />
        </Class>
      </Classes>
    </Package>
  </Packages>
  <Classes>
    <Class Name="Array" FullName="Array" DefinedIn="core\core\Ext.js">
      <ConfigOptions />
      <Properties />
      <Methods>
        <Method Name="indexOf">
          <Summary><![CDATA[Checks whether or not the specified object exists in the array.]]></Summary>
          <Parameters>
            <Param Name="o" Type="Object">
              <Summary><![CDATA[The object to check for]]></Summary>
            </Param>
            <Param Name="from" Type="Number" Optional="true">
              <Summary><![CDATA[The index at which to begin the search]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The index of o in the array (or -1 if it is not found)]]></Summary>
          </Return>
        </Method>
        <Method Name="remove">
          <Summary><![CDATA[Removes the specified object from the array.  If the object is not found nothing happens.]]></Summary>
          <Parameters>
            <Param Name="o" Type="Object">
              <Summary><![CDATA[The object to remove]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[this array]]></Summary>
          </Return>
        </Method>
      </Methods>
      <Events />
    </Class>
    <Class Name="Date" FullName="Date" DefinedIn="util\Date.js">
      <Summary><![CDATA[
The date parsing and formatting syntax contains a subset of
<a href="http://www.php.net/date">PHP's date() function</a>, and the formats that are
supported will provide results equivalent to their PHP versions.

The following is a list of all currently supported formats:
<pre>
Format  Description                                                               Example returned values
------  -----------------------------------------------------------------------   -----------------------
  d     Day of the month, 2 digits with leading zeros                             01 to 31
  D     A short textual representation of the day of the week                     Mon to Sun
  j     Day of the month without leading zeros                                    1 to 31
  l     A full textual representation of the day of the week                      Sunday to Saturday
  N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)
  S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j
  w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)
  z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)
  W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53
  F     A full textual representation of a month, such as January or March        January to December
  m     Numeric representation of a month, with leading zeros                     01 to 12
  M     A short textual representation of a month                                 Jan to Dec
  n     Numeric representation of a month, without leading zeros                  1 to 12
  t     Number of days in the given month                                         28 to 31
  L     Whether it's a leap year                                                  1 if it is a leap year, 0 otherwise.
  o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004
        belongs to the previous or next year, that year is used instead)
  Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003
  y     A two digit representation of a year                                      Examples: 99 or 03
  a     Lowercase Ante meridiem and Post meridiem                                 am or pm
  A     Uppercase Ante meridiem and Post meridiem                                 AM or PM
  g     12-hour format of an hour without leading zeros                           1 to 12
  G     24-hour format of an hour without leading zeros                           0 to 23
  h     12-hour format of an hour with leading zeros                              01 to 12
  H     24-hour format of an hour with leading zeros                              00 to 23
  i     Minutes, with leading zeros                                               00 to 59
  s     Seconds, with leading zeros                                               00 to 59
  u     Decimal fraction of a second                                              Examples:
        (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or
                                                                                  100 (i.e. 0.100s) or
                                                                                  999 (i.e. 0.999s) or
                                                                                  999876543210 (i.e. 0.999876543210s)
  O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030
  P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00
  T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...
  Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400
  c     ISO 8601 date
        Notes:                                                                    Examples:
        1) If unspecified, the month / day defaults to the current month / day,   1991 or
           the time defaults to midnight, while the timezone defaults to the      1992-10 or
           browser's timezone. If a time is specified, it must include both hours 1993-09-20 or
           and minutes. The "T" delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or
           are optional.                                                          1995-07-18T17:21:28-02:00 or
        2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or
           least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or
           of digits allowed), and may be delimited by either a '.' or a ','      1998-04-15T20:24:31.2468Z or
        Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or
        date-time granularity which are supported, or see                         2000-02-13T21:25:33
        http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34
  U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
  M$    Microsoft AJAX serialized dates                                           \/Date(1238606590509)\/ (i.e. UTC milliseconds since epoch) or
                                                                                  \/Date(1238606590509+0800)\/
</pre>

Example usage (note that you must escape format specifiers with '\\' to render them as character literals):
<pre><code>
// Sample date:
// 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'

var dt = new Date('1/10/2007 03:05:01 PM GMT-0600');
document.write(dt.format('Y-m-d'));                           // 2007-01-10
document.write(dt.format('F j, Y, g:i a'));                   // January 10, 2007, 3:05 pm
document.write(dt.format('l, \\t\\he jS \\of F Y h:i:s A'));  // Wednesday, the 10th of January 2007 03:05:01 PM
</code></pre>

Here are some standard date/time patterns that you might find helpful.  They
are not part of the source of Date.js, but to use them you can simply copy this
block of code into any script that is included after Date.js and they will also become
globally available on the Date object.  Feel free to add or remove patterns as needed in your code.
<pre><code>
Date.patterns = {
    ISO8601Long:"Y-m-d H:i:s",
    ISO8601Short:"Y-m-d",
    ShortDate: "n/j/Y",
    LongDate: "l, F d, Y",
    FullDateTime: "l, F d, Y g:i:s A",
    MonthDay: "F d",
    ShortTime: "g:i A",
    LongTime: "g:i:s A",
    SortableDateTime: "Y-m-d\\TH:i:s",
    UniversalSortableDateTime: "Y-m-d H:i:sO",
    YearMonth: "F, Y"
};
</code></pre>

Example usage:
<pre><code>
var dt = new Date();
document.write(dt.format(Date.patterns.ShortDate));
</code></pre>
<p>Developer-written, custom formats may be used by supplying both a formatting and a parsing function
which perform to specialized requirements. The functions are stored in {@link #parseFunctions} and {@link #formatFunctions}.</p>]]></Summary>
      <ConfigOptions />
      <Properties>
        <Property Name="defaults" Static="true">
          <Summary><![CDATA[<p>An object hash containing default date values used during date parsing.</p>
<p>The following properties are available:<div class="mdetail-params"><ul>
<li><code>y</code> : Number<div class="sub-desc">The default year value. (defaults to undefined)</div></li>
<li><code>m</code> : Number<div class="sub-desc">The default 1-based month value. (defaults to undefined)</div></li>
<li><code>d</code> : Number<div class="sub-desc">The default day value. (defaults to undefined)</div></li>
<li><code>h</code> : Number<div class="sub-desc">The default hour value. (defaults to undefined)</div></li>
<li><code>i</code> : Number<div class="sub-desc">The default minute value. (defaults to undefined)</div></li>
<li><code>s</code> : Number<div class="sub-desc">The default second value. (defaults to undefined)</div></li>
<li><code>ms</code> : Number<div class="sub-desc">The default millisecond value. (defaults to undefined)</div></li>
</ul></div></p>
<p>Override these properties to customize the default date values used by the {@link #parseDate} method.</p>
<p><b>Note: In countries which experience Daylight Saving Time (i.e. DST), the <tt>h</tt>, <tt>i</tt>, <tt>s</tt>
and <tt>ms</tt> properties may coincide with the exact time in which DST takes effect.
It is the responsiblity of the developer to account for this.</b></p>
Example Usage:
<pre><code>
// set default day value to the first day of the month
Date.defaults.d = 1;

// parse a February date string containing only year and month values.
// setting the default day value to 1 prevents weird date rollover issues
// when attempting to parse the following date string on, for example, March 31st 2009.
Date.parseDate('2009-02', 'Y-m'); // returns a Date object representing February 1st 2009
</code></pre>]]></Summary>
        </Property>
        <Property Name="formatFunctions" Static="true">
          <Summary><![CDATA[<p>An object hash in which each property is a date formatting function. The property name is the
format string which corresponds to the produced formatted date string.</p>
<p>This object is automatically populated with date formatting functions as
date formats are requested for Ext standard formatting strings.</p>
<p>Custom formatting functions may be inserted into this object, keyed by a name which from then on
may be used as a format string to {@link #format}. Example:</p><pre><code>
Date.formatFunctions['x-date-format'] = myDateFormatter;
</code></pre>
<p>A formatting function should return a string repesentation of the passed Date object:<div class="mdetail-params"><ul>
<li><code>date</code> : Date<div class="sub-desc">The Date to format.</div></li>
</ul></div></p>
<p>To enable date strings to also be <i>parsed</i> according to that format, a corresponding
parsing function must be placed into the {@link #parseFunctions} property.]]></Summary>
        </Property>
        <Property Name="parseFunctions" Static="true">
          <Summary><![CDATA[<p>An object hash in which each property is a date parsing function. The property name is the
format string which that function parses.</p>
<p>This object is automatically populated with date parsing functions as
date formats are requested for Ext standard formatting strings.</p>
<p>Custom parsing functions may be inserted into this object, keyed by a name which from then on
may be used as a format string to {@link #parseDate}.<p>
<p>Example:</p><pre><code>
Date.parseFunctions['x-date-format'] = myDateParser;
</code></pre>
<p>A parsing function should return a Date object, and is passed the following parameters:<div class="mdetail-params"><ul>
<li><code>date</code> : String<div class="sub-desc">The date string to parse.</div></li>
<li><code>strict</code> : Boolean<div class="sub-desc">True to validate date strings while parsing
(i.e. prevent javascript Date "rollover") (The default must be false).
Invalid date strings should return null when parsed.</div></li>
</ul></div></p>
<p>To enable Dates to also be <i>formatted</i> according to that format, a corresponding
formatting function must be placed into the {@link #formatFunctions} property.]]></Summary>
        </Property>
        <Property Name="useStrict" Static="true">
          <Summary><![CDATA[Global flag which determines if strict date parsing should be used.
Strict date parsing will not roll-over invalid dates, which is the
default behaviour of javascript Date objects.
(see {@link #parseDate} for more information)
Defaults to <tt>false</tt>.]]></Summary>
        </Property>
      </Properties>
      <Methods>
        <Method Name="add">
          <Summary><![CDATA[Provides a convenient method for performing basic date arithmetic. This method
does not modify the Date instance being called - it creates and returns
a new Date instance containing the resulting date value.

Examples:
<pre><code>
// Basic usage:
var dt = new Date('10/29/2006').add(Date.DAY, 5);
document.write(dt); //returns 'Fri Nov 03 2006 00:00:00'

// Negative values will be subtracted:
var dt2 = new Date('10/1/2006').add(Date.DAY, -5);
document.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'

// You can even chain several calls together in one line:
var dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);
document.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="interval" Type="String">
              <Summary><![CDATA[A valid date interval enum value.]]></Summary>
            </Param>
            <Param Name="value" Type="Number">
              <Summary><![CDATA[The amount to add to the current date.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Date">
            <Summary><![CDATA[The new Date instance.]]></Summary>
          </Return>
        </Method>
        <Method Name="between">
          <Summary><![CDATA[Checks if this date falls on or between the given start and end dates.]]></Summary>
          <Parameters>
            <Param Name="start" Type="Date">
              <Summary><![CDATA[Start date]]></Summary>
            </Param>
            <Param Name="end" Type="Date">
              <Summary><![CDATA[End date]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean">
            <Summary><![CDATA[true if this date falls on or between the given start and end dates.]]></Summary>
          </Return>
        </Method>
        <Method Name="clearTime">
          <Summary><![CDATA[Attempts to clear all time information from this Date by setting the time to midnight of the same day,
automatically adjusting for Daylight Saving Time (DST) where applicable.
(note: DST timezone information for the browser's host operating system is assumed to be up-to-date)]]></Summary>
          <Parameters>
            <Param Name="clone" Type="Boolean">
              <Summary><![CDATA[true to create a clone of this date, clear the time and return it (defaults to false).]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Date">
            <Summary><![CDATA[this or the clone.]]></Summary>
          </Return>
        </Method>
        <Method Name="clone">
          <Summary><![CDATA[Creates and returns a new Date instance with the exact same date value as the called instance.
Dates are copied and passed by reference, so if a copied date variable is modified later, the original
variable will also be changed.  When the intention is to create a new variable that will not
modify the original instance, you should create a clone.

Example of correctly cloning a date:
<pre><code>
//wrong way:
var orig = new Date('10/1/2006');
var copy = orig;
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 05 2006'!

//correct way:
var orig = new Date('10/1/2006');
var copy = orig.clone();
copy.setDate(5);
document.write(orig);  //returns 'Thu Oct 01 2006'
</code></pre>]]></Summary>
          <Parameters />
          <Return Type="Date">
            <Summary><![CDATA[The new Date instance.]]></Summary>
          </Return>
        </Method>
        <Method Name="format">
          <Summary><![CDATA[Formats a date given the supplied format string.]]></Summary>
          <Parameters>
            <Param Name="format" Type="String">
              <Summary><![CDATA[The format string.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The formatted date.]]></Summary>
          </Return>
        </Method>
        <Method Name="getDayOfYear">
          <Summary><![CDATA[Get the numeric day number of the year, adjusted for leap year.]]></Summary>
          <Parameters />
          <Return Type="Number">
            <Summary><![CDATA[0 to 364 (365 in leap years).]]></Summary>
          </Return>
        </Method>
        <Method Name="getDaysInMonth">
          <Summary><![CDATA[Get the number of days in the current month, adjusted for leap year.]]></Summary>
          <Parameters />
          <Return Type="Number">
            <Summary><![CDATA[The number of days in the month.]]></Summary>
          </Return>
        </Method>
        <Method Name="getFirstDateOfMonth">
          <Summary><![CDATA[Get the date of the first day of the month in which this date resides.]]></Summary>
          <Parameters />
          <Return Type="Date" />
        </Method>
        <Method Name="getFirstDayOfMonth">
          <Summary><![CDATA[Get the first day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the {@link #monthNames} array to retrieve the textual day name.
Example:
<pre><code>
var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'
</code></pre>]]></Summary>
          <Parameters />
          <Return Type="Number">
            <Summary><![CDATA[The day number (0-6).]]></Summary>
          </Return>
        </Method>
        <Method Name="getGMTOffset">
          <Summary><![CDATA[Get the offset from GMT of the current date (equivalent to the format specifier 'O').]]></Summary>
          <Parameters>
            <Param Name="colon" Type="Boolean" Optional="true">
              <Summary><![CDATA[true to separate the hours and minutes with a colon (defaults to false).]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The 4-character offset string prefixed with + or - (e.g. '-0600').]]></Summary>
          </Return>
        </Method>
        <Method Name="getLastDateOfMonth">
          <Summary><![CDATA[Get the date of the last day of the month in which this date resides.]]></Summary>
          <Parameters />
          <Return Type="Date" />
        </Method>
        <Method Name="getLastDayOfMonth">
          <Summary><![CDATA[Get the last day of the current month, adjusted for leap year.  The returned value
is the numeric day index within the week (0-6) which can be used in conjunction with
the {@link #monthNames} array to retrieve the textual day name.
Example:
<pre><code>
var dt = new Date('1/10/2007');
document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'
</code></pre>]]></Summary>
          <Parameters />
          <Return Type="Number">
            <Summary><![CDATA[The day number (0-6).]]></Summary>
          </Return>
        </Method>
        <Method Name="getMonthNumber">
          <Summary><![CDATA[Get the zero-based javascript month number for the given short/full month name.
Override this function for international dates.]]></Summary>
          <Parameters>
            <Param Name="name" Type="String">
              <Summary><![CDATA[The short/full month name.
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The zero-based javascript month number.]]></Summary>
          </Return>
        </Method>
        <Method Name="getShortDayName">
          <Summary><![CDATA[Get the short day name for the given day number.
Override this function for international dates.]]></Summary>
          <Parameters>
            <Param Name="day" Type="Number">
              <Summary><![CDATA[A zero-based javascript day number.
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The short day name.]]></Summary>
          </Return>
        </Method>
        <Method Name="getShortMonthName">
          <Summary><![CDATA[Get the short month name for the given month number.
Override this function for international dates.]]></Summary>
          <Parameters>
            <Param Name="month" Type="Number">
              <Summary><![CDATA[A zero-based javascript month number.
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The short month name.]]></Summary>
          </Return>
        </Method>
        <Method Name="getSuffix">
          <Summary><![CDATA[Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').]]></Summary>
          <Parameters />
          <Return Type="String">
            <Summary><![CDATA['st, 'nd', 'rd' or 'th'.]]></Summary>
          </Return>
        </Method>
        <Method Name="getTimezone">
          <Summary><![CDATA[Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').

Note: The date string returned by the javascript Date object's toString() method varies
between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).
For a given date string e.g. "Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)",
getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses
(which may or may not be present), failing which it proceeds to get the timezone abbreviation
from the GMT offset portion of the date string.]]></Summary>
          <Parameters />
          <Return Type="String">
            <Summary><![CDATA[The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...).]]></Summary>
          </Return>
        </Method>
        <Method Name="getWeekOfYear">
          <Summary><![CDATA[Get the numeric ISO-8601 week number of the year.
(equivalent to the format specifier 'W', but without a leading zero).]]></Summary>
          <Parameters />
          <Return Type="Number">
            <Summary><![CDATA[1 to 53]]></Summary>
          </Return>
        </Method>
        <Method Name="isDST">
          <Summary><![CDATA[Checks if the current date is affected by Daylight Saving Time (DST).]]></Summary>
          <Parameters />
          <Return Type="Boolean">
            <Summary><![CDATA[True if the current date is affected by DST.]]></Summary>
          </Return>
        </Method>
        <Method Name="isLeapYear">
          <Summary><![CDATA[Checks if the current date falls within a leap year.]]></Summary>
          <Parameters />
          <Return Type="Boolean">
            <Summary><![CDATA[True if the current date falls within a leap year, false otherwise.]]></Summary>
          </Return>
        </Method>
        <Method Name="isValid">
          <Summary><![CDATA[Checks if the passed Date parameters will cause a javascript Date "rollover".]]></Summary>
          <Parameters>
            <Param Name="year" Type="Number">
              <Summary><![CDATA[4-digit year]]></Summary>
            </Param>
            <Param Name="month" Type="Number">
              <Summary><![CDATA[1-based month-of-year]]></Summary>
            </Param>
            <Param Name="day" Type="Number">
              <Summary><![CDATA[Day of month]]></Summary>
            </Param>
            <Param Name="hour" Type="Number" Optional="true">
              <Summary><![CDATA[Hour]]></Summary>
            </Param>
            <Param Name="minute" Type="Number" Optional="true">
              <Summary><![CDATA[Minute]]></Summary>
            </Param>
            <Param Name="second" Type="Number" Optional="true">
              <Summary><![CDATA[Second]]></Summary>
            </Param>
            <Param Name="millisecond" Type="Number" Optional="true">
              <Summary><![CDATA[Millisecond
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean">
            <Summary><![CDATA[true if the passed parameters do not cause a Date "rollover", false otherwise.]]></Summary>
          </Return>
        </Method>
        <Method Name="parseDate">
          <Summary><![CDATA[Parses the passed string using the specified date format.
Note that this function expects normal calendar dates, meaning that months are 1-based (i.e. 1 = January).
The {@link #defaults} hash will be used for any date value (i.e. year, month, day, hour, minute, second or millisecond)
which cannot be found in the passed string. If a corresponding default date value has not been specified in the {@link #defaults} hash,
the current date's year, month, day or DST-adjusted zero-hour time value will be used instead.
Keep in mind that the input date string must precisely match the specified format string
in order for the parse operation to be successful (failed parse operations return a null value).
<p>Example:</p><pre><code>
//dt = Fri May 25 2007 (current date)
var dt = new Date();

//dt = Thu May 25 2006 (today&#39;s month/day in 2006)
dt = Date.parseDate("2006", "Y");

//dt = Sun Jan 15 2006 (all date parts specified)
dt = Date.parseDate("2006-01-15", "Y-m-d");

//dt = Sun Jan 15 2006 15:20:01
dt = Date.parseDate("2006-01-15 3:20:01 PM", "Y-m-d g:i:s A");

// attempt to parse Sun Feb 29 2006 03:20:01 in strict mode
dt = Date.parseDate("2006-02-29 03:20:01", "Y-m-d H:i:s", true); // returns null
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="input" Type="String">
              <Summary><![CDATA[The raw date string.]]></Summary>
            </Param>
            <Param Name="format" Type="String">
              <Summary><![CDATA[The expected date string format.]]></Summary>
            </Param>
            <Param Name="strict" Type="Boolean" Optional="true">
              <Summary><![CDATA[True to validate date strings while parsing (i.e. prevents javascript Date "rollover")
(defaults to false). Invalid date strings will return null when parsed.
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Date">
            <Summary><![CDATA[The parsed Date.]]></Summary>
          </Return>
        </Method>
      </Methods>
      <Events />
    </Class>
    <Class Name="Ext" FullName="Ext" DefinedIn="core\core\Ext.js,core\Ext-more.js" Singleton="true">
      <Summary><![CDATA[Ext core utilities and functions.]]></Summary>
      <ConfigOptions />
      <Properties>
        <Property Name="enableFx">
          <Summary><![CDATA[True if the {@link Ext.Fx} Class is available]]></Summary>
        </Property>
        <Property Name="emptyFn">
          <Summary><![CDATA[A reusable empty function]]></Summary>
        </Property>
        <Property Name="ux">
          <Summary><![CDATA[Namespace alloted for extensions to the framework.]]></Summary>
        </Property>
      </Properties>
      <Methods>
        <Method Name="apply">
          <Summary><![CDATA[Copies all the properties of config to obj.]]></Summary>
          <Parameters>
            <Param Name="obj" Type="Object">
              <Summary><![CDATA[The receiver of the properties]]></Summary>
            </Param>
            <Param Name="config" Type="Object">
              <Summary><![CDATA[The source of the properties]]></Summary>
            </Param>
            <Param Name="defaults" Type="Object">
              <Summary><![CDATA[A different object that will also be applied for default values
@member Ext apply]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Object">
            <Summary><![CDATA[returns obj]]></Summary>
          </Return>
        </Method>
        <Method Name="applyIf">
          <Summary><![CDATA[Copies all the properties of config to obj if they don't already exist.]]></Summary>
          <Parameters>
            <Param Name="obj" Type="Object">
              <Summary><![CDATA[The receiver of the properties]]></Summary>
            </Param>
            <Param Name="config" Type="Object">
              <Summary><![CDATA[The source of the properties]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Object">
            <Summary><![CDATA[returns obj]]></Summary>
          </Return>
        </Method>
        <Method Name="each">
          <Summary><![CDATA[Iterates an array calling the supplied function.]]></Summary>
          <Parameters>
            <Param Name="array" Type="Array/NodeList/Mixed">
              <Summary><![CDATA[The array to be iterated. If this
argument is not really an array, the supplied function is called once.]]></Summary>
            </Param>
            <Param Name="fn" Type="Function">
              <Summary><![CDATA[The function to be called with each item. If the
supplied function returns false, iteration stops and this method returns
the current <code>index</code>. This function is called with
the following arguments:
<div class="mdetail-params"><ul>
<li><code>item</code> : <i>Mixed</i>
<div class="sub-desc">The item at the current <code>index</code>
in the passed <code>array</code></div></li>
<li><code>index</code> : <i>Number</i>
<div class="sub-desc">The current index within the array</div></li>
<li><code>allItems</code> : <i>Array</i>
<div class="sub-desc">The <code>array</code> passed as the first
argument to <code>Ext.each</code>.</div></li>
</ul></div>]]></Summary>
            </Param>
            <Param Name="scope" Type="Object">
              <Summary><![CDATA[The scope to call the specified function.
Defaults to the <code>item</code> at the current <code>index</code>
within the passed <code>array</code>.]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="extend">
          <Summary><![CDATA[<p>Extends one class to create a subclass and optionally overrides members with the passed literal. This method
also adds the function "override()" to the subclass that can be used to override members of the class.</p>
For example, to create a subclass of Ext GridPanel:
<pre><code>
MyGridPanel = Ext.extend(Ext.grid.GridPanel, {
    constructor: function (config) {

//      Create configuration for this Grid.
        var store = new Ext.data.Store({...});
        var colModel = new Ext.grid.ColumnModel({...});

//      Create a new config object containing our computed properties
//      *plus* whatever was in the config parameter.
        config = Ext.apply({
            store: store,
            colModel: colModel
        }, config);

        MyGridPanel.superclass.constructor.call(this, config);

//      Your postprocessing here
    },

    yourMethod: function () {
        // etc.
    }
});
</code></pre>

<p>This function also supports a 3-argument call in which the subclass's constructor is
passed as an argument. In this form, the parameters are as follows:</p>
<div class="mdetail-params"><ul>
<li><code>subclass</code> : Function <div class="sub-desc">The subclass constructor.</div></li>
<li><code>superclass</code> : Function <div class="sub-desc">The constructor of class being extended</div></li>
<li><code>overrides</code> : Object <div class="sub-desc">A literal with members which are copied into the subclass's
prototype, and are therefore shared among all instances of the new class.</div></li>
</ul></div>]]></Summary>
          <Parameters>
            <Param Name="subclass" Type="Function">
              <Summary><![CDATA[The constructor of class being extended.]]></Summary>
            </Param>
            <Param Name="overrides" Type="Object">
              <Summary><![CDATA[<p>A literal with members which are copied into the subclass's
prototype, and are therefore shared between all instances of the new class.</p>
<p>This may contain a special member named <tt><b>constructor</b></tt>. This is used
to define the constructor of the new class, and is returned. If this property is
<i>not</i> specified, a constructor is generated and returned which just calls the
superclass's constructor passing on its parameters.</p>
<p><b>It is essential that you call the superclass constructor in any provided constructor. See example code.</b></p>]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Function">
            <Summary><![CDATA[The subclass constructor.]]></Summary>
          </Return>
        </Method>
        <Method Name="getBody">
          <Summary><![CDATA[Returns the current document body as an {@link Ext.Element}.]]></Summary>
          <Parameters />
        </Method>
        <Method Name="getDom">
          <Summary><![CDATA[Return the dom node for the passed String (id), dom node, or Ext.Element.
Here are some examples:
<pre><code>
// gets dom node based on id
var elDom = Ext.getDom('elId');
// gets dom node based on the dom node
var elDom1 = Ext.getDom(elDom);

// If we don&#39;t know if we are working with an
// Ext.Element or a dom node use Ext.getDom
function (el) {
    var dom = Ext.getDom(el);
    // do something with the dom node
}
</code></pre>
<b>Note</b>: the dom node to be found actually needs to exist (be rendered, etc)
when this method is called to be successful.]]></Summary>
          <Parameters>
            <Param Name="el" Type="Mixed" />
          </Parameters>
        </Method>
        <Method Name="id">
          <Summary><![CDATA[Generates unique ids. If the element already has an id, it is unchanged]]></Summary>
          <Parameters>
            <Param Name="el" Type="Mixed" Optional="true">
              <Summary><![CDATA[The element to generate an id for]]></Summary>
            </Param>
            <Param Name="prefix" Type="String" Optional="true">
              <Summary><![CDATA[Id prefix (defaults "ext-gen")]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The generated Id.]]></Summary>
          </Return>
        </Method>
        <Method Name="isArray">
          <Summary><![CDATA[Returns true if the passed value is a JavaScript array, otherwise false.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isBoolean">
          <Summary><![CDATA[Returns true if the passed value is a boolean.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isDate">
          <Summary><![CDATA[Returns true if the passed object is a JavaScript date object, otherwise false.]]></Summary>
          <Parameters>
            <Param Name="object" Type="Object">
              <Summary><![CDATA[The object to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isDefined">
          <Summary><![CDATA[Returns true if the passed value is not undefined.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isEmpty">
          <Summary><![CDATA[<p>Returns true if the passed value is empty.</p>
<p>The value is deemed to be empty if it is<div class="mdetail-params"><ul>
<li>null</li>
<li>undefined</li>
<li>an empty array</li>
<li>a zero length string (Unless the <tt>allowBlank</tt> parameter is <tt>true</tt>)</li>
</ul></div>]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
            <Param Name="allowBlank" Type="Boolean" Optional="true">
              <Summary><![CDATA[true to allow empty strings (defaults to false)]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isFunction">
          <Summary><![CDATA[Returns true if the passed value is a JavaScript Function, otherwise false.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isNumber">
          <Summary><![CDATA[Returns true if the passed value is a number. Returns false for non-finite numbers.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isObject">
          <Summary><![CDATA[Returns true if the passed value is a JavaScript Object, otherwise false.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isPrimitive">
          <Summary><![CDATA[Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="isString">
          <Summary><![CDATA[Returns true if the passed value is a string.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Boolean" />
        </Method>
        <Method Name="iterate">
          <Summary><![CDATA[Iterates either the elements in an array, or each of the properties in an object.
<b>Note</b>: If you are only iterating arrays, it is better to call {@link #each}.]]></Summary>
          <Parameters>
            <Param Name="object" Type="Object/Array">
              <Summary><![CDATA[The object or array to be iterated]]></Summary>
            </Param>
            <Param Name="fn" Type="Function">
              <Summary><![CDATA[The function to be called for each iteration.
The iteration will stop if the supplied function returns false, or
all array elements / object properties have been covered. The signature
varies depending on the type of object being interated:
<div class="mdetail-params"><ul>
<li>Arrays : <tt>(Object item, Number index, Array allItems)</tt>
<div class="sub-desc">
When iterating an array, the supplied function is called with each item.</div></li>
<li>Objects : <tt>(String key, Object value)</tt>
<div class="sub-desc">
When iterating an object, the supplied function is called with each key-value pair in
the object.</div></li>
</ul></div>]]></Summary>
            </Param>
            <Param Name="scope" Type="Object">
              <Summary><![CDATA[The scope to call the supplied function with, defaults to
the specified <tt>object</tt>]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="namespace">
          <Summary><![CDATA[Creates namespaces to be used for scoping variables and classes so that they are not global.
Specifying the last node of a namespace implicitly creates all other nodes. Usage:
<pre><code>
Ext.namespace('Company', 'Company.data');
Ext.namespace('Company.data'); // equivalent and preferable to above syntax
Company.Widget = function () { ... }
Company.data.CustomStore = function (config) { ... }
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="namespace1" Type="String" />
            <Param Name="namespace2" Type="String" />
            <Param Name="etc" Type="String" />
          </Parameters>
          <Return Type="Object">
            <Summary><![CDATA[The namespace object. (If multiple arguments are passed, this will be the last namespace created)]]></Summary>
          </Return>
        </Method>
        <Method Name="ns">
          <Summary><![CDATA[Creates namespaces to be used for scoping variables and classes so that they are not global.
Specifying the last node of a namespace implicitly creates all other nodes. Usage:
<pre><code>
Ext.namespace('Company', 'Company.data');
Ext.namespace('Company.data'); // equivalent and preferable to above syntax
Company.Widget = function () { ... }
Company.data.CustomStore = function (config) { ... }
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="namespace1" Type="String" />
            <Param Name="namespace2" Type="String" />
            <Param Name="etc" Type="String" />
          </Parameters>
          <Return Type="Object">
            <Summary><![CDATA[The namespace object. (If multiple arguments are passed, this will be the last namespace created)]]></Summary>
          </Return>
        </Method>
        <Method Name="override">
          <Summary><![CDATA[Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.
Usage:<pre><code>
Ext.override(MyClass, {
    newMethod1: function () {
        // etc.
    },
    newMethod2: function (foo) {
        // etc.
    }
});
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="origclass" Type="Object">
              <Summary><![CDATA[The class to override]]></Summary>
            </Param>
            <Param Name="overrides" Type="Object">
              <Summary><![CDATA[The list of functions to add to origClass.  This should be specified as an object literal
containing one or more methods.]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="removeNode">
          <Summary><![CDATA[Removes a DOM node from the document.  The body node will be ignored if passed in.]]></Summary>
          <Parameters>
            <Param Name="node" Type="HTMLElement">
              <Summary><![CDATA[The node to remove]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="toArray">
          <Summary><![CDATA[Converts any iterable (numeric indices and a length property) into a true array
Don't use this on strings. IE doesn't support "abc"[0] which this implementation depends on.
For strings, use this instead: "abc".match(/./g) => [a,b,c];]]></Summary>
          <Parameters>
            <Param Name="the" Type="Iterable">
              <Summary><![CDATA[iterable object to be turned into a true Array.]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="urlAppend">
          <Summary><![CDATA[Appends content to the query string of a URL, which handles logic for whether to place
a question mark or ampersand.]]></Summary>
          <Parameters>
            <Param Name="url" Type="String">
              <Summary><![CDATA[The url to append to.
@@param {String} s The content to append to the url.]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="urlDecode">
          <Summary><![CDATA[Takes an encoded URL and and converts it to an object. Example: <pre><code>
Ext.urlDecode("foo=1&bar=2"); // returns {foo: "1", bar: "2"}
Ext.urlDecode("foo=1&bar=2&bar=3&bar=4", false); // returns {foo: "1", bar: ["2", "3", "4"]}
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="string" Type="String" />
            <Param Name="overwrite" Type="Boolean" Optional="true">
              <Summary><![CDATA[Items of the same name will overwrite previous values instead of creating an an array (Defaults to false).]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Object">
            <Summary><![CDATA[A literal with members]]></Summary>
          </Return>
        </Method>
        <Method Name="urlEncode">
          <Summary><![CDATA[Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return "foo=1&bar=2".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.]]></Summary>
          <Parameters>
            <Param Name="o" Type="Object" />
            <Param Name="pre" Type="String" Optional="true">
              <Summary><![CDATA[A prefix to add to the url encoded string]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String" />
        </Method>
        <Method Name="addBehaviors">
          <Summary><![CDATA[Applies event listeners to elements by selectors when the document is ready.
The event name is specified with an <tt>&#64;</tt> suffix.
<pre><code>
Ext.addBehaviors({
    // add a listener for click on all anchors in element with id foo
    '#foo a&#64;click' : function (e, t) {
        // do something
    },
    
    // add the same listener to multiple selectors (separated by comma BEFORE the &#64;)
    '#foo a, #bar span.some-class&#64;mouseover' : function () {
        // do something
    }
});
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="obj" Type="Object">
              <Summary><![CDATA[The list of behaviors to apply]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="clean">
          <Summary><![CDATA[Creates a copy of the passed Array with falsy values removed.]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array/NodeList">
              <Summary><![CDATA[The Array from which to remove falsy values.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[The new, compressed Array.]]></Summary>
          </Return>
        </Method>
        <Method Name="copyTo">
          <Summary><![CDATA[Copies a set of named properties fom the source object to the destination object.
<p>example:<pre><code>
ImageComponent = Ext.extend(Ext.BoxComponent, {
    initComponent: function () {
        this.autoEl = { tag: 'img' };
        MyComponent.superclass.initComponent.apply(this, arguments);
        this.initialBox = Ext.copyTo({}, this.initialConfig, 'x,y,width,height');
    }
});
</code></pre>]]></Summary>
          <Parameters />
          <Return Type="Object">
            <Summary><![CDATA[The modified object.]]></Summary>
          </Return>
        </Method>
        <Method Name="destroy">
          <Summary><![CDATA[Attempts to destroy any objects passed to it by removing all event listeners, removing them from the
DOM (if applicable) and calling their destroy functions (if available).  This method is primarily
intended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of
{@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be
passed into this function in a single call as separate arguments.]]></Summary>
          <Parameters>
            <Param Name="arg1" Type="Mixed">
              <Summary><![CDATA[An {@link Ext.Element}, {@link Ext.Component}, or an Array of either of these to destroy]]></Summary>
            </Param>
            <Param Name="arg2" Type="Mixed" Optional="true" />
            <Param Name="etc..." Type="Mixed" Optional="true" />
          </Parameters>
        </Method>
        <Method Name="destroyMembers">
          <Summary><![CDATA[Attempts to destroy and then remove a set of named properties of the passed object.]]></Summary>
          <Parameters>
            <Param Name="o" Type="Object">
              <Summary><![CDATA[The object (most likely a Component) who's properties you wish to destroy.]]></Summary>
            </Param>
            <Param Name="arg1" Type="Mixed">
              <Summary><![CDATA[The name of the property to destroy and remove from the object.]]></Summary>
            </Param>
            <Param Name="etc..." Type="Mixed">
              <Summary><![CDATA[More property names to destroy and remove.]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="escapeRe">
          <Summary><![CDATA[Escapes the passed string for use in a regular expression]]></Summary>
          <Parameters>
            <Param Name="str" Type="String" />
          </Parameters>
          <Return Type="String" />
        </Method>
        <Method Name="flatten">
          <Summary><![CDATA[Recursively flattens into 1-d Array. Injects Arrays inline.]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array">
              <Summary><![CDATA[The array to flatten]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[The new, flattened array.]]></Summary>
          </Return>
        </Method>
        <Method Name="getCmp">
          <Summary><![CDATA[This is shorthand reference to {@link Ext.ComponentMgr#get}.
Looks up an existing {@link Ext.Component Component} by {@link Ext.Component#id id}]]></Summary>
          <Parameters>
            <Param Name="id" Type="String">
              <Summary><![CDATA[The component {@link Ext.Component#id id}
Class was found.]]></Summary>
            </Param>
          </Parameters>
        </Method>
        <Method Name="getDoc">
          <Summary><![CDATA[Returns the current HTML document object as an {@link Ext.Element}.]]></Summary>
          <Parameters />
        </Method>
        <Method Name="getScrollBarWidth">
          <Summary><![CDATA[Utility method for getting the width of the browser scrollbar. This can differ depending on
operating system settings, such as the theme or font size.]]></Summary>
          <Parameters>
            <Param Name="force" Type="Boolean" Optional="true">
              <Summary><![CDATA[true to force a recalculation of the value.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The width of the scrollbar.]]></Summary>
          </Return>
        </Method>
        <Method Name="invoke">
          <Summary><![CDATA[Invokes a method on each item in an Array.
<pre><code>
// Example:
Ext.invoke(Ext.query("p"), "getAttribute", "id");
// [el1.getAttribute("id"), el2.getAttribute("id"), ..., elN.getAttribute("id")]
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array|NodeList">
              <Summary><![CDATA[The Array of items to invoke the method on.]]></Summary>
            </Param>
            <Param Name="methodName" Type="String">
              <Summary><![CDATA[The method name to invoke.]]></Summary>
            </Param>
            <Param Name="..." Type="Anything">
              <Summary><![CDATA[Arguments to send into the method invocation.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[The results of invoking the method on each item in the array.]]></Summary>
          </Return>
        </Method>
        <Method Name="max">
          <Summary><![CDATA[Returns the maximum value in the Array]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array|NodeList">
              <Summary><![CDATA[The Array from which to select the maximum value.]]></Summary>
            </Param>
            <Param Name="comp" Type="Function" Optional="true">
              <Summary><![CDATA[a function to perform the comparision which determines maximization.
If omitted the ">" operator will be used. Note: gt = 1; eq = 0; lt = -1]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Object">
            <Summary><![CDATA[The maximum value in the Array.]]></Summary>
          </Return>
        </Method>
        <Method Name="mean">
          <Summary><![CDATA[Calculates the mean of the Array]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array">
              <Summary><![CDATA[The Array to calculate the mean value of.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The mean.]]></Summary>
          </Return>
        </Method>
        <Method Name="min">
          <Summary><![CDATA[Returns the minimum value in the Array.]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array|NodeList">
              <Summary><![CDATA[The Array from which to select the minimum value.]]></Summary>
            </Param>
            <Param Name="comp" Type="Function" Optional="true">
              <Summary><![CDATA[a function to perform the comparision which determines minimization.
If omitted the "<" operator will be used. Note: gt = 1; eq = 0; lt = -1]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Object">
            <Summary><![CDATA[The minimum value in the Array.]]></Summary>
          </Return>
        </Method>
        <Method Name="num">
          <Summary><![CDATA[Utility method for validating that a value is numeric, returning the specified default value if it is not.]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[Should be a number, but any type will be handled appropriately]]></Summary>
            </Param>
            <Param Name="defaultValue" Type="Number">
              <Summary><![CDATA[The value to return if the original value is non-numeric]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[Value, if numeric, else defaultValue]]></Summary>
          </Return>
        </Method>
        <Method Name="partition">
          <Summary><![CDATA[Partitions the set into two sets: a true set and a false set.
Example:
Example2:
<pre><code>
// Example 1:
Ext.partition([true, false, true, true, false]); // [[true, true, true], [false, false]]

// Example 2:
Ext.partition(
    Ext.query("p"),
    function (val) {
        return val.className == "class1"
    }
);
// true are those paragraph elements with a className of "class1",
// false set are those that do not have that className.
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array|NodeList">
              <Summary><![CDATA[The array to partition]]></Summary>
            </Param>
            <Param Name="truth" Type="Function" Optional="true">
              <Summary><![CDATA[a function to determine truth.  If this is omitted the element
itself must be able to be evaluated for its truthfulness.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[[true<Array>,false<Array>]]]></Summary>
          </Return>
        </Method>
        <Method Name="pluck">
          <Summary><![CDATA[Plucks the value of a property from each item in the Array
<pre><code>
// Example:
Ext.pluck(Ext.query("p"), "className"); // [el1.className, el2.className, ..., elN.className]
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array|NodeList">
              <Summary><![CDATA[The Array of items to pluck the value from.]]></Summary>
            </Param>
            <Param Name="prop" Type="String">
              <Summary><![CDATA[The property name to pluck from each element.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[The value from each item in the Array.]]></Summary>
          </Return>
        </Method>
        <Method Name="sum">
          <Summary><![CDATA[Calculates the sum of the Array]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array">
              <Summary><![CDATA[The Array to calculate the sum value of.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The sum.]]></Summary>
          </Return>
        </Method>
        <Method Name="type">
          <Summary><![CDATA[Returns the type of object that is passed in. If the object passed in is null or undefined it
return false otherwise it returns one of the following values:<div class="mdetail-params"><ul>
<li><b>string</b>: If the object passed is a string</li>
<li><b>number</b>: If the object passed is a number</li>
<li><b>boolean</b>: If the object passed is a boolean value</li>
<li><b>date</b>: If the object passed is a Date object</li>
<li><b>function</b>: If the object passed is a function reference</li>
<li><b>object</b>: If the object passed is an object</li>
<li><b>array</b>: If the object passed is an array</li>
<li><b>regexp</b>: If the object passed is a regular expression</li>
<li><b>element</b>: If the object passed is a DOM Element</li>
<li><b>nodelist</b>: If the object passed is a DOM NodeList</li>
<li><b>textnode</b>: If the object passed is a DOM text node and contains something other than whitespace</li>
<li><b>whitespace</b>: If the object passed is a DOM text node and contains only whitespace</li>
</ul></div>]]></Summary>
          <Parameters>
            <Param Name="object" Type="Mixed" />
          </Parameters>
          <Return Type="String" />
        </Method>
        <Method Name="unique">
          <Summary><![CDATA[Creates a copy of the passed Array, filtered to contain only unique values.]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Array">
              <Summary><![CDATA[The Array to filter]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[The new Array containing unique values.]]></Summary>
          </Return>
        </Method>
        <Method Name="value">
          <Summary><![CDATA[<p>Utility method for returning a default value if the passed value is empty.</p>
<p>The value is deemed to be empty if it is<div class="mdetail-params"><ul>
<li>null</li>
<li>undefined</li>
<li>an empty array</li>
<li>a zero length string (Unless the <tt>allowBlank</tt> parameter is <tt>true</tt>)</li>
</ul></div>]]></Summary>
          <Parameters>
            <Param Name="value" Type="Mixed">
              <Summary><![CDATA[The value to test]]></Summary>
            </Param>
            <Param Name="defaultValue" Type="Mixed">
              <Summary><![CDATA[The value to return if the original value is empty]]></Summary>
            </Param>
            <Param Name="allowBlank" Type="Boolean" Optional="true">
              <Summary><![CDATA[true to allow zero length strings to qualify as non-empty (defaults to false)]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Mixed">
            <Summary><![CDATA[value, if non-empty, else defaultValue]]></Summary>
          </Return>
        </Method>
        <Method Name="zip">
          <Summary><![CDATA[<p>Zips N sets together.</p>
<pre><code>
// Example 1:
Ext.zip([1,2,3],[4,5,6]); // [[1,4],[2,5],[3,6]]
// Example 2:
Ext.zip(
    [ "+", "-", "+"],
    [  12,  10,  22],
    [  43,  15,  96],
    function (a, b, c) {
        return "$" + a + "" + b + "." + c
    }
); // ["$+12.43", "$-10.15", "$+22.96"]
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="arr" Type="Arrays|NodeLists">
              <Summary><![CDATA[This argument may be repeated. Array(s) to contribute values.]]></Summary>
            </Param>
            <Param Name="zipper" Type="Function" Optional="true">
              <Summary><![CDATA[The last item in the argument list. This will drive how the items are zipped together.]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Array">
            <Summary><![CDATA[The zipped set.]]></Summary>
          </Return>
        </Method>
      </Methods>
      <Events />
    </Class>
    <Class Name="Function" FullName="Function" DefinedIn="core\core\Ext.js,core\Ext-more.js">
      <Summary><![CDATA[These functions are available on every Function object (any JavaScript function).

These functions are available on every Function object (any JavaScript function).]]></Summary>
      <ConfigOptions />
      <Properties />
      <Methods>
        <Method Name="createCallback">
          <Summary><![CDATA[Creates a callback that passes arguments[0], arguments[1], arguments[2], ...
Call directly on any function. Example: <code>myFunction.createCallback(arg1, arg2)</code>
Will create a function that is bound to those 2 args. <b>If a specific scope is required in the
callback, use {@link #createDelegate} instead.</b> The function returned by createCallback always
executes in the window scope.
<p>This method is required when you want to pass arguments to a callback function.  If no arguments
are needed, you can simply pass a reference to the function as a callback (e.g., callback: myFn).
However, if you tried to pass a function with arguments (e.g., callback: myFn(arg1, arg2)) the function
would simply execute immediately when the code is parsed. Example usage:
<pre><code>
var sayHi = function (name) {
    alert('Hi, ' + name);
}

// clicking the button alerts "Hi, Fred"
new Ext.Button({
    text: 'Say Hi',
    renderTo: Ext.getBody(),
    handler: sayHi.createCallback('Fred')
});
</code></pre>]]></Summary>
          <Parameters />
          <Return Type="Function">
            <Summary><![CDATA[The new function]]></Summary>
          </Return>
        </Method>
        <Method Name="createDelegate">
          <Summary><![CDATA[Creates a delegate (callback) that sets the scope to obj.
Call directly on any function. Example: <code>this.myFunction.createDelegate(this, [arg1, arg2])</code>
Will create a function that is automatically scoped to obj so that the <tt>this</tt> variable inside the
callback points to obj. Example usage:
<pre><code>
var sayHi = function (name) {
    // Note this use of "this.text" here.  This function expects to
    // execute within a scope that contains a text property.  In this
    // example, the "this" variable is pointing to the btn object that
    // was passed in createDelegate below.
    alert('Hi, ' + name + '. You clicked the "' + this.text + '" button.');
}

var btn = new Ext.Button({
    text: 'Say Hi',
    renderTo: Ext.getBody()
});

// This callback will execute in the scope of the
// button instance. Clicking the button alerts
// "Hi, Fred. You clicked the "Say Hi" button."
btn.on('click', sayHi.createDelegate(btn, ['Fred']));
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="obj" Type="Object" Optional="true">
              <Summary><![CDATA[The object for which the scope is set]]></Summary>
            </Param>
            <Param Name="args" Type="Array" Optional="true">
              <Summary><![CDATA[Overrides arguments for the call. (Defaults to the arguments passed by the caller)]]></Summary>
            </Param>
            <Param Name="appendArgs" Type="Boolean/Number" Optional="true">
              <Summary><![CDATA[if True args are appended to call args instead of overriding,
if a number the args are inserted at the specified position]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Function">
            <Summary><![CDATA[The new function]]></Summary>
          </Return>
        </Method>
        <Method Name="createInterceptor">
          <Summary><![CDATA[Creates an interceptor function. The passed fcn is called before the original one. If it returns false,
the original one is not called. The resulting function returns the results of the original function.
The passed fcn is called with the parameters of the original function. Example usage:
<pre><code>
var sayHi = function (name) {
    alert('Hi, ' + name);
}

sayHi('Fred'); // alerts "Hi, Fred"

// create a new function that validates input without
// directly modifying the original function:
var sayHiToFriend = sayHi.createInterceptor(function (name) {
    return name == 'Brian';
});

sayHiToFriend('Fred');  // no alert
sayHiToFriend('Brian'); // alerts "Hi, Brian"
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="fcn" Type="Function">
              <Summary><![CDATA[The function to call before the original]]></Summary>
            </Param>
            <Param Name="scope" Type="Object" Optional="true">
              <Summary><![CDATA[The scope of the passed fcn (Defaults to scope of original function or window)]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Function">
            <Summary><![CDATA[The new function]]></Summary>
          </Return>
        </Method>
        <Method Name="defer">
          <Summary><![CDATA[Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:
<pre><code>
var sayHi = function (name) {
    alert('Hi, ' + name);
}

// executes immediately:
sayHi('Fred');

// executes after 2 seconds:
sayHi.defer(2000, this, ['Fred']);

// this syntax is sometimes useful for deferring
// execution of an anonymous function:
(function () {
    alert('Anonymous');
}).defer(100);
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="millis" Type="Number">
              <Summary><![CDATA[The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)]]></Summary>
            </Param>
            <Param Name="obj" Type="Object" Optional="true">
              <Summary><![CDATA[The object for which the scope is set]]></Summary>
            </Param>
            <Param Name="args" Type="Array" Optional="true">
              <Summary><![CDATA[Overrides arguments for the call. (Defaults to the arguments passed by the caller)]]></Summary>
            </Param>
            <Param Name="appendArgs" Type="Boolean/Number" Optional="true">
              <Summary><![CDATA[if True args are appended to call args instead of overriding,
if a number the args are inserted at the specified position]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The timeout id that can be used with clearTimeout]]></Summary>
          </Return>
        </Method>
        <Method Name="createSequence">
          <Summary><![CDATA[Create a combined function call sequence of the original function + the passed function.
The resulting function returns the results of the original function.
The passed fcn is called with the parameters of the original function. Example usage:
<pre><code>
var sayHi = function (name) {
    alert('Hi, ' + name);
}

sayHi('Fred'); // alerts "Hi, Fred"

var sayGoodbye = sayHi.createSequence(function (name) {
    alert('Bye, ' + name);
});

sayGoodbye('Fred'); // both alerts show
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="fcn" Type="Function">
              <Summary><![CDATA[The function to sequence]]></Summary>
            </Param>
            <Param Name="scope" Type="Object" Optional="true">
              <Summary><![CDATA[The scope of the passed fcn (Defaults to scope of original function or window)]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Function">
            <Summary><![CDATA[The new function]]></Summary>
          </Return>
        </Method>
      </Methods>
      <Events />
    </Class>
    <Class Name="Number" FullName="Number" DefinedIn="core\Ext-more.js">
      <ConfigOptions />
      <Properties />
      <Methods>
        <Method Name="constrain">
          <Summary><![CDATA[Checks whether or not the current number is within a desired range.  If the number is already within the
range it is returned, otherwise the min or max value is returned depending on which side of the range is
exceeded.  Note that this method returns the constrained value but does not change the current number.]]></Summary>
          <Parameters>
            <Param Name="min" Type="Number">
              <Summary><![CDATA[The minimum number in the range]]></Summary>
            </Param>
            <Param Name="max" Type="Number">
              <Summary><![CDATA[The maximum number in the range]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The constrained value if outside the range, otherwise the current value]]></Summary>
          </Return>
        </Method>
      </Methods>
      <Events />
    </Class>
    <Class Name="String" FullName="String" DefinedIn="core\core\Ext.js,core\Ext-more.js">
      <Summary><![CDATA[These functions are available on every String object.

These functions are available as static methods on the JavaScript String object.]]></Summary>
      <ConfigOptions />
      <Properties />
      <Methods>
        <Method Name="format">
          <Summary><![CDATA[Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each
token must be unique, and must increment in the format {0}, {1}, etc.  Example usage:
<pre><code>
var cls = 'my-class', text = 'Some text';
var s = String.format('&lt;div class="{0}">{1}&lt;/div>', cls, text);
// s now contains the string: '&lt;div class="my-class">Some text&lt;/div>'
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="string" Type="String">
              <Summary><![CDATA[The tokenized string to be formatted]]></Summary>
            </Param>
            <Param Name="value1" Type="String">
              <Summary><![CDATA[The value to replace token {0}]]></Summary>
            </Param>
            <Param Name="value2" Type="String">
              <Summary><![CDATA[Etc...
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The formatted string]]></Summary>
          </Return>
        </Method>
        <Method Name="escape">
          <Summary><![CDATA[Escapes the passed string for ' and \]]></Summary>
          <Parameters>
            <Param Name="string" Type="String">
              <Summary><![CDATA[The string to escape
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The escaped string]]></Summary>
          </Return>
        </Method>
        <Method Name="getElapsed">
          <Summary><![CDATA[ Returns the number of milliseconds between this date and date]]></Summary>
          <Parameters>
            <Param Name="date" Type="Date" Optional="true">
              <Summary><![CDATA[Defaults to now
@member Date getElapsed]]></Summary>
            </Param>
          </Parameters>
          <Return Type="Number">
            <Summary><![CDATA[The diff in milliseconds]]></Summary>
          </Return>
        </Method>
        <Method Name="leftPad">
          <Summary><![CDATA[Pads the left side of a string with a specified character.  This is especially useful
for normalizing number and date strings.  Example usage:
<pre><code>
var s = String.leftPad('123', 5, '0');
// s now contains the string: '00123'
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="string" Type="String">
              <Summary><![CDATA[The original string]]></Summary>
            </Param>
            <Param Name="size" Type="Number">
              <Summary><![CDATA[The total length of the output string]]></Summary>
            </Param>
            <Param Name="char" Type="String" Optional="true">
              <Summary><![CDATA[The character with which to pad the original string (defaults to empty string " ")
@static]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The padded string]]></Summary>
          </Return>
        </Method>
        <Method Name="toggle">
          <Summary><![CDATA[Utility function that allows you to easily switch a string between two alternating values.  The passed value
is compared to the current string, and if they are equal, the other value that was passed in is returned.  If
they are already different, the first value passed in is returned.  Note that this method returns the new value
but does not change the current string.
<pre><code>
// alternate sort directions
sort = sort.toggle('ASC', 'DESC');

// instead of conditional logic:
sort = (sort == 'ASC' ? 'DESC' : 'ASC');
</code></pre>]]></Summary>
          <Parameters>
            <Param Name="value" Type="String">
              <Summary><![CDATA[The value to compare to the current string]]></Summary>
            </Param>
            <Param Name="other" Type="String">
              <Summary><![CDATA[The new value to use if the string already equals the first value passed in]]></Summary>
            </Param>
          </Parameters>
          <Return Type="String">
            <Summary><![CDATA[The new value]]></Summary>
          </Return>
        </Method>
        <Method Name="trim">
          <Summary><![CDATA[Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:
<pre><code>
var s = '  foo bar  ';
alert('-' + s + '-');         //alerts "- foo bar -"
alert('-' + s.trim() + '-');  //alerts "-foo bar-"
</code></pre>]]></Summary>
          <Parameters />
          <Return Type="String">
            <Summary><![CDATA[The trimmed string]]></Summary>
          </Return>
        </Method>
      </Methods>
      <Events />
    </Class>
  </Classes>
  <Summary DateCreated="2009-09-21T22:21:08" TotalPackages="12" TotalClasses="238">
    <Packages>
      <Package Name="chart" />
      <Package Name="data" />
      <Package Name="dd" />
      <Package Name="direct" />
      <Package Name="Ext" />
      <Package Name="form" />
      <Package Name="grid" />
      <Package Name="layout" />
      <Package Name="menu" />
      <Package Name="state" />
      <Package Name="tree" />
      <Package Name="util" />
    </Packages>
    <Classes>
      <Class Name="Array" />
      <Class Name="Date" />
      <Class Name="Ext" />
      <Class Name="Ext.Action" />
      <Class Name="Ext.Ajax" />
      <Class Name="Ext.BoxComponent" />
      <Class Name="Ext.Button" />
      <Class Name="Ext.ButtonGroup" />
      <Class Name="Ext.chart.Axis" />
      <Class Name="Ext.chart.BarChart" />
      <Class Name="Ext.chart.BarSeries" />
      <Class Name="Ext.chart.CartesianChart" />
      <Class Name="Ext.chart.CartesianSeries" />
      <Class Name="Ext.chart.CategoryAxis" />
      <Class Name="Ext.chart.Chart" />
      <Class Name="Ext.chart.ColumnChart" />
      <Class Name="Ext.chart.ColumnSeries" />
      <Class Name="Ext.chart.LineChart" />
      <Class Name="Ext.chart.LineSeries" />
      <Class Name="Ext.chart.NumericAxis" />
      <Class Name="Ext.chart.PieChart" />
      <Class Name="Ext.chart.PieSeries" />
      <Class Name="Ext.chart.Series" />
      <Class Name="Ext.chart.StackedBarChart" />
      <Class Name="Ext.chart.StackedColumnChart" />
      <Class Name="Ext.chart.TimeAxis" />
      <Class Name="Ext.ColorPalette" />
      <Class Name="Ext.Component" />
      <Class Name="Ext.ComponentMgr" />
      <Class Name="Ext.CompositeElement" />
      <Class Name="Ext.CompositeElementLite" />
      <Class Name="Ext.Container" />
      <Class Name="Ext.CycleButton" />
      <Class Name="Ext.data.Api" />
      <Class Name="Ext.data.Api.Error" />
      <Class Name="Ext.data.ArrayReader" />
      <Class Name="Ext.data.ArrayStore" />
      <Class Name="Ext.data.Connection" />
      <Class Name="Ext.data.DataProxy" />
      <Class Name="Ext.data.DataProxy.Error" />
      <Class Name="Ext.data.DataReader" />
      <Class Name="Ext.data.DataReader.Error" />
      <Class Name="Ext.data.DataWriter" />
      <Class Name="Ext.data.DirectProxy" />
      <Class Name="Ext.data.DirectStore" />
      <Class Name="Ext.data.Field" />
      <Class Name="Ext.data.GroupingStore" />
      <Class Name="Ext.data.HttpProxy" />
      <Class Name="Ext.data.JsonReader" />
      <Class Name="Ext.data.JsonReader.Error" />
      <Class Name="Ext.data.JsonStore" />
      <Class Name="Ext.data.JsonWriter" />
      <Class Name="Ext.data.MemoryProxy" />
      <Class Name="Ext.data.Node" />
      <Class Name="Ext.data.Record" />
      <Class Name="Ext.data.ScriptTagProxy" />
      <Class Name="Ext.data.SortTypes" />
      <Class Name="Ext.data.Store" />
      <Class Name="Ext.data.Store.Error" />
      <Class Name="Ext.data.Tree" />
      <Class Name="Ext.data.XmlReader" />
      <Class Name="Ext.data.XmlStore" />
      <Class Name="Ext.data.XmlWriter" />
      <Class Name="Ext.DataView" />
      <Class Name="Ext.DatePicker" />
      <Class Name="Ext.dd.DD" />
      <Class Name="Ext.dd.DDProxy" />
      <Class Name="Ext.dd.DDTarget" />
      <Class Name="Ext.dd.DragDrop" />
      <Class Name="Ext.dd.DragDropMgr" />
      <Class Name="Ext.dd.DragSource" />
      <Class Name="Ext.dd.DragTracker" />
      <Class Name="Ext.dd.DragZone" />
      <Class Name="Ext.dd.DropTarget" />
      <Class Name="Ext.dd.DropZone" />
      <Class Name="Ext.dd.PanelProxy" />
      <Class Name="Ext.dd.Registry" />
      <Class Name="Ext.dd.ScrollManager" />
      <Class Name="Ext.dd.StatusProxy" />
      <Class Name="Ext.Direct" />
      <Class Name="Ext.direct.JsonProvider" />
      <Class Name="Ext.direct.PollingProvider" />
      <Class Name="Ext.direct.Provider" />
      <Class Name="Ext.direct.RemotingProvider" />
      <Class Name="Ext.Direct.Transaction" />
      <Class Name="Ext.DomHelper" />
      <Class Name="Ext.DomQuery" />
      <Class Name="Ext.Editor" />
      <Class Name="Ext.Element" />
      <Class Name="Ext.Error" />
      <Class Name="Ext.EventManager" />
      <Class Name="Ext.EventObject" />
      <Class Name="Ext.FlashComponent" />
      <Class Name="Ext.FlashProxy" />
      <Class Name="Ext.form.Action" />
      <Class Name="Ext.form.Action.DirectLoad" />
      <Class Name="Ext.form.Action.DirectSubmit" />
      <Class Name="Ext.form.Action.Load" />
      <Class Name="Ext.form.Action.Submit" />
      <Class Name="Ext.form.BasicForm" />
      <Class Name="Ext.form.Checkbox" />
      <Class Name="Ext.form.CheckboxGroup" />
      <Class Name="Ext.form.ComboBox" />
      <Class Name="Ext.form.DateField" />
      <Class Name="Ext.form.DisplayField" />
      <Class Name="Ext.form.Field" />
      <Class Name="Ext.form.FieldSet" />
      <Class Name="Ext.form.FormPanel" />
      <Class Name="Ext.form.Hidden" />
      <Class Name="Ext.form.HtmlEditor" />
      <Class Name="Ext.form.Label" />
      <Class Name="Ext.form.NumberField" />
      <Class Name="Ext.form.Radio" />
      <Class Name="Ext.form.RadioGroup" />
      <Class Name="Ext.form.TextArea" />
      <Class Name="Ext.form.TextField" />
      <Class Name="Ext.form.TimeField" />
      <Class Name="Ext.form.TriggerField" />
      <Class Name="Ext.form.TwinTriggerField" />
      <Class Name="Ext.form.VTypes" />
      <Class Name="Ext.Fx" />
      <Class Name="Ext.grid.AbstractSelectionModel" />
      <Class Name="Ext.grid.BooleanColumn" />
      <Class Name="Ext.grid.CellSelectionModel" />
      <Class Name="Ext.grid.CheckboxSelectionModel" />
      <Class Name="Ext.grid.Column" />
      <Class Name="Ext.grid.ColumnModel" />
      <Class Name="Ext.grid.DateColumn" />
      <Class Name="Ext.grid.EditorGridPanel" />
      <Class Name="Ext.grid.GridDragZone" />
      <Class Name="Ext.grid.GridPanel" />
      <Class Name="Ext.grid.GridView" />
      <Class Name="Ext.grid.GroupingView" />
      <Class Name="Ext.grid.NumberColumn" />
      <Class Name="Ext.grid.PropertyColumnModel" />
      <Class Name="Ext.grid.PropertyGrid" />
      <Class Name="Ext.grid.PropertyRecord" />
      <Class Name="Ext.grid.PropertyStore" />
      <Class Name="Ext.grid.RowNumberer" />
      <Class Name="Ext.grid.RowSelectionModel" />
      <Class Name="Ext.grid.TemplateColumn" />
      <Class Name="Ext.History" />
      <Class Name="Ext.KeyMap" />
      <Class Name="Ext.KeyNav" />
      <Class Name="Ext.Layer" />
      <Class Name="Ext.layout.AbsoluteLayout" />
      <Class Name="Ext.layout.AccordionLayout" />
      <Class Name="Ext.layout.AnchorLayout" />
      <Class Name="Ext.layout.BorderLayout" />
      <Class Name="Ext.layout.BorderLayout.Region" />
      <Class Name="Ext.layout.BorderLayout.SplitRegion" />
      <Class Name="Ext.layout.BoxLayout" />
      <Class Name="Ext.layout.CardLayout" />
      <Class Name="Ext.layout.ColumnLayout" />
      <Class Name="Ext.layout.ContainerLayout" />
      <Class Name="Ext.layout.FitLayout" />
      <Class Name="Ext.layout.FormLayout" />
      <Class Name="Ext.layout.HBoxLayout" />
      <Class Name="Ext.layout.MenuLayout" />
      <Class Name="Ext.layout.TableLayout" />
      <Class Name="Ext.layout.ToolbarLayout" />
      <Class Name="Ext.layout.VBoxLayout" />
      <Class Name="Ext.ListView" />
      <Class Name="Ext.ListView.ColumnResizer" />
      <Class Name="Ext.ListView.Sorter" />
      <Class Name="Ext.LoadMask" />
      <Class Name="Ext.menu.BaseItem" />
      <Class Name="Ext.menu.CheckItem" />
      <Class Name="Ext.menu.ColorMenu" />
      <Class Name="Ext.menu.DateMenu" />
      <Class Name="Ext.menu.Item" />
      <Class Name="Ext.menu.Menu" />
      <Class Name="Ext.menu.MenuMgr" />
      <Class Name="Ext.menu.Separator" />
      <Class Name="Ext.menu.TextItem" />
      <Class Name="Ext.MessageBox" />
      <Class Name="Ext.PagingToolbar" />
      <Class Name="Ext.Panel" />
      <Class Name="Ext.ProgressBar" />
      <Class Name="Ext.QuickTip" />
      <Class Name="Ext.QuickTips" />
      <Class Name="Ext.Resizable" />
      <Class Name="Ext.Shadow" />
      <Class Name="Ext.Slider" />
      <Class Name="Ext.Spacer" />
      <Class Name="Ext.SplitBar" />
      <Class Name="Ext.SplitBar.AbsoluteLayoutAdapter" />
      <Class Name="Ext.SplitBar.BasicLayoutAdapter" />
      <Class Name="Ext.SplitButton" />
      <Class Name="Ext.state.CookieProvider" />
      <Class Name="Ext.state.Manager" />
      <Class Name="Ext.state.Provider" />
      <Class Name="Ext.StoreMgr" />
      <Class Name="Ext.TabPanel" />
      <Class Name="Ext.TaskMgr" />
      <Class Name="Ext.Template" />
      <Class Name="Ext.Tip" />
      <Class Name="Ext.Toolbar" />
      <Class Name="Ext.Toolbar.Fill" />
      <Class Name="Ext.Toolbar.Item" />
      <Class Name="Ext.Toolbar.Separator" />
      <Class Name="Ext.Toolbar.Spacer" />
      <Class Name="Ext.Toolbar.TextItem" />
      <Class Name="Ext.ToolTip" />
      <Class Name="Ext.tree.AsyncTreeNode" />
      <Class Name="Ext.tree.DefaultSelectionModel" />
      <Class Name="Ext.tree.MultiSelectionModel" />
      <Class Name="Ext.tree.RootTreeNodeUI" />
      <Class Name="Ext.tree.TreeDragZone" />
      <Class Name="Ext.tree.TreeDropZone" />
      <Class Name="Ext.tree.TreeEditor" />
      <Class Name="Ext.tree.TreeFilter" />
      <Class Name="Ext.tree.TreeLoader" />
      <Class Name="Ext.tree.TreeNode" />
      <Class Name="Ext.tree.TreeNodeUI" />
      <Class Name="Ext.tree.TreePanel" />
      <Class Name="Ext.tree.TreeSorter" />
      <Class Name="Ext.Updater" />
      <Class Name="Ext.Updater.BasicRenderer" />
      <Class Name="Ext.Updater.defaults" />
      <Class Name="Ext.util.ClickRepeater" />
      <Class Name="Ext.util.Cookies" />
      <Class Name="Ext.util.CSS" />
      <Class Name="Ext.util.DelayedTask" />
      <Class Name="Ext.util.Format" />
      <Class Name="Ext.util.JSON" />
      <Class Name="Ext.util.MixedCollection" />
      <Class Name="Ext.util.Observable" />
      <Class Name="Ext.util.TaskRunner" />
      <Class Name="Ext.util.TextMetrics" />
      <Class Name="Ext.Viewport" />
      <Class Name="Ext.Window" />
      <Class Name="Ext.WindowGroup" />
      <Class Name="Ext.WindowMgr" />
      <Class Name="Ext.XTemplate" />
      <Class Name="Function" />
      <Class Name="Number" />
      <Class Name="String" />
    </Classes>
  </Summary>
</Global>