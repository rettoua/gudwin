{"summary":{"dateCreated":"2009-09-21T22:21:08","totalPackages":12,"totalClasses":238,"packages":[{"name":"chart"},{"name":"data"},{"name":"dd"},{"name":"direct"},{"name":"Ext"},{"name":"form"},{"name":"grid"},{"name":"layout"},{"name":"menu"},{"name":"state"},{"name":"tree"},{"name":"util"}],"classes":[{"name":"Array"},{"name":"Date"},{"name":"Ext"},{"name":"Ext.Action"},{"name":"Ext.Ajax"},{"name":"Ext.BoxComponent"},{"name":"Ext.Button"},{"name":"Ext.ButtonGroup"},{"name":"Ext.chart.Axis"},{"name":"Ext.chart.BarChart"},{"name":"Ext.chart.BarSeries"},{"name":"Ext.chart.CartesianChart"},{"name":"Ext.chart.CartesianSeries"},{"name":"Ext.chart.CategoryAxis"},{"name":"Ext.chart.Chart"},{"name":"Ext.chart.ColumnChart"},{"name":"Ext.chart.ColumnSeries"},{"name":"Ext.chart.LineChart"},{"name":"Ext.chart.LineSeries"},{"name":"Ext.chart.NumericAxis"},{"name":"Ext.chart.PieChart"},{"name":"Ext.chart.PieSeries"},{"name":"Ext.chart.Series"},{"name":"Ext.chart.StackedBarChart"},{"name":"Ext.chart.StackedColumnChart"},{"name":"Ext.chart.TimeAxis"},{"name":"Ext.ColorPalette"},{"name":"Ext.Component"},{"name":"Ext.ComponentMgr"},{"name":"Ext.CompositeElement"},{"name":"Ext.CompositeElementLite"},{"name":"Ext.Container"},{"name":"Ext.CycleButton"},{"name":"Ext.data.Api"},{"name":"Ext.data.Api.Error"},{"name":"Ext.data.ArrayReader"},{"name":"Ext.data.ArrayStore"},{"name":"Ext.data.Connection"},{"name":"Ext.data.DataProxy"},{"name":"Ext.data.DataProxy.Error"},{"name":"Ext.data.DataReader"},{"name":"Ext.data.DataReader.Error"},{"name":"Ext.data.DataWriter"},{"name":"Ext.data.DirectProxy"},{"name":"Ext.data.DirectStore"},{"name":"Ext.data.Field"},{"name":"Ext.data.GroupingStore"},{"name":"Ext.data.HttpProxy"},{"name":"Ext.data.JsonReader"},{"name":"Ext.data.JsonReader.Error"},{"name":"Ext.data.JsonStore"},{"name":"Ext.data.JsonWriter"},{"name":"Ext.data.MemoryProxy"},{"name":"Ext.data.Node"},{"name":"Ext.data.Record"},{"name":"Ext.data.ScriptTagProxy"},{"name":"Ext.data.SortTypes"},{"name":"Ext.data.Store"},{"name":"Ext.data.Store.Error"},{"name":"Ext.data.Tree"},{"name":"Ext.data.XmlReader"},{"name":"Ext.data.XmlStore"},{"name":"Ext.data.XmlWriter"},{"name":"Ext.DataView"},{"name":"Ext.DatePicker"},{"name":"Ext.dd.DD"},{"name":"Ext.dd.DDProxy"},{"name":"Ext.dd.DDTarget"},{"name":"Ext.dd.DragDrop"},{"name":"Ext.dd.DragDropMgr"},{"name":"Ext.dd.DragSource"},{"name":"Ext.dd.DragTracker"},{"name":"Ext.dd.DragZone"},{"name":"Ext.dd.DropTarget"},{"name":"Ext.dd.DropZone"},{"name":"Ext.dd.PanelProxy"},{"name":"Ext.dd.Registry"},{"name":"Ext.dd.ScrollManager"},{"name":"Ext.dd.StatusProxy"},{"name":"Ext.Direct"},{"name":"Ext.direct.JsonProvider"},{"name":"Ext.direct.PollingProvider"},{"name":"Ext.direct.Provider"},{"name":"Ext.direct.RemotingProvider"},{"name":"Ext.Direct.Transaction"},{"name":"Ext.DomHelper"},{"name":"Ext.DomQuery"},{"name":"Ext.Editor"},{"name":"Ext.Element"},{"name":"Ext.Error"},{"name":"Ext.EventManager"},{"name":"Ext.EventObject"},{"name":"Ext.FlashComponent"},{"name":"Ext.FlashProxy"},{"name":"Ext.form.Action"},{"name":"Ext.form.Action.DirectLoad"},{"name":"Ext.form.Action.DirectSubmit"},{"name":"Ext.form.Action.Load"},{"name":"Ext.form.Action.Submit"},{"name":"Ext.form.BasicForm"},{"name":"Ext.form.Checkbox"},{"name":"Ext.form.CheckboxGroup"},{"name":"Ext.form.ComboBox"},{"name":"Ext.form.DateField"},{"name":"Ext.form.DisplayField"},{"name":"Ext.form.Field"},{"name":"Ext.form.FieldSet"},{"name":"Ext.form.FormPanel"},{"name":"Ext.form.Hidden"},{"name":"Ext.form.HtmlEditor"},{"name":"Ext.form.Label"},{"name":"Ext.form.NumberField"},{"name":"Ext.form.Radio"},{"name":"Ext.form.RadioGroup"},{"name":"Ext.form.TextArea"},{"name":"Ext.form.TextField"},{"name":"Ext.form.TimeField"},{"name":"Ext.form.TriggerField"},{"name":"Ext.form.TwinTriggerField"},{"name":"Ext.form.VTypes"},{"name":"Ext.Fx"},{"name":"Ext.grid.AbstractSelectionModel"},{"name":"Ext.grid.BooleanColumn"},{"name":"Ext.grid.CellSelectionModel"},{"name":"Ext.grid.CheckboxSelectionModel"},{"name":"Ext.grid.Column"},{"name":"Ext.grid.ColumnModel"},{"name":"Ext.grid.DateColumn"},{"name":"Ext.grid.EditorGridPanel"},{"name":"Ext.grid.GridDragZone"},{"name":"Ext.grid.GridPanel"},{"name":"Ext.grid.GridView"},{"name":"Ext.grid.GroupingView"},{"name":"Ext.grid.NumberColumn"},{"name":"Ext.grid.PropertyColumnModel"},{"name":"Ext.grid.PropertyGrid"},{"name":"Ext.grid.PropertyRecord"},{"name":"Ext.grid.PropertyStore"},{"name":"Ext.grid.RowNumberer"},{"name":"Ext.grid.RowSelectionModel"},{"name":"Ext.grid.TemplateColumn"},{"name":"Ext.History"},{"name":"Ext.KeyMap"},{"name":"Ext.KeyNav"},{"name":"Ext.Layer"},{"name":"Ext.layout.AbsoluteLayout"},{"name":"Ext.layout.AccordionLayout"},{"name":"Ext.layout.AnchorLayout"},{"name":"Ext.layout.BorderLayout"},{"name":"Ext.layout.BorderLayout.Region"},{"name":"Ext.layout.BorderLayout.SplitRegion"},{"name":"Ext.layout.BoxLayout"},{"name":"Ext.layout.CardLayout"},{"name":"Ext.layout.ColumnLayout"},{"name":"Ext.layout.ContainerLayout"},{"name":"Ext.layout.FitLayout"},{"name":"Ext.layout.FormLayout"},{"name":"Ext.layout.HBoxLayout"},{"name":"Ext.layout.MenuLayout"},{"name":"Ext.layout.TableLayout"},{"name":"Ext.layout.ToolbarLayout"},{"name":"Ext.layout.VBoxLayout"},{"name":"Ext.ListView"},{"name":"Ext.ListView.ColumnResizer"},{"name":"Ext.ListView.Sorter"},{"name":"Ext.LoadMask"},{"name":"Ext.menu.BaseItem"},{"name":"Ext.menu.CheckItem"},{"name":"Ext.menu.ColorMenu"},{"name":"Ext.menu.DateMenu"},{"name":"Ext.menu.Item"},{"name":"Ext.menu.Menu"},{"name":"Ext.menu.MenuMgr"},{"name":"Ext.menu.Separator"},{"name":"Ext.menu.TextItem"},{"name":"Ext.MessageBox"},{"name":"Ext.PagingToolbar"},{"name":"Ext.Panel"},{"name":"Ext.ProgressBar"},{"name":"Ext.QuickTip"},{"name":"Ext.QuickTips"},{"name":"Ext.Resizable"},{"name":"Ext.Shadow"},{"name":"Ext.Slider"},{"name":"Ext.Spacer"},{"name":"Ext.SplitBar"},{"name":"Ext.SplitBar.AbsoluteLayoutAdapter"},{"name":"Ext.SplitBar.BasicLayoutAdapter"},{"name":"Ext.SplitButton"},{"name":"Ext.state.CookieProvider"},{"name":"Ext.state.Manager"},{"name":"Ext.state.Provider"},{"name":"Ext.StoreMgr"},{"name":"Ext.TabStrip"},{"name":"Ext.TaskMgr"},{"name":"Ext.Template"},{"name":"Ext.Tip"},{"name":"Ext.Toolbar"},{"name":"Ext.Toolbar.Fill"},{"name":"Ext.Toolbar.Item"},{"name":"Ext.Toolbar.Separator"},{"name":"Ext.Toolbar.Spacer"},{"name":"Ext.Toolbar.TextItem"},{"name":"Ext.ToolTip"},{"name":"Ext.tree.AsyncTreeNode"},{"name":"Ext.tree.DefaultSelectionModel"},{"name":"Ext.tree.MultiSelectionModel"},{"name":"Ext.tree.RootTreeNodeUI"},{"name":"Ext.tree.TreeDragZone"},{"name":"Ext.tree.TreeDropZone"},{"name":"Ext.tree.TreeEditor"},{"name":"Ext.tree.TreeFilter"},{"name":"Ext.tree.TreeLoader"},{"name":"Ext.tree.TreeNode"},{"name":"Ext.tree.TreeNodeUI"},{"name":"Ext.tree.TreePanel"},{"name":"Ext.tree.TreeSorter"},{"name":"Ext.Updater"},{"name":"Ext.Updater.BasicRenderer"},{"name":"Ext.Updater.defaults"},{"name":"Ext.util.ClickRepeater"},{"name":"Ext.util.Cookies"},{"name":"Ext.util.CSS"},{"name":"Ext.util.DelayedTask"},{"name":"Ext.util.Format"},{"name":"Ext.util.JSON"},{"name":"Ext.util.MixedCollection"},{"name":"Ext.util.Observable"},{"name":"Ext.util.TaskRunner"},{"name":"Ext.util.TextMetrics"},{"name":"Ext.Viewport"},{"name":"Ext.Window"},{"name":"Ext.WindowGroup"},{"name":"Ext.WindowMgr"},{"name":"Ext.XTemplate"},{"name":"Function"},{"name":"Number"},{"name":"String"}]},"name":"Global","fullName":null,"parentFullName":null,"packages":[{"name":"Ext","fullName":"Ext","parentFullName":null,"packages":[{"name":"chart","fullName":"chart","parentFullName":"Ext","packages":[],"classes":[{"name":"Axis","fullName":"Ext.chart.Axis","summary":"Defines a CartesianChart's vertical or horizontal axis.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.chart.CategoryAxis,Ext.chart.NumericAxis,Ext.chart.TimeAxis","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"hideOverlappingLabels","summary":"If true, labels that overlap previously drawn labels on the axis will be hidden.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"labelFunction","summary":"A string reference to the globally-accessible function that may be called to\r\ndetermine each of the label values for this axis.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"orientation","summary":"The direction in which the axis is drawn. May be \"horizontal\" or \"vertical\".\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"reverse","summary":"If true, the items on the axis will be drawn in opposite direction.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"type","summary":"The type of axis.\r\n\r\n"}],"methods":[],"events":[]},{"name":"BarChart","fullName":"Ext.chart.BarChart","summary":"","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"barchart","extends":"Ext.chart.CartesianChart","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"BarSeries","fullName":"Ext.chart.BarSeries","summary":"BarSeries class for the charts widget.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.CartesianSeries","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"CartesianChart","fullName":"Ext.chart.CartesianChart","summary":"","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"cartesianchart","extends":"Ext.chart.Chart","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.chart.BarChart,Ext.chart.ColumnChart,Ext.chart.LineChart,Ext.chart.StackedBarChart,Ext.chart.StackedColumnChart","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"CartesianSeries","fullName":"Ext.chart.CartesianSeries","summary":"CartesianSeries class for the charts widget.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.Series","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.chart.BarSeries,Ext.chart.ColumnSeries,Ext.chart.LineSeries","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"xField","summary":"The field used to access the x-axis value from the items from the data source.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"yField","summary":"The field used to access the y-axis value from the items from the data source.\r\n\r\n"}],"methods":[],"events":[]},{"name":"CategoryAxis","fullName":"Ext.chart.CategoryAxis","summary":"A type of axis that displays items in categories.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.Axis","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"categoryNames","summary":"A list of category names to display along this axis.\r\n\r\n"}],"methods":[],"events":[]},{"name":"Chart","fullName":"Ext.chart.Chart","summary":"The Ext.chart package provides the capability to visualize data with flash based charting.\r\nEach chart binds directly to an Ext.data.Store enabling automatic updates of the chart.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"chart","extends":"Ext.FlashComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.chart.CartesianChart,Ext.chart.PieChart","configOptions":[{"type":"Object","optional":false,"name":"chartStyle","summary":"Sets styles for this chart. Contains a number of default values. Modifying this property will override\r\nthe base styles on the chart.\r\n"},{"type":"Boolean","optional":false,"name":"disableCaching","summary":"True to add a \"cache buster\" to the end of the chart url. Defaults to true for Opera and IE.\r\n"},{"type":"Object","optional":false,"name":"extraStyle","summary":"Contains extra styles that will be added or overwritten to the default chartStyle. Defaults to <tt>null</tt>.\r\n"},{"type":"String","optional":false,"name":"url","summary":"The url to load the chart from. This defaults to Ext.chart.Chart.CHART_URL, which should\r\nbe modified to point to the local charts resource.\r\n"}],"properties":[{"type":"","static":true,"hide":false,"private":false,"name":"CHART_URL","summary":"Sets the url to load the chart from. This should be set to a local resource.\r\n"}],"methods":[{"parameters":[{"type":"Store","optional":false,"name":"store","summary":"The store to bind to this chart"}],"return":null,"hide":false,"private":false,"name":"bindStore","summary":"Changes the data store bound to this chart and refreshes it.\r\n"},{"parameters":[{"type":"Array} Initi","optional":false,"name":"styleslizer","summary":"for all Chart series styles."}],"return":null,"hide":false,"private":false,"name":"setSeriesStyles","summary":"Sets the styles on all series in the Chart.\r\n\r\n"},{"parameters":[{"type":"String} Nam","optional":false,"name":"name","summary":"of the Chart style value to change."},{"type":"Object} New ","optional":false,"name":"valuealue","summary":"to pass to the Chart style."}],"return":null,"hide":false,"private":false,"name":"setStyle","summary":"Sets a single style value on the Chart instance.\r\n\r\n"},{"parameters":[{"type":"Object} Initi","optional":false,"name":"styleslizer","summary":"for all Chart styles."}],"return":null,"hide":false,"private":false,"name":"setStyles","summary":"Resets all styles on the Chart instance.\r\n\r\n"}],"events":[]},{"name":"ColumnChart","fullName":"Ext.chart.ColumnChart","summary":"","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"columnchart","extends":"Ext.chart.CartesianChart","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"ColumnSeries","fullName":"Ext.chart.ColumnSeries","summary":"ColumnSeries class for the charts widget.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.CartesianSeries","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"LineChart","fullName":"Ext.chart.LineChart","summary":"","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"linechart","extends":"Ext.chart.CartesianChart","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"LineSeries","fullName":"Ext.chart.LineSeries","summary":"LineSeries class for the charts widget.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.CartesianSeries","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"NumericAxis","fullName":"Ext.chart.NumericAxis","summary":"A type of axis whose units are measured in numeric values.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.Axis","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"alwaysShowZero","summary":"If true, and the bounds are calculated automatically, either the minimum or\r\nmaximum will be set to zero.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"majorUnit","summary":"The spacing between major intervals on this axis.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"maximum","summary":"The maximum value drawn by the axis. If not set explicitly, the axis maximum\r\nwill be calculated automatically.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"minimum","summary":"The minimum value drawn by the axis. If not set explicitly, the axis minimum\r\nwill be calculated automatically.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"minorUnit","summary":"The spacing between minor intervals on this axis.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"scale","summary":"The scaling algorithm to use on this axis. May be \"linear\" or \"logarithmic\".\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"snapToUnits","summary":"If true, the labels, ticks, gridlines, and other objects will snap to\r\nthe nearest major or minor unit. If false, their position will be based\r\non the minimum value.\r\n\r\n"}],"methods":[],"events":[]},{"name":"PieChart","fullName":"Ext.chart.PieChart","summary":"","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"piechart","extends":"Ext.chart.Chart","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"PieSeries","fullName":"Ext.chart.PieSeries","summary":"PieSeries class for the charts widget.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.Series","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Series","fullName":"Ext.chart.Series","summary":"Series class for the charts widget.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.chart.CartesianSeries,Ext.chart.PieSeries","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"displayName","summary":"The human-readable name of the series.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"type","summary":"The type of series.\r\n\r\n"}],"methods":[],"events":[]},{"name":"StackedBarChart","fullName":"Ext.chart.StackedBarChart","summary":"","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"stackedbarchart","extends":"Ext.chart.CartesianChart","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"StackedColumnChart","fullName":"Ext.chart.StackedColumnChart","summary":"","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":"stackedcolumnchart","extends":"Ext.chart.CartesianChart","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"TimeAxis","fullName":"Ext.chart.TimeAxis","summary":"A type of axis whose units are measured in time-based values.\r\n","package":"chart","definedIn":"widgets\\chart\\Chart.js","xtype":null,"extends":"Ext.chart.Axis","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"majorTimeUnit","summary":"The time unit used by the majorUnit.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"majorUnit","summary":"The spacing between major intervals on this axis.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"maximum","summary":"The maximum value drawn by the axis. If not set explicitly, the axis maximum\r\nwill be calculated automatically.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"minimum","summary":"The minimum value drawn by the axis. If not set explicitly, the axis minimum\r\nwill be calculated automatically.\r\n\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"snapToUnits","summary":"If true, the labels, ticks, gridlines, and other objects will snap to\r\nthe nearest major or minor unit. If false, their position will be based\r\non the minimum value.\r\n\r\n"}],"methods":[],"events":[]}]},{"name":"data","fullName":"data","parentFullName":"Ext","packages":[],"classes":[{"name":"Api","fullName":"Ext.data.Api","summary":"Ext.data.Api is a singleton designed to manage the data API including methods\r\nfor validating a developer's DataProxy API.  Defines variables for CRUD actions\r\ncreate, read, update and destroy in addition to a mapping of RESTful HTTP methods\r\nGET, POST, PUT and DELETE to CRUD actions.\r\n","package":"data","definedIn":"data\\Api.js","xtype":null,"extends":"Object","singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"actions","summary":"Defined actions corresponding to remote actions:\r\n<pre><code>\r\nactions: {\r\ncreate  : 'create',  // Text representing the remote-action to create records on server.\r\nread    : 'read',    // Text representing the remote-action to read/load data from server.\r\nupdate  : 'update',  // Text representing the remote-action to update records on server.\r\ndestroy : 'destroy'  // Text representing the remote-action to destroy records on server.\r\n}\r\n</code></pre>\r\n"}],"methods":[{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The runtime name of the action.\r\n@nodoc"}],"return":{"type":"String||null","summary":"returns the action-key, or verb of the user-action or null if invalid."},"hide":false,"private":false,"name":"getVerb","summary":"Returns the actual CRUD action KEY \"create\", \"read\", \"update\" or \"destroy\" from the supplied action-name.  This method is used internally and shouldn't generally\r\nneed to be used directly.  The key/value pair of Ext.data.Api.actions will often be identical but this is not necessarily true.  A developer can override this naming\r\nconvention if desired.  However, the framework internally calls methods based upon the KEY so a way of retreiving the the words \"create\", \"read\", \"update\" and \"destroy\" is\r\nrequired.  This method will cache discovered KEYS into the private validActions hash.\r\n"},{"parameters":[{"type":"Ext.data.DataProxy","optional":false,"name":"proxy","summary":""},{"type":"String","optional":false,"name":"verb","summary":""}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasUniqueUrl","summary":"Returns true if the supplied verb upon the supplied proxy points to a unique url in that none of the other api-actions\r\npoint to the same url.  The question is important for deciding whether to insert the \"xaction\" HTTP parameter within an\r\nAjax request.  This method is used internally and shouldn't generally need to be called directly.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"action","summary":""}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isAction","summary":"Returns true if supplied action-name is a valid API action defined in <code>{@link #actions}</code> constants\r\n"},{"parameters":[],"return":{"type":"String[]||true","summary":""},"hide":false,"private":false,"name":"isValid","summary":"Returns true if the supplied API is valid; that is, check that all keys match defined actions\r\notherwise returns an array of mistakes.\r\n"},{"parameters":[{"type":"Ext.data.DataProxy","optional":false,"name":"proxy","summary":""}],"return":null,"hide":false,"private":false,"name":"prepare","summary":"This method is used internally by <tt>{@link Ext.data.DataProxy DataProxy}</tt> and should not generally need to be used directly.\r\nEach action of a DataProxy api can be initially defined as either a String or an Object.  When specified as an object,\r\none can explicitly define the HTTP method (GET|POST) to use for each CRUD action.  This method will prepare the supplied API, setting\r\neach action to the Object form.  If your API-actions do not explicitly define the HTTP method, the \"method\" configuration-parameter will\r\nbe used.  If the method configuration parameter is not specified, POST will be used.\r\n         <pre><code>\r\nnew Ext.data.HttpProxy({\r\n    method: \"POST\",     // <-- default HTTP method when not specified.\r\n    api: {\r\n        create: 'create.php',\r\n        load: 'read.php',\r\n        save: 'save.php',\r\n        destroy: 'destroy.php'\r\n    }\r\n});\r\n\r\n// Alternatively, one can use the object-form to specify the API\r\nnew Ext.data.HttpProxy({\r\n    api: {\r\n        load: {url: 'read.php', method: 'GET'},\r\n        create: 'create.php',\r\n        destroy: 'destroy.php',\r\n        save: 'update.php'\r\n    }\r\n});\r\n        </code></pre>\r\n\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"Response","summary":"Ext.data.Response\r\nExperimental.  Do not use directly.\r\n"},{"parameters":[{"type":"Ext.data.DataProxy","optional":false,"name":"proxy","summary":""}],"return":null,"hide":false,"private":false,"name":"restify","summary":"Prepares a supplied Proxy to be RESTful.  Sets the HTTP method for each api-action to be one of\r\nGET, POST, PUT, DELETE according to the defined {@link #restActions}.\r\n"}],"events":[]},{"name":"Api.Error","fullName":"Ext.data.Api.Error","summary":"Error class for Ext.data.Api errors\r\n","package":"data","definedIn":"data\\Api.js","xtype":null,"extends":"Ext.Error","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"ArrayReader","fullName":"Ext.data.ArrayReader","summary":"<p>Data reader class to create an Array of {@link Ext.data.Record} objects from an Array.\r\nEach element of that Array represents a row of data fields. The\r\nfields are pulled into a Record object using as a subscript, the <code>mapping</code> property\r\nof the field definition if it exists, or the field's ordinal position in the definition.</p>\r\n<p>Example code:</p>\r\n<pre><code>\r\nvar Employee = Ext.data.Record.create([\r\n   {name: 'name', mapping: 1},         // \"mapping\" only needed if an \"id\" field is present which\r\n   {name: 'occupation', mapping: 2}    // precludes using the ordinal position as the index.\r\n]);\r\nvar myReader = new Ext.data.ArrayReader({\r\n   {@link #idIndex}: 0\r\n}, Employee);\r\n</code></pre>\r\n<p>This would consume an Array like this:</p>\r\n<pre><code>\r\n[ [1, 'Bill', 'Gardener'], [2, 'Ben', 'Horticulturalist'] ]\r\n</code></pre>\r\n","package":"data","definedIn":"data\\ArrayReader.js","xtype":null,"extends":"Ext.data.JsonReader","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"meta","summary":"Metadata configuration options."},{"type":"Array/Object","optional":false,"name":"recordType","summary":" <p>Either an Array of {@link Ext.data.Field Field} definition objects (which will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record} constructor created from {@link Ext.data.Record#create}.</p>"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new ArrayReader."},"subclasses":"","configOptions":[{"type":"Number","optional":false,"name":"id","summary":"Deprecated. Use {@link #idIndex} instead.\r\n"},{"type":"Number","optional":false,"name":"idIndex","summary":""},{"type":"String","optional":false,"name":"successProperty","summary":"@hide\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"An Array of row objects which represents the dataset.\r\na cache of Ext.data.Records."}],"return":{"type":"Object","summary":"data A data block which is used by an Ext.data.Store object as"},"hide":false,"private":false,"name":"readRecords","summary":"Create a data block containing Ext.data.Records from an Array.\r\n"}],"events":[]},{"name":"ArrayStore","fullName":"Ext.data.ArrayStore","summary":"<p>Formerly known as \"SimpleStore\".</p>\r\n<p>Small helper class to make creating {@link Ext.data.Store}s from Array data easier.\r\nAn ArrayStore will be automatically configured with a {@link Ext.data.ArrayReader}.</p>\r\n<p>A store configuration would be something like:<pre><code>\r\nvar store = new Ext.data.ArrayStore({\r\n    // store configs\r\n    autoDestroy: true,\r\n    storeId: 'myStore',\r\n    // reader configs\r\n    idIndex: 0,  \r\n    fields: [\r\n       'company',\r\n      {name: 'price', type: 'float'},\r\n      {name: 'change', type: 'float'},\r\n      {name: 'pctChange', type: 'float'},\r\n      {name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}\r\n    ]\r\n});\r\n</code></pre></p>\r\n<p>This store is configured to consume a returned object of the form:<pre><code>\r\nvar myData = [\r\n    ['3m Co',71.72,0.02,0.03,'9/1 12:00am'],\r\n    ['Alcoa Inc',29.01,0.42,1.47,'9/1 12:00am'],\r\n    ['Boeing Co.',75.43,0.53,0.71,'9/1 12:00am'],\r\n    ['Hewlett-Packard Co.',36.53,-0.03,-0.08,'9/1 12:00am'],\r\n    ['Wal-Mart Stores, Inc.',45.45,0.73,1.63,'9/1 12:00am']\r\n];\r\n</code></pre>\r\nAn object literal of this form could also be used as the {@link #data} config option.</p>\r\n<p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of\r\n<b>{@link Ext.data.ArrayReader ArrayReader}</b>.</p>\r\n","package":"data","definedIn":"data\\ArrayStore.js","xtype":"arraystore","extends":"Ext.data.Store","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"Connection","fullName":"Ext.data.Connection","summary":"<p>The class encapsulates a connection to the page's originating domain, allowing requests to be made\r\neither to a configured URL, or to a URL specified at request time.</p>\r\n<p>Requests made by this class are asynchronous, and will return immediately. No data from\r\nthe server will be available to the statement immediately following the {@link #request} call.\r\nTo process returned data, use a\r\n<a href=\"#request-option-success\" ext:member=\"request-option-success\" ext:cls=\"Ext.data.Connection\">success callback</a>\r\nin the request options object,\r\nor an {@link #requestcomplete event listener}.</p>\r\n<p><h3>File Uploads</h3><a href=\"#request-option-isUpload\" ext:member=\"request-option-isUpload\" ext:cls=\"Ext.data.Connection\">File uploads</a> are not performed using normal \"Ajax\" techniques, that\r\nis they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard\r\nmanner with the DOM <tt>&lt;form></tt> element temporarily modified to have its\r\n<a href=\"http://www.w3.org/TR/REC-html40/present/frames.html#adef-target\">target</a> set to refer\r\nto a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document\r\nbut removed after the return data has been gathered.</p>\r\n<p>The server response is parsed by the browser to create the document for the IFRAME. If the\r\nserver is using JSON to send the return object, then the\r\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">Content-Type</a> header\r\nmust be set to \"text/html\" in order to tell the browser to insert the text unchanged into the document body.</p>\r\n<p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode\r\n\"&lt;\" as \"&amp;lt;\", \"&amp;\" as \"&amp;amp;\" etc.</p>\r\n<p>The response text is retrieved from the document, and a fake XMLHttpRequest object\r\nis created containing a <tt>responseText</tt> property in order to conform to the\r\nrequirements of event handlers and callbacks.</p>\r\n<p>Be aware that file upload packets are sent with the content type <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">multipart/form</a>\r\nand some server technologies (notably JEE) may require some custom processing in order to\r\nretrieve parameter names and parameter values from the packet content.</p>\r\n","package":"data","definedIn":"data\\core\\Connection.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"a configuration object."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.Ajax","configOptions":[{"type":"Boolean","optional":false,"name":"autoAbort","summary":"@type Boolean\r\n"},{"type":"Object","optional":false,"name":"defaultHeaders","summary":"to each request made by this object. (defaults to undefined)\r\n"},{"type":"Boolean","optional":false,"name":"disableCaching","summary":"@type Boolean\r\n"},{"type":"String","optional":false,"name":"disableCachingParam","summary":"through a cache buster. Defaults to '_dc'\r\n@type String\r\n"},{"type":"Object","optional":false,"name":"extraParams","summary":"extra parameters to each request made by this object. (defaults to undefined)\r\n"},{"type":"String","optional":false,"name":"method","summary":"(defaults to undefined; if not set, but {@link #request} params are present, POST will be used;\r\notherwise, GET will be used.)\r\n"},{"type":"Number","optional":false,"name":"timeout","summary":""},{"type":"String","optional":false,"name":"url","summary":"<p>The <code>url</code> config may be a function which <i>returns</i> the URL to use for the Ajax request. The scope\r\n(<code><b>this</b></code> reference) of the function is the <code>scope</code> option passed to the {@link #request} method.</p>\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Number","optional":true,"name":"transactionId","summary":"defaults to the last transaction"}],"return":null,"hide":false,"private":false,"name":"abort","summary":"Aborts any outstanding request.\r\n"},{"parameters":[{"type":"Number","optional":true,"name":"transactionId","summary":"defaults to the last transaction"}],"return":{"type":"Boolean","summary":"True if there is an outstanding request."},"hide":false,"private":false,"name":"isLoading","summary":"Determine whether this object has a request outstanding.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"options","summary":"An object which may contain the following properties:<ul>\r\n<li><b>url</b> : String/Function (Optional)<div class=\"sub-desc\">The URL to\r\nwhich to send the request, or a function to call which returns a URL string. The scope of the\r\nfunction is specified by the <tt>scope</tt> option. Defaults to the configured\r\n<tt>{@link #url}</tt>.</div></li>\r\n<li><b>params</b> : Object/String/Function (Optional)<div class=\"sub-desc\">\r\nAn object containing properties which are used as parameters to the\r\nrequest, a url encoded string or a function to call to get either. The scope of the function\r\nis specified by the <tt>scope</tt> option.</div></li>\r\n<li><b>method</b> : String (Optional)<div class=\"sub-desc\">The HTTP method to use\r\nfor the request. Defaults to the configured method, or if no method was configured,\r\n\"GET\" if no parameters are being sent, and \"POST\" if parameters are being sent.  Note that\r\nthe method name is case-sensitive and should be all caps.</div></li>\r\n<li><b>callback</b> : Function (Optional)<div class=\"sub-desc\">The\r\nfunction to be called upon receipt of the HTTP response. The callback is\r\ncalled regardless of success or failure and is passed the following\r\nparameters:<ul>\r\n<li><b>options</b> : Object<div class=\"sub-desc\">The parameter to the request call.</div></li>\r\n<li><b>success</b> : Boolean<div class=\"sub-desc\">True if the request succeeded.</div></li>\r\n<li><b>response</b> : Object<div class=\"sub-desc\">The XMLHttpRequest object containing the response data.\r\nSee <a href=\"http://www.w3.org/TR/XMLHttpRequest/\">http://www.w3.org/TR/XMLHttpRequest/</a> for details about\r\naccessing elements of the response.</div></li>\r\n</ul></div></li>\r\n<li><a id=\"request-option-success\"></a><b>success</b> : Function (Optional)<div class=\"sub-desc\">The function\r\nto be called upon success of the request. The callback is passed the following\r\nparameters:<ul>\r\n<li><b>response</b> : Object<div class=\"sub-desc\">The XMLHttpRequest object containing the response data.</div></li>\r\n<li><b>options</b> : Object<div class=\"sub-desc\">The parameter to the request call.</div></li>\r\n</ul></div></li>\r\n<li><b>failure</b> : Function (Optional)<div class=\"sub-desc\">The function\r\nto be called upon failure of the request. The callback is passed the\r\nfollowing parameters:<ul>\r\n<li><b>response</b> : Object<div class=\"sub-desc\">The XMLHttpRequest object containing the response data.</div></li>\r\n<li><b>options</b> : Object<div class=\"sub-desc\">The parameter to the request call.</div></li>\r\n</ul></div></li>\r\n<li><b>scope</b> : Object (Optional)<div class=\"sub-desc\">The scope in\r\nwhich to execute the callbacks: The \"this\" object for the callback function. If the <tt>url</tt>, or <tt>params</tt> options were\r\nspecified as functions from which to draw values, then this also serves as the scope for those function calls.\r\nDefaults to the browser window.</div></li>\r\n<li><b>timeout</b> : Number (Optional)<div class=\"sub-desc\">The timeout in milliseconds to be used for this request. Defaults to 30 seconds.</div></li>\r\n<li><b>form</b> : Element/HTMLElement/String (Optional)<div class=\"sub-desc\">The <tt>&lt;form&gt;</tt>\r\nElement or the id of the <tt>&lt;form&gt;</tt> to pull parameters from.</div></li>\r\n<li><a id=\"request-option-isUpload\"></a><b>isUpload</b> : Boolean (Optional)<div class=\"sub-desc\"><b>Only meaningful when used\r\nwith the <tt>form</tt> option</b>.\r\n<p>True if the form object is a file upload (will be set automatically if the form was\r\nconfigured with <b><tt>enctype</tt></b> \"multipart/form-data\").</p>\r\n<p>File uploads are not performed using normal \"Ajax\" techniques, that is they are <b>not</b>\r\nperformed using XMLHttpRequests. Instead the form is submitted in the standard manner with the\r\nDOM <tt>&lt;form></tt> element temporarily modified to have its\r\n<a href=\"http://www.w3.org/TR/REC-html40/present/frames.html#adef-target\">target</a> set to refer\r\nto a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document\r\nbut removed after the return data has been gathered.</p>\r\n<p>The server response is parsed by the browser to create the document for the IFRAME. If the\r\nserver is using JSON to send the return object, then the\r\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">Content-Type</a> header\r\nmust be set to \"text/html\" in order to tell the browser to insert the text unchanged into the document body.</p>\r\n<p>The response text is retrieved from the document, and a fake XMLHttpRequest object\r\nis created containing a <tt>responseText</tt> property in order to conform to the\r\nrequirements of event handlers and callbacks.</p>\r\n<p>Be aware that file upload packets are sent with the content type <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">multipart/form</a>\r\nand some server technologies (notably JEE) may require some custom processing in order to\r\nretrieve parameter names and parameter values from the packet content.</p>\r\n</div></li>\r\n<li><b>headers</b> : Object (Optional)<div class=\"sub-desc\">Request\r\nheaders to set for the request.</div></li>\r\n<li><b>xmlData</b> : Object (Optional)<div class=\"sub-desc\">XML document\r\nto use for the post. Note: This will be used instead of params for the post\r\ndata. Any params will be appended to the URL.</div></li>\r\n<li><b>jsonData</b> : Object/String (Optional)<div class=\"sub-desc\">JSON\r\ndata to use as the post. Note: This will be used instead of params for the post\r\ndata. Any params will be appended to the URL.</div></li>\r\n<li><b>disableCaching</b> : Boolean (Optional)<div class=\"sub-desc\">True\r\nto add a unique cache-buster param to GET requests.</div></li>\r\n</ul></p>\r\n<p>The options object may also contain any other property which might be needed to perform\r\npostprocessing in a callback because it is passed to callback functions.</p>\r\nto cancel the request."}],"return":{"type":"Number","summary":"transactionId The id of the server transaction. This may be used"},"hide":false,"private":false,"name":"request","summary":"<p>Sends an HTTP request to a remote server.</p>\r\n<p><b>Important:</b> Ajax server requests are asynchronous, and this call will\r\nreturn before the response has been received. Process any returned data\r\nin a callback function.</p>\r\n<pre><code>\r\nExt.Ajax.request({\r\n   url: 'ajax_demo/sample.json',\r\n   success: function (response, opts) {\r\n      var obj = Ext.decode(response.responseText);\r\n      console.dir(obj);\r\n   },\r\n   failure: function (response, opts) {\r\n      console.log('server-side failure with status code ' + response.status);\r\n   }\r\n});\r\n</code></pre>\r\n<p>To execute a callback function in the correct scope, use the <tt>scope</tt> option.</p>\r\n"}],"events":[{"parameters":[{"type":"Connection","optional":false,"name":"conn","summary":"This Connection object."},{"type":"Object","optional":false,"name":"options","summary":"The options config object passed to the {@link #request} method."}],"name":"beforerequest","summary":"Fires before a network request is made to retrieve a data object."},{"parameters":[{"type":"Connection","optional":false,"name":"conn","summary":"This Connection object."},{"type":"Object","optional":false,"name":"response","summary":"The XHR object containing the response data."},{"type":"Object","optional":false,"name":"options","summary":"The options config object passed to the {@link #request} method."}],"name":"requestcomplete","summary":"Fires if the request was successfully completed. See <a href=\"http://www.w3.org/TR/XMLHttpRequest/\">The XMLHttpRequest Object</a> for details."},{"parameters":[{"type":"Connection","optional":false,"name":"conn","summary":"This Connection object."},{"type":"Object","optional":false,"name":"response","summary":"The XHR object containing the response data."},{"type":"Object","optional":false,"name":"options","summary":"The options config object passed to the {@link #request} method."}],"name":"requestexception","summary":"Fires if an error HTTP status was returned from the server. See <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">HTTP Status Code Definitions</a> for details of HTTP status codes. See <a href=\"http://www.w3.org/TR/XMLHttpRequest/\">The XMLHttpRequest Object</a> for details."}]},{"name":"DataProxy","fullName":"Ext.data.DataProxy","summary":"<p>Abstract base class for implementations which provide retrieval of unformatted data objects.\r\nThis class is intended to be extended and should not be created directly. For existing implementations,\r\nsee {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and\r\n{@link Ext.data.MemoryProxy}.</p>\r\n<p>DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}\r\n(of the appropriate type which knows how to parse the data object) to provide a block of\r\n{@link Ext.data.Records} to an {@link Ext.data.Store}.</p>\r\n<p>The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the\r\nconfig object to an {@link Ext.data.Connection}.</p>\r\n<p>Custom implementations must implement either the <code><b>doRequest</b></code> method (preferred) or the\r\n<code>load</code> method (deprecated). See\r\n{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or\r\n{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.</p>\r\n<p><b><u>Example 1</u></b></p>\r\n<pre><code>\r\nproxy: new Ext.data.ScriptTagProxy({\r\n   {@link Ext.data.Connection#url url}: 'http://extjs.com/forum/topics-remote.php'\r\n}),\r\n</code></pre>\r\n<p><b><u>Example 2</u></b></p>\r\n<pre><code>\r\nproxy : new Ext.data.HttpProxy({\r\n   {@link Ext.data.Connection#method method}: 'GET',\r\n   {@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,\r\n   {@link Ext.data.Connection#url url}: 'local/default.php', // see options parameter for {@link Ext.Ajax#request}\r\n   {@link #api}: {\r\n        // all actions except the following will use above url\r\n        create  : 'local/new.php',\r\n        update  : 'local/update.php'\r\n    }\r\n}),\r\n</code></pre>\r\n","package":"data","definedIn":"data\\DataProxy.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.data.DirectProxy,Ext.data.HttpProxy,Ext.data.MemoryProxy,Ext.data.ScriptTagProxy","configOptions":[{"type":"Object","optional":false,"name":"api","summary":"Specific urls to call on CRUD action methods \"read\", \"create\", \"update\" and \"destroy\".\r\nDefaults to:<pre><code>\r\napi: {\r\n    read    : undefined,\r\n    create  : undefined,\r\n    update  : undefined,\r\n    destroy : undefined\r\n}\r\n</code></pre>\r\n<p>The url is built based upon the action being executed <tt>[load|create|save|destroy]</tt>\r\nusing the commensurate <tt>{@link #api}</tt> property, or if undefined default to the\r\nconfigured {@link Ext.data.Store}.{@link Ext.data.Store#url url}.</p><br>\r\n<p>For example:</p>\r\n<pre><code>\r\napi: {\r\n    load :    '/controller/load',\r\n    create :  '/controller/new',  // Server MUST return idProperty of new record\r\n    save :    '/controller/update',\r\n    destroy : '/controller/destroy_action'\r\n}\r\n\r\n// Alternatively, one can use the object-form to specify each API-action\r\napi: {\r\n    load: {url: 'read.php', method: 'GET'},\r\n    create: 'create.php',\r\n    destroy: 'destroy.php',\r\n    save: 'update.php'\r\n}\r\n</code></pre>\r\n<p>If the specific URL for a given CRUD action is undefined, the CRUD action request\r\nwill be directed to the configured <tt>{@link Ext.data.Connection#url url}</tt>.</p>\r\n<br><p><b>Note</b>: To modify the URL for an action dynamically the appropriate API\r\nproperty should be modified before the action is requested using the corresponding before\r\naction event.  For example to modify the URL associated with the load action:\r\n<pre><code>\r\n// modify the url for the action\r\nmyStore.on({\r\n    beforeload: {\r\n        fn: function (store, options) {\r\n            // use <tt>{@link Ext.data.HttpProxy#setUrl setUrl}</tt> to change the URL for *just* this request.\r\n            store.proxy.setUrl('changed1.php');\r\n\r\n            // set optional second parameter to true to make this URL change\r\n            // permanent, applying this URL for all subsequent requests.\r\n            store.proxy.setUrl('changed1.php', true);\r\n\r\n            // Altering the proxy API should be done using the public\r\n            // method <tt>{@link Ext.data.DataProxy#setApi setApi}</tt>.\r\n            store.proxy.setApi('read', 'changed2.php');\r\n\r\n            // Or set the entire API with a config-object.\r\n            // When using the config-object option, you must redefine the <b>entire</b>\r\n            // API -- not just a specific action of it.\r\n            store.proxy.setApi({\r\n                read    : 'changed_read.php',\r\n                create  : 'changed_create.php',\r\n                update  : 'changed_update.php',\r\n                destroy : 'changed_destroy.php'\r\n            });\r\n        }\r\n    }\r\n});\r\n</code></pre>\r\n</p>\r\n"},{"type":"Boolean","optional":false,"name":"restful","summary":"<p>Defaults to <tt>false</tt>.  Set to <tt>true</tt> to operate in a RESTful manner.</p>\r\n<br><p> Note: this parameter will automatically be set to <tt>true</tt> if the\r\n{@link Ext.data.Store} it is plugged into is set to <code>restful: true</code>. If the\r\nStore is RESTful, there is no need to set this option on the proxy.</p>\r\n<br><p>RESTful implementations enable the serverside framework to automatically route\r\nactions sent to one url based upon the HTTP method, for example:\r\n<pre><code>\r\nstore: new Ext.data.Store({\r\n    restful: true,\r\n    proxy: new Ext.data.HttpProxy({url:'/users'}); // all requests sent to /users\r\n    ...\r\n)}\r\n</code></pre>\r\nIf there is no <code>{@link #api}</code> specified in the configuration of the proxy,\r\nall requests will be marshalled to a single RESTful url (/users) so the serverside\r\nframework can inspect the HTTP Method and act accordingly:\r\n<pre>\r\n<u>Method</u>   <u>url</u>        <u>action</u>\r\nPOST     /users     create\r\nGET      /users     read\r\nPUT      /users/23  update\r\nDESTROY  /users/23  delete\r\n</pre></p>\r\n<p>If set to <tt>true</tt>, a {@link Ext.data.Record#phantom non-phantom} record's\r\n{@link Ext.data.Record#id id} will be appended to the url. Some MVC (e.g., Ruby on Rails,\r\nMerb and Django) support segment based urls where the segments in the URL follow the\r\nModel-View-Controller approach:<pre><code>\r\nsomeSite.com/controller/action/id\r\n</code></pre>\r\nWhere the segments in the url are typically:<div class=\"mdetail-params\"><ul>\r\n<li>The first segment : represents the controller class that should be invoked.</li>\r\n<li>The second segment : represents the class function, or method, that should be called.</li>\r\n<li>The third segment : represents the ID (a variable typically passed to the method).</li>\r\n</ul></div></p>\r\n<br><p>Refer to <code>{@link Ext.data.DataProxy#api}</code> for additional information.</p>\r\n"},{"type":"Function","optional":false,"name":"doRequest","summary":"(e.g.: {@link Ext.data.HttpProxy#doRequest HttpProxy.doRequest},\r\n{@link Ext.data.DirectProxy#doRequest DirectProxy.doRequest}).\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"String/Object","optional":false,"name":"api","summary":"An API specification object, or the name of an action."},{"type":"String/Function","optional":false,"name":"url","summary":"The URL (or function if using DirectProxy) to call for the action."}],"return":null,"hide":false,"private":false,"name":"setApi","summary":"<p>Redefines the Proxy's API or a single action of an API. Can be called with two method signatures.</p>\r\n<p>If called with an object as the only parameter, the object should redefine the <b>entire</b> API, e.g.:</p><pre><code>\r\nproxy.setApi({\r\n    read    : '/users/read',\r\n    create  : '/users/create',\r\n    update  : '/users/update',\r\n    destroy : '/users/destroy'\r\n});\r\n</code></pre>\r\n<p>If called with two parameters, the first parameter should be a string specifying the API action to\r\nredefine and the second parameter should be the URL (or function if using DirectProxy) to call for that action, e.g.:</p><pre><code>\r\nproxy.setApi(Ext.data.Api.actions.read, '/users/new_load_url');\r\n</code></pre>\r\n"},{"parameters":[{"type":"String [Ext.data.Api.CREATE|READ|UPDATE|DESTROY]","optional":false,"name":"action","summary":""}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isApiAction","summary":"Returns true if the specified action is defined as a unique action in the api-config.\r\nrequest.  If all API-actions are routed to unique urls, the xaction parameter is unecessary.  However, if no api is defined\r\nand all Proxy actions are routed to DataProxy#url, the server-side will require the xaction parameter to perform a switch to\r\nthe corresponding code for CRUD action.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"action","summary":"Name of the action"},{"type":"Ext.data.Record/Ext.data.Record[]/null","optional":false,"name":"rs","summary":"Will be null when action is 'load'"},{"type":"Object","optional":false,"name":"params","summary":""},{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":""},{"type":"Function","optional":false,"name":"callback","summary":""},{"type":"Object","optional":false,"name":"scope","summary":"Scope with which to call the callback (defaults to the Proxy object)"},{"type":"Object","optional":false,"name":"options","summary":"Any options specified for the action (e.g. see {@link Ext.data.Store#load}."}],"return":null,"hide":false,"private":false,"name":"request","summary":"All proxy actions are executed through this method.  Automatically fires the \"before\" + action event\r\n"}],"events":[{"parameters":[{"type":"DataProxy","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"type","summary":""},{"type":"String","optional":false,"name":"action","summary":"Name of the action (see {@link Ext.data.Api#actions}."},{"type":"Object","optional":false,"name":"options","summary":"The options for the action that were specified in the {@link #request}."},{"type":"Object","optional":false,"name":"response","summary":""},{"type":"Mixed","optional":false,"name":"arg","summary":""}],"name":"exception","summary":"<p>Fires if an exception occurs in the Proxy during a remote request. This event is relayed through a corresponding {@link Ext.data.Store}.{@link Ext.data.Store#exception exception}, so any Store instance may observe this event. This event can be fired for one of two reasons:</p> <div class=\"mdetail-params\"><ul> <li>remote-request <b>failed</b> : <div class=\"sub-desc\"> The server did not return status === 200. </div></li> <li>remote-request <b>succeeded</b> : <div class=\"sub-desc\"> The remote-request succeeded but the reader could not read the response. This means the server returned data, but the configured Reader threw an error while reading the response. In this case, this event will be raised and the caught error will be passed along into this event. </div></li> </ul></div> <br><p>This event fires with two different contexts based upon the 2nd parameter <tt>type [remote|response]</tt>. The first four parameters are identical between the two contexts -- only the final two parameters differ.</p> <p>The value of this parameter will be either <tt>'response'</tt> or <tt>'remote'</tt>.</p> <div class=\"mdetail-params\"><ul> <li><b><tt>'response'</tt></b> : <div class=\"sub-desc\"> <p>An <b>invalid</b> response from the server was returned: either 404, 500 or the response meta-data does not match that defined in the DataReader (e.g.: root, idProperty, successProperty).</p> </div></li> <li><b><tt>'remote'</tt></b> : <div class=\"sub-desc\"> <p>A <b>valid</b> response was returned from the server having successProperty === false. This response might contain an error-message sent from the server. For example, the user may have failed authentication/authorization or a database validation error occurred.</p> </div></li> </ul></div> <p>The value of this parameter depends on the value of the <code>type</code> parameter:</p> <div class=\"mdetail-params\"><ul> <li><b><tt>'response'</tt></b> : <div class=\"sub-desc\"> <p>The raw browser response object (e.g.: XMLHttpRequest)</p> </div></li> <li><b><tt>'remote'</tt></b> : <div class=\"sub-desc\"> <p>The decoded response object sent from the server.</p> </div></li> </ul></div> <p>The type and value of this parameter depends on the value of the <code>type</code> parameter:</p> <div class=\"mdetail-params\"><ul> <li><b><tt>'response'</tt></b> : Error<div class=\"sub-desc\"> <p>The JavaScript Error object caught if the configured Reader could not read the data. If the remote request returns success===false, this parameter will be null.</p> </div></li> <li><b><tt>'remote'</tt></b> : Record/Record[]<div class=\"sub-desc\"> <p>This parameter will only exist if the <tt>action</tt> was a <b>write</b> action (Ext.data.Api.actions.create|update|destroy).</p> </div></li> </ul></div>."},{"parameters":[{"type":"DataProxy","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"params","summary":"The params object passed to the {@link #request} function"}],"name":"beforeload","summary":"Fires before a request to retrieve a data object."},{"parameters":[{"type":"DataProxy","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"o","summary":"The request transaction object"},{"type":"Object","optional":false,"name":"options","summary":"The callback's <tt>options</tt> property as passed to the {@link #request} function"}],"name":"load","summary":"Fires before the load method's callback is called."},{"parameters":[{"type":"misc","optional":false,"name":"misc","summary":"See {@link #exception}."}],"name":"loadexception","summary":"<p>This event is <b>deprecated</b>. The signature of the loadexception event varies depending on the proxy, use the catch-all {@link #exception} event instead. This event will fire in addition to the {@link #exception} event.</p> @deprecated."},{"parameters":[{"type":"DataProxy","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"action","summary":"[Ext.data.Api.actions.create|update|destroy]"},{"type":"Record/Array[Record]","optional":false,"name":"rs","summary":"The Record(s) to create|update|destroy."},{"type":"Object","optional":false,"name":"params","summary":"The request <code>params</code> object.  Edit <code>params</code> to add parameters to the request."}],"name":"beforewrite","summary":"Fires before a request is generated for one of the actions Ext.data.Api.actions.create|update|destroy."},{"parameters":[{"type":"DataProxy","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"action","summary":"[Ext.data.Api.actions.create|upate|destroy]"},{"type":"Object","optional":false,"name":"data","summary":"The data object extracted from the server-response"},{"type":"Object","optional":false,"name":"response","summary":"The decoded response from server"},{"type":"Record/Record{}","optional":false,"name":"rs","summary":"The records from Store"},{"type":"Object","optional":false,"name":"options","summary":"The callback's <tt>options</tt> property as passed to the {@link #request} function"}],"name":"write","summary":"Fires before the request-callback is called."}]},{"name":"DataProxy.Error","fullName":"Ext.data.DataProxy.Error","summary":"DataProxy Error extension.\r\nconstructor\r\n","package":"data","definedIn":"data\\DataProxy.js","xtype":null,"extends":"Ext.Error","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[],"return":null,"hide":false,"private":false,"name":null,"summary":null},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"DataReader","fullName":"Ext.data.DataReader","summary":"Abstract base class for reading structured data from a data source and converting\r\nit into an object containing {@link Ext.data.Record} objects and metadata for use\r\nby an {@link Ext.data.Store}.  This class is intended to be extended and should not\r\nbe created directly. For existing implementations, see {@link Ext.data.ArrayReader},\r\n{@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}.\r\n","package":"data","definedIn":"data\\DataReader.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"meta","summary":"Metadata configuration options (implementation-specific)."},{"type":"Array/Object","optional":false,"name":"recordType","summary":" <p>Either an Array of {@link Ext.data.Field Field} definition objects (which will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record} constructor created using {@link Ext.data.Record#create}.</p>"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.data.JsonReader,Ext.data.XmlReader","configOptions":[{"type":"Array/Object","optional":false,"name":"fields","summary":"<p>Either an Array of {@link Ext.data.Field Field} definition objects (which\r\nwill be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}\r\nconstructor created from {@link Ext.data.Record#create}.</p>\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"meta","summary":"This DataReader's configured metadata as passed to the constructor.\r\n"}],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"data","summary":""}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isData","summary":"Returns true if the supplied data-hash <b>looks</b> and quacks like data.  Checks to see if it has a key\r\ncorresponding to idProperty defined in your DataReader config containing non-empty pk.\r\n"},{"parameters":[{"type":"Record/Record[]","optional":false,"name":"record","summary":"The phantom record to be realized."},{"type":"Object/Object[]","optional":false,"name":"data","summary":"The new record data to apply.  Must include the primary-key from database defined in idProperty field."}],"return":null,"hide":false,"private":false,"name":"realize","summary":"Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.\r\nYou <b>must</b> return at least the database pk using the idProperty defined in your DataReader configuration.  The incoming\r\ndata from server will be merged with the data in the local record.\r\nIn addition, you <b>must</b> return record-data from the server in the same order received.\r\nWill perform a commit as well, un-marking dirty-fields.  Store's \"update\" event will be suppressed.\r\n"},{"parameters":[{"type":"Record/Record[]","optional":false,"name":"rs","summary":""},{"type":"Object/Object[]","optional":false,"name":"data","summary":""}],"return":null,"hide":false,"private":false,"name":"update","summary":"Used for updating a non-phantom or \"real\" record's data with fresh data from server after remote-save.\r\nIf returning data from multiple-records after a batch-update, you <b>must</b> return record-data from the server in\r\nthe same order received.  Will perform a commit as well, un-marking dirty-fields.  Store's \"update\" event will be\r\nsuppressed as the record receives fresh new data-hash\r\n"}],"events":[]},{"name":"DataReader.Error","fullName":"Ext.data.DataReader.Error","summary":"General error class for Ext.data.DataReader\r\n","package":"data","definedIn":"data\\DataReader.js","xtype":null,"extends":"Ext.Error","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"DataWriter","fullName":"Ext.data.DataWriter","summary":"<p>Ext.data.DataWriter facilitates create, update, and destroy actions between\r\nan Ext.data.Store and a server-side framework. A Writer enabled Store will\r\nautomatically manage the Ajax requests to perform CRUD actions on a Store.</p>\r\n<p>Ext.data.DataWriter is an abstract base class which is intended to be extended\r\nand should not be created directly. For existing implementations, see\r\n{@link Ext.data.JsonWriter}.</p>\r\n<p>Creating a writer is simple:</p>\r\n<pre><code>\r\nvar writer = new Ext.data.JsonWriter();\r\n</code></pre>\r\n<p>The proxy for a writer enabled store can be configured with a simple <code>url</code>:</p>\r\n<pre><code>\r\n// Create a standard HttpProxy instance.\r\nvar proxy = new Ext.data.HttpProxy({\r\n    url: 'app.php/users'\r\n});\r\n</code></pre>\r\n<p>For finer grained control, the proxy may also be configured with an <code>api</code>:</p>\r\n<pre><code>\r\n// Use the api specification\r\nvar proxy = new Ext.data.HttpProxy({\r\n    api: {\r\n        read    : 'app.php/users/read',\r\n        create  : 'app.php/users/create',\r\n        update  : 'app.php/users/update',\r\n        destroy : 'app.php/users/destroy'\r\n    }\r\n});\r\n</code></pre>\r\n<p>Creating a Writer enabled store:</p>\r\n<pre><code>\r\nvar store = new Ext.data.Store({\r\n    proxy: proxy,\r\n    reader: reader,\r\n    writer: writer\r\n});\r\n</code></pre>\r\n","package":"data","definedIn":"data\\DataWriter.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"meta","summary":"Metadata configuration options (implementation-specific)"},{"type":"Object","optional":false,"name":"recordType","summary":"Either an Array of field definition objects as specified in {@link Ext.data.Record#create}, or an {@link Ext.data.Record} object created using {@link Ext.data.Record#create}."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.data.JsonWriter,Ext.data.XmlWriter","configOptions":[{"type":"Boolean","optional":false,"name":"writeAllFields","summary":"<tt>false</tt> by default.  Set <tt>true</tt> to have DataWriter return ALL fields of a modified\r\nrecord -- not just those that changed.\r\n<tt>false</tt> to have DataWriter only request modified fields from a record.\r\n"},{"type":"Boolean","optional":false,"name":"listful","summary":"<tt>false</tt> by default.  Set <tt>true</tt> to have the DataWriter <b>always</b> write HTTP params as a list,\r\neven when acting upon a single record.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"meta","summary":"This DataWriter's configured metadata as passed to the constructor.\r\n"}],"methods":[{"parameters":[{"type":"String","optional":false,"name":"action","summary":"[CREATE|UPDATE|DESTROY]"},{"type":"Object","optional":false,"name":"params","summary":"The params-hash to write-to"},{"type":"Record/Record[]","optional":false,"name":"rs","summary":"The recordset write."}],"return":null,"hide":false,"private":false,"name":"write","summary":"Writes data in preparation for server-write action.  Simply proxies to DataWriter#update, DataWriter#create\r\nDataWriter#destroy.\r\n"}],"events":[]},{"name":"DirectProxy","fullName":"Ext.data.DirectProxy","summary":"","package":"data","definedIn":"data\\DirectProxy.js","xtype":null,"extends":"Ext.data.DataProxy","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Array/String","optional":false,"name":"paramOrder","summary":"server side.  Specify the params in the order in which they must be executed on the server-side\r\nas either (1) an Array of String values, or (2) a String of params delimited by either whitespace,\r\ncomma, or pipe. For example,\r\nany of the following would be acceptable:<pre><code>\r\nparamOrder: ['param1','param2','param3']\r\nparamOrder: 'param1 param2 param3'\r\nparamOrder: 'param1,param2,param3'\r\nparamOrder: 'param1|param2|param'\r\n     </code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"paramsAsHash","summary":"Send parameters as a collection of named arguments (defaults to <tt>true</tt>). Providing a\r\n<tt>{@link #paramOrder}</tt> nullifies this configuration.\r\n"},{"type":"Function","optional":false,"name":"directFn","summary":"Function to call when executing a request.  directFn is a simple alternative to defining the api configuration-parameter\r\nfor Store's which will not implement a full CRUD api.\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"DirectStore","fullName":"Ext.data.DirectStore","summary":"<p>Small helper class to create an {@link Ext.data.Store} configured with an\r\n{@link Ext.data.DirectProxy} and {@link Ext.data.JsonReader} to make interacting\r\nwith an {@link Ext.Direct} Server-side {@link Ext.direct.Provider Provider} easier.\r\nTo create a different proxy/reader combination create a basic {@link Ext.data.Store}\r\nconfigured as needed.</p>\r\n\r\n<p><b>*Note:</b> Although they are not listed, this class inherits all of the config options of:</p>\r\n<div><ul class=\"mdetail-params\">\r\n<li><b>{@link Ext.data.Store Store}</b></li>\r\n<div class=\"sub-desc\"><ul class=\"mdetail-params\">\r\n\r\n</ul></div>\r\n<li><b>{@link Ext.data.JsonReader JsonReader}</b></li>\r\n<div class=\"sub-desc\"><ul class=\"mdetail-params\">\r\n<li><tt><b>{@link Ext.data.JsonReader#root root}</b></tt></li>\r\n<li><tt><b>{@link Ext.data.JsonReader#idProperty idProperty}</b></tt></li>\r\n<li><tt><b>{@link Ext.data.JsonReader#totalProperty totalProperty}</b></tt></li>\r\n</ul></div>\r\n\r\n<li><b>{@link Ext.data.DirectProxy DirectProxy}</b></li>\r\n<div class=\"sub-desc\"><ul class=\"mdetail-params\">\r\n<li><tt><b>{@link Ext.data.DirectProxy#directFn directFn}</b></tt></li>\r\n<li><tt><b>{@link Ext.data.DirectProxy#paramOrder paramOrder}</b></tt></li>\r\n<li><tt><b>{@link Ext.data.DirectProxy#paramsAsHash paramsAsHash}</b></tt></li>\r\n</ul></div>\r\n</ul></div>\r\n\r\n\r\n","package":"data","definedIn":"data\\DirectStore.js","xtype":"directstore","extends":"Ext.data.Store","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Field","fullName":"Ext.data.Field","summary":"<p>This class encapsulates the field definition information specified in the field definition objects\r\npassed to {@link Ext.data.Record#create}.</p>\r\n<p>Developers do not need to instantiate this class. Instances are created by {@link Ext.data.Record.create}\r\nand cached in the {@link Ext.data.Record#fields fields} property of the created Record constructor's <b>prototype.</b></p>\r\n","package":"data","definedIn":"data\\DataField.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":true,"name":"allowBlank","summary":"Used for validating a {@link Ext.data.Record record}, defaults to <tt>true</tt>.\r\nAn empty value here will cause {@link Ext.data.Record}.{@link Ext.data.Record#isValid isValid}\r\nto evaluate to <tt>false</tt>."},{"type":"Function","optional":true,"name":"convert","summary":"A function which converts the value provided by the Reader into an object that will be stored\r\nin the Record. It is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><b>v</b> : Mixed<div class=\"sub-desc\">The data value as read by the Reader, if undefined will use\r\nthe configured <tt>{@link Ext.data.Field#defaultValue defaultValue}</tt>.</div></li>\r\n<li><b>rec</b> : Mixed<div class=\"sub-desc\">The data object containing the row as read by the Reader.\r\nDepending on the Reader type, this could be an Array ({@link Ext.data.ArrayReader ArrayReader}), an object\r\n({@link Ext.data.JsonReader JsonReader}), or an XML element ({@link Ext.data.XMLReader XMLReader}).</div></li>\r\n</ul></div>\r\n<pre><code>\r\n// example of convert function\r\nfunction fullName(v, record) {\r\n    return record.name.last + ', ' + record.name.first;\r\n}\r\n\r\nfunction location(v, record) {\r\n    return !record.city ? '' : (record.city + ', ' + record.state);\r\n}\r\n\r\nvar Dude = Ext.data.Record.create([\r\n   {name: 'fullname',  convert: fullName},\r\n   {name: 'firstname', mapping: 'name.first'},\r\n   {name: 'lastname',  mapping: 'name.last'},\r\n   {name: 'city', defaultValue: 'homeless'},\r\n    'state',\r\n   {name: 'location',  convert: location}\r\n]);\r\n\r\n// create the data store\r\nvar store = new Ext.data.Store({\r\n    reader: new Ext.data.JsonReader(\r\n       {\r\n            idProperty: 'key',\r\n            root: 'daRoot',  \r\n            totalProperty: 'total'\r\n        },\r\n        Dude  // recordType\r\n    )\r\n});\r\n\r\nvar myData = [\r\n   { key: 1,\r\n      name: { first: 'Fat',    last:  'Albert' }\r\n      // notice no city, state provided in data object\r\n    },\r\n   { key: 2,\r\n      name: { first: 'Barney', last:  'Rubble' },\r\n      city: 'Bedrock', state: 'Stoneridge'\r\n    },\r\n   { key: 3,\r\n      name: { first: 'Cliff',  last:  'Claven' },\r\n      city: 'Boston',  state: 'MA'\r\n    }\r\n];\r\n</code></pre>"},{"type":"String","optional":true,"name":"dateFormat","summary":"A format string for the {@link Date#parseDate Date.parseDate} function, or \"timestamp\" if the\r\nvalue provided by the Reader is a UNIX timestamp, or \"time\" if the value provided by the Reader is a\r\njavascript millisecond timestamp."},{"type":"Mixed","optional":true,"name":"defaultValue","summary":"The default value used <b>when a Record is being created by a {@link Ext.data.Reader Reader}</b>\r\nwhen the item referenced by the <tt>{@link Ext.data.Field#mapping mapping}</tt> does not exist in the data\r\nobject (i.e. undefined). (defaults to \"\")"},{"type":"String/Number","optional":true,"name":"mapping","summary":"<p>A path expression for use by the {@link Ext.data.DataReader} implementation\r\nthat is creating the {@link Ext.data.Record Record} to extract the Field value from the data object.\r\nIf the path expression is the same as the field name, the mapping may be omitted.</p>\r\n<p>The form of the mapping expression depends on the Reader being used.</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.data.JsonReader}<div class=\"sub-desc\">The mapping is a string containing the javascript\r\nexpression to reference the data from an element of the data item's {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.</div></li>\r\n<li>{@link Ext.data.XmlReader}<div class=\"sub-desc\">The mapping is an {@link Ext.DomQuery} path to the data\r\nitem relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.</div></li>\r\n<li>{@link Ext.data.ArrayReader}<div class=\"sub-desc\">The mapping is a number indicating the Array index\r\nof the field's value. Defaults to the field specification's Array position.</div></li>\r\n</ul></div>\r\n<p>If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}\r\nfunction. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to\r\nreturn the desired data.</p>"},{"type":"String","optional":false,"name":"name","summary":"The name by which the field is referenced within the Record. This is referenced by, for example,\r\nthe <tt>dataIndex</tt> property in column definition objects passed to {@link Ext.grid.ColumnModel}.\r\n<p>Note: In the simplest case, if no properties other than <tt>name</tt> are required, a field\r\ndefinition may consist of just a String for the field name.</p>\r\n"},{"type":"String","optional":true,"name":"sortDir","summary":"Initial direction to sort (<tt>\"ASC\"</tt> or  <tt>\"DESC\"</tt>).  Defaults to\r\n<tt>\"ASC\"</tt>."},{"type":"Function","optional":true,"name":"sortType","summary":"A function which converts a Field's value to a comparable value in order to ensure\r\ncorrect sort ordering. Predefined functions are provided in {@link Ext.data.SortTypes}. A custom\r\nsort example:<pre><code>\r\n// current sort     after sort we want\r\n// +-+------+          +-+------+\r\n// |1|First |          |1|First |\r\n// |2|Last  |          |3|Second|\r\n// |3|Second|          |2|Last  |\r\n// +-+------+          +-+------+\r\n\r\nsortType: function (value) {\r\n   switch (value.toLowerCase()) // native toLowerCase():\r\n  {\r\n      case 'first': return 1;\r\n      case 'second': return 2;\r\n      default: return 3;\r\n   }\r\n}\r\n</code></pre>"},{"type":"String","optional":true,"name":"type","summary":"The data type for conversion to displayable value if <tt>{@link Ext.data.Field#convert convert}</tt>\r\nhas not been specified. Possible values are\r\n<div class=\"mdetail-params\"><ul>\r\n<li>auto (Default, implies no conversion)</li>\r\n<li>string</li>\r\n<li>int</li>\r\n<li>float</li>\r\n<li>boolean</li>\r\n<li>date</li></ul></div>"}],"properties":[],"methods":[],"events":[]},{"name":"GroupingStore","fullName":"Ext.data.GroupingStore","summary":"A specialized store implementation that provides for grouping records by one of the available fields. This\r\nis usually used in conjunction with an {@link Ext.grid.GroupingView} to proved the data model for\r\na grouped GridPanel.\r\n","package":"data","definedIn":"data\\GroupingStore.js","xtype":"groupingstore","extends":"Ext.data.Store","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A config object containing the objects needed for the Store to access data, and read the data into Records."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new GroupingStore."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"groupField","summary":"The field name by which to sort the store's data (defaults to '').\r\n"},{"type":"Boolean","optional":false,"name":"groupOnSort","summary":"True to sort the data on the grouping field when a grouping operation occurs, false to sort based on the\r\nexisting sort info (defaults to false).\r\n"},{"type":"Boolean","optional":false,"name":"remoteGroup","summary":"True if the grouping should apply on the server side, false if it is local only (defaults to false).  If the\r\ngrouping is local, it can be applied immediately to the data.  If it is remote, then it will simply act as a\r\nhelper, automatically sending the grouping field name as the 'groupBy' param with each XHR call.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearGrouping","summary":"Clears any existing grouping and refreshes the data using the default sort.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"field","summary":"The field name by which to sort the store's data"},{"type":"Boolean","optional":true,"name":"forceRegroup","summary":"True to force the group to be refreshed even if the field passed\r\nin is the same as the current grouping field, false to skip grouping on the same field (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"groupBy","summary":"Groups the data by the specified field.\r\n"}],"events":[]},{"name":"HttpProxy","fullName":"Ext.data.HttpProxy","summary":"<p>An implementation of {@link Ext.data.DataProxy} that processes data requests within the same\r\ndomain of the originating page.</p>\r\n<p><b>Note</b>: this class cannot be used to retrieve data from a domain other\r\nthan the domain from which the running page was served. For cross-domain requests, use a\r\n{@link Ext.data.ScriptTagProxy ScriptTagProxy}.</p>\r\n<p>Be aware that to enable the browser to parse an XML document, the server must set\r\nthe Content-Type header in the HTTP response to \"<tt>text/xml</tt>\".</p>\r\n","package":"data","definedIn":"data\\HttpProxy.js","xtype":null,"extends":"Ext.data.DataProxy","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"conn","summary":" An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}. <p>Note that if this HttpProxy is being used by a (@link Ext.data.Store Store}, then the Store's call to {@link #load} will override any specified <tt>callback</tt> and <tt>params</tt> options. In this case, use the Store's {@link Ext.data.Store#events events} to modify parameters, or react to loading events. The Store's {@link Ext.data.Store#baseParams baseParams} may also be used to pass parameters known at instantiation time.</p> <p>If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make the request.</p>"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[{"type":null,"static":false,"hide":false,"private":false,"name":"conn","summary":"The Connection object (Or options parameter to {@link Ext.Ajax#request}) which this HttpProxy\r\nuses to make requests to the server. Properties of this object may be changed dynamically to\r\nchange the way data is requested.\r\n"}],"methods":[{"parameters":[],"return":{"type":"Connection","summary":"The Connection object. This object may be used to subscribe to events on"},"hide":false,"private":false,"name":"getConnection","summary":"Return the {@link Ext.data.Connection} object being used by this Proxy.\r\na finer-grained basis than the DataProxy events.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"url","summary":""},{"type":"Boolean","optional":true,"name":"makePermanent","summary":"[false]\r\n\r\n(e.g.: beforeload, beforesave, etc)."}],"return":null,"hide":false,"private":false,"name":"setUrl","summary":"Used for overriding the url used for a single request.  Designed to be called during a beforeaction event.  Calling setUrl\r\nwill override any urls set via the api configuration parameter.  Set the optional parameter makePermanent to set the url for\r\nall subsequent requests.  If not set to makePermanent, the next request will use the same url or api configuration defined\r\nin the initial proxy configuration.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"action","summary":"The crud action type (create, read, update, destroy)"},{"type":"Ext.data.Record/Ext.data.Record[]","optional":false,"name":"rs","summary":"If action is load, rs will be null"},{"type":"Object","optional":false,"name":"params","summary":"An object containing properties which are to be used as HTTP parameters\r\nfor the request to the remote server."},{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":"The Reader object which converts the data\r\nobject into a block of Ext.data.Records."},{"type":"Function","optional":false,"name":"callback","summary":"\r\n<div class=\"sub-desc\"><p>A function to be called after the request.\r\nThe <tt>callback</tt> is passed the following arguments:<ul>\r\n<li><tt>r</tt> : Ext.data.Record[] The block of Ext.data.Records.</li>\r\n<li><tt>options</tt>: Options object from the action request</li>\r\n<li><tt>success</tt>: Boolean success indicator</li></ul></p></div>"},{"type":"Object","optional":false,"name":"scope","summary":"The scope in which to call the callback"},{"type":"Object","optional":false,"name":"arg","summary":"An optional argument which is passed to the callback as its second parameter."}],"return":null,"hide":false,"private":false,"name":"doRequest","summary":"HttpProxy implementation of DataProxy#doRequest\r\n"}],"events":[]},{"name":"JsonReader","fullName":"Ext.data.JsonReader","summary":"<p>Data reader class to create an Array of {@link Ext.data.Record} objects\r\nfrom a JSON packet based on mappings in a provided {@link Ext.data.Record}\r\nconstructor.</p>\r\n<p>Example code:</p>\r\n<pre><code>\r\nvar myReader = new Ext.data.JsonReader({\r\n    // metadata configuration options:\r\n   {@link #idProperty}: 'id'          \r\n   {@link #root}: 'rows',             \r\n   {@link #totalProperty}: 'results', \r\n    \r\n    // the fields config option will internally create an {@link Ext.data.Record}\r\n    // constructor that provides mapping for reading the record data objects\r\n   {@link Ext.data.DataReader#fields fields}: [\r\n        // map Record&#39;s 'firstname' field to data object&#39;s key of same name    \r\n       {name: 'name'},\r\n        // map Record&#39;s 'job' field to data object&#39;s 'occupation' key\r\n       {name: 'job', mapping: 'occupation'}\r\n    ]    \r\n});\r\n</code></pre>\r\n<p>This would consume a JSON data object of the form:</p><pre><code>\r\n{\r\n    results: 2000, // Reader&#39;s configured {@link #totalProperty}\r\n    rows: [        // Reader&#39;s configured {@link #root}\r\n        // record data objects:\r\n       { {@link #idProperty id}: 1, firstname: 'Bill', occupation: 'Gardener' },         \r\n       { {@link #idProperty id}: 2, firstname: 'Ben' , occupation: 'Horticulturalist' },\r\n        ...\r\n    ]\r\n}\r\n</code></pre>\r\n<p><b><u>Automatic configuration using metaData</u></b></p>\r\n<p>It is possible to change a JsonReader's metadata at any time by including\r\na <b><tt>metaData</tt></b> property in the JSON data object. If the JSON data\r\nobject has a <b><tt>metaData</tt></b> property, a {@link Ext.data.Store Store}\r\nobject using this Reader will reconfigure itself to use the newly provided\r\nfield definition and fire its {@link Ext.data.Store#metachange metachange}\r\nevent. The metachange event handler may interrogate the <b><tt>metaData</tt></b>\r\nproperty to perform any configuration required.</p>\r\n<p>Note that reconfiguring a Store potentially invalidates objects which may\r\nrefer to Fields or Records which no longer exist.</p>\r\n<p>To use this facility you would create the JsonReader like this:</p><pre><code>\r\nvar myReader = new Ext.data.JsonReader();\r\n</code></pre>\r\n<p>The first data packet from the server would configure the reader by\r\ncontaining a <b><tt>metaData</tt></b> property <b>and</b> the data. For\r\nexample, the JSON data object might take the form:</p><pre><code>\r\n{\r\n    metaData: {\r\n        \"{@link #idProperty}\": \"id\",\r\n        \"{@link #root}\": \"rows\",\r\n        \"{@link #totalProperty}\": \"results\"\r\n        \"{@link #successProperty}\": \"success\",\r\n        \"{@link Ext.data.DataReader#fields fields}\": [\r\n           {\"name\": \"name\"},\r\n           {\"name\": \"job\", \"mapping\": \"occupation\"}\r\n        ],\r\n        // used by store to set its sortInfo\r\n        \"sortInfo\":{\r\n           \"field\": \"name\",\r\n           \"direction\": \"ASC\"\r\n        },\r\n        // {@link Ext.PagingToolbar paging data} (if applicable)\r\n        \"start\": 0,\r\n        \"limit\": 2,\r\n        // custom property \r\n        \"foo\": \"bar\" \r\n    },\r\n    // Reader&#39;s configured {@link #successProperty}\r\n    \"success\": true,\r\n    // Reader&#39;s configured {@link #totalProperty}\r\n    \"results\": 2000, \r\n    // Reader&#39;s configured {@link #root}\r\n    // (this data simulates 2 results {@link Ext.PagingToolbar per page})\r\n    \"rows\": [ // <b>*Note:</b> this must be an Array \r\n       { \"id\": 1, \"name\": \"Bill\", \"occupation\": \"Gardener\" },\r\n       { \"id\": 2, \"name\":  \"Ben\", \"occupation\": \"Horticulturalist\" }\r\n    ]\r\n}\r\n</code></pre>\r\n<p>The <b><tt>metaData</tt></b> property in the JSON data object should contain:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li>any of the configuration options for this class</li>\r\n<li>a <b><tt>{@link Ext.data.Record#fields fields}</tt></b> property which\r\nthe JsonReader will use as an argument to the\r\n{@link Ext.data.Record#create data Record create method} in order to\r\nconfigure the layout of the Records it will produce.</li>\r\n<li>a <b><tt>{@link Ext.data.Store#sortInfo sortInfo}</tt></b> property\r\nwhich the JsonReader will use to set the {@link Ext.data.Store}'s\r\n{@link Ext.data.Store#sortInfo sortInfo} property</li>\r\n<li>any custom properties needed</li>\r\n</ul></div>\r\n\r\n","package":"data","definedIn":"data\\JsonReader.js","xtype":null,"extends":"Ext.data.DataReader","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"meta","summary":"Metadata configuration options."},{"type":"Array/Object","optional":false,"name":"recordType","summary":" <p>Either an Array of {@link Ext.data.Field Field} definition objects (which will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record} constructor created from {@link Ext.data.Record#create}.</p>"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new JsonReader."},"subclasses":"Ext.data.ArrayReader","configOptions":[{"type":"String","optional":false,"name":"idProperty","summary":"that contains a record identifier value.  Defaults to <tt>id</tt>\r\n"},{"type":"String","optional":false,"name":"root","summary":"which contains the Array of row objects.  Defaults to <tt>undefined</tt>.\r\nAn exception will be thrown if the root property is undefined. The data\r\npacket value for this property should be an empty array to clear the data\r\nor show no data.\r\n"},{"type":"String","optional":false,"name":"successProperty","summary":"retrieve the success attribute. Defaults to <tt>success</tt>.  See\r\n{@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}\r\nfor additional information.\r\n"},{"type":"String","optional":false,"name":"totalProperty","summary":"retrieve the total number of records in the dataset. This is only needed\r\nif the whole dataset is not passed in one go, but is being paged from\r\nthe remote server.  Defaults to <tt>total</tt>.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"jsonData","summary":"After any data loads, the raw JSON data is available for further custom processing.  If no data is\r\nloaded or there is a load exception this property will be undefined.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"meta","summary":"This JsonReader's metadata as passed to the constructor, or as passed in\r\nthe last data packet's <b><tt>metaData</tt></b> property.\r\n"}],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"response","summary":"The XHR object which contains the JSON data in its responseText.\r\na cache of Ext.data.Records."}],"return":{"type":"Object","summary":"data A data block which is used by an Ext.data.Store object as"},"hide":false,"private":false,"name":"read","summary":"This method is only used by a DataProxy which has retrieved data from a remote server.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"An object which contains an Array of row objects in the property specified\r\nin the config as 'root, and optionally a property, specified in the config as 'totalProperty'\r\nwhich contains the total size of the dataset.\r\na cache of Ext.data.Records."}],"return":{"type":"Object","summary":"data A data block which is used by an Ext.data.Store object as"},"hide":false,"private":false,"name":"readRecords","summary":"Create a data block containing Ext.data.Records from a JSON object.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"action","summary":"[Ext.data.Api.actions.create|read|update|destroy]"},{"type":"Object","optional":false,"name":"response","summary":""}],"return":null,"hide":false,"private":false,"name":"readResponse","summary":"Decode a json response from server.\r\n"}],"events":[]},{"name":"JsonReader.Error","fullName":"Ext.data.JsonReader.Error","summary":"Error class for JsonReader\r\n","package":"data","definedIn":"data\\JsonReader.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"JsonStore","fullName":"Ext.data.JsonStore","summary":"<p>Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.\r\nA JsonStore will be automatically configured with a {@link Ext.data.JsonReader}.</p>\r\n<p>A store configuration would be something like:<pre><code>\r\nvar store = new Ext.data.JsonStore({\r\n    // store configs\r\n    autoDestroy: true,\r\n    url: 'get-images.php',\r\n    storeId: 'myStore',\r\n    // reader configs\r\n    root: 'images',\r\n    idProperty: 'name',\r\n    fields: ['name', 'url', {name:'size', type: 'float'}, {name:'lastmod', type:'date'}]\r\n});\r\n</code></pre></p>\r\n<p>This store is configured to consume a returned object of the form:<pre><code>\r\n{\r\n    images: [\r\n       {name: 'Image one', url:'/GetImage.php?id=1', size:46.5, lastmod: new Date(2007, 10, 29)},\r\n       {name: 'Image Two', url:'/GetImage.php?id=2', size:43.2, lastmod: new Date(2007, 10, 30)}\r\n    ]\r\n}\r\n</code></pre>\r\nAn object literal of this form could also be used as the {@link #data} config option.</p>\r\n<p><b>*Note:</b> Although not listed here, this class accepts all of the configuration options of\r\n<b>{@link Ext.data.JsonReader JsonReader}</b>.</p>\r\n","package":"data","definedIn":"data\\JsonStore.js","xtype":"jsonstore","extends":"Ext.data.Store","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"JsonWriter","fullName":"Ext.data.JsonWriter","summary":"DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action.\r\n","package":"data","definedIn":"data\\JsonWriter.js","xtype":null,"extends":"Ext.data.DataWriter","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"encode","summary":"{@link Ext.data.DataWriter#toHash hashed data}. Defaults to <tt>true</tt>.  When using\r\n{@link Ext.data.DirectProxy}, set this to <tt>false</tt> since Ext.Direct.JsonProvider will perform\r\nits own json-encoding.  In addition, if you're using {@link Ext.data.HttpProxy}, setting to <tt>false</tt>\r\nwill cause HttpProxy to transmit data using the <b>jsonData</b> configuration-params of {@link Ext.Ajax#request}\r\ninstead of <b>params</b>.  When using a {@link Ext.data.Store#restful} Store, some serverside frameworks are\r\ntuned to expect data through the jsonData mechanism.  In those cases, one will want to set <b>encode: <tt>false</tt></b>\r\n"},{"type":"Boolean","optional":false,"name":"returnJson","summary":""}],"properties":[],"methods":[{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"rec","summary":""}],"return":null,"hide":false,"private":false,"name":"createRecord","summary":"createRecord\r\n@protected\r\n"},{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"rec","summary":""}],"return":null,"hide":false,"private":false,"name":"destroyRecord","summary":"destroyRecord\r\n@protected\r\n"},{"parameters":[{"type":"String","optional":false,"name":"action","summary":"[Ext.data.Api.actions.create|read|update|destroy]"},{"type":"Record[]","optional":false,"name":"rs","summary":""},{"type":"Object","optional":false,"name":"http","summary":"params"},{"type":"Object","optional":false,"name":"data","summary":"object populated according to DataReader meta-data \"root\" and \"idProperty\""}],"return":null,"hide":false,"private":false,"name":"render","summary":"Final action of a write event.  Apply the written data-object to params.\r\n"},{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"rec","summary":""}],"return":null,"hide":false,"private":false,"name":"updateRecord","summary":"updateRecord\r\n@protected\r\n"}],"events":[]},{"name":"MemoryProxy","fullName":"Ext.data.MemoryProxy","summary":"An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor\r\nto the Reader when its load method is called.\r\n","package":"data","definedIn":"data\\MemoryProxy.js","xtype":null,"extends":"Ext.data.DataProxy","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"data","summary":"The data object which the Reader uses to construct a block of Ext.data.Records."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"action","summary":""},{"type":"Ext.data.Record/Ext.data.Record[]","optional":false,"name":"rs","summary":"If action is load, rs will be null"},{"type":"Object","optional":false,"name":"params","summary":"An object containing properties which are to be used as HTTP parameters\r\nfor the request to the remote server."},{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":"The Reader object which converts the data\r\nobject into a block of Ext.data.Records."},{"type":"Function","optional":false,"name":"callback","summary":"The function into which to pass the block of Ext.data.Records.\r\nThe function must be passed <ul>\r\n<li>The Record block object</li>\r\n<li>The \"arg\" argument from the load function</li>\r\n<li>A boolean success indicator</li>\r\n</ul>"},{"type":"Object","optional":false,"name":"scope","summary":"The scope in which to call the callback"},{"type":"Object","optional":false,"name":"arg","summary":"An optional argument which is passed to the callback as its second parameter."}],"return":null,"hide":false,"private":false,"name":"doRequest","summary":"MemoryProxy implementation of DataProxy#doRequest\r\n"}],"events":[{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"arg","summary":"The callback's arg object passed to the {@link #load} function"},{"type":"Object","optional":false,"name":"null","summary":"This parameter does not apply and will always be null for MemoryProxy"},{"type":"Error","optional":false,"name":"e","summary":"The JavaScript Error object caught if the configured Reader could not read the data"}],"name":"loadexception","summary":"Fires if an exception occurs in the Proxy during data loading. Note that this event is also relayed through {@link Ext.data.Store}, so you can listen for it directly on any Store instance."}]},{"name":"Node","fullName":"Ext.data.Node","summary":"@cfg {Boolean} leaf true if this node is a leaf and does not have children\r\n@cfg {String} id The id for this node. If one is not specified, one is generated.\r\n","package":"data","definedIn":"data\\Tree.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"attributes","summary":"The attributes/config for the node"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.tree.TreeNode","configOptions":[],"properties":[{"type":"Object","static":false,"hide":false,"private":false,"name":"attributes","summary":"The attributes supplied for the node. You can use this property to access any custom attributes you supplied.\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"childNodes","summary":"All child nodes of this node. @type Array\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"firstChild","summary":"The first direct child node of this node, or null if this node has no child nodes. @type Node\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"id","summary":"The node id. @type String\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"lastChild","summary":"The last direct child node of this node, or null if this node has no child nodes. @type Node\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"nextSibling","summary":"The node immediately following this node in the tree, or null if there is no sibling node. @type Node\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"parentNode","summary":"The parent node for this node. @type Node\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"previousSibling","summary":"The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node\r\n"}],"methods":[{"parameters":[{"type":"Node/Array","optional":false,"name":"node","summary":"The node or Array of nodes to append"}],"return":{"type":"Node","summary":"The appended node if single append, or null if an array was passed"},"hide":false,"private":false,"name":"appendChild","summary":"Insert node(s) as the last child node of this node.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to current node)"},{"type":"Array","optional":true,"name":"args","summary":"The args to call the function with (default to passing the current node)"}],"return":null,"hide":false,"private":false,"name":"bubble","summary":"Bubbles up the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\r\nfunction call will be the scope provided or the current node. The arguments to the function\r\nwill be the args provided or the current node. If the function returns false at any point,\r\nthe bubble is stopped.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to current node)"},{"type":"Array","optional":true,"name":"args","summary":"The args to call the function with (default to passing the current node)"}],"return":null,"hide":false,"private":false,"name":"cascade","summary":"Cascades down the tree from this node, calling the specified function with each node. The scope (<i>this</i>) of\r\nfunction call will be the scope provided or the current node. The arguments to the function\r\nwill be the args provided or the current node. If the function returns false at any point,\r\nthe cascade is stopped on that branch.\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":""}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"contains","summary":"Returns true if this node is an ancestor (at any point) of the passed node.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to current node)"},{"type":"Array","optional":true,"name":"args","summary":"The args to call the function with (default to passing the current node)"}],"return":null,"hide":false,"private":false,"name":"eachChild","summary":"Interates the child nodes of this node, calling the specified function with each node. The scope (<i>this</i>) of\r\nfunction call will be the scope provided or the current node. The arguments to the function\r\nwill be the args provided or the current node. If the function returns false at any point,\r\nthe iteration stops.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"attribute","summary":"The attribute name"},{"type":"Mixed","optional":false,"name":"value","summary":"The value to search for"}],"return":{"type":"Node","summary":"The found child or null if none was found"},"hide":false,"private":false,"name":"findChild","summary":"Finds the first child that has the attribute with the specified value.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":""},{"type":"Object","optional":true,"name":"scope","summary":""}],"return":{"type":"Node","summary":"The found child or null if none was found"},"hide":false,"private":false,"name":"findChildBy","summary":"Finds the first child by a custom function. The child matches if the function passed\r\nreturns true.\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getDepth","summary":"Returns depth of this node (the root node has a depth of 0)\r\n"},{"parameters":[],"return":{"type":"Tree","summary":""},"hide":false,"private":false,"name":"getOwnerTree","summary":"Returns the tree this node is in.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"attr","summary":"The attr to use for the path (defaults to the node's id)"}],"return":{"type":"String","summary":"The path"},"hide":false,"private":false,"name":"getPath","summary":"Returns the path for this node. The path can be used to expand or select this node programmatically.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasChildNodes","summary":"Returns true if this node has one or more child nodes, else false.\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":""}],"return":{"type":"Number","summary":"The index of the node or -1 if it was not found"},"hide":false,"private":false,"name":"indexOf","summary":"Returns the index of a child node\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node to insert"},{"type":"Node","optional":false,"name":"refNode","summary":"The node to insert before (if null the node is appended)"}],"return":{"type":"Node","summary":"The inserted node"},"hide":false,"private":false,"name":"insertBefore","summary":"Inserts the first node before the second node in this nodes childNodes collection.\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":""}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isAncestor","summary":"Returns true if the passed node is an ancestor (at any point) of this node.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isExpandable","summary":"Returns true if this node has one or more child nodes, or if the <tt>expandable</tt>\r\nnode attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isFirst","summary":"Returns true if this node is the first child of its parent\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isLast","summary":"Returns true if this node is the last child of its parent\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isLeaf","summary":"Returns true if this node is a leaf\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":""}],"return":{"type":"Node","summary":""},"hide":false,"private":false,"name":"item","summary":"Returns the child node at the specified index.\r\n"},{"parameters":[],"return":{"type":"Node","summary":"this"},"hide":false,"private":false,"name":"remove","summary":"Removes this node from its parent\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node to remove"}],"return":{"type":"Node","summary":"The removed node"},"hide":false,"private":false,"name":"removeChild","summary":"Removes a child node from this node.\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"newChild","summary":"The replacement node"},{"type":"Node","optional":false,"name":"oldChild","summary":"The node to replace"}],"return":{"type":"Node","summary":"The replaced node"},"hide":false,"private":false,"name":"replaceChild","summary":"Replaces one child node in this node with another.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The new id for the node."}],"return":null,"hide":false,"private":false,"name":"setId","summary":"Changes the id of this node.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":""},{"type":"Object","optional":true,"name":"scope","summary":""}],"return":null,"hide":false,"private":false,"name":"sort","summary":"Sorts this nodes children using the supplied sort function\r\n"}],"events":[{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"node","summary":"The newly appended node"},{"type":"Number","optional":false,"name":"index","summary":"The index of the newly appended node"}],"name":"append","summary":"Fires when a new child node is appended."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be appended"}],"name":"beforeappend","summary":"Fires before a new child is appended, return false to cancel the append."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be inserted"},{"type":"Node","optional":false,"name":"refNode","summary":"The child node the node is being inserted before"}],"name":"beforeinsert","summary":"Fires before a new child is inserted, return false to cancel the insert."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"oldParent","summary":"The parent of this node"},{"type":"Node","optional":false,"name":"newParent","summary":"The new parent this node is moving to"},{"type":"Number","optional":false,"name":"index","summary":"The index it is being moved to"}],"name":"beforemove","summary":"Fires before this node is moved to a new location in the tree. Return false to cancel the move."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be removed"}],"name":"beforeremove","summary":"Fires before a child is removed, return false to cancel the remove."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"node","summary":"The child node inserted"},{"type":"Node","optional":false,"name":"refNode","summary":"The child node the node was inserted before"}],"name":"insert","summary":"Fires when a new child node is inserted."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"oldParent","summary":"The old parent of this node"},{"type":"Node","optional":false,"name":"newParent","summary":"The new parent of this node"},{"type":"Number","optional":false,"name":"index","summary":"The index it was moved to"}],"name":"move","summary":"Fires when this node is moved to a new location in the tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Node","optional":false,"name":"node","summary":"The removed node"}],"name":"remove","summary":"Fires when a child node is removed."}]},{"name":"Record","fullName":"Ext.data.Record","summary":"<p>Instances of this class encapsulate both Record <em>definition</em> information, and Record\r\n<em>value</em> information for use in {@link Ext.data.Store} objects, or any code which needs\r\nto access Records cached in an {@link Ext.data.Store} object.</p>\r\n<p>Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.\r\nInstances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data\r\nobjects.</p>\r\n<p>Note that an instance of a Record class may only belong to one {@link Ext.data.Store Store} at a time.\r\nIn order to copy data from one Store to another, use the {@link #copy} method to create an exact\r\ncopy of the Record, and insert the new instance into the other Store.</p>\r\n<p>When serializing a Record for submission to the server, be aware that it contains many private\r\nproperties, and also a reference to its owning Store which in turn holds references to its Records.\r\nThis means that a whole Record may not be encoded using {@link Ext.util.JSON.encode}. Instead, use the\r\n<code>{@link #data}</code> and <code>{@link #id}</code> properties.</p>\r\n<p>Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below.</p>\r\n","package":"data","definedIn":"data\\Record.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":true,"name":"data","summary":"An object, the properties of which provide values for the new Record's fields. If not specified the <code>{@link Ext.data.Field#defaultValue defaultValue}</code> for each field will be assigned."},{"type":"Object","optional":true,"name":"id","summary":"The id of the Record. This id should be unique, and is used by the {@link Ext.data.Store} object which owns the Record to index its collection of Records. If an <code>id</code> is not specified a <b><code>{@link #phantom}</code></b> Record will be created with an {@link #Record.id automatically generated id}."}],"return":null,"hide":false,"private":false,"name":null,"summary":"<p>This constructor should not be used to create Record objects. Instead, use {@link #create} to\r\ngenerate a subclass of Ext.data.Record configured with information about its constituent fields.<p>\r\n<p><b>The generated constructor has the same signature as this constructor.</b></p>."},"subclasses":"","configOptions":[],"properties":[{"type":"Object","static":false,"hide":false,"private":false,"name":"data","summary":"An object hash representing the data for this Record. Every field name in the Record definition\r\nis represented by a property of that name in this object. Note that unless you specified a field\r\nwith {@link Ext.data.Field#name name} \"id\" in the Record definition, this will <b>not</b> contain\r\nan <tt>id</tt> property.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"fields","summary":"<p><b>This property is stored in the Record definition's <u>prototype</u></b></p>\r\nA MixedCollection containing the defined {@link Ext.data.Field Field}s for this Record.  Read-only.\r\n"},{"type":"Object","static":false,"hide":false,"private":false,"name":"id","summary":"The unique ID of the Record {@link #Record as specified at construction time}.\r\n"},{"type":"Object","static":false,"hide":false,"private":false,"name":"modified","summary":"This object contains a key and value storing the original values of all modified\r\nfields or is null if no fields have been modified.\r\n"},{"type":"Boolean","static":false,"hide":false,"private":false,"name":"phantom","summary":"<tt>false</tt> when the record does not yet exist in a server-side database (see\r\n{@link #markDirty}).  Any record which has a real database pk set as its id property\r\nis NOT a phantom -- it's real.\r\n"},{"type":"Ext.data.Store","static":false,"hide":false,"private":false,"name":"store","summary":"The {@link Ext.data.Store} to which this Record belongs.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"beginEdit","summary":"Begin an edit. While in edit mode, no events (e.g.. the <code>update</code> event)\r\nare relayed to the containing store.\r\nSee also: <code>{@link #endEdit}</code> and <code>{@link #cancelEdit}</code>.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"cancelEdit","summary":"Cancels all changes made in the current edit operation.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"silent","summary":"True to skip notification of the owning\r\nstore of the change (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"commit","summary":"Usually called by the {@link Ext.data.Store} which owns the Record.\r\nCommits all changes made to the Record since either creation, or the last commit operation.\r\n<p>Developers should subscribe to the {@link Ext.data.Store#update} event\r\nto have their code notified of commit operations.</p>\r\n"},{"parameters":[{"type":"String","optional":true,"name":"id","summary":"A new Record id, defaults to {@link #Record.id autogenerating an id}.\r\nNote: if an <code>id</code> is not specified the copy created will be a\r\n<code>{@link #phantom}</code> Record."}],"return":{"type":"Record","summary":""},"hide":false,"private":false,"name":"copy","summary":"Creates a copy of this Record.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"o","summary":"An Array of <b>{@link Ext.data.Field Field}</b> definition objects.\r\nThe constructor generated by this method may be used to create new Record instances. The data\r\nobject must contain properties named after the {@link Ext.data.Field field}\r\n<b><tt>{@link Ext.data.Field#name}s</tt></b>.  Example usage:<pre><code>\r\n// create a Record constructor from a description of the fields\r\nvar TopicRecord = Ext.data.Record.create([ // creates a subclass of Ext.data.Record\r\n{{@link Ext.data.Field#name name}: 'title', {@link Ext.data.Field#mapping mapping}: 'topic_title'},\r\n{name: 'author', mapping: 'username', allowBlank: false},\r\n{name: 'totalPosts', mapping: 'topic_replies', type: 'int'},\r\n{name: 'lastPost', mapping: 'post_time', type: 'date'},\r\n{name: 'lastPoster', mapping: 'user2'},\r\n{name: 'excerpt', mapping: 'post_text', allowBlank: false},\r\n// In the simplest case, if no properties other than <tt>name</tt> are required,\r\n// a field definition may consist of just a String for the field name.\r\n'signature'\r\n]);\r\n\r\n// create Record instance\r\nvar myNewRecord = new TopicRecord(\r\n{\r\ntitle: 'Do my job please',\r\nauthor: 'noobie',\r\ntotalPosts: 1,\r\nlastPost: new Date(),\r\nlastPoster: 'Animal',\r\nexcerpt: 'No way dude!',\r\nsignature: ''\r\n},\r\nid // optionally specify the id of the record otherwise {@link #Record.id one is auto-assigned}\r\n);\r\nmyStore.{@link Ext.data.Store#add add}(myNewRecord);\r\n</code></pre>\r\nto the definition. The constructor has the same signature as {@link #Record}.\r\n@static"}],"return":{"type":"function","summary":"A constructor which is used to create new Records according"},"hide":false,"private":false,"name":"create","summary":"Generate a constructor for a specific Record layout.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"endEdit","summary":"End an edit. If any data was modified, the containing store is notified\r\n(ie, the store's <code>update</code> event will fire).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The {@link Ext.data.Field#name name of the field} to get the value of."}],"return":{"type":"Object","summary":"The value of the field."},"hide":false,"private":false,"name":"get","summary":"Get the value of the {@link Ext.data.Field#name named field}.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getChanges","summary":"Gets a hash of only the fields that have been modified since this Record was created or commited.\r\n"},{"parameters":[{"type":"Record","optional":false,"name":"rec","summary":"The record being created.  The record does not exist, it's a {@link #phantom}."}],"return":{"type":"String","summary":"auto-generated string id, <tt>\"ext-record-i++'</tt>;"},"hide":false,"private":false,"name":"id","summary":"Generates a sequential id. This method is typically called when a record is {@link #create}d\r\nand {@link #Record no id has been specified}. The returned id takes the form:\r\n<tt>&#123;PREFIX}-&#123;AUTO_ID}</tt>.<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>PREFIX</tt></b> : String<p class=\"sub-desc\"><tt>Ext.data.Record.PREFIX</tt>\r\n(defaults to <tt>'ext-record'</tt>)</p></li>\r\n<li><b><tt>AUTO_ID</tt></b> : String<p class=\"sub-desc\"><tt>Ext.data.Record.AUTO_ID</tt>\r\n(defaults to <tt>1</tt> initially)</p></li>\r\n</ul></div>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"fieldName","summary":"{@link Ext.data.Field.{@link Ext.data.Field#name}"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isModified","summary":"Returns <tt>true</tt> if the passed field name has been <code>{@link #modified}</code>\r\nsince the load or last commit.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isValid","summary":"By default returns <tt>false</tt> if any {@link Ext.data.Field field} within the\r\nrecord configured with <tt>{@link Ext.data.Field#allowBlank} = false</tt> returns\r\n<tt>true</tt> from an {@link Ext}.{@link Ext#isEmpty isempty} test.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"markDirty","summary":"<p>Marks this <b>Record</b> as <code>{@link #dirty}</code>.  This method\r\nis used interally when adding <code>{@link #phantom}</code> records to a\r\n{@link Ext.data.Store#writer writer enabled store}.</p>\r\n<br><p>Marking a record <code>{@link #dirty}</code> causes the phantom to\r\nbe returned by {@link Ext.data.Store#getModifiedRecords} where it will\r\nhave a create action composed for it during {@link Ext.data.Store#save store save}\r\noperations.</p>\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"silent","summary":"True to skip notification of the owning\r\nstore of the change (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"reject","summary":"Usually called by the {@link Ext.data.Store} which owns the Record.\r\nRejects all changes made to the Record since either creation, or the last commit operation.\r\nModified fields are reverted to their original values.\r\n<p>Developers should subscribe to the {@link Ext.data.Store#update} event\r\nto have their code notified of reject operations.</p>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The {@link Ext.data.Field#name name of the field} to set."},{"type":"String/Object/Array","optional":false,"name":"value","summary":"The value to set the field to."}],"return":null,"hide":false,"private":false,"name":"set","summary":"Set the {@link Ext.data.Field#name named field} to the specified value.  For example:\r\n<pre><code>\r\n// record has a field named 'firstname'\r\nvar Employee = Ext.data.Record.{@link #create}([\r\n   {name: 'firstname'},\r\n    ...\r\n]);\r\n\r\n// update the 2nd record in the store:\r\nvar rec = myStore.{@link Ext.data.Store#getAt getAt}(1);\r\n\r\n// set the value (shows dirty flag):\r\nrec.set('firstname', 'Betty');\r\n\r\n// commit the change (removes dirty flag):\r\nrec.{@link #commit}();\r\n\r\n// update the record in the store, bypass setting dirty flag,\r\n// and do not store the change in the {@link Ext.data.Store#getModifiedRecords modified records}\r\nrec.{@link #data}['firstname'] = 'Wilma'); // updates record, but not the view\r\nrec.{@link #commit}(); // updates the view\r\n</code></pre>\r\n<b>Notes</b>:<div class=\"mdetail-params\"><ul>\r\n<li>If the store has a writer and <code>autoSave=true</code>, each set()\r\nwill execute an XHR to the server.</li>\r\n<li>Use <code>{@link #beginEdit}</code> to prevent the store's <code>update</code>\r\nevent firing while using set().</li>\r\n<li>Use <code>{@link #endEdit}</code> to have the store's <code>update</code>\r\nevent fire.</li>\r\n</ul></div>\r\n"}],"events":[]},{"name":"ScriptTagProxy","fullName":"Ext.data.ScriptTagProxy","summary":"An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain\r\nother than the originating domain of the running page.<br>\r\n<p>\r\n<b>Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain\r\nof the running page, you must use this class, rather than HttpProxy.</b><br>\r\n<p>\r\nThe content passed back from a server resource requested by a ScriptTagProxy <b>must</b> be executable JavaScript\r\nsource code because it is used as the source inside a &lt;script> tag.<br>\r\n<p>\r\nIn order for the browser to process the returned data, the server must wrap the data object\r\nwith a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.\r\nBelow is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy\r\ndepending on whether the callback name was passed:\r\n<p>\r\n<pre><code>\r\nboolean scriptTag = false;\r\nString cb = request.getParameter(\"callback\");\r\nif (cb != null) {\r\n    scriptTag = true;\r\n    response.setContentType(\"text/javascript\");\r\n} else {\r\n    response.setContentType(\"application/x-json\");\r\n}\r\nWriter out = response.getWriter();\r\nif (scriptTag) {\r\n    out.write(cb + \"(\");\r\n}\r\nout.print(dataBlock.toJsonString());\r\nif (scriptTag) {\r\n    out.write(\");\");\r\n}\r\n</code></pre>\r\n\r\n","package":"data","definedIn":"data\\ScriptTagProxy.js","xtype":null,"extends":"Ext.data.DataProxy","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A configuration object."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"url","summary":""},{"type":"Number","optional":false,"name":"timeout","summary":""},{"type":"String","optional":false,"name":"callbackParam","summary":"the server the name of the callback function set up by the load call to process the returned data object.\r\nDefaults to \"callback\".<p>The server-side processing must read this parameter value, and generate\r\njavascript output which calls this named function passing the data object as its only parameter.\r\n"},{"type":"Boolean","optional":false,"name":"nocache","summary":"name to the request.\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"action","summary":""},{"type":"Ext.data.Record/Ext.data.Record[]","optional":false,"name":"rs","summary":"If action is <tt>read</tt>, rs will be null"},{"type":"Object","optional":false,"name":"params","summary":"An object containing properties which are to be used as HTTP parameters\r\nfor the request to the remote server."},{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":"The Reader object which converts the data\r\nobject into a block of Ext.data.Records."},{"type":"Function","optional":false,"name":"callback","summary":"The function into which to pass the block of Ext.data.Records.\r\nThe function must be passed <ul>\r\n<li>The Record block object</li>\r\n<li>The \"arg\" argument from the load function</li>\r\n<li>A boolean success indicator</li>\r\n</ul>"},{"type":"Object","optional":false,"name":"scope","summary":"The scope in which to call the callback"},{"type":"Object","optional":false,"name":"arg","summary":"An optional argument which is passed to the callback as its second parameter."}],"return":null,"hide":false,"private":false,"name":"doRequest","summary":"HttpProxy implementation of DataProxy#doRequest\r\n"}],"events":[{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"options","summary":"The loading options that were specified (see {@link #load} for details).  If the load"},{"type":"Object","optional":false,"name":"arg","summary":"The callback's arg object passed to the {@link #load} function"},{"type":"Error","optional":false,"name":"e","summary":"The JavaScript Error object caught if the configured Reader could not read the data."}],"name":"loadexception","summary":"<b>Deprecated</b> in favor of 'exception' event. Fires if an exception occurs in the Proxy during data loading. This event can be fired for one of two reasons: <ul><li><b>The load call timed out.</b> This means the load callback did not execute within the time limit specified by {@link #timeout}. In this case, this event will be raised and the fourth parameter (read error) will be null.</li> <li><b>The load succeeded but the reader could not read the response.</b> This means the server returned data, but the configured Reader threw an error while reading the data. In this case, this event will be raised and the caught error will be passed along as the fourth parameter of this event.</li></ul> Note that this event is also relayed through {@link Ext.data.Store}, so you can listen for it directly on any Store instance. call timed out, this parameter will be null. If the remote request returns success: false, this parameter will be null."}]},{"name":"SortTypes","fullName":"Ext.data.SortTypes","summary":"Defines the default sorting (casting?) comparison functions used when sorting data.\r\n","package":"data","definedIn":"data\\SortTypes.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"RegExp","static":false,"hide":false,"private":false,"name":"stripTagsRE","summary":"The regular expression used to strip tags\r\n"}],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"s","summary":"The value being converted"}],"return":{"type":"Number","summary":"The comparison value"},"hide":false,"private":false,"name":"asDate","summary":"Date sorting\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"s","summary":"The value being converted"}],"return":{"type":"Float","summary":"The comparison value"},"hide":false,"private":false,"name":"asFloat","summary":"Float sorting\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"s","summary":"The value being converted"}],"return":{"type":"Number","summary":"The comparison value"},"hide":false,"private":false,"name":"asInt","summary":"Integer sorting\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"s","summary":"The value being converted"}],"return":{"type":"String","summary":"The comparison value"},"hide":false,"private":false,"name":"asText","summary":"Strips all HTML tags to sort on text only\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"s","summary":"The value being converted"}],"return":{"type":"String","summary":"The comparison value"},"hide":false,"private":false,"name":"asUCString","summary":"Case insensitive string\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"s","summary":"The value being converted"}],"return":{"type":"String","summary":"The comparison value"},"hide":false,"private":false,"name":"asUCText","summary":"Strips all HTML tags to sort on text only - Case insensitive\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"s","summary":"The value being converted"}],"return":{"type":"Mixed","summary":"The comparison value"},"hide":false,"private":false,"name":"none","summary":"Default sort that does nothing\r\n"}],"events":[]},{"name":"Store","fullName":"Ext.data.Store","summary":"<p>The Store class encapsulates a client side cache of {@link Ext.data.Record Record}\r\nobjects which provide input data for Components such as the {@link Ext.grid.GridPanel GridPanel},\r\nthe {@link Ext.form.ComboBox ComboBox}, or the {@link Ext.DataView DataView}.</p>\r\n<p><u>Retrieving Data</u></p>\r\n<p>A Store object may access a data object using:<div class=\"mdetail-params\"><ul>\r\n<li>{@link #proxy configured implementation} of {@link Ext.data.DataProxy DataProxy}</li>\r\n<li>{@link #data} to automatically pass in data</li>\r\n<li>{@link #loadData} to manually pass in data</li>\r\n</ul></div></p>\r\n<p><u>Reading Data</u></p>\r\n<p>A Store object has no inherent knowledge of the format of the data object (it could be\r\nan Array, XML, or JSON). A Store object uses an appropriate {@link #reader configured implementation}\r\nof a {@link Ext.data.DataReader DataReader} to create {@link Ext.data.Record Record} instances from the data\r\nobject.</p>\r\n<p><u>Store Types</u></p>\r\n<p>There are several implementations of Store available which are customized for use with\r\na specific DataReader implementation.  Here is an example using an ArrayStore which implicitly\r\ncreates a reader commensurate to an Array data object.</p>\r\n<pre><code>\r\nvar myStore = new Ext.data.ArrayStore({\r\n    fields: ['fullname', 'first'],\r\n    idIndex: 0 // id for each record will be the first element\r\n});\r\n</code></pre>\r\n<p>For custom implementations create a basic {@link Ext.data.Store} configured as needed:</p>\r\n<pre><code>\r\n// create a {@link Ext.data.Record Record} constructor:\r\nvar rt = Ext.data.Record.create([\r\n   {name: 'fullname'},\r\n   {name: 'first'}\r\n]);\r\nvar myStore = new Ext.data.Store({\r\n    // explicitly create reader\r\n    reader: new Ext.data.ArrayReader(\r\n       {\r\n            idIndex: 0  // id for each record will be the first element\r\n        },\r\n        rt // recordType\r\n    )\r\n});\r\n</code></pre>\r\n<p>Load some data into store (note the data object is an array which corresponds to the reader):</p>\r\n<pre><code>\r\nvar myData = [\r\n    [1, 'Fred Flintstone', 'Fred'],  // note that id for the record is the first element\r\n    [2, 'Barney Rubble', 'Barney']\r\n];\r\nmyStore.loadData(myData);\r\n</code></pre>\r\n<p>Records are cached and made available through accessor functions.  An example of adding\r\na record to the store:</p>\r\n<pre><code>\r\nvar defaultData = {\r\n    fullname: 'Full Name',\r\n    first: 'First Name'\r\n};\r\nvar recId = 100; // provide unique id for the record\r\nvar r = new myStore.recordType(defaultData, ++recId); // create new record\r\nmyStore.{@link #insert}(0, r); // insert a new record into the store (also see {@link #add})\r\n</code></pre>\r\n","package":"data","definedIn":"data\\Store.js","xtype":"store","extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A config object containing the objects needed for the Store to access data, and read the data into Records."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Store."},"subclasses":"Ext.data.ArrayStore,Ext.data.DirectStore,Ext.data.GroupingStore,Ext.data.JsonStore,Ext.data.XmlStore","configOptions":[{"type":"String","optional":false,"name":"storeId","summary":"<p><b>Note</b>: if a (deprecated) <tt>{@link #id}</tt> is specified it will supersede the <tt>storeId</tt>\r\nassignment.</p>\r\n"},{"type":"String","optional":false,"name":"url","summary":"implicitly configure a {@link Ext.data.HttpProxy HttpProxy} if an <tt>url</tt> is specified.\r\nTypically this option, or the <code>{@link #data}</code> option will be specified.\r\n"},{"type":"Boolean/Object","optional":false,"name":"autoLoad","summary":"is <tt>true</tt> or an <tt>Object</tt>, this store's {@link #load} method is automatically called\r\nafter creation. If the value of <tt>autoLoad</tt> is an <tt>Object</tt>, this <tt>Object</tt> will\r\nbe passed to the store's {@link #load} method.\r\n"},{"type":"Ext.data.DataProxy","optional":false,"name":"proxy","summary":"access to a data object.  See <code>{@link #url}</code>.\r\n"},{"type":"Array","optional":false,"name":"data","summary":"Typically this option, or the <code>{@link #url}</code> option will be specified.\r\n"},{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":"data object and returns an Array of {@link Ext.data.Record} objects which are cached keyed by their\r\n<b><tt>{@link Ext.data.Record#id id}</tt></b> property.\r\n"},{"type":"Ext.data.DataWriter","optional":false,"name":"writer","summary":"<p>The {@link Ext.data.DataWriter Writer} object which processes a record object for being written\r\nto the server-side database.</p>\r\n<br><p>When a writer is installed into a Store the {@link #add}, {@link #remove}, and {@link #update}\r\nevents on the store are monitored in order to remotely {@link #createRecords create records},\r\n{@link #destroyRecord destroy records}, or {@link #updateRecord update records}.</p>\r\n<br><p>The proxy for this store will relay any {@link #writexception} events to this store.</p>\r\n<br><p>Sample implementation:\r\n<pre><code>\r\nvar writer = new {@link Ext.data.JsonWriter}({\r\n    encode: true,\r\n    writeAllFields: true // write all fields, not just those that changed\r\n});\r\n\r\n// Typical Store collecting the Proxy, Reader and Writer together.\r\nvar store = new Ext.data.Store({\r\n    storeId: 'user',\r\n    root: 'records',\r\n    proxy: proxy,\r\n    reader: reader,\r\n    writer: writer,     // <-- plug a DataWriter into the store just as you would a Reader\r\n    paramsAsHash: true,\r\n    autoSave: false    // <-- false to delay executing create, update, destroy requests\r\n                        //     until specifically told to do so.\r\n});\r\n</code></pre></p>\r\n"},{"type":"Object","optional":false,"name":"baseParams","summary":"<p>An object containing properties which are to be sent as parameters\r\nfor <i>every</i> HTTP request.</p>\r\n<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>\r\n<p><b>Note</b>: <code>baseParams</code> may be superseded by any <code>params</code>\r\nspecified in a <code>{@link #load}</code> request, see <code>{@link #load}</code>\r\nfor more details.</p>\r\nThis property may be modified after creation using the <code>{@link #setBaseParam}</code>\r\nmethod.\r\n@property\r\n"},{"type":"Object","optional":false,"name":"sortInfo","summary":"{@link #load} operation.  Note that for local sorting, the <tt>direction</tt> property is\r\ncase-sensitive. See also {@link #remoteSort} and {@link #paramNames}.\r\nFor example:<pre><code>\r\nsortInfo: {\r\n    field: 'fieldName',\r\n    direction: 'ASC' // or 'DESC' (case sensitive for local sorting)\r\n}\r\n</code></pre>\r\n"},{"type":"boolean","optional":false,"name":"remoteSort","summary":"to provide a refreshed version of the data object in sorted order, as opposed to sorting the Record cache\r\nin place (defaults to <tt>false</tt>).\r\n<p>If <tt>remoteSort</tt> is <tt>true</tt>, then clicking on a {@link Ext.grid.Column Grid Column}'s\r\n{@link Ext.grid.Column#header header} causes the current page to be requested from the server appending\r\nthe following two parameters to the <b><tt>{@link #load params}</tt></b>:<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>sort</tt></b> : String<p class=\"sub-desc\">The <tt>name</tt> (as specified in the Record's\r\n{@link Ext.data.Field Field definition}) of the field to sort on.</p></li>\r\n<li><b><tt>dir</tt></b> : String<p class=\"sub-desc\">The direction of the sort, 'ASC' or 'DESC' (case-sensitive).</p></li>\r\n</ul></div></p>\r\n"},{"type":"Boolean","optional":false,"name":"autoDestroy","summary":"to is destroyed (defaults to <tt>false</tt>).\r\n<p><b>Note</b>: this should be set to true when using stores that are bound to only 1 component.</p>\r\n"},{"type":"Boolean","optional":false,"name":"pruneModifiedRecords","summary":"the store is loaded or when a record is removed (defaults to <tt>false</tt>). See {@link #getModifiedRecords}\r\nfor the accessor method to retrieve the modified records.\r\n"},{"type":"Boolean","optional":false,"name":"autoSave","summary":"<p>Defaults to <tt>true</tt> causing the store to automatically {@link #save} records to\r\nthe server when a record is modified (ie: becomes 'dirty'). Specify <tt>false</tt> to manually call {@link #save}\r\nto send all modifiedRecords to the server.</p>\r\n<br><p><b>Note</b>: each CRUD action will be sent as a separate request.</p>\r\n"},{"type":"Boolean","optional":false,"name":"batch","summary":"<p>Defaults to <tt>true</tt> (unless <code>{@link #restful}:true</code>). Multiple\r\nrequests for each CRUD action (CREATE, READ, UPDATE and DESTROY) will be combined\r\nand sent as one transaction. Only applies when <code>{@link #autoSave}</code> is set\r\nto <tt>false</tt>.</p>\r\n<br><p>If Store is RESTful, the DataProxy is also RESTful, and a unique transaction is\r\ngenerated for each record.</p>\r\n"},{"type":"Boolean","optional":false,"name":"restful","summary":"Defaults to <tt>false</tt>.  Set to <tt>true</tt> to have the Store and the set\r\nProxy operate in a RESTful manner. The store will automatically generate GET, POST,\r\nPUT and DELETE requests to the server. The HTTP method used for any given CRUD\r\naction is described in {@link Ext.data.Api#restActions}.  For additional information\r\nsee {@link Ext.data.DataProxy#restful}.\r\n<p><b>Note</b>: if <code>{@link #restful}:true</code> <code>batch</code> will\r\ninternally be set to <tt>false</tt>.</p>\r\n"},{"type":"Object","optional":false,"name":"paramNames","summary":"<p>An object containing properties which specify the names of the paging and\r\nsorting parameters passed to remote servers when loading blocks of data. By default, this\r\nobject takes the following form:</p><pre><code>\r\n{\r\n    start : 'start',  // The parameter name which specifies the start row\r\n    limit : 'limit',  // The parameter name which specifies number of rows to return\r\n    sort : 'sort',    // The parameter name which specifies the column to sort on\r\n    dir : 'dir'       // The parameter name which specifies the sort direction\r\n}\r\n</code></pre>\r\n<p>The server must produce the requested data block upon receipt of these parameter names.\r\nIf different parameter names are required, this property can be overriden using a configuration\r\nproperty.</p>\r\n<p>A {@link Ext.PagingToolbar PagingToolbar} bound to this Store uses this property to determine\r\nthe parameter names to use in its {@link #load requests}.\r\n"},{"type":"Object","optional":false,"name":"defaultParamNames","summary":"Provides the default values for the {@link #paramNames} property. To globally modify the parameters\r\nfor all stores, this object should be changed on the store prototype.\r\n"}],"properties":[{"type":null,"static":false,"hide":false,"private":false,"name":"baseParams","summary":"See the <code>{@link #baseParams corresponding configuration option}</code>\r\nfor a description of this property.\r\nTo modify this property see <code>{@link #setBaseParam}</code>.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"recordType","summary":"The {@link Ext.data.Record Record} constructor as supplied to (or created by) the\r\n{@link Ext.data.DataReader Reader}. Read-only.\r\n<p>If the Reader was constructed by passing in an Array of {@link Ext.data.Field} definition objects,\r\ninstead of a Record constructor, it will implicitly create a Record constructor from that Array (see\r\n{@link Ext.data.Record}.{@link Ext.data.Record#create create} for additional details).</p>\r\n<p>This property may be used to create new Records of the type held in this Store, for example:</p><pre><code>\r\n// create the data store\r\nvar store = new Ext.data.ArrayStore({\r\nautoDestroy: true,\r\nfields: [\r\n{name: 'company'},\r\n{name: 'price', type: 'float'},\r\n{name: 'change', type: 'float'},\r\n{name: 'pctChange', type: 'float'},\r\n{name: 'lastChange', type: 'date', dateFormat: 'n/j h:ia'}\r\n]\r\n});\r\nstore.loadData(myData);\r\n\r\n// create the Grid\r\nvar grid = new Ext.grid.EditorGridPanel({\r\nstore: store,\r\ncolModel: new Ext.grid.ColumnModel({\r\ncolumns: [\r\n{id:'company', header: 'Company', width: 160, dataIndex: 'company'},\r\n{header: 'Price', renderer: 'usMoney', dataIndex: 'price'},\r\n{header: 'Change', renderer: change, dataIndex: 'change'},\r\n{header: '% Change', renderer: pctChange, dataIndex: 'pctChange'},\r\n{header: 'Last Updated', width: 85,\r\nrenderer: Ext.util.Format.dateRenderer('m/d/Y'),\r\ndataIndex: 'lastChange'}\r\n],\r\ndefaults: {\r\nsortable: true,\r\nwidth: 75\r\n}\r\n}),\r\nautoExpandColumn: 'company', // match the id specified in the column model\r\nheight:350,\r\nwidth:600,\r\ntitle:'Array Grid',\r\ntbar: [{\r\ntext: 'Add Record',\r\nhandler : function () {\r\nvar defaultData = {\r\nchange: 0,\r\ncompany: 'New Company',\r\nlastChange: (new Date()).clearTime(),\r\npctChange: 0,\r\nprice: 10\r\n};\r\nvar recId = 3; // provide unique id\r\nvar p = new store.recordType(defaultData, recId); // create new record\r\netgrid.stopEditing();\r\nstore.{@link #insert}(0, p); // insert a new record into the store (also see {@link #add})\r\netgrid.startEditing(0, 0);\r\n}\r\n}]\r\n});\r\n</code></pre>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"fields","summary":"A {@link Ext.util.MixedCollection MixedCollection} containing the defined {@link Ext.data.Field Field}s\r\nfor the {@link Ext.data.Record Records} stored in this Store. Read-only.\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"lastOptions","summary":"Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}\r\nfor the details of what this may contain. This may be useful for accessing any params which were used\r\nto load the current Record cache.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"destroy","summary":"Destroys the store.\r\n"},{"parameters":[{"type":"Ext.data.Record[]","optional":false,"name":"records","summary":"An Array of Ext.data.Record objects\r\nto add to the cache. See {@link #recordType}."}],"return":null,"hide":false,"private":false,"name":"add","summary":"Add Records to the Store and fires the {@link #add} event.  To add Records\r\nto the store from a remote source use <code>{@link #load}({add:true})</code>.\r\nSee also <code>{@link #recordType}</code> and <code>{@link #insert}</code>.\r\n"},{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"record","summary":""}],"return":null,"hide":false,"private":false,"name":"addSorted","summary":"(Local sort only) Inserts the passed Record into the Store at the index where it\r\nshould go based on the current sort information.\r\n"},{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The Ext.data.Record object to remove from the cache."}],"return":null,"hide":false,"private":false,"name":"remove","summary":"Remove a Record from the Store and fires the {@link #remove} event.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index of the record to remove."}],"return":null,"hide":false,"private":false,"name":"removeAt","summary":"Remove a Record from the Store at the specified index. Fires the {@link #remove} event.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"removeAll","summary":"Remove all Records from the Store and fires the {@link #clear} event.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The start index at which to insert the passed Records."},{"type":"Ext.data.Record[]","optional":false,"name":"records","summary":"An Array of Ext.data.Record objects to add to the cache."}],"return":null,"hide":false,"private":false,"name":"insert","summary":"Inserts Records into the Store at the given index and fires the {@link #add} event.\r\nSee also <code>{@link #add}</code> and <code>{@link #addSorted}</code>.\r\n"},{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The Ext.data.Record object to find."}],"return":{"type":"Number","summary":"The index of the passed Record. Returns -1 if not found."},"hide":false,"private":false,"name":"indexOf","summary":"Get the index within the cache of the passed Record.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The id of the Record to find."}],"return":{"type":"Number","summary":"The index of the Record. Returns -1 if not found."},"hide":false,"private":false,"name":"indexOfId","summary":"Get the index within the cache of the Record with the passed id.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The id of the Record to find."}],"return":{"type":"Ext.data.Record","summary":"The Record with the passed id. Returns undefined if not found."},"hide":false,"private":false,"name":"getById","summary":"Get the Record with the specified id.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index of the Record to find."}],"return":{"type":"Ext.data.Record","summary":"The Record at the passed index. Returns undefined if not found."},"hide":false,"private":false,"name":"getAt","summary":"Get the Record at the specified index.\r\n"},{"parameters":[{"type":"Number","optional":true,"name":"startIndex","summary":"The starting index (defaults to 0)"},{"type":"Number","optional":true,"name":"endIndex","summary":"The ending index (defaults to the last Record in the Store)"}],"return":{"type":"Ext.data.Record[]","summary":"An array of Records"},"hide":false,"private":false,"name":"getRange","summary":"Returns a range of Records between specified indices.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"options","summary":"An object containing properties which control loading options:<ul>\r\n<li><b><tt>params</tt></b> :Object<div class=\"sub-desc\"><p>An object containing properties to pass as HTTP\r\nparameters to a remote data source. <b>Note</b>: <code>params</code> will override any\r\n<code>{@link #baseParams}</code> of the same name.</p>\r\n<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p></div></li>\r\n<li><b><tt>callback</tt></b> : Function<div class=\"sub-desc\"><p>A function to be called after the Records\r\nhave been loaded. The <tt>callback</tt> is called after the load event and is passed the following arguments:<ul>\r\n<li><tt>r</tt> : Ext.data.Record[]</li>\r\n<li><tt>options</tt>: Options object from the load call</li>\r\n<li><tt>success</tt>: Boolean success indicator</li></ul></p></div></li>\r\n<li><b><tt>scope</tt></b> : Object<div class=\"sub-desc\"><p>Scope with which to call the callback (defaults\r\nto the Store object)</p></div></li>\r\n<li><b><tt>add</tt></b> : Boolean<div class=\"sub-desc\"><p>Indicator to append loaded records rather than\r\nreplace the current cache.  <b>Note</b>: see note for <tt>{@link #loadData}</tt></p></div></li>\r\n</ul>\r\n<tt>false</tt>, the load call will abort and will return <tt>false</tt>; otherwise will return <tt>true</tt>."}],"return":{"type":"Boolean} If the <i>developer</i> provided <tt>{@link #beforeload","summary":"</tt> event handler returns"},"hide":false,"private":false,"name":"load","summary":"<p>Loads the Record cache from the configured <tt>{@link #proxy}</tt> using the configured <tt>{@link #reader}</tt>.</p>\r\n<br><p>Notes:</p><div class=\"mdetail-params\"><ul>\r\n<li><b><u>Important</u></b>: loading is asynchronous! This call will return before the new data has been\r\nloaded. To perform any post-processing where information from the load call is required, specify\r\nthe <tt>callback</tt> function to be called, or use a {@link Ext.util.Observable#listeners a 'load' event handler}.</li>\r\n<li>If using {@link Ext.PagingToolbar remote paging}, the first load call must specify the <tt>start</tt> and <tt>limit</tt>\r\nproperties in the <code>options.params</code> property to establish the initial position within the\r\ndataset, and the number of Records to cache on each read from the Proxy.</li>\r\n<li>If using {@link #remoteSort remote sorting}, the configured <code>{@link #sortInfo}</code>\r\nwill be automatically included with the posted parameters according to the specified\r\n<code>{@link #paramNames}</code>.</li>\r\n</ul></div>\r\n"}],"events":[{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"}],"name":"datachanged","summary":"Fires when the data cache has changed in a bulk manner (e.g., it has been sorted, filtered, etc.) and a widget that is using this Store as a Record cache should refresh its view."},{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"meta","summary":"The JSON metadata"}],"name":"metachange","summary":"Fires when this store's reader provides new metadata (fields). This is currently only supported for JsonReaders."},{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"},{"type":"Ext.data.Record[]","optional":false,"name":"records","summary":"The array of Records added"},{"type":"Number","optional":false,"name":"index","summary":"The index at which the record(s) were added"}],"name":"add","summary":"Fires when Records have been {@link #add}ed to the Store."},{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"},{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The Record that was removed"},{"type":"Number","optional":false,"name":"index","summary":"The index at which the record was removed"}],"name":"remove","summary":"Fires when a Record has been {@link #remove}d from the Store."},{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"},{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The Record that was updated"},{"type":"String","optional":false,"name":"operation","summary":"The update operation being performed.  Value may be one of:"}],"name":"update","summary":"Fires when a Record has been updated <pre><code> Ext.data.Record.EDIT Ext.data.Record.REJECT Ext.data.Record.COMMIT </code></pre>."},{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"}],"name":"clear","summary":"Fires when the data cache has been cleared."},{"parameters":[{"type":"misc","optional":false,"name":"misc","summary":"See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception}"}],"name":"exception","summary":"<p>Fires if an exception occurs in the Proxy during a remote request. This event is relayed through the corresponding {@link Ext.data.DataProxy}. See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#exception exception} for additional details. for description."},{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"options","summary":"The loading options that were specified (see {@link #load} for details)"}],"name":"beforeload","summary":"Fires before a request is made for a new data object. If the beforeload handler returns <tt>false</tt> the {@link #load} action will be canceled."},{"parameters":[{"type":"Store","optional":false,"name":"el","summary":"this"},{"type":"Ext.data.Record[]","optional":false,"name":"records","summary":"The Records that were loaded"},{"type":"Object","optional":false,"name":"options","summary":"The loading options that were specified (see {@link #load} for details)"}],"name":"load","summary":"Fires after a new set of Records has been loaded."},{"parameters":[{"type":"misc","optional":false,"name":"misc","summary":"See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#loadexception loadexception}"}],"name":"loadexception","summary":"<p>This event is <b>deprecated</b> in favor of the catch-all <b><code>{@link #exception}</code></b> event instead.</p> <p>This event is relayed through the corresponding {@link Ext.data.DataProxy}. See {@link Ext.data.DataProxy}.{@link Ext.data.DataProxy#loadexception loadexception} for additional details. for description."},{"parameters":[{"type":"Ext.data.Store","optional":false,"name":"store","summary":""},{"type":"String","optional":false,"name":"action","summary":"[Ext.data.Api.actions.create|update|destroy]"},{"type":"Record/Array[Record]","optional":false,"name":"rs","summary":""},{"type":"Object","optional":false,"name":"options","summary":"The loading options that were specified. Edit <code>options.params</code> to add Http parameters to the request.  (see {@link #save} for details)"},{"type":"Object","optional":false,"name":"arg","summary":"The callback's arg object passed to the {@link #request} function"}],"name":"beforewrite","summary":""},{"parameters":[{"type":"Ext.data.Store","optional":false,"name":"store","summary":""},{"type":"String","optional":false,"name":"action","summary":"[Ext.data.Api.actions.create|update|destroy]"},{"type":"Object","optional":false,"name":"result","summary":"The 'data' picked-out out of the response for convenience."},{"type":"Ext.Direct.Transaction","optional":false,"name":"res","summary":""},{"type":"Record/Record[]","optional":false,"name":"rs","summary":"Store's records, the subject(s) of the write-action"}],"name":"write","summary":"Fires if the server returns 200 after an Ext.data.Api.actions CRUD action. Success or failure of the action is available in the <code>result['successProperty']</code> property. The server-code might set the <code>successProperty</code> to <tt>false</tt> if a database validation failed, for example."}]},{"name":"Store.Error","fullName":"Ext.data.Store.Error","summary":"Store Error extension.\r\n","package":"data","definedIn":"data\\Store.js","xtype":null,"extends":"Ext.Error","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String","optional":false,"name":"name","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":null},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Tree","fullName":"Ext.data.Tree","summary":"Represents a tree data structure and bubbles all the events for its nodes. The nodes\r\nin the tree have most standard DOM functionality.\r\n","package":"data","definedIn":"data\\Tree.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Node","optional":true,"name":"root","summary":"The root node"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"pathSeparator","summary":"The token used to separate paths in node ids (defaults to '/').\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"root","summary":"The root node for this tree\r\n"}],"methods":[{"parameters":[{"type":"String","optional":false,"name":"id","summary":""}],"return":{"type":"Node","summary":""},"hide":false,"private":false,"name":"getNodeById","summary":"Gets a node in this tree by its id.\r\n"},{"parameters":[],"return":{"type":"Node","summary":""},"hide":false,"private":false,"name":"getRootNode","summary":"Returns the root node for this tree.\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":""}],"return":{"type":"Node","summary":""},"hide":false,"private":false,"name":"setRootNode","summary":"Sets the root node for this tree.\r\n"}],"events":[{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The newly appended node"},{"type":"Number","optional":false,"name":"index","summary":"The index of the newly appended node"}],"name":"append","summary":"Fires when a new child node is appended to a node in this tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be appended"}],"name":"beforeappend","summary":"Fires before a new child is appended to a node in this tree, return false to cancel the append."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be inserted"},{"type":"Node","optional":false,"name":"refNode","summary":"The child node the node is being inserted before"}],"name":"beforeinsert","summary":"Fires before a new child is inserted in a node in this tree, return false to cancel the insert."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"node","summary":"The node being moved"},{"type":"Node","optional":false,"name":"oldParent","summary":"The parent of the node"},{"type":"Node","optional":false,"name":"newParent","summary":"The new parent the node is moving to"},{"type":"Number","optional":false,"name":"index","summary":"The index it is being moved to"}],"name":"beforemove","summary":"Fires before a node is moved to a new location in the tree. Return false to cancel the move."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be removed"}],"name":"beforeremove","summary":"Fires before a child is removed from a node in this tree, return false to cancel the remove."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node inserted"},{"type":"Node","optional":false,"name":"refNode","summary":"The child node the node was inserted before"}],"name":"insert","summary":"Fires when a new child node is inserted in a node in this tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"node","summary":"The node moved"},{"type":"Node","optional":false,"name":"oldParent","summary":"The old parent of this node"},{"type":"Node","optional":false,"name":"newParent","summary":"The new parent of this node"},{"type":"Number","optional":false,"name":"index","summary":"The index it was moved to"}],"name":"move","summary":"Fires when a node is moved to a new location in the tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node removed"}],"name":"remove","summary":"Fires when a child node is removed from a node in this tree."}]},{"name":"XmlReader","fullName":"Ext.data.XmlReader","summary":"<p>Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document\r\nbased on mappings in a provided {@link Ext.data.Record} constructor.</p>\r\n<p><b>Note</b>: that in order for the browser to parse a returned XML document, the Content-Type\r\nheader in the HTTP response must be set to \"text/xml\" or \"application/xml\".</p>\r\n<p>Example code:</p>\r\n<pre><code>\r\nvar Employee = Ext.data.Record.create([\r\n  {name: 'name', mapping: 'name'},     // \"mapping\" property not needed if it is the same as \"name\"\r\n  {name: 'occupation'}                 // This field will use \"occupation\" as the mapping.\r\n]);\r\nvar myReader = new Ext.data.XmlReader({\r\n   totalRecords: \"results\", // The element which contains the total dataset size (optional)\r\n   record: \"row\",           // The repeated element which contains row information\r\n   id: \"id\"                 // The element within the row that provides an ID for the record (optional)\r\n}, Employee);\r\n</code></pre>\r\n<p>\r\nThis would consume an XML file like this:\r\n<pre><code>\r\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n&lt;dataset>\r\n &lt;results>2&lt;/results>\r\n &lt;row>\r\n   &lt;id>1&lt;/id>\r\n   &lt;name>Bill&lt;/name>\r\n   &lt;occupation>Gardener&lt;/occupation>\r\n &lt;/row>\r\n &lt;row>\r\n   &lt;id>2&lt;/id>\r\n   &lt;name>Ben&lt;/name>\r\n   &lt;occupation>Horticulturalist&lt;/occupation>\r\n &lt;/row>\r\n&lt;/dataset>\r\n</code></pre>\r\n@cfg {String} totalRecords The DomQuery path from which to retrieve the total number of records\r\nin the dataset. This is only needed if the whole dataset is not passed in one go, but is being\r\npaged from the remote server.\r\n@cfg {String} record The DomQuery path to the repeated element which contains record information.\r\n@cfg {String} success The DomQuery path to the success attribute used by forms.\r\n@cfg {String} idPath The DomQuery path relative from the record element to the element that contains\r\na record identifier value.\r\n","package":"data","definedIn":"data\\XmlReader.js","xtype":null,"extends":"Ext.data.DataReader","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"meta","summary":"Metadata configuration options"},{"type":"Object","optional":false,"name":"recordType","summary":"Either an Array of field definition objects as passed to {@link Ext.data.Record#create}, or a Record constructor object created using {@link Ext.data.Record#create}."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new XmlReader."},"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"xmlData","summary":"After any data loads/reads, the raw XML Document is available for further custom processing.\r\n"}],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"response","summary":"The XHR object which contains the parsed XML document.  The response is expected\r\nto contain a property called <tt>responseXML</tt> which refers to an XML document object.\r\na cache of Ext.data.Records."}],"return":{"type":"Object} records A data block which is used by an {@link Ext.data.Store","summary":"as"},"hide":false,"private":false,"name":"read","summary":"This method is only used by a DataProxy which has retrieved data from a remote server.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"doc","summary":"A parsed XML document.\r\na cache of Ext.data.Records."}],"return":{"type":"Object} records A data block which is used by an {@link Ext.data.Store","summary":"as"},"hide":false,"private":false,"name":"readRecords","summary":"Create a data block containing Ext.data.Records from an XML document.\r\n"}],"events":[]},{"name":"XmlStore","fullName":"Ext.data.XmlStore","summary":"<p>Small helper class to make creating {@link Ext.data.Store}s from XML data easier.\r\nA XmlStore will be automatically configured with a {@link Ext.data.XmlReader}.</p>\r\n<p>A store configuration would be something like:<pre><code>\r\nvar store = new Ext.data.XmlStore({\r\n    // store configs\r\n    autoDestroy: true,\r\n    storeId: 'myStore',\r\n    url: 'sheldon.xml', // automatically configures a HttpProxy\r\n    // reader configs\r\n    record: 'Item', // records will have an \"Item\" tag\r\n    idPath: 'ASIN',\r\n    totalRecords: '@TotalResults'\r\n    fields: [\r\n        // set up the fields mapping into the xml doc\r\n        // The first needs mapping, the others are very basic\r\n       {name: 'Author', mapping: 'ItemAttributes > Author'},\r\n        'Title', 'Manufacturer', 'ProductGroup'\r\n    ]\r\n});\r\n</code></pre></p>\r\n<p>This store is configured to consume a returned object of the form:<pre><code>\r\n&#60?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n&#60ItemSearchResponse xmlns=\"http://webservices.amazon.com/AWSECommerceService/2009-05-15\">\r\n    &#60Items>\r\n        &#60Request>\r\n            &#60IsValid>True&#60/IsValid>\r\n            &#60ItemSearchRequest>\r\n                &#60Author>Sidney Sheldon&#60/Author>\r\n                &#60SearchIndex>Books&#60/SearchIndex>\r\n            &#60/ItemSearchRequest>\r\n        &#60/Request>\r\n        &#60TotalResults>203&#60/TotalResults>\r\n        &#60TotalPages>21&#60/TotalPages>\r\n        &#60Item>\r\n            &#60ASIN>0446355453&#60/ASIN>\r\n            &#60DetailPageURL>\r\n                http://www.amazon.com/\r\n            &#60/DetailPageURL>\r\n            &#60ItemAttributes>\r\n                &#60Author>Sidney Sheldon&#60/Author>\r\n                &#60Manufacturer>Warner Books&#60/Manufacturer>\r\n                &#60ProductGroup>Book&#60/ProductGroup>\r\n                &#60Title>Master of the Game&#60/Title>\r\n            &#60/ItemAttributes>\r\n        &#60/Item>\r\n    &#60/Items>\r\n&#60/ItemSearchResponse>\r\n</code></pre>\r\nAn object literal of this form could also be used as the {@link #data} config option.</p>\r\n<p><b>Note:</b> Although not listed here, this class accepts all of the configuration options of\r\n<b>{@link Ext.data.XmlReader XmlReader}</b>.</p>\r\n","package":"data","definedIn":"data\\XmlStore.js","xtype":"xmlstore","extends":"Ext.data.Store","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Ext.data.DataReader","optional":false,"name":"reader","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"XmlWriter","fullName":"Ext.data.XmlWriter","summary":"DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML.\r\n","package":"data","definedIn":"data\\XmlWriter.js","xtype":null,"extends":"Ext.data.DataWriter","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"rec","summary":""}],"return":null,"hide":false,"private":false,"name":"createRecord","summary":"createRecord\r\n"},{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"rec","summary":""}],"return":null,"hide":false,"private":false,"name":"destroyRecord","summary":"destroyRecord\r\n"},{"parameters":[{"type":"String","optional":false,"name":"action","summary":"[Ext.data.Api.create|read|update|destroy]"},{"type":"Record[]","optional":false,"name":"rs","summary":""},{"type":"Object","optional":false,"name":"http","summary":"params"},{"type":"Object","optional":false,"name":"data","summary":"object populated according to DataReader meta-data \"root\" and \"idProperty\""}],"return":null,"hide":false,"private":false,"name":"render","summary":"Final action of a write event.  Apply the written data-object to params.\r\n"},{"parameters":[{"type":"Ext.data.Record","optional":false,"name":"rec","summary":""}],"return":null,"hide":false,"private":false,"name":"updateRecord","summary":"updateRecord\r\n"}],"events":[]}]},{"name":"dd","fullName":"dd","parentFullName":"Ext","packages":[],"classes":[{"name":"DD","fullName":"Ext.dd.DD","summary":"A DragDrop implementation where the linked element follows the\r\nmouse cursor during a drag.\r\n","package":"dd","definedIn":"dd\\DDCore.js","xtype":null,"extends":"Ext.dd.DragDrop","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String","optional":false,"name":"id","summary":"the id of the linked element"},{"type":"String","optional":false,"name":"sGroup","summary":"the group of related DragDrop items"},{"type":"object","optional":false,"name":"config","summary":"an object containing configurable attributes Valid properties for DD: scroll"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.dd.DDProxy","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"scroll","summary":"When set to true, the utility automatically tries to scroll the browser\r\nwindow when a drag and drop element is dragged near the viewport boundary.\r\nDefaults to true.\r\n"}],"methods":[{"parameters":[{"type":"int","optional":false,"name":"iPageX","summary":"the X coordinate of the click"},{"type":"int","optional":false,"name":"iPageY","summary":"the Y coordinate of the click"}],"return":null,"hide":false,"private":false,"name":"autoOffset","summary":"Sets the pointer offset to the distance between the linked element's top\r\nleft corner and the location the element was clicked\r\n"},{"parameters":[{"type":"int","optional":false,"name":"iDeltaX","summary":"the distance from the left"},{"type":"int","optional":false,"name":"iDeltaY","summary":"the distance from the top"}],"return":null,"hide":false,"private":false,"name":"setDelta","summary":"Sets the pointer offset.  You can call this directly to force the\r\noffset to be in a particular location (e.g., pass in 0,0 to set it\r\nto the center of the object)\r\n"},{"parameters":[{"type":"int","optional":false,"name":"iPageX","summary":"the X coordinate of the mousedown or drag event"},{"type":"int","optional":false,"name":"iPageY","summary":"the Y coordinate of the mousedown or drag event"}],"return":null,"hide":false,"private":false,"name":"setDragElPos","summary":"Sets the drag element to the location of the mousedown or click event,\r\nmaintaining the cursor location relative to the location on the element\r\nthat was clicked.  Override this if you want to place the element in a\r\nlocation other than where the cursor is.\r\n"},{"parameters":[{"type":"HTMLElement","optional":false,"name":"el","summary":"the element to move"},{"type":"int","optional":false,"name":"iPageX","summary":"the X coordinate of the mousedown or drag event"},{"type":"int","optional":false,"name":"iPageY","summary":"the Y coordinate of the mousedown or drag event"}],"return":null,"hide":false,"private":false,"name":"alignElWithMouse","summary":"Sets the element to the location of the mousedown or click event,\r\nmaintaining the cursor location relative to the location on the element\r\nthat was clicked.  Override this if you want to place the element in a\r\nlocation other than where the cursor is.\r\n"},{"parameters":[{"type":"","optional":false,"name":"iPageX","summary":"the current x position (optional, this just makes it so we\r\ndon't have to look it up again)"},{"type":"","optional":false,"name":"iPageY","summary":"the current y position (optional, this just makes it so we\r\ndon't have to look it up again)"}],"return":null,"hide":false,"private":false,"name":"cachePosition","summary":"Saves the most recent position so that we can reset the constraints and\r\ntick marks on-demand.  We need to know this so that we can calculate the\r\nnumber of pixels the element is offset from its original position.\r\n"}],"events":[]},{"name":"DDProxy","fullName":"Ext.dd.DDProxy","summary":"A DragDrop implementation that inserts an empty, bordered div into\r\nthe document that follows the cursor during drag operations.  At the time of\r\nthe click, the frame div is resized to the dimensions of the linked html\r\nelement, and moved to the exact location of the linked element.\r\n\r\nReferences to the \"frame\" element refer to the single proxy element that\r\nwas created to be dragged in place of all DDProxy elements on the\r\npage.\r\n\r\n","package":"dd","definedIn":"dd\\DDCore.js","xtype":null,"extends":"Ext.dd.DD","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String","optional":false,"name":"id","summary":"the id of the linked html element"},{"type":"String","optional":false,"name":"sGroup","summary":"the group of related DragDrop objects"},{"type":"object","optional":false,"name":"config","summary":"an object containing configurable attributes Valid properties for DDProxy in addition to those in DragDrop: resizeFrame, centerFrame, dragElId"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.dd.DragSource","configOptions":[],"properties":[{"type":"","static":true,"hide":false,"private":false,"name":"Ext.dd.DDProxy.dragElId","summary":"The default drag frame div id\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"resizeFrame","summary":"By default we resize the drag frame to be the same size as the element\r\nwe want to drag (this is to get the frame effect).  We can turn it off\r\nif we want a different behavior.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"centerFrame","summary":"By default the frame is positioned exactly where the drag element is, so\r\nwe use the cursor offset provided by Ext.dd.DD.  Another option that works only if\r\nyou do not have constraints on the obj is to have the drag frame centered\r\naround the cursor.  Set centerFrame to true for this effect.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"createFrame","summary":"Creates the proxy element if it does not yet exist\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"initFrame","summary":"Initialization for the drag frame element.  Must be called in the\r\nconstructor of all subclasses\r\n"}],"events":[]},{"name":"DDTarget","fullName":"Ext.dd.DDTarget","summary":"A DragDrop implementation that does not move, but can be a drop\r\ntarget.  You would get the same result by simply omitting implementation\r\nfor the event callbacks, but this way we reduce the processing cost of the\r\nevent listener and the callbacks.\r\n","package":"dd","definedIn":"dd\\DDCore.js","xtype":null,"extends":"Ext.dd.DragDrop","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String","optional":false,"name":"id","summary":"the id of the element that is a drop target"},{"type":"String","optional":false,"name":"sGroup","summary":"the group of related DragDrop objects"},{"type":"object","optional":false,"name":"config","summary":"an object containing configurable attributes Valid properties for DDTarget in addition to those in DragDrop: none"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.dd.DropTarget","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"DragDrop","fullName":"Ext.dd.DragDrop","summary":"Defines the interface and base operation of items that that can be\r\ndragged or can be drop targets.  It was designed to be extended, overriding\r\nthe event handlers for startDrag, onDrag, onDragOver and onDragOut.\r\nUp to three html elements can be associated with a DragDrop instance:\r\n<ul>\r\n<li>linked element: the element that is passed into the constructor.\r\nThis is the element which defines the boundaries for interaction with\r\nother DragDrop objects.</li>\r\n<li>handle element(s): The drag operation only occurs if the element that\r\nwas clicked matches a handle element.  By default this is the linked\r\nelement, but there are times that you will want only a portion of the\r\nlinked element to initiate the drag operation, and the setHandleElId()\r\nmethod provides a way to define this.</li>\r\n<li>drag element: this represents the element that would be moved along\r\nwith the cursor during a drag operation.  By default, this is the linked\r\nelement itself as in {@link Ext.dd.DD}.  setDragElId() lets you define\r\na separate element that would be moved, as in {@link Ext.dd.DDProxy}.\r\n</li>\r\n</ul>\r\nThis class should not be instantiated until the onload event to ensure that\r\nthe associated elements are available.\r\nThe following would define a DragDrop obj that would interact with any\r\nother DragDrop obj in the \"group1\" group:\r\n<pre>\r\ndd = new Ext.dd.DragDrop(\"div1\", \"group1\");\r\n</pre>\r\nSince none of the event handlers have been implemented, nothing would\r\nactually happen if you were to run the code above.  Normally you would\r\noverride this class or one of the default implementations, but you can\r\nalso override the methods you want on an instance of the class...\r\n<pre>\r\ndd.onDragDrop = function (e, id) {\r\n&nbsp;&nbsp;alert(\"dd was dropped on \" + id);\r\n}\r\n</pre>\r\n","package":"dd","definedIn":"dd\\DDCore.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String","optional":false,"name":"id","summary":"of the element that is linked to this instance"},{"type":"String","optional":false,"name":"sGroup","summary":"the group of related DragDrop objects"},{"type":"object","optional":false,"name":"config","summary":"an object containing configurable attributes Valid properties for DragDrop: padding, isTarget, maintainOffset, primaryButtonOnly"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.dd.DD,Ext.dd.DDTarget","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"ignoreSelf","summary":"Set to false to enable a DragDrop object to fire drag events while dragging\r\nover its own Element. Defaults to true - DragDrop objects do not by default\r\nfire drag events to themselves.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"id","summary":"The id of the element associated with this object.  This is what we\r\nrefer to as the \"linked element\" because the size and position of\r\nthis element is used to determine when the drag and drop objects have\r\ninteracted.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"config","summary":"Configuration attributes passed into the constructor\r\n"}],"methods":[],"events":[]},{"name":"DragDropMgr","fullName":"Ext.dd.DragDropMgr","summary":"DragDropMgr is a singleton that tracks the element interaction for\r\nall DragDrop items in the window.  Generally, you will not call\r\nthis class directly, but it does have helper methods that could\r\nbe useful in your DragDrop implementations.\r\n","package":"dd","definedIn":"dd\\DDCore.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"DragSource","fullName":"Ext.dd.DragSource","summary":"A simple class that provides the basic implementation needed to make any element draggable.\r\n","package":"dd","definedIn":"dd\\DragSource.js","xtype":null,"extends":"Ext.dd.DDProxy","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The container element"},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.dd.DragZone","configOptions":[{"type":"String","optional":false,"name":"ddGroup","summary":"A named drag drop group to which this object belongs.  If a group is specified, then this object will only\r\ninteract with other drag drop objects in the same group (defaults to undefined).\r\n"},{"type":"String","optional":false,"name":"dropAllowed","summary":"The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").\r\n"},{"type":"String","optional":false,"name":"dropNotAllowed","summary":"The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dropped element"}],"return":null,"hide":false,"private":false,"name":"afterDragDrop","summary":"An empty function by default, but provided so that you can perform a custom action\r\nafter a valid drag drop has occurred by providing an implementation.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":null,"hide":false,"private":false,"name":"afterDragEnter","summary":"An empty function by default, but provided so that you can perform a custom action\r\nwhen the dragged item enters the drop target by providing an implementation.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":null,"hide":false,"private":false,"name":"afterDragOut","summary":"An empty function by default, but provided so that you can perform a custom action\r\nafter the dragged item is dragged out of the target without dropping.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":null,"hide":false,"private":false,"name":"afterDragOver","summary":"An empty function by default, but provided so that you can perform a custom action\r\nwhile the dragged item is over the drop target by providing an implementation.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"target","summary":"The target DD"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dropped element"}],"return":null,"hide":false,"private":false,"name":"afterInvalidDrop","summary":"An empty function by default, but provided so that you can perform a custom action\r\nafter a valid drop has occurred by providing an implementation.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":{"type":"Boolean","summary":"isValid True if the drag drop event is valid, else false to cancel"},"hide":false,"private":false,"name":"beforeDragDrop","summary":"An empty function by default, but provided so that you can perform a custom action before the dragged\r\nitem is dropped onto the target and optionally cancel the onDragDrop.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":{"type":"Boolean","summary":"isValid True if the drag event is valid, else false to cancel"},"hide":false,"private":false,"name":"beforeDragEnter","summary":"An empty function by default, but provided so that you can perform a custom action\r\nbefore the dragged item enters the drop target and optionally cancel the onDragEnter.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":{"type":"Boolean","summary":"isValid True if the drag event is valid, else false to cancel"},"hide":false,"private":false,"name":"beforeDragOut","summary":"An empty function by default, but provided so that you can perform a custom action before the dragged\r\nitem is dragged out of the target without dropping, and optionally cancel the onDragOut.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":{"type":"Boolean","summary":"isValid True if the drag event is valid, else false to cancel"},"hide":false,"private":false,"name":"beforeDragOver","summary":"An empty function by default, but provided so that you can perform a custom action\r\nwhile the dragged item is over the drop target and optionally cancel the onDragOver.\r\n"},{"parameters":[{"type":"Ext.dd.DragDrop","optional":false,"name":"target","summary":"The drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event object"},{"type":"String","optional":false,"name":"id","summary":"The id of the dragged element"}],"return":{"type":"Boolean","summary":"isValid True if the invalid drop should proceed, else false to cancel"},"hide":false,"private":false,"name":"beforeInvalidDrop","summary":"An empty function by default, but provided so that you can perform a custom action after an invalid\r\ndrop has occurred.\r\n"},{"parameters":[],"return":{"type":"Object","summary":"data An object containing arbitrary data"},"hide":false,"private":false,"name":"getDragData","summary":"Returns the data object associated with this drag source\r\n"},{"parameters":[],"return":{"type":"Ext.dd.StatusProxy","summary":"proxy The StatusProxy"},"hide":false,"private":false,"name":"getProxy","summary":"Returns the drag source's underlying {@link Ext.dd.StatusProxy}\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hideProxy","summary":"Hides the drag source's {@link Ext.dd.StatusProxy}\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data to be shared with drop targets"},{"type":"Event","optional":false,"name":"e","summary":"The event object"}],"return":{"type":"Boolean","summary":"isValid True if the drag event is valid, else false to cancel"},"hide":false,"private":false,"name":"onBeforeDrag","summary":"An empty function by default, but provided so that you can perform a custom action before the initial\r\ndrag event begins and optionally cancel it.\r\n"}],"events":[]},{"name":"DragTracker","fullName":"Ext.dd.DragTracker","summary":"","package":"dd","definedIn":"dd\\DragTracker.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"active","summary":"Defaults to <tt>false</tt>.\r\n"},{"type":"Boolean/Number","optional":false,"name":"autoStart","summary":"Defaults to <tt>false</tt>. Specify <tt>true</tt> to defer trigger start by 1000 ms.\r\nSpecify a Number for the number of milliseconds to defer trigger start.\r\n"},{"type":"Number","optional":false,"name":"tolerance","summary":"Defaults to <tt>5</tt>.\r\n"}],"properties":[],"methods":[],"events":[{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"e","summary":"event object"}],"name":"drag","summary":""},{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"e","summary":"event object"}],"name":"dragend","summary":""},{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"startXY","summary":"the page coordinates of the event"}],"name":"dragstart","summary":""},{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"e","summary":"event object"}],"name":"mousedown","summary":""},{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"e","summary":"event object"}],"name":"mousemove","summary":""},{"parameters":[{"type":"Object","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"e","summary":"event object"}],"name":"mouseup","summary":""}]},{"name":"DragZone","fullName":"Ext.dd.DragZone","summary":"<p>This class provides a container DD instance that allows dragging of multiple child source nodes.</p>\r\n<p>This class does not move the drag target nodes, but a proxy element which may contain\r\nany DOM structure you wish. The DOM element to show in the proxy is provided by either a\r\nprovided implementation of {@link #getDragData}, or by registered draggables registered with {@link Ext.dd.Registry}</p>\r\n<p>If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some\r\napplication object (For example nodes in a {@link Ext.DataView DataView}) then use of this class\r\nis the most efficient way to \"activate\" those nodes.</p>\r\n<p>By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}.\r\nHowever a simpler way to allow a DragZone to manage any number of draggable elements is to configure\r\nthe DragZone with  an implementation of the {@link #getDragData} method which interrogates the passed\r\nmouse event to see if it has taken place within an element, or class of elements. This is easily done\r\nby using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a\r\n{@link Ext.DomQuery} selector. For example, to make the nodes of a DataView draggable, use the following\r\ntechnique. Knowledge of the use of the DataView is required:</p><pre><code>\r\nmyDataView.on('render', function () {\r\n    myDataView.dragZone = new Ext.dd.DragZone(myDataView.getEl(), {\r\n\r\n//      On receipt of a mousedown event, see if it is within a DataView node.\r\n//      Return a drag data object if so.\r\n        getDragData: function (e) {\r\n\r\n//          Use the DataView's own itemSelector (a mandatory property) to\r\n//          test if the mousedown is within one of the DataView's nodes.\r\n            var sourceEl = e.getTarget(myDataView.itemSelector, 10);\r\n\r\n//          If the mousedown is within a DataView node, clone the node to produce\r\n//          a ddel element for use by the drag proxy. Also add application data\r\n//          to the returned data object.\r\n            if (sourceEl) {\r\n                d = sourceEl.cloneNode(true);\r\n                d.id = Ext.id();\r\n                return {\r\n                    ddel: d,\r\n                    sourceEl: sourceEl,\r\n                    repairXY: Ext.fly(sourceEl).getXY(),\r\n                    sourceStore: myDataView.store,\r\n                    draggedRecord: v.getRecord(sourceEl)\r\n                }\r\n            }\r\n        },\r\n\r\n//      Provide coordinates for the proxy to slide back to on failed drag.\r\n//      This is the original XY coordinates of the draggable element captured\r\n//      in the getDragData method.\r\n        getRepairXY: function () {\r\n            return this.dragData.repairXY;\r\n        }\r\n    });\r\n});</code></pre>\r\nSee the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which\r\ncooperates with this DragZone.\r\n","package":"dd","definedIn":"dd\\DragZone.js","xtype":null,"extends":"Ext.dd.DragSource","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The container element"},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.grid.GridDragZone,Ext.tree.TreeDragZone","configOptions":[{"type":"Boolean","optional":false,"name":"containerScroll","summary":"for auto scrolling during drag operations.\r\n"},{"type":"String","optional":false,"name":"hlColor","summary":"method after a failed drop (defaults to \"c3daf9\" - light blue)\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"dragData","summary":"This property contains the data representing the dragged object. This data is set up by the implementation\r\nof the {@link #getDragData} method. It must contain a <tt>ddel</tt> property, but can contain\r\nany other data according to the application's needs.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"afterRepair","summary":"Called after a repair of an invalid drop. By default, highlights this.dragData.ddel\r\n"},{"parameters":[{"type":"EventObject","optional":false,"name":"e","summary":"The mouse down event"}],"return":{"type":"Object","summary":"The dragData"},"hide":false,"private":false,"name":"getDragData","summary":"Called when a mousedown occurs in this container. Looks in {@link Ext.dd.Registry}\r\nfor a valid target to drag based on the mouse down. Override this method\r\nto provide your own lookup logic (e.g. finding a child by class name). Make sure your returned\r\nobject has a \"ddel\" attribute (with an HTML Element) for other functions to work.\r\n"},{"parameters":[{"type":"EventObject","optional":false,"name":"e","summary":"The mouse up event"}],"return":{"type":"Array","summary":"The xy location (e.g. [100, 200])"},"hide":false,"private":false,"name":"getRepairXY","summary":"Called before a repair of an invalid drop to get the XY to animate to. By default returns\r\nthe XY of this.dragData.ddel\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"x","summary":"The x position of the click on the dragged object"},{"type":"Number","optional":false,"name":"y","summary":"The y position of the click on the dragged object"}],"return":{"type":"Boolean","summary":"true to continue the drag, false to cancel"},"hide":false,"private":false,"name":"onInitDrag","summary":"Called once drag threshold has been reached to initialize the proxy element. By default, it clones the\r\nthis.dragData.ddel\r\n"}],"events":[]},{"name":"DropTarget","fullName":"Ext.dd.DropTarget","summary":"A simple class that provides the basic implementation needed to make any element a drop target that can have\r\ndraggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided.\r\n","package":"dd","definedIn":"dd\\DropTarget.js","xtype":null,"extends":"Ext.dd.DDTarget","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The container element"},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.dd.DropZone","configOptions":[{"type":"String","optional":false,"name":"ddGroup","summary":"A named drag drop group to which this object belongs.  If a group is specified, then this object will only\r\ninteract with other drag drop objects in the same group (defaults to undefined).\r\n"},{"type":"String","optional":false,"name":"dropAllowed","summary":"The CSS class returned to the drag source when drop is allowed (defaults to \"x-dd-drop-ok\").\r\n"},{"type":"String","optional":false,"name":"dropNotAllowed","summary":"The CSS class returned to the drag source when drop is not allowed (defaults to \"x-dd-drop-nodrop\").\r\n"},{"type":"String","optional":false,"name":"overClass","summary":"The CSS class applied to the drop target element while the drag source is over it (defaults to \"\").\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source"}],"return":{"type":"Boolean","summary":"True if the drop was valid, else false"},"hide":false,"private":false,"name":"notifyDrop","summary":"The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the dragged item has\r\nbeen dropped on it.  This method has no default implementation and returns false, so you must provide an\r\nimplementation that does something to process the drop event and returns true so that the drag source's\r\nrepair action does not run.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source\r\nunderlying {@link Ext.dd.StatusProxy} can be updated"}],"return":{"type":"String","summary":"status The CSS class that communicates the drop status back to the source so that the"},"hide":false,"private":false,"name":"notifyEnter","summary":"The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source is now over the\r\ntarget.  This default implementation adds the CSS class specified by overClass (if any) to the drop element\r\nand returns the dropAllowed config value.  This method should be overridden if drop validation is required.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source"}],"return":null,"hide":false,"private":false,"name":"notifyOut","summary":"The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source has been dragged\r\nout of the target without dropping.  This default implementation simply removes the CSS class specified by\r\noverClass (if any) from the drop element.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source\r\nunderlying {@link Ext.dd.StatusProxy} can be updated"}],"return":{"type":"String","summary":"status The CSS class that communicates the drop status back to the source so that the"},"hide":false,"private":false,"name":"notifyOver","summary":"The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the target.\r\nThis method will be called on every mouse movement while the drag source is over the drop target.\r\nThis default implementation simply returns the dropAllowed config value.\r\n"}],"events":[]},{"name":"DropZone","fullName":"Ext.dd.DropZone","summary":"<p>This class provides a container DD instance that allows dropping on multiple child target nodes.</p>\r\n<p>By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.\r\nHowever a simpler way to allow a DropZone to manage any number of target elements is to configure the\r\nDropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed\r\nmouse event to see if it has taken place within an element, or class of elements. This is easily done\r\nby using the event's {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a\r\n{@link Ext.DomQuery} selector.</p>\r\n<p>Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over\r\na drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},\r\n{@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations\r\nof these methods to provide application-specific behaviour for these events to update both\r\napplication state, and UI state.</p>\r\n<p>For example to make a GridPanel a cooperating target with the example illustrated in\r\n{@link Ext.dd.DragZone DragZone}, the following technique might be used:</p><pre><code>\r\nmyGridPanel.on('render', function () {\r\n    myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {\r\n\r\n//      If the mouse is over a grid row, return that node. This is\r\n//      provided as the \"target\" parameter in all \"onNodeXXXX\" node event handling functions\r\n        getTargetFromEvent: function (e) {\r\n            return e.getTarget(myGridPanel.getView().rowSelector);\r\n        },\r\n\r\n//      On entry into a target node, highlight that node.\r\n        onNodeEnter : function (target, dd, e, data) { \r\n            Ext.fly(target).addClass('my-row-highlight-class');\r\n        },\r\n\r\n//      On exit from a target node, unhighlight that node.\r\n        onNodeOut : function (target, dd, e, data) { \r\n            Ext.fly(target).removeClass('my-row-highlight-class');\r\n        },\r\n\r\n//      While over a target node, return the default drop allowed class which\r\n//      places a \"tick\" icon into the drag proxy.\r\n        onNodeOver : function (target, dd, e, data) { \r\n            return Ext.dd.DropZone.prototype.dropAllowed;\r\n        },\r\n\r\n//      On node drop we can interrogate the target to find the underlying\r\n//      application object that is the real target of the dragged data.\r\n//      In this case, it is a Record in the GridPanel's Store.\r\n//      We can use the data set up by the DragZone's getDragData method to read\r\n//      any data we decided to attach in the DragZone's getDragData method.\r\n        onNodeDrop : function (target, dd, e, data) {\r\n            var rowIndex = myGridPanel.getView().findRowIndex(target);\r\n            var r = myGridPanel.getStore().getAt(rowIndex);\r\n            Ext.Msg.alert('Drop gesture', 'Dropped Record id ' + data.draggedRecord.id +\r\n                ' on Record id ' + r.id);\r\n            return true;\r\n        }\r\n    });\r\n}\r\n</code></pre>\r\nSee the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which\r\ncooperates with this DropZone.\r\n","package":"dd","definedIn":"dd\\DropZone.js","xtype":null,"extends":"Ext.dd.DropTarget","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The container element"},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.tree.TreeDropZone","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Event","optional":false,"name":"e","summary":"The event"}],"return":{"type":"Object","summary":"data The custom data"},"hide":false,"private":false,"name":"getTargetFromEvent","summary":"Returns a custom data object associated with the DOM node that is the target of the event.  By default\r\nthis looks up the event target in the {@link Ext.dd.Registry}, although you can override this method to\r\nprovide your own custom lookup.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source"}],"return":{"type":"Boolean","summary":"True if the drop was valid, else false"},"hide":false,"private":false,"name":"notifyDrop","summary":"The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the dragged item has\r\nbeen dropped on it.  The drag zone will look up the target node based on the event passed in, and if there\r\nis a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,\r\notherwise it will call {@link #onContainerDrop}.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source\r\nunderlying {@link Ext.dd.StatusProxy} can be updated"}],"return":{"type":"String","summary":"status The CSS class that communicates the drop status back to the source so that the"},"hide":false,"private":false,"name":"notifyEnter","summary":"The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source is now over\r\nthe zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop\r\nnodes can process drag drop operations, so if you need the drop zone itself to be able to process drops\r\nyou should override this method and provide a custom implementation.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop target"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag zone"}],"return":null,"hide":false,"private":false,"name":"notifyOut","summary":"The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source has been dragged\r\nout of the zone without dropping.  If the drag source is currently over a registered node, the notification\r\nwill be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source\r\nunderlying {@link Ext.dd.StatusProxy} can be updated"}],"return":{"type":"String","summary":"status The CSS class that communicates the drop status back to the source so that the"},"hide":false,"private":false,"name":"notifyOver","summary":"The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the drop zone.\r\nThis method will be called on every mouse movement while the drag source is over the drop zone.\r\nIt will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically\r\ndelegate to the appropriate node-specific methods as necessary when the drag source enters and exits\r\nregistered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a\r\nregistered node, it will call {@link #onContainerOver}.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source"}],"return":{"type":"Boolean","summary":"True if the drop was valid, else false"},"hide":false,"private":false,"name":"onContainerDrop","summary":"Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped on it,\r\nbut not on any of its registered drop nodes.  The default implementation returns false, so it should be\r\noverridden to provide the appropriate processing of the drop event if you need the drop zone itself to\r\nbe able to accept drops.  It should return true when valid so that the drag source's repair action does not run.\r\n"},{"parameters":[{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source\r\nunderlying {@link Ext.dd.StatusProxy} can be updated"}],"return":{"type":"String","summary":"status The CSS class that communicates the drop status back to the source so that the"},"hide":false,"private":false,"name":"onContainerOver","summary":"Called while the DropZone determines that a {@link Ext.dd.DragSource} is being dragged over it,\r\nbut not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so\r\nit should be overridden to provide the proper feedback if necessary.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"nodeData","summary":"The custom data associated with the drop node (this is the same value returned from\r\n{@link #getTargetFromEvent} for this node)"},{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source"}],"return":{"type":"Boolean","summary":"True if the drop was valid, else false"},"hide":false,"private":false,"name":"onNodeDrop","summary":"Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped onto\r\nthe drop node.  The default implementation returns false, so it should be overridden to provide the\r\nappropriate processing of the drop event and return true so that the drag source's repair action does not run.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"nodeData","summary":"The custom data associated with the drop node (this is the same value returned from\r\n{@link #getTargetFromEvent} for this node)"},{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source"}],"return":null,"hide":false,"private":false,"name":"onNodeEnter","summary":"Called when the DropZone determines that a {@link Ext.dd.DragSource} has entered a drop node\r\nthat has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.\r\nThis method has no default implementation and should be overridden to provide\r\nnode-specific processing if necessary.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"nodeData","summary":"The custom data associated with the drop node (this is the same value returned from\r\n{@link #getTargetFromEvent} for this node)"},{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source"}],"return":null,"hide":false,"private":false,"name":"onNodeOut","summary":"Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dragged out of\r\nthe drop node without dropping.  This method has no default implementation and should be overridden to provide\r\nnode-specific processing if necessary.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"nodeData","summary":"The custom data associated with the drop node (this is the same value returned from\r\n{@link #getTargetFromEvent} for this node)"},{"type":"Ext.dd.DragSource","optional":false,"name":"source","summary":"The drag source that was dragged over this drop zone"},{"type":"Event","optional":false,"name":"e","summary":"The event"},{"type":"Object","optional":false,"name":"data","summary":"An object containing arbitrary data supplied by the drag source\r\nunderlying {@link Ext.dd.StatusProxy} can be updated"}],"return":{"type":"String","summary":"status The CSS class that communicates the drop status back to the source so that the"},"hide":false,"private":false,"name":"onNodeOver","summary":"Called while the DropZone determines that a {@link Ext.dd.DragSource} is over a drop node\r\nthat has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.\r\nThe default implementation returns this.dropNotAllowed, so it should be\r\noverridden to provide the proper feedback.\r\n"}],"events":[]},{"name":"PanelProxy","fullName":"Ext.dd.PanelProxy","summary":"A custom drag proxy implementation specific to {@link Ext.Panel}s. This class is primarily used internally\r\nfor the Panel's drag drop implementation, and should never need to be created directly.\r\n","package":"dd","definedIn":"widgets\\PanelDD.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"","optional":false,"name":"panel","summary":"The {@link Ext.Panel} to proxy for"},{"type":"","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"insertProxy","summary":"false to drag with no proxy (defaults to true).\r\n"}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Element","summary":"The proxy's element"},"hide":false,"private":false,"name":"getEl","summary":"Gets the proxy's element\r\n"},{"parameters":[],"return":{"type":"Element","summary":"The proxy's ghost element"},"hide":false,"private":false,"name":"getGhost","summary":"Gets the proxy's ghost element\r\n"},{"parameters":[],"return":{"type":"Element","summary":"The proxy's element"},"hide":false,"private":false,"name":"getProxy","summary":"Gets the proxy's element\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hides the proxy\r\n"},{"parameters":[{"type":"HTMLElement","optional":false,"name":"parentNode","summary":"The proxy's parent DOM node"},{"type":"HTMLElement","optional":true,"name":"before","summary":"The sibling node before which the proxy should be inserted (defaults\r\nto the parent's last child if not specified)"}],"return":null,"hide":false,"private":false,"name":"moveProxy","summary":"Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel\r\nto keep the proxy sync'd to the Panel's location.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"show","summary":"Shows the proxy\r\n"}],"events":[]},{"name":"Registry","fullName":"Ext.dd.Registry","summary":"Provides easy access to all drag drop components that are registered on a page.  Items can be retrieved either\r\ndirectly by DOM node id, or by passing in the drag drop event that occurred and looking up the event target.\r\n","package":"dd","definedIn":"dd\\Registry.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"id","summary":"The DOM node or id to look up"}],"return":{"type":"Object","summary":"handle The custom handle data"},"hide":false,"private":false,"name":"getHandle","summary":"Returns the handle registered for a DOM Node by id\r\n"},{"parameters":[{"type":"Event","optional":false,"name":"e","summary":"The event"}],"return":{"type":"Object","summary":"handle The custom handle data"},"hide":false,"private":false,"name":"getHandleFromEvent","summary":"Returns the handle that is registered for the DOM node that is the target of the event\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"id","summary":"The DOM node or id to look up"}],"return":{"type":"Object","summary":"data The custom data"},"hide":false,"private":false,"name":"getTarget","summary":"Returns a custom data object that is registered for a DOM node by id\r\n"},{"parameters":[{"type":"Event","optional":false,"name":"e","summary":"The event"}],"return":{"type":"Object","summary":"data The custom data"},"hide":false,"private":false,"name":"getTargetFromEvent","summary":"Returns a custom data object that is registered for the DOM node that is the target of the event\r\n"},{"parameters":[{"type":"","optional":false,"name":"{String/HTMLElement)","summary":"element The id or DOM node to register"},{"type":"Object","optional":true,"name":"data","summary":"An custom data object that will be passed between the elements that are involved\r\nin drag drop operations.  You can populate this object with any arbitrary properties that your own code\r\nknows how to interpret, plus there are some specific properties known to the Registry that should be\r\npopulated in the data object (if applicable):\r\n<pre>\r\nValue      Description<br />\r\n---------  ------------------------------------------<br />\r\nhandles    Array of DOM nodes that trigger dragging<br />\r\nfor the element being registered<br />\r\nisHandle   True if the element passed in triggers<br />\r\ndragging itself, else false\r\n</pre>"}],"return":null,"hide":false,"private":false,"name":"register","summary":"Resgister a drag drop element\r\n"},{"parameters":[{"type":"","optional":false,"name":"{String/HTMLElement)","summary":"element The id or DOM node to unregister"}],"return":null,"hide":false,"private":false,"name":"unregister","summary":"Unregister a drag drop element\r\n"}],"events":[]},{"name":"ScrollManager","fullName":"Ext.dd.ScrollManager","summary":"<p>Provides automatic scrolling of overflow regions in the page during drag operations.</p>\r\n<p>The ScrollManager configs will be used as the defaults for any scroll container registered with it,\r\nbut you can also override most of the configs per scroll container by adding a\r\n<tt>ddScrollConfig</tt> object to the target element that contains these properties: {@link #hthresh},\r\n{@link #vthresh}, {@link #increment} and {@link #frequency}.  Example usage:\r\n<pre><code>\r\nvar el = Ext.get('scroll-ct');\r\nel.ddScrollConfig = {\r\n    vthresh: 50,\r\n    hthresh: -1,\r\n    frequency: 100,\r\n    increment: 200\r\n};\r\nExt.dd.ScrollManager.register(el);\r\n</code></pre>\r\n<b>Note: This class uses \"Point Mode\" and is untested in \"Intersect Mode\".</b>\r\n","package":"dd","definedIn":"dd\\ScrollManager.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"refreshCache","summary":"Manually trigger a cache refresh.\r\n"},{"parameters":[{"type":"Mixed/Array","optional":false,"name":"el","summary":"The id of or the element to be scrolled or an array of either"}],"return":null,"hide":false,"private":false,"name":"register","summary":"Registers new overflow element(s) to auto scroll\r\n"},{"parameters":[{"type":"Mixed/Array","optional":false,"name":"el","summary":"The id of or the element to be removed or an array of either"}],"return":null,"hide":false,"private":false,"name":"unregister","summary":"Unregisters overflow element(s) so they are no longer scrolled\r\n"}],"events":[]},{"name":"StatusProxy","fullName":"Ext.dd.StatusProxy","summary":"A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the\r\ndefault drag proxy used by all Ext.dd components.\r\n","package":"dd","definedIn":"dd\\StatusProxy.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"dropAllowed","summary":"The CSS class to apply to the status element when drop is allowed (defaults to \"x-dd-drop-ok\").\r\n"},{"type":"String","optional":false,"name":"dropNotAllowed","summary":"The CSS class to apply to the status element when drop is not allowed (defaults to \"x-dd-drop-nodrop\").\r\n"}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Ext.Layer","summary":"el"},"hide":false,"private":false,"name":"getEl","summary":"Returns the underlying proxy {@link Ext.Layer}\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"el"},"hide":false,"private":false,"name":"getGhost","summary":"Returns the ghost element\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"clear","summary":"True to reset the status and clear the ghost contents, false to preserve them"}],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hides the proxy\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"xy","summary":"The XY position of the element ([x, y])"},{"type":"Function","optional":false,"name":"callback","summary":"The function to call after the repair is complete"},{"type":"Object","optional":false,"name":"scope","summary":"The scope in which to execute the callback"}],"return":null,"hide":false,"private":false,"name":"repair","summary":"Causes the proxy to return to its position of origin via an animation.  Should be called after an\r\ninvalid drop operation by the item being dragged.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"clearGhost","summary":"True to also remove all content from the ghost, false to preserve it"}],"return":null,"hide":false,"private":false,"name":"reset","summary":"Resets the status indicator to the default dropNotAllowed value\r\n"},{"parameters":[{"type":"String","optional":false,"name":"cssClass","summary":"The css class for the new drop status indicator image"}],"return":null,"hide":false,"private":false,"name":"setStatus","summary":"Updates the proxy's visual element to indicate the status of whether or not drop is allowed\r\nover the current target element.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"show","summary":"Displays this proxy\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"stop","summary":"Stops the repair animation if it's currently running\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"sync","summary":"Force the Layer to sync its shadow and shim positions to the element\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"html","summary":"The html that will replace the current innerHTML of the ghost element, or a\r\nDOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first)."}],"return":null,"hide":false,"private":false,"name":"update","summary":"Updates the contents of the ghost element\r\n"}],"events":[]}]},{"name":"direct","fullName":"direct","parentFullName":"Ext","packages":[],"classes":[{"name":"JsonProvider","fullName":"Ext.direct.JsonProvider","summary":"","package":"direct","definedIn":"direct\\JsonProvider.js","xtype":null,"extends":"Ext.direct.Provider","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.direct.PollingProvider,Ext.direct.RemotingProvider","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"PollingProvider","fullName":"Ext.direct.PollingProvider","summary":"\r\n<p>Provides for repetitive polling of the server at distinct {@link #interval intervals}.\r\nThe initial request for data originates from the client, and then is responded to by the\r\nserver.</p>\r\n\r\n<p>All configurations for the PollingProvider should be generated by the server-side\r\nAPI portion of the Ext.Direct stack.</p>\r\n\r\n<p>An instance of PollingProvider may be created directly via the new keyword or by simply\r\nspecifying <tt>type = 'polling'</tt>.  For example:</p>\r\n<pre><code>\r\nvar pollA = new Ext.direct.PollingProvider({\r\n    type:'polling',\r\n    url: 'php/pollA.php',\r\n});\r\nExt.Direct.addProvider(pollA);\r\npollA.disconnect();\r\n\r\nExt.Direct.addProvider(\r\n   {\r\n        type:'polling',\r\n        url: 'php/pollB.php',\r\n        id: 'pollB-provider'\r\n    }\r\n);\r\nvar pollB = Ext.Direct.getProvider('pollB-provider');\r\n</code></pre>\r\n","package":"direct","definedIn":"direct\\PollingProvider.js","xtype":null,"extends":"Ext.direct.JsonProvider","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Object","optional":false,"name":"baseParams","summary":"on every polling request\r\n"},{"type":"Number","optional":false,"name":"interval","summary":"How often to poll the server-side in milliseconds (defaults to <tt>3000</tt> - every\r\n3 seconds).\r\n"},{"type":"Number","optional":false,"name":"priority","summary":"Priority of the request (defaults to <tt>3</tt>). See {@link Ext.direct.Provider#priority}.\r\n"},{"type":"String/Function","optional":false,"name":"url","summary":"The url which the PollingProvider should contact with each request. This can also be\r\nan imported Ext.Direct method which will accept the baseParams as its only argument.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"connect","summary":"Connect to the server-side and begin the polling process. To handle each\r\nresponse subscribe to the data event.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"disconnect","summary":"Disconnect from the server-side and stop the polling process. The disconnect\r\nevent will be fired on a successful disconnect.\r\n"}],"events":[{"parameters":[],"name":"beforepoll","summary":"Fired immediately before a poll takes place, an event handler can return false in order to cancel the poll."},{"parameters":[],"name":"poll","summary":"This event has not yet been implemented."}]},{"name":"Provider","fullName":"Ext.direct.Provider","summary":"<p>Ext.direct.Provider is an abstract class meant to be extended.</p>\r\n\r\n<p>For example ExtJs implements the following subclasses:</p>\r\n<pre><code>\r\nProvider\r\n|\r\n+---{@link Ext.direct.JsonProvider JsonProvider} \r\n    |\r\n    +---{@link Ext.direct.PollingProvider PollingProvider}   \r\n    |\r\n    +---{@link Ext.direct.RemotingProvider RemotingProvider}   \r\n</code></pre>\r\n@abstract\r\n","package":"direct","definedIn":"direct\\Provider.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.direct.JsonProvider","configOptions":[{"type":"String","optional":false,"name":"id","summary":"The unique id of the provider (defaults to an {@link Ext#id auto-assigned id}).\r\nYou should assign an id if you need to be able to access the provider later and you do\r\nnot have an object reference available, for example:\r\n<pre><code>\r\nExt.Direct.addProvider(\r\n   {\r\n        type: 'polling',\r\n        url:  'php/poll.php',\r\n        id:   'poll-provider'\r\n    }\r\n);\r\n     \r\nvar p = {@link Ext.Direct Ext.Direct}.{@link Ext.Direct#getProvider getProvider}('poll-provider');\r\np.disconnect();\r\n</code></pre>\r\n"},{"type":"Number","optional":false,"name":"priority","summary":"Priority of the request. Lower is higher priority, <tt>0</tt> means \"duplex\" (always on).\r\nAll Providers default to <tt>1</tt> except for PollingProvider which defaults to <tt>3</tt>.\r\n"},{"type":"String","optional":false,"name":"type","summary":"<b>Required</b>, <tt>undefined</tt> by default.  The <tt>type</tt> of provider specified\r\nto {@link Ext.Direct Ext.Direct}.{@link Ext.Direct#addProvider addProvider} to create a\r\nnew Provider. Acceptable values by default are:<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>polling</tt></b> : {@link Ext.direct.PollingProvider PollingProvider}</li>\r\n<li><b><tt>remoting</tt></b> : {@link Ext.direct.RemotingProvider RemotingProvider}</li>\r\n</ul></div>\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"isConnected","summary":"Returns whether or not the server-side is currently connected.\r\nAbstract method for subclasses to implement.\r\n"}],"events":[{"parameters":[{"type":"Ext.direct.Provider","optional":false,"name":"provider","summary":"The {@link Ext.direct.Provider Provider}."}],"name":"connect","summary":"Fires when the Provider connects to the server-side."},{"parameters":[{"type":"Ext.direct.Provider","optional":false,"name":"provider","summary":"The {@link Ext.direct.Provider Provider}."},{"type":"event","optional":false,"name":"e","summary":"The {@link Ext.Direct#eventTypes Ext.Direct.Event type} that occurred."}],"name":"data","summary":"Fires when the Provider receives data from the server-side."},{"parameters":[{"type":"Ext.direct.Provider","optional":false,"name":"provider","summary":"The {@link Ext.direct.Provider Provider}."}],"name":"disconnect","summary":"Fires when the Provider disconnects from the server-side."},{"parameters":[],"name":"exception","summary":"Fires when the Provider receives an exception from the server-side."}]},{"name":"RemotingProvider","fullName":"Ext.direct.RemotingProvider","summary":"\r\n<p>The {@link Ext.direct.RemotingProvider RemotingProvider} exposes access to\r\nserver side methods on the client (a remote procedure call (RPC) type of\r\nconnection where the client can initiate a procedure on the server).</p>\r\n\r\n<p>This allows for code to be organized in a fashion that is maintainable,\r\nwhile providing a clear path between client and server, something that is\r\nnot always apparent when using URLs.</p>\r\n\r\n<p>To accomplish this the server-side needs to describe what classes and methods\r\nare available on the client-side. This configuration will typically be\r\noutputted by the server-side Ext.Direct stack when the API description is built.</p>\r\n","package":"direct","definedIn":"direct\\RemotingProvider.js","xtype":null,"extends":"Ext.direct.JsonProvider","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Object","optional":false,"name":"actions","summary":"Object literal defining the server side actions and methods. For example, if\r\nthe Provider is configured with:\r\n<pre><code>\r\n\"actions\":{ // each property within the 'actions' object represents a server side Class \r\n    \"TestAction\":[ // array of methods within each server side Class to be   \r\n   {              // stubbed out on client\r\n        \"name\":\"doEcho\", \r\n        \"len\":1            \r\n    },{\r\n        \"name\":\"multiply\",// name of method\r\n        \"len\":2           // The number of parameters that will be used to create an\r\n                          // array of data to send to the server side function.\r\n                          // Ensure the server sends back a Number, not a String. \r\n    },{\r\n        \"name\":\"doForm\",\r\n        \"formHandler\":true, // direct the client to use specialized form handling method \r\n        \"len\":1\r\n    }]\r\n}\r\n</code></pre>\r\n<p>Note that a Store is not required, a server method can be called at any time.\r\nIn the following example a <b>client side</b> handler is used to call the\r\nserver side method \"multiply\" in the server-side \"TestAction\" Class:</p>\r\n<pre><code>\r\nTestAction.multiply(\r\n    2, 4, // pass two arguments to server, so specify len=2\r\n    // callback function after the server is called\r\n    // result: the result returned by the server\r\n    //      e: Ext.Direct.RemotingEvent object\r\n    function (result, e) {\r\n        var t = e.getTransaction();\r\n        var action = t.action; // server side Class called\r\n        var method = t.method; // server side method called\r\n        if (e.status) {\r\n            var answer = Ext.encode(result); // 8\r\n    \r\n        } else {\r\n            var msg = e.message; // failure message\r\n        }\r\n    }\r\n);\r\n</code></pre>\r\nIn the example above, the server side \"multiply\" function will be passed two\r\narguments (2 and 4).  The \"multiply\" method should return the value 8 which will be\r\navailable as the <tt>result</tt> in the example above.\r\n"},{"type":"Number/Boolean","optional":false,"name":"enableBuffer","summary":"<p><tt>true</tt> or <tt>false</tt> to enable or disable combining of method\r\ncalls. If a number is specified this is the amount of time in milliseconds\r\nto wait before sending a batched request (defaults to <tt>10</tt>).</p>\r\n<br><p>Calls which are received within the specified timeframe will be\r\nconcatenated together and sent in a single request, optimizing the\r\napplication by reducing the amount of round trips that have to be made\r\nto the server.</p>\r\n"},{"type":"String","optional":false,"name":"enableUrlEncode","summary":"Specify which param will hold the arguments for the method.\r\nDefaults to <tt>'data'</tt>.\r\n"},{"type":"Number","optional":false,"name":"maxRetries","summary":"Number of times to re-attempt delivery on failure of a call.\r\n"},{"type":"String/Object","optional":false,"name":"namespace","summary":"Namespace for the Remoting Provider (defaults to the browser global scope of <i>window</i>).\r\nExplicitly specify the namespace Object, or specify a String to have a\r\n{@link Ext#namespace namespace created} implicitly.\r\n"},{"type":"String","optional":false,"name":"url","summary":"<b>Required<b>. The url to connect to the {@link Ext.Direct} server-side router.\r\n"}],"properties":[],"methods":[],"events":[{"parameters":[{"type":"Ext.direct.RemotingProvider","optional":false,"name":"provider","summary":""},{"type":"Ext.Direct.Transaction","optional":false,"name":"transaction","summary":""}],"name":"beforecall","summary":"Fires immediately before the client-side sends off the RPC call. By returning false from an event handler you can prevent the call from executing."},{"parameters":[{"type":"Ext.direct.RemotingProvider","optional":false,"name":"provider","summary":""},{"type":"Ext.Direct.Transaction","optional":false,"name":"transaction","summary":""}],"name":"call","summary":"Fires immediately after the request to the server-side is sent. This does NOT fire after the response has come back from the call."}]}]},{"name":"form","fullName":"form","parentFullName":"Ext","packages":[],"classes":[{"name":"Action","fullName":"Ext.form.Action","summary":"<p>The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.</p>\r\n<p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when\r\nthe Form needs to perform an action such as submit or load. The Configuration options\r\nlisted for this class are set through the Form's action methods: {@link Ext.form.BasicForm#submit submit},\r\n{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}</p>\r\n<p>The instance of Action which performed the action is passed to the success\r\nand failure callbacks of the Form's action methods ({@link Ext.form.BasicForm#submit submit},\r\n{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),\r\nand to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and\r\n{@link Ext.form.BasicForm#actionfailed actionfailed} event handlers.</p>\r\n","package":"form","definedIn":"widgets\\form\\Action.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.form.Action.Load,Ext.form.Action.Submit","configOptions":[{"type":"Function","optional":false,"name":"failure","summary":"error ocurred in the Ajax communication.\r\nThe function is passed the following parameters:<ul class=\"mdetail-params\">\r\n<li><b>form</b> : Ext.form.BasicForm<div class=\"sub-desc\">The form that requested the action</div></li>\r\n<li><b>action</b> : Ext.form.Action<div class=\"sub-desc\">The Action class. If an Ajax\r\nerror ocurred, the failure type will be in {@link #failureType}. The {@link #result}\r\nproperty of this object may be examined to perform custom postprocessing.</div></li>\r\n</ul>\r\n"},{"type":"String","optional":false,"name":"method","summary":"{@link Ext.form.BasicForm}'s method, or if that is not specified, the underlying DOM form's method.\r\n"},{"type":"Mixed","optional":false,"name":"params","summary":"{@link Ext.form.BasicForm#baseParams} and passed to the specified URL along with the Form's\r\ninput fields.</p>\r\n<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>\r\n"},{"type":"Boolean","optional":false,"name":"reset","summary":"{@link Ext.form.BasicForm.reset reset} on Action success. If specified, this happens\r\n<b>before</b> the {@link #success} callback is called and before the Form's\r\n{@link Ext.form.BasicForm.actioncomplete actioncomplete} event fires.\r\n"},{"type":"Object","optional":false,"name":"scope","summary":"for the callback functions).\r\n"},{"type":"Function","optional":false,"name":"success","summary":"The function is passed the following parameters:<ul class=\"mdetail-params\">\r\n<li><b>form</b> : Ext.form.BasicForm<div class=\"sub-desc\">The form that requested the action</div></li>\r\n<li><b>action</b> : Ext.form.Action<div class=\"sub-desc\">The Action class. The {@link #result}\r\nproperty of this object may be examined to perform custom postprocessing.</div></li>\r\n</ul>\r\n"},{"type":"Number","optional":false,"name":"timeout","summary":"failing with the {@link #failureType} as {@link #Action.CONNECT_FAILURE}. If not specified,\r\ndefaults to the configured <tt>{@link Ext.form.BasicForm#timeout timeout}</tt> of the\r\n{@link Ext.form.BasicForm form}.\r\n"},{"type":"String","optional":false,"name":"url","summary":""},{"type":"String","optional":false,"name":"waitMsg","summary":"during the time the action is being processed.\r\n"},{"type":"String","optional":false,"name":"waitTitle","summary":"during the time the action is being processed.\r\n"}],"properties":[{"type":"String","static":true,"hide":false,"private":false,"name":"CLIENT_INVALID","summary":"Failure type returned when client side validation of the Form fails\r\nthus aborting a submit action. Client side validation is performed unless\r\n{@link #clientValidation} is explicitly set to <tt>false</tt>.\r\n"},{"type":"String","static":true,"hide":false,"private":false,"name":"CONNECT_FAILURE","summary":"Failure type returned when a communication error happens when attempting\r\nto send a request to the remote server. The {@link #response} may be examined to\r\nprovide further information.\r\n"},{"type":"String","static":false,"hide":false,"private":false,"name":"failureType","summary":"The type of failure detected will be one of these: {@link #CLIENT_INVALID},\r\n{@link #SERVER_INVALID}, {@link #CONNECT_FAILURE}, or {@link #LOAD_FAILURE}.  Usage:\r\n<pre><code>\r\nvar fp = new Ext.form.FormPanel({\r\n...\r\nbuttons: [{\r\ntext: 'Save',\r\nformBind: true,\r\nhandler: function () {\r\nif(fp.getForm().isValid()) {\r\nfp.getForm().submit({\r\nurl: 'form-submit.php',\r\nwaitMsg: 'Submitting your data...',\r\nsuccess: function (form, action) {\r\n// server responded with success = true\r\nvar result = action.{@link #result};\r\n},\r\nfailure: function (form, action) {\r\nif (action.{@link #failureType} === Ext.form.Action.{@link #CONNECT_FAILURE}) {\r\nExt.Msg.alert('Error',\r\n'Status:'+action.{@link #response}.status+': '+\r\naction.{@link #response}.statusText);\r\n}\r\nif (action.failureType === Ext.form.Action.{@link #SERVER_INVALID}) {\r\n// server responded with success = false\r\nExt.Msg.alert('Invalid', action.{@link #result}.errormsg);\r\n}\r\n}\r\n});\r\n}\r\n}\r\n},{\r\ntext: 'Reset',\r\nhandler: function () {\r\nfp.getForm().reset();\r\n}\r\n}]\r\n</code></pre>\r\n"},{"type":"String","static":true,"hide":false,"private":false,"name":"LOAD_FAILURE","summary":"Failure type returned when the response's <tt style=\"font-weight:bold\">success</tt>\r\nproperty is set to <tt>false</tt>, or no field values are returned in the response's\r\n<tt style=\"font-weight:bold\">data</tt> property.\r\n"},{"type":"Object","static":false,"hide":false,"private":false,"name":"response","summary":"The XMLHttpRequest object used to perform the action.\r\n"},{"type":"Object","static":false,"hide":false,"private":false,"name":"result","summary":"The decoded response object containing a boolean <tt style=\"font-weight:bold\">success</tt> property and\r\nother, action-specific properties.\r\n"},{"type":"String","static":true,"hide":false,"private":false,"name":"SERVER_INVALID","summary":"<p>Failure type returned when server side processing fails and the {@link #result}'s\r\n<tt style=\"font-weight:bold\">success</tt> property is set to <tt>false</tt>.</p>\r\n<p>In the case of a form submission, field-specific error messages may be returned in the\r\n{@link #result}'s <tt style=\"font-weight:bold\">errors</tt> property.</p>\r\n"}],"methods":[],"events":[]},{"name":"Action.DirectLoad","fullName":"Ext.form.Action.DirectLoad","summary":"<p>Provides Ext.direct support for loading form data.</p>\r\n<p>This example illustrates usage of Ext.Direct to <b>load</b> a form through Ext.Direct.</p>\r\n<pre><code>\r\nvar myFormPanel = new Ext.form.FormPanel({\r\n    // configs for FormPanel\r\n    title: 'Basic Information',\r\n    renderTo: document.body,\r\n    width: 300, height: 160,\r\n    padding: 10,\r\n\r\n    // configs apply to child items\r\n    defaults: {anchor: '100%'},\r\n    defaultType: 'textfield',\r\n    items: [{\r\n        fieldLabel: 'Name',\r\n        name: 'name'\r\n    },{\r\n        fieldLabel: 'Email',\r\n        name: 'email'\r\n    },{\r\n        fieldLabel: 'Company',\r\n        name: 'company'\r\n    }],\r\n\r\n    // configs for BasicForm\r\n    api: {\r\n        // The server-side method to call for load() requests\r\n        load: Profile.getBasicInfo,\r\n        // The server-side must mark the submit handler as a 'formHandler'\r\n        submit: Profile.updateBasicInfo\r\n    },\r\n    // specify the order for the passed params\r\n    paramOrder: ['uid', 'foo']\r\n});\r\n\r\n// load the form\r\nmyFormPanel.getForm().load({\r\n    // pass 2 arguments to server side getBasicInfo method (len=2)\r\n    params: {\r\n        foo: 'bar',\r\n        uid: 34\r\n    }\r\n});\r\n</code></pre>\r\nThe data packet sent to the server will resemble something like:\r\n<pre><code>\r\n[\r\n   {\r\n        \"action\":\"Profile\",\"method\":\"getBasicInfo\",\"type\":\"rpc\",\"tid\":2,\r\n        \"data\":[34,\"bar\"] // note the order of the params\r\n    }\r\n]\r\n</code></pre>\r\nThe form will process a data packet returned by the server that is similar\r\nto the following format:\r\n<pre><code>\r\n[\r\n   {\r\n        \"action\":\"Profile\",\"method\":\"getBasicInfo\",\"type\":\"rpc\",\"tid\":2,\r\n        \"result\":{\r\n            \"success\":true,\r\n            \"data\":{\r\n                \"name\":\"Fred Flintstone\",\r\n                \"company\":\"Slate Rock and Gravel\",\r\n                \"email\":\"fred.flintstone@slaterg.com\"\r\n            }\r\n        }\r\n    }\r\n]\r\n</code></pre>\r\n","package":"form","definedIn":"widgets\\form\\Action.js","xtype":null,"extends":"Ext.form.Action.Load","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Action.DirectSubmit","fullName":"Ext.form.Action.DirectSubmit","summary":"<p>Provides Ext.direct support for submitting form data.</p>\r\n<p>This example illustrates usage of Ext.Direct to <b>submit</b> a form through Ext.Direct.</p>\r\n<pre><code>\r\nvar myFormPanel = new Ext.form.FormPanel({\r\n    // configs for FormPanel\r\n    title: 'Basic Information',\r\n    renderTo: document.body,\r\n    width: 300, height: 160,\r\n    padding: 10,\r\n    buttons:[{\r\n        text: 'Submit',\r\n        handler: function () {\r\n            myFormPanel.getForm().submit({\r\n                params: {\r\n                    foo: 'bar',\r\n                    uid: 34\r\n                }\r\n            });\r\n        }\r\n    }],\r\n\r\n    // configs apply to child items\r\n    defaults: {anchor: '100%'},\r\n    defaultType: 'textfield',\r\n    items: [{\r\n        fieldLabel: 'Name',\r\n        name: 'name'\r\n    },{\r\n        fieldLabel: 'Email',\r\n        name: 'email'\r\n    },{\r\n        fieldLabel: 'Company',\r\n        name: 'company'\r\n    }],\r\n\r\n    // configs for BasicForm\r\n    api: {\r\n        // The server-side method to call for load() requests\r\n        load: Profile.getBasicInfo,\r\n        // The server-side must mark the submit handler as a 'formHandler'\r\n        submit: Profile.updateBasicInfo\r\n    },\r\n    // specify the order for the passed params\r\n    paramOrder: ['uid', 'foo']\r\n});\r\n</code></pre>\r\nThe data packet sent to the server will resemble something like:\r\n<pre><code>\r\n{\r\n    \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":\"6\",\r\n    \"result\":{\r\n        \"success\":true,\r\n        \"id\":{\r\n            \"extAction\":\"Profile\",\"extMethod\":\"updateBasicInfo\",\r\n            \"extType\":\"rpc\",\"extTID\":\"6\",\"extUpload\":\"false\",\r\n            \"name\":\"Aaron Conran\",\"email\":\"aaron@extjs.com\",\"company\":\"Ext JS, LLC\"\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\nThe form will process a data packet returned by the server that is similar\r\nto the following:\r\n<pre><code>\r\n// sample success packet (batched requests)\r\n[\r\n   {\r\n        \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":3,\r\n        \"result\":{\r\n            \"success\":true\r\n        }\r\n    }\r\n]\r\n\r\n// sample failure packet (one request)\r\n{\r\n        \"action\":\"Profile\",\"method\":\"updateBasicInfo\",\"type\":\"rpc\",\"tid\":\"6\",\r\n        \"result\":{\r\n            \"errors\":{\r\n                \"email\":\"already taken\"\r\n            },\r\n            \"success\":false,\r\n            \"foo\":\"bar\"\r\n        }\r\n}\r\n</code></pre>\r\nAlso see the discussion in {@link Ext.form.Action.DirectLoad}.\r\n","package":"form","definedIn":"widgets\\form\\Action.js","xtype":null,"extends":"Ext.form.Action.Submit","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Action.Load","fullName":"Ext.form.Action.Load","summary":"<p>A class which handles loading of data from a server into the Fields of an {@link Ext.form.BasicForm}.</p>\r\n<p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when\r\n{@link Ext.form.BasicForm#load load}ing.</p>\r\n<p><u><b>Response Packet Criteria</b></u></p>\r\n<p>A response packet <b>must</b> contain:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><code>success</code></b> property : Boolean</li>\r\n<li><b><code>data</code></b> property : Object</li>\r\n<div class=\"sub-desc\">The <code>data</code> property contains the values of Fields to load.\r\nThe individual value object for each Field is passed to the Field's\r\n{@link Ext.form.Field#setValue setValue} method.</div></li>\r\n</ul></div>\r\n<p><u><b>JSON Packets</b></u></p>\r\n<p>By default, response packets are assumed to be JSON, so for the following form load call:<pre><code>\r\nvar myFormPanel = new Ext.form.FormPanel({\r\n    title: 'Client and routing info',\r\n    items: [{\r\n        fieldLabel: 'Client',\r\n        name: 'clientName'\r\n    }, {\r\n        fieldLabel: 'Port of loading',\r\n        name: 'portOfLoading'\r\n    }, {\r\n        fieldLabel: 'Port of discharge',\r\n        name: 'portOfDischarge'\r\n    }]\r\n});\r\nmyFormPanel.{@link Ext.form.FormPanel#getForm getForm}().{@link Ext.form.BasicForm#load load}({\r\n    url: '/getRoutingInfo.php',\r\n    params: {\r\n        consignmentRef: myConsignmentRef\r\n    },\r\n    failure: function (form, action) {\r\n        Ext.Msg.alert(\"Load failed\", action.result.errorMessage);\r\n    }\r\n});\r\n</code></pre>\r\na <b>success response</b> packet may look like this:</p><pre><code>\r\n{\r\n    success: true,\r\n    data: {\r\n        clientName: \"Fred. Olsen Lines\",\r\n        portOfLoading: \"FXT\",\r\n        portOfDischarge: \"OSL\"\r\n    }\r\n}</code></pre>\r\nwhile a <b>failure response</b> packet may look like this:</p><pre><code>\r\n{\r\n    success: false,\r\n    errorMessage: \"Consignment reference not found\"\r\n}</code></pre>\r\n<p>Other data may be placed into the response for processing the {@link Ext.form.BasicForm Form}'s\r\ncallback or event handler methods. The object decoded from this JSON is available in the\r\n{@link Ext.form.Action#result result} property.</p>\r\n","package":"form","definedIn":"widgets\\form\\Action.js","xtype":null,"extends":"Ext.form.Action","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.form.Action.DirectLoad","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Action.Submit","fullName":"Ext.form.Action.Submit","summary":"<p>A class which handles submission of data from {@link Ext.form.BasicForm Form}s\r\nand processes the returned response.</p>\r\n<p>Instances of this class are only created by a {@link Ext.form.BasicForm Form} when\r\n{@link Ext.form.BasicForm#submit submit}ting.</p>\r\n<p><u><b>Response Packet Criteria</b></u></p>\r\n<p>A response packet may contain:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><code>success</code></b> property : Boolean\r\n<div class=\"sub-desc\">The <code>success</code> property is required.</div></li>\r\n<li><b><code>errors</code></b> property : Object\r\n<div class=\"sub-desc\"><div class=\"sub-desc\">The <code>errors</code> property,\r\nwhich is optional, contains error messages for invalid fields.</div></li>\r\n</ul></div>\r\n<p><u><b>JSON Packets</b></u></p>\r\n<p>By default, response packets are assumed to be JSON, so a typical response\r\npacket may look like this:</p><pre><code>\r\n{\r\n    success: false,\r\n    errors: {\r\n        clientCode: \"Client not found\",\r\n        portOfLoading: \"This field must not be null\"\r\n    }\r\n}</code></pre>\r\n<p>Other data may be placed into the response for processing by the {@link Ext.form.BasicForm}'s callback\r\nor event handler methods. The object decoded from this JSON is available in the\r\n{@link Ext.form.Action#result result} property.</p>\r\n<p>Alternatively, if an {@link #errorReader} is specified as an {@link Ext.data.XmlReader XmlReader}:</p><pre><code>\r\n    errorReader: new Ext.data.XmlReader({\r\n            record : 'field',\r\n            success: '@success'\r\n        }, [\r\n            'id', 'msg'\r\n        ]\r\n    )\r\n</code></pre>\r\n<p>then the results may be sent back in XML format:</p><pre><code>\r\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\r\n&lt;message success=\"false\"&gt;\r\n&lt;errors&gt;\r\n    &lt;field&gt;\r\n        &lt;id&gt;clientCode&lt;/id&gt;\r\n        &lt;msg&gt;&lt;![CDATA[Code not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;\r\n    &lt;/field&gt;\r\n    &lt;field&gt;\r\n        &lt;id&gt;portOfLoading&lt;/id&gt;\r\n        &lt;msg&gt;&lt;![CDATA[Port not found. &lt;br /&gt;&lt;i&gt;This is a test validation message from the server &lt;/i&gt;]]&gt;&lt;/msg&gt;\r\n    &lt;/field&gt;\r\n&lt;/errors&gt;\r\n&lt;/message&gt;\r\n</code></pre>\r\n<p>Other elements may be placed into the response XML for processing by the {@link Ext.form.BasicForm}'s callback\r\nor event handler methods. The XML document is available in the {@link #errorReader}'s {@link Ext.data.XmlReader#xmlData xmlData} property.</p>\r\n","package":"form","definedIn":"widgets\\form\\Action.js","xtype":null,"extends":"Ext.form.Action","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.form.Action.DirectSubmit","configOptions":[{"type":"boolean","optional":false,"name":"clientValidation","summary":"in a final call to {@link Ext.form.BasicForm#isValid isValid} prior to submission.\r\nPass <tt>false</tt> in the Form's submit options to prevent this. If not defined, pre-submission field validation\r\nis performed.\r\n"},{"type":"Ext.data.DataReader","optional":false,"name":"errorReader","summary":"no need for an errorReader.</b></p>\r\n<p>A Reader which reads a single record from the returned data. The DataReader's\r\n<b>success</b> property specifies how submission success is determined. The Record's\r\ndata provides the error messages to apply to any invalid form Fields.</p>\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"BasicForm","fullName":"Ext.form.BasicForm","summary":"<p>Encapsulates the DOM &lt;form> element at the heart of the {@link Ext.form.FormPanel FormPanel} class, and provides\r\ninput field management, validation, submission, and form loading services.</p>\r\n<p>By default, Ext Forms are submitted through Ajax, using an instance of {@link Ext.form.Action.Submit}.\r\nTo enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option.</p>\r\n<p><b><u>File Uploads</u></b></p>\r\n<p>{@link #fileUpload File uploads} are not performed using Ajax submission, that\r\nis they are <b>not</b> performed using XMLHttpRequests. Instead the form is submitted in the standard\r\nmanner with the DOM <tt>&lt;form></tt> element temporarily modified to have its\r\n<a href=\"http://www.w3.org/TR/REC-html40/present/frames.html#adef-target\">target</a> set to refer\r\nto a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document\r\nbut removed after the return data has been gathered.</p>\r\n<p>The server response is parsed by the browser to create the document for the IFRAME. If the\r\nserver is using JSON to send the return object, then the\r\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">Content-Type</a> header\r\nmust be set to \"text/html\" in order to tell the browser to insert the text unchanged into the document body.</p>\r\n<p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode\r\n\"&lt;\" as \"&amp;lt;\", \"&amp;\" as \"&amp;amp;\" etc.</p>\r\n<p>The response text is retrieved from the document, and a fake XMLHttpRequest object\r\nis created containing a <tt>responseText</tt> property in order to conform to the\r\nrequirements of event handlers and callbacks.</p>\r\n<p>Be aware that file upload packets are sent with the content type <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">multipart/form</a>\r\nand some server technologies (notably JEE) may require some custom processing in order to\r\nretrieve parameter names and parameter values from the packet content.</p>\r\n","package":"form","definedIn":"widgets\\form\\BasicForm.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The form element or its id"},{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Object","optional":false,"name":"api","summary":"with {@link Ext.form.Action.DirectLoad} and {@link Ext.form.Action.DirectSubmit}.\r\nMethods which have been imported by Ext.Direct can be specified here to load and submit\r\nforms.\r\nSuch as the following:<pre><code>\r\napi: {\r\n    load: App.ss.MyProfile.load,\r\n    submit: App.ss.MyProfile.submit\r\n}\r\n</code></pre>\r\n<p>Load actions can use <code>{@link #paramOrder}</code> or <code>{@link #paramsAsHash}</code>\r\nto customize how the load method is invoked.\r\nSubmit actions will always use a standard form submit. The formHandler configuration must\r\nbe set on the associated server-side method which has been imported by Ext.Direct</p>\r\n"},{"type":"Object","optional":false,"name":"baseParams","summary":"<p>Parameters to pass with all requests. e.g. baseParams: {id: '123', foo: 'bar'}.</p>\r\n<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p>\r\n"},{"type":"DataReader","optional":false,"name":"errorReader","summary":"<p>An Ext.data.DataReader (e.g. {@link Ext.data.XmlReader}) to be used to\r\nread field error messages returned from 'submit' actions. This is optional\r\nas there is built-in support for processing JSON.</p>\r\n<p>The Records which provide messages for the invalid Fields must use the\r\nField name (or id) as the Record ID, and must contain a field called 'msg'\r\nwhich contains the error message.</p>\r\n<p>The errorReader does not have to be a full-blown implementation of a\r\nDataReader. It simply needs to implement a <tt>read(xhr)</tt> function\r\nwhich returns an Array of Records in an object with the following\r\nstructure:</p><pre><code>\r\n{\r\n    records: recordArray\r\n}\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"fileUpload","summary":"Set to true if this form is a file upload.\r\n<p>File uploads are not performed using normal 'Ajax' techniques, that is they are <b>not</b>\r\nperformed using XMLHttpRequests. Instead the form is submitted in the standard manner with the\r\nDOM <tt>&lt;form></tt> element temporarily modified to have its\r\n<a href=\"http://www.w3.org/TR/REC-html40/present/frames.html#adef-target\">target</a> set to refer\r\nto a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document\r\nbut removed after the return data has been gathered.</p>\r\n<p>The server response is parsed by the browser to create the document for the IFRAME. If the\r\nserver is using JSON to send the return object, then the\r\n<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">Content-Type</a> header\r\nmust be set to \"text/html\" in order to tell the browser to insert the text unchanged into the document body.</p>\r\n<p>Characters which are significant to an HTML parser must be sent as HTML entities, so encode\r\n\"&lt;\" as \"&amp;lt;\", \"&amp;\" as \"&amp;amp;\" etc.</p>\r\n<p>The response text is retrieved from the document, and a fake XMLHttpRequest object\r\nis created containing a <tt>responseText</tt> property in order to conform to the\r\nrequirements of event handlers and callbacks.</p>\r\n<p>Be aware that file upload packets are sent with the content type <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">multipart/form</a>\r\nand some server technologies (notably JEE) may require some custom processing in order to\r\nretrieve parameter names and parameter values from the packet content.</p>\r\n"},{"type":"String","optional":false,"name":"method","summary":"The request method to use (GET or POST) for form actions if one isn't supplied in the action options.\r\n"},{"type":"Array/String","optional":false,"name":"paramOrder","summary":"Defaults to <tt>undefined</tt>. Only used for the <code>{@link #api}</code>\r\n<code>load</code> configuration.</p>\r\n<br><p>Specify the params in the order in which they must be executed on the\r\nserver-side as either (1) an Array of String values, or (2) a String of params\r\ndelimited by either whitespace, comma, or pipe. For example,\r\nany of the following would be acceptable:</p><pre><code>\r\nparamOrder: ['param1','param2','param3']\r\nparamOrder: 'param1 param2 param3'\r\nparamOrder: 'param1,param2,param3'\r\nparamOrder: 'param1|param2|param'\r\n     </code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"paramsAsHash","summary":"<code>load</code> configuration. Send parameters as a collection of named\r\narguments (defaults to <tt>false</tt>). Providing a\r\n<tt>{@link #paramOrder}</tt> nullifies this configuration.\r\n"},{"type":"DataReader","optional":false,"name":"reader","summary":"An Ext.data.DataReader (e.g. {@link Ext.data.XmlReader}) to be used to read\r\ndata when executing 'load' actions. This is optional as there is built-in\r\nsupport for processing JSON.  For additional information on using an XMLReader\r\nsee the example provided in examples/form/xml-form.html.\r\n"},{"type":"Boolean","optional":false,"name":"standardSubmit","summary":"<p>If set to <tt>true</tt>, standard HTML form submits are used instead\r\nof XHR (Ajax) style form submissions. Defaults to <tt>false</tt>.</p>\r\n<br><p><b>Note:</b> When using <code>standardSubmit</code>, the\r\n<code>options</code> to <code>{@link #submit}</code> are ignored because\r\nExt's Ajax infrastracture is bypassed. To pass extra parameters (e.g.\r\n<code>baseParams</code> and <code>params</code>), utilize hidden fields\r\nto submit extra data, for example:</p>\r\n<pre><code>\r\nnew Ext.FormPanel({\r\n    standardSubmit: true,\r\n    baseParams: {\r\n        foo: 'bar'\r\n    },\r\n   {@link url}: 'myProcess.php',\r\n    items: [{\r\n        xtype: 'textfield',\r\n        name: 'userName'\r\n    }],\r\n    buttons: [{\r\n        text: 'Save',\r\n        handler: function () {\r\n            var fp = this.ownerCt.ownerCt,\r\n                form = fp.getForm();\r\n            if (form.isValid()) {\r\n                // check if there are baseParams and if\r\n                // hiddent items have been added already\r\n                if (fp.baseParams && !fp.paramsAdded) {\r\n                    // add hidden items for all baseParams\r\n                    for (i in fp.baseParams) {\r\n                        fp.add({\r\n                            xtype: 'hidden',\r\n                            name: i,\r\n                            value: fp.baseParams[i]\r\n                        });\r\n                    }\r\n                    fp.doLayout();\r\n                    // set a custom flag to prevent re-adding\r\n                    fp.paramsAdded = true;\r\n                }\r\n                form.{@link #submit}();\r\n            }\r\n        }\r\n    }]\r\n});\r\n</code></pre>\r\n"},{"type":"Number","optional":false,"name":"timeout","summary":""},{"type":"Boolean","optional":false,"name":"trackResetOnLoad","summary":"or {@link #setValues}() data instead of when the form was first created.  Defaults to <tt>false</tt>.\r\n"},{"type":"String","optional":false,"name":"url","summary":"The URL to use for form actions if one isn't supplied in the\r\n<code>{@link #doAction doAction} options</code>.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"items","summary":"A {@link Ext.util.MixedCollection MixedCollection) containing all the Ext.form.Fields in this form.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"waitMsgTarget","summary":"By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific\r\nelement by passing it or its id or mask the form itself by passing in true.\r\n"}],"methods":[{"parameters":[{"type":"Field","optional":false,"name":"field1","summary":""},{"type":"Field","optional":true,"name":"field2","summary":""},{"type":"Field","optional":true,"name":"etc","summary":""}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"add","summary":"Add Ext.form Components to this form's Collection. This does not result in rendering of\r\nthe passed Component, it just enables the form to validate Fields, and distribute values to\r\nFields.\r\n<p><b>You will not usually call this function. In order to be rendered, a Field must be added\r\nto a {@link Ext.Container Container}, usually an {@link Ext.form.FormPanel FormPanel}.\r\nThe FormPanel to which the field is added takes care of adding the Field to the BasicForm's\r\ncollection.</b></p>\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"values","summary":""}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"applyIfToFields","summary":"Calls {@link Ext#applyIf} for all field in this form with the passed object.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"values","summary":""}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"applyToFields","summary":"Calls {@link Ext#apply} for all fields in this form with the passed object.\r\n"},{"parameters":[],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"clearInvalid","summary":"Clears all invalid messages in this form.\r\n"},{"parameters":[{"type":"String/Object","optional":false,"name":"actionName","summary":"The name of the predefined action type,\r\nor instance of {@link Ext.form.Action} to perform."},{"type":"Object","optional":true,"name":"options","summary":"The options to pass to the {@link Ext.form.Action}.\r\nAll of the config options listed below are supported by both the\r\n{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}\r\nactions unless otherwise noted (custom actions could also accept\r\nother config options):<ul>\r\n\r\n<li><b>url</b> : String<div class=\"sub-desc\">The url for the action (defaults\r\nto the form's {@link #url}.)</div></li>\r\n\r\n<li><b>method</b> : String<div class=\"sub-desc\">The form method to use (defaults\r\nto the form's method, or POST if not defined)</div></li>\r\n\r\n<li><b>params</b> : String/Object<div class=\"sub-desc\"><p>The params to pass\r\n(defaults to the form's baseParams, or none if not defined)</p>\r\n<p>Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.</p></div></li>\r\n\r\n<li><b>headers</b> : Object<div class=\"sub-desc\">Request headers to set for the action\r\n(defaults to the form's default headers)</div></li>\r\n\r\n<li><b>success</b> : Function<div class=\"sub-desc\">The callback that will\r\nbe invoked after a successful response (see top of\r\n{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}\r\nfor a description of what constitutes a successful response).\r\nThe function is passed the following parameters:<ul>\r\n<li><tt>form</tt> : Ext.form.BasicForm<div class=\"sub-desc\">The form that requested the action</div></li>\r\n<li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.\r\n<div class=\"sub-desc\">The action object contains these properties of interest:<ul>\r\n<li><tt>{@link Ext.form.Action#response response}</tt></li>\r\n<li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>\r\n<li><tt>{@link Ext.form.Action#type type}</tt></li>\r\n</ul></div></li></ul></div></li>\r\n\r\n<li><b>failure</b> : Function<div class=\"sub-desc\">The callback that will be invoked after a\r\nfailed transaction attempt. The function is passed the following parameters:<ul>\r\n<li><tt>form</tt> : The {@link Ext.form.BasicForm} that requested the action.</li>\r\n<li><tt>action</tt> : The {@link Ext.form.Action Action} object which performed the operation.\r\n<div class=\"sub-desc\">The action object contains these properties of interest:<ul>\r\n<li><tt>{@link Ext.form.Action#failureType failureType}</tt></li>\r\n<li><tt>{@link Ext.form.Action#response response}</tt></li>\r\n<li><tt>{@link Ext.form.Action#result result}</tt> : interrogate for custom postprocessing</li>\r\n<li><tt>{@link Ext.form.Action#type type}</tt></li>\r\n</ul></div></li></ul></div></li>\r\n\r\n<li><b>scope</b> : Object<div class=\"sub-desc\">The scope in which to call the\r\ncallback functions (The <tt>this</tt> reference for the callback functions).</div></li>\r\n\r\n<li><b>clientValidation</b> : Boolean<div class=\"sub-desc\">Submit Action only.\r\nDetermines whether a Form's fields are validated in a final call to\r\n{@link Ext.form.BasicForm#isValid isValid} prior to submission. Set to <tt>false</tt>\r\nto prevent this. If undefined, pre-submission field validation is performed.</div></li></ul>\r\n"}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"doAction","summary":"Performs a predefined action ({@link Ext.form.Action.Submit} or\r\n{@link Ext.form.Action.Load}) or a custom extension of {@link Ext.form.Action}\r\nto perform application-specific processing.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The value to search for (specify either a {@link Ext.Component#id id},\r\n{@link Ext.grid.Column#dataIndex dataIndex}, {@link Ext.form.Field#getName name or hiddenName})."}],"return":null,"hide":false,"private":false,"name":"findField","summary":"Find a {@link Ext.form.Field} in this form.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getEl","summary":"Get the HTML form Element\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"asString","summary":"Pass true to return the values as a string. (defaults to false, returning an Object)"}],"return":{"type":"String/Object","summary":""},"hide":false,"private":false,"name":"getValues","summary":"<p>Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.\r\nIf multiple fields exist with the same name they are returned as an array.</p>\r\n<p><b>Note:</b> The values are collected from all enabled HTML input elements within the form, <u>not</u> from\r\nthe Ext Field objects. This means that all returned values are Strings (or Arrays of Strings) and that the\r\nvalue can potentially be the emptyText of a field.</p>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isDirty","summary":"<p>Returns true if any fields in this form have changed from their original values.</p>\r\n<p>Note that if this BasicForm was configured with {@link #trackResetOnLoad} then the\r\nFields' <i>original values</i> are updated when the values are loaded by {@link #setValues}\r\nor {@link #loadRecord}.</p>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isValid","summary":"Returns true if client-side validation on the form is successful.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"options","summary":"The options to pass to the action (see {@link #doAction} for details)"}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"load","summary":"Shortcut to {@link #doAction do} a {@link Ext.form.Action.Load load action}.\r\n"},{"parameters":[{"type":"Record","optional":false,"name":"record","summary":"The record to load"}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"loadRecord","summary":"Loads an {@link Ext.data.Record} into this form by calling {@link #setValues} with the\r\n{@link Ext.data.Record#data record data}.\r\nSee also {@link #trackResetOnLoad}.\r\n"},{"parameters":[{"type":"Array/Object","optional":false,"name":"errors","summary":"Either an array in the form [{id:'fieldId', msg:'The message'},...] or an object hash of {id: msg, id2: msg2}"}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"markInvalid","summary":"Mark fields in this form invalid in bulk.\r\n"},{"parameters":[{"type":"Field","optional":false,"name":"field","summary":""}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"remove","summary":"Removes a field from the items collection (does NOT remove its markup).\r\n"},{"parameters":[],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"render","summary":"Iterates through the {@link Ext.form.Field Field}s which have been {@link #add add}ed to this BasicForm,\r\nchecks them for an id attribute, and calls {@link Ext.form.Field#applyToMarkup} on the existing dom element with that id.\r\n"},{"parameters":[],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"reset","summary":"Resets this form.\r\n"},{"parameters":[{"type":"Array/Object","optional":false,"name":"values","summary":"Either an array in the form:<pre><code>\r\n[{id:'clientName', value:'Fred. Olsen Lines'},\r\n{id:'portOfLoading', value:'FXT'},\r\n{id:'portOfDischarge', value:'OSL'} ]</code></pre>\r\nor an object hash of the form:<pre><code>\r\n{\r\nclientName: 'Fred. Olsen Lines',\r\nportOfLoading: 'FXT',\r\nportOfDischarge: 'OSL'\r\n}</code></pre>"}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"setValues","summary":"Set values for fields in this form in bulk.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"options","summary":"The options to pass to the action (see {@link #doAction} for details).<br>\r\n<p><b>Note:</b> this is ignored when using the {@link #standardSubmit} option.</p>\r\n<p>The following code:</p><pre><code>\r\nmyFormPanel.getForm().submit({\r\nclientValidation: true,\r\nurl: 'updateConsignment.php',\r\nparams: {\r\nnewStatus: 'delivered'\r\n},\r\nsuccess: function (form, action) {\r\nExt.Msg.alert('Success', action.result.msg);\r\n},\r\nfailure: function (form, action) {\r\nswitch (action.failureType) {\r\ncase Ext.form.Action.CLIENT_INVALID:\r\nExt.Msg.alert('Failure', 'Form fields may not be submitted with invalid values');\r\nbreak;\r\ncase Ext.form.Action.CONNECT_FAILURE:\r\nExt.Msg.alert('Failure', 'Ajax communication failed');\r\nbreak;\r\ncase Ext.form.Action.SERVER_INVALID:\r\nExt.Msg.alert('Failure', action.result.msg);\r\n}\r\n}\r\n});\r\n</code></pre>\r\nwould process the following server response for a successful submission:<pre><code>\r\n{\r\n\"success\":true, // note this is Boolean, not string\r\n\"msg\":\"Consignment updated\"\r\n}\r\n</code></pre>\r\nand the following server response for a failed submission:<pre><code>\r\n{\r\n\"success\":false, // note this is Boolean, not string\r\n\"msg\":\"You do not have permission to perform this operation\"\r\n}\r\n</code></pre>"}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"submit","summary":"Shortcut to {@link #doAction do} a {@link Ext.form.Action.Submit submit action}.\r\n"},{"parameters":[{"type":"Record","optional":false,"name":"record","summary":"The record to edit"}],"return":{"type":"BasicForm","summary":"this"},"hide":false,"private":false,"name":"updateRecord","summary":"Persists the values in this form into the passed {@link Ext.data.Record} object in a beginEdit/endEdit block.\r\n"}],"events":[{"parameters":[{"type":"Form","optional":false,"name":"el","summary":"this"},{"type":"Action","optional":false,"name":"action","summary":"The {@link Ext.form.Action} that completed"}],"name":"actioncomplete","summary":"Fires when an action is completed."},{"parameters":[{"type":"Form","optional":false,"name":"el","summary":"this"},{"type":"Action","optional":false,"name":"action","summary":"The {@link Ext.form.Action} that failed"}],"name":"actionfailed","summary":"Fires when an action fails."},{"parameters":[{"type":"Form","optional":false,"name":"el","summary":"this"},{"type":"Action","optional":false,"name":"action","summary":"The {@link Ext.form.Action} to be performed"}],"name":"beforeaction","summary":"Fires before any action is performed. Return false to cancel the action."}]},{"name":"Checkbox","fullName":"Ext.form.Checkbox","summary":"Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields.\r\n","package":"form","definedIn":"widgets\\form\\Checkbox.js","xtype":"checkbox","extends":"Ext.form.Field","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Checkbox."},"subclasses":"Ext.form.Radio","configOptions":[{"type":"String/Object","optional":false,"name":"autoCreate","summary":"{tag: 'input', type: 'checkbox', autocomplete: 'off'})\r\n"},{"type":"String","optional":false,"name":"boxLabel","summary":""},{"type":"Boolean","optional":false,"name":"checked","summary":""},{"type":"String","optional":false,"name":"fieldClass","summary":""},{"type":"String","optional":false,"name":"focusClass","summary":""},{"type":"Function","optional":false,"name":"handler","summary":"handling the check event). The handler is passed the following parameters:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>checkbox</b> : Ext.form.Checkbox<div class=\"sub-desc\">The Checkbox being toggled.</div></li>\r\n<li><b>checked</b> : Boolean<div class=\"sub-desc\">The new checked state of the checkbox.</div></li>\r\n</ul></div>\r\n"},{"type":"String","optional":false,"name":"inputValue","summary":""},{"type":"Object","optional":false,"name":"scope","summary":"(defaults to this Checkbox).\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearInvalid","summary":"Overridden and disabled. The editor element does not support standard valid/invalid marking.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if checked, else false"},"hide":false,"private":false,"name":"getValue","summary":"Returns the checked state of the checkbox.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"markInvalid","summary":"Overridden and disabled. The editor element does not support standard valid/invalid marking.\r\n"},{"parameters":[{"type":"Boolean/String","optional":false,"name":"checked","summary":"The following values will check the checkbox:\r\n<code>true, 'true', '1', or 'on'</code>. Any other value will uncheck the checkbox."}],"return":{"type":"Ext.form.Field","summary":"this"},"hide":false,"private":false,"name":"setValue","summary":"Sets the checked state of the checkbox, fires the 'check' event, and calls a\r\n<code>{@link #handler}</code> (if configured).\r\n"}],"events":[{"parameters":[{"type":"Ext.form.Checkbox","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"checked","summary":"The new checked value"}],"name":"check","summary":"Fires when the checkbox is checked or unchecked."}]},{"name":"CheckboxGroup","fullName":"Ext.form.CheckboxGroup","summary":"<p>A grouping container for {@link Ext.form.Checkbox} controls.</p>\r\n<p>Sample usage:</p>\r\n<pre><code>\r\nvar myCheckboxGroup = new Ext.form.CheckboxGroup({\r\n    id:'myGroup',\r\n    xtype: 'checkboxgroup',\r\n    fieldLabel: 'Single Column',\r\n    itemCls: 'x-check-group-alt',\r\n    // Put all controls in a single column with width 100%\r\n    columns: 1,\r\n    items: [\r\n       {boxLabel: 'Item 1', name: 'cb-col-1'},\r\n       {boxLabel: 'Item 2', name: 'cb-col-2', checked: true},\r\n       {boxLabel: 'Item 3', name: 'cb-col-3'}\r\n    ]\r\n});\r\n</code></pre>\r\n","package":"form","definedIn":"widgets\\form\\CheckboxGroup.js","xtype":"checkboxgroup","extends":"Ext.form.Field","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new CheckboxGroup."},"subclasses":"Ext.form.RadioGroup","configOptions":[{"type":"Array","optional":false,"name":"items","summary":"to arrange in the group.\r\n"},{"type":"String/Number/Array","optional":false,"name":"columns","summary":"checkbox/radio controls using automatic layout.  This config can take several types of values:\r\n<ul><li><b>'auto'</b> : <p class=\"sub-desc\">The controls will be rendered one per column on one row and the width\r\nof each column will be evenly distributed based on the width of the overall field container. This is the default.</p></li>\r\n<li><b>Number</b> : <p class=\"sub-desc\">If you specific a number (e.g., 3) that number of columns will be\r\ncreated and the contained controls will be automatically distributed based on the value of {@link #vertical}.</p></li>\r\n<li><b>Array</b> : Object<p class=\"sub-desc\">You can also specify an array of column widths, mixing integer\r\n(fixed width) and float (percentage width) values as needed (e.g., [100, .25, .75]). Any integer values will\r\nbe rendered first, then any float values will be calculated as a percentage of the remaining space. Float\r\nvalues do not have to add up to 1 (100%) although if you want the controls to take up the entire field\r\ncontainer you should do so.</p></li></ul>\r\n"},{"type":"Boolean","optional":false,"name":"vertical","summary":"top to bottom before starting on the next column.  The number of controls in each column will be automatically\r\ncalculated to keep columns as even as possible.  The default value is false, so that controls will be added\r\nto columns one at a time, completely filling each row left to right before starting on the next row.\r\n"},{"type":"Boolean","optional":false,"name":"allowBlank","summary":"If no items are selected at validation time, {@link @blankText} will be used as the error text.\r\n"},{"type":"String","optional":false,"name":"blankText","summary":"select at least one item in this group\")\r\n"},{"type":"String","optional":false,"name":"name","summary":"@hide\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"id","summary":"The checkbox to check, or as described by example shown."},{"type":"Boolean","optional":true,"name":"value","summary":"The value to set the item."}],"return":{"type":"Ext.form.CheckboxGroup","summary":"this"},"hide":false,"private":false,"name":"setValue","summary":"{@link Ext.form.Checkbox#setValue Set the value(s)} of an item or items\r\nin the group. Examples illustrating how this method may be called:\r\n<pre><code>\r\n// call with name and value\r\nmyCheckboxGroup.setValue('cb-col-1', true);\r\n// call with an array of boolean values \r\nmyCheckboxGroup.setValue([true, false, false]);\r\n// call with an object literal specifying item:value pairs\r\nmyCheckboxGroup.setValue({\r\n    'cb-col-2': false,\r\n    'cb-col-3': true\r\n});\r\n// use comma separated string to set items with name to true (checked)\r\nmyCheckboxGroup.setValue('cb-col-1,cb-col-3');\r\n</code></pre>\r\nSee {@link Ext.form.Checkbox#setValue} for additional information.\r\n"},{"parameters":[],"return":{"type":"Array","summary":"An array of the selected checkboxes."},"hide":false,"private":false,"name":"getValue","summary":"Gets an array of the selected {@link Ext.form.Checkbox} in the group.\r\n"}],"events":[{"parameters":[{"type":"Ext.form.CheckboxGroup","optional":false,"name":"el","summary":"this"},{"type":"Array","optional":false,"name":"checked","summary":"An array containing the checked boxes."}],"name":"change","summary":"Fires when the state of a child checkbox changes."}]},{"name":"ComboBox","fullName":"Ext.form.ComboBox","summary":"<p>A combobox control with support for autocomplete, remote-loading, paging and many other features.</p>\r\n<p>A ComboBox works in a similar manner to a traditional HTML &lt;select> field. The difference is\r\nthat to submit the {@link #valueField}, you must specify a {@link #hiddenName} to create a hidden input\r\nfield to hold the value of the valueField. The <i>{@link #displayField}</i> is shown in the text field\r\nwhich is named according to the {@link #name}.</p>\r\n<p><b><u>Events</u></b></p>\r\n<p>To do something when something in ComboBox is selected, configure the select event:<pre><code>\r\nvar cb = new Ext.form.ComboBox({\r\n    // all of your config options\r\n    listeners:{\r\n         scope: yourScope,\r\n         'select': yourFunction\r\n    }\r\n});\r\n\r\n// Alternatively, you can assign events after the object is created:\r\nvar cb = new Ext.form.ComboBox(yourOptions);\r\ncb.on('select', yourFunction, yourScope);\r\n</code></pre></p>\r\n\r\n<p><b><u>ComboBox in Grid</u></b></p>\r\n<p>If using a ComboBox in an {@link Ext.grid.EditorGridPanel Editor Grid} a {@link Ext.grid.Column#renderer renderer}\r\nwill be needed to show the displayField when the editor is not active.  Set up the renderer manually, or implement\r\na reusable render, for example:<pre><code>\r\n// create reusable renderer\r\nExt.util.Format.comboRenderer = function (combo) {\r\n    return function (value) {\r\n        var record = combo.findRecord(combo.{@link #valueField}, value);\r\n        return record ? record.get(combo.{@link #displayField}) : combo.{@link #valueNotFoundText};\r\n    }\r\n}\r\n\r\n// create the combo instance\r\nvar combo = new Ext.form.ComboBox({\r\n   {@link #typeAhead}: true,\r\n   {@link #triggerAction}: 'all',\r\n   {@link #lazyRender}:true,\r\n   {@link #mode}: 'local',\r\n   {@link #store}: new Ext.data.ArrayStore({\r\n        id: 0,\r\n        fields: [\r\n            'myId',\r\n            'displayText'\r\n        ],\r\n        data: [[1, 'item1'], [2, 'item2']]\r\n    }),\r\n   {@link #valueField}: 'myId',\r\n   {@link #displayField}: 'displayText'\r\n});\r\n\r\n// snippet of column model used within grid\r\nvar cm = new Ext.grid.ColumnModel([{\r\n       ...\r\n    },{\r\n       header: \"Some Header\",\r\n       dataIndex: 'whatever',\r\n       width: 130,\r\n       editor: combo, // specify reference to combo instance\r\n       renderer: Ext.util.Format.comboRenderer(combo) // pass combo instance to reusable renderer\r\n    },\r\n    ...\r\n]);\r\n</code></pre></p>\r\n\r\n<p><b><u>Filtering</u></b></p>\r\n<p>A ComboBox {@link #doQuery uses filtering itself}, for information about filtering the ComboBox\r\nstore manually see <tt>{@link #lastQuery}</tt>.</p>\r\n","package":"form","definedIn":"widgets\\form\\Combo.js","xtype":"combo","extends":"Ext.form.TriggerField","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new ComboBox."},"subclasses":"Ext.form.TimeField","configOptions":[{"type":"Mixed","optional":false,"name":"transform","summary":"Note that if you specify this and the combo is going to be in an {@link Ext.form.BasicForm} or\r\n{@link Ext.form.FormPanel}, you must also set <tt>{@link #lazyRender} = true</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"lazyRender","summary":"(should always be used when rendering into an {@link Ext.Editor} (e.g. {@link Ext.grid.EditorGridPanel Grids}),\r\ndefaults to <tt>false</tt>).\r\n"},{"type":"String/Object","optional":false,"name":"autoCreate","summary":"element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.\r\nSee <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>\r\n<pre><code>{tag: \"input\", type: \"text\", size: \"24\", autocomplete: \"off\"}</code></pre>\r\n"},{"type":"Ext.data.Store/Array","optional":false,"name":"store","summary":"Acceptable values for this property are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>any {@link Ext.data.Store Store} subclass</b></li>\r\n<li><b>an Array</b> : Arrays will be converted to a {@link Ext.data.ArrayStore} internally,\r\nautomatically generating {@link Ext.data.Field#name field names} to work with all data components.\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>1-dimensional array</b> : (e.g., <tt>['Foo','Bar']</tt>)<div class=\"sub-desc\">\r\nA 1-dimensional array will automatically be expanded (each array item will be used for both the combo\r\n{@link #valueField} and {@link #displayField})</div></li>\r\n<li><b>2-dimensional array</b> : (e.g., <tt>[['f','Foo'],['b','Bar']]</tt>)<div class=\"sub-desc\">\r\nFor a multi-dimensional array, the value in index 0 of each item will be assumed to be the combo\r\n{@link #valueField}, while the value at index 1 is assumed to be the combo {@link #displayField}.\r\n</div></li></ul></div></li></ul></div>\r\n<p>See also <tt>{@link #mode}</tt>.</p>\r\n"},{"type":"String","optional":false,"name":"title","summary":"the dropdown list (defaults to undefined, with no header element)\r\n"},{"type":"Number","optional":false,"name":"listWidth","summary":"list (defaults to the width of the ComboBox field).  See also <tt>{@link #minListWidth}\r\n"},{"type":"String","optional":false,"name":"displayField","summary":"ComboBox (defaults to undefined if <tt>{@link #mode} = 'remote'</tt> or <tt>'field1'</tt> if\r\n{@link #transform transforming a select} or if the {@link #store field name is autogenerated based on\r\nthe store configuration}).\r\n<p>See also <tt>{@link #valueField}</tt>.</p>\r\n<p><b>Note</b>: if using a ComboBox in an {@link Ext.grid.EditorGridPanel Editor Grid} a\r\n{@link Ext.grid.Column#renderer renderer} will be needed to show the displayField when the editor is not\r\nactive.</p>\r\n"},{"type":"String","optional":false,"name":"valueField","summary":"ComboBox (defaults to undefined if <tt>{@link #mode} = 'remote'</tt> or <tt>'field2'</tt> if\r\n{@link #transform transforming a select} or if the {@link #store field name is autogenerated based on\r\nthe store configuration}).\r\n<p><b>Note</b>: use of a <tt>valueField</tt> requires the user to make a selection in order for a value to be\r\nmapped.  See also <tt>{@link #hiddenName}</tt>, <tt>{@link #hiddenValue}</tt>, and <tt>{@link #displayField}</tt>.</p>\r\n"},{"type":"String","optional":false,"name":"hiddenName","summary":"field's data value (defaults to the underlying DOM element's name). Required for the combo's value to automatically\r\npost during a form submission.  See also {@link #valueField}.\r\n<p><b>Note</b>: the hidden field's id will also default to this name if {@link #hiddenId} is not specified.\r\nThe ComboBox {@link Ext.Component#id id} and the <tt>{@link #hiddenId}</tt> <b>should be different</b>, since\r\nno two DOM nodes should share the same id.  So, if the ComboBox <tt>{@link Ext.form.Field#name name}</tt> and\r\n<tt>hiddenName</tt> are the same, you should specify a unique <tt>{@link #hiddenId}</tt>.</p>\r\n"},{"type":"String","optional":false,"name":"hiddenId","summary":"to give the hidden field a unique id (defaults to the <tt>{@link #hiddenName}</tt>).  The <tt>hiddenId</tt>\r\nand combo {@link Ext.Component#id id} should be different, since no two DOM\r\nnodes should share the same id.\r\n"},{"type":"String","optional":false,"name":"hiddenValue","summary":"specified to contain the selected {@link #valueField}, from the Store. Defaults to the configured\r\n<tt>{@link Ext.form.Field#value value}</tt>.\r\n"},{"type":"String","optional":false,"name":"listClass","summary":"applied the dropdown list element (defaults to '').\r\n"},{"type":"String","optional":false,"name":"selectedClass","summary":"(defaults to <tt>'x-combo-selected'</tt>)\r\n"},{"type":"String","optional":false,"name":"listEmptyText","summary":"(defaults to '')\r\n"},{"type":"String","optional":false,"name":"triggerClass","summary":"get the class <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified\r\n(defaults to <tt>'x-form-arrow-trigger'</tt> which displays a downward arrow icon).\r\n"},{"type":"Boolean/String","optional":false,"name":"shadow","summary":"4-way shadow, and <tt>\"drop\"</tt> for bottom-right\r\n"},{"type":"String","optional":false,"name":"listAlign","summary":"on supported anchor positions (defaults to <tt>'tl-bl?'</tt>)\r\n"},{"type":"Number","optional":false,"name":"maxHeight","summary":"(defaults to <tt>300</tt>)\r\n"},{"type":"Number","optional":false,"name":"minHeight","summary":"distance to the viewport edges (defaults to <tt>90</tt>)\r\n"},{"type":"String","optional":false,"name":"triggerAction","summary":"<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>'query'</tt></b> : <b>Default</b>\r\n<p class=\"sub-desc\">{@link #doQuery run the query} using the {@link Ext.form.Field#getRawValue raw value}.</p></li>\r\n<li><b><tt>'all'</tt></b> :\r\n<p class=\"sub-desc\">{@link #doQuery run the query} specified by the <tt>{@link #allQuery}</tt> config option</p></li>\r\n</ul></div>\r\n<p>See also <code>{@link #queryParam}</code>.</p>\r\n"},{"type":"Number","optional":false,"name":"minChars","summary":"{@link #typeAhead} activate (defaults to <tt>4</tt> if <tt>{@link #mode} = 'remote'</tt> or <tt>0</tt> if\r\n<tt>{@link #mode} = 'local'</tt>, does not apply if\r\n<tt>{@link Ext.form.TriggerField#editable editable} = false</tt>).\r\n"},{"type":"Boolean","optional":false,"name":"typeAhead","summary":"typed after a configurable delay ({@link #typeAheadDelay}) if it matches a known value (defaults\r\nto <tt>false</tt>)\r\n"},{"type":"Number","optional":false,"name":"queryDelay","summary":"sending the query to filter the dropdown list (defaults to <tt>500</tt> if <tt>{@link #mode} = 'remote'</tt>\r\nor <tt>10</tt> if <tt>{@link #mode} = 'local'</tt>)\r\n"},{"type":"Number","optional":false,"name":"pageSize","summary":"footer of the dropdown list and the {@link #doQuery filter queries} will execute with page start and\r\n{@link Ext.PagingToolbar#pageSize limit} parameters. Only applies when <tt>{@link #mode} = 'remote'</tt>\r\n(defaults to <tt>0</tt>).\r\n"},{"type":"Boolean","optional":false,"name":"selectOnFocus","summary":"Only applies when <tt>{@link Ext.form.TriggerField#editable editable} = true</tt> (defaults to\r\n<tt>false</tt>).\r\n"},{"type":"String","optional":false,"name":"queryParam","summary":"as it will be passed on the querystring (defaults to <tt>'query'</tt>)\r\n"},{"type":"String","optional":false,"name":"loadingText","summary":"when <tt>{@link #mode} = 'remote'</tt> (defaults to <tt>'Loading...'</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"resizable","summary":"(creates an {@link Ext.Resizable} with 'se' {@link Ext.Resizable#pinned pinned} handles).\r\nDefaults to <tt>false</tt>.\r\n"},{"type":"Number","optional":false,"name":"handleHeight","summary":"<tt>{@link #resizable} = true</tt> (defaults to <tt>8</tt>)\r\n"},{"type":"String","optional":false,"name":"allQuery","summary":"with no filtering (defaults to '')\r\n"},{"type":"String","optional":false,"name":"mode","summary":"<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>'remote'</tt></b> : <b>Default</b>\r\n<p class=\"sub-desc\">Automatically loads the <tt>{@link #store}</tt> the <b>first</b> time the trigger\r\nis clicked. If you do not want the store to be automatically loaded the first time the trigger is\r\nclicked, set to <tt>'local'</tt> and manually load the store.  To force a requery of the store\r\n<b>every</b> time the trigger is clicked see <tt>{@link #lastQuery}</tt>.</p></li>\r\n<li><b><tt>'local'</tt></b> :\r\n<p class=\"sub-desc\">ComboBox loads local data</p>\r\n<pre><code>\r\nvar combo = new Ext.form.ComboBox({\r\n    renderTo: document.body,\r\n    mode: 'local',\r\n    store: new Ext.data.ArrayStore({\r\n        id: 0,\r\n        fields: [\r\n            'myId',  // numeric value is the key\r\n            'displayText'\r\n        ],\r\n        data: [[1, 'item1'], [2, 'item2']]  // data is local\r\n    }),\r\n    valueField: 'myId',\r\n    displayField: 'displayText',\r\n    triggerAction: 'all'\r\n});\r\n</code></pre></li>\r\n</ul></div>\r\n"},{"type":"Number","optional":false,"name":"minListWidth","summary":"be ignored if <tt>{@link #listWidth}</tt> has a higher value)\r\n"},{"type":"Boolean","optional":false,"name":"forceSelection","summary":"<tt>false</tt> to allow the user to set arbitrary text into the field (defaults to <tt>false</tt>)\r\n"},{"type":"Number","optional":false,"name":"typeAheadDelay","summary":"if <tt>{@link #typeAhead} = true</tt> (defaults to <tt>250</tt>)\r\n"},{"type":"String","optional":false,"name":"valueNotFoundText","summary":"the store, valueNotFoundText will be displayed as the field text if defined (defaults to undefined). If this\r\ndefault text is used, it means there is no value set and no validation will occur on this field.\r\n"},{"type":"Boolean","optional":false,"name":"lazyInit","summary":"(defaults to <tt>true</tt>)\r\n"},{"type":"String/Ext.XTemplate","optional":false,"name":"tpl","summary":"use to display each item in the dropdown list. The dropdown list is displayed in a\r\nDataView. See {@link #view}.</p>\r\n<p>The default template string is:</p><pre><code>\r\n                  '&lt;tpl for=\".\">&lt;div class=\"x-combo-list-item\">{' + this.displayField + '}&lt;/div>&lt;/tpl>'\r\n</code></pre>\r\n<p>Override the default value to create custom UI layouts for items in the list.\r\nFor example:</p><pre><code>\r\n                  '&lt;tpl for=\".\">&lt;div ext:qtip=\"{state}. {nick}\" class=\"x-combo-list-item\">{state}&lt;/div>&lt;/tpl>'\r\n</code></pre>\r\n<p>The template <b>must</b> contain one or more substitution parameters using field\r\nnames from the Combo's</b> {@link #store Store}. In the example above an\r\n<pre>ext:qtip</pre> attribute is added to display other fields from the Store.</p>\r\n<p>To preserve the default visual look of list items, add the CSS class name\r\n<pre>x-combo-list-item</pre> to the template's container element.</p>\r\n<p>Also see {@link #itemSelector} for additional details.</p>\r\n"},{"type":"String","optional":false,"name":"itemSelector","summary":"<p>A simple CSS selector (e.g. div.some-class or span:first-child) that will be\r\nused to determine what nodes the {@link #view Ext.DataView} which handles the dropdown\r\ndisplay will be working with.</p>\r\n<p><b>Note</b>: this setting is <b>required</b> if a custom XTemplate has been\r\nspecified in {@link #tpl} which assigns a class other than <pre>'x-combo-list-item'</pre>\r\nto dropdown list items</b>\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"lastQuery","summary":"The value of the match string used to filter the store. Delete this property to force a requery.\r\nExample use:\r\n<pre><code>\r\nvar combo = new Ext.form.ComboBox({\r\n...\r\nmode: 'remote',\r\n...\r\nlisteners: {\r\n// delete the previous query in the beforequery event or set\r\n// combo.lastQuery = null (this will reload the store the next time it expands)\r\nbeforequery: function (qe) {\r\ndelete qe.combo.lastQuery;\r\n}\r\n}\r\n});\r\n</code></pre>\r\nTo make sure the filter in the store is not cleared the first time the ComboBox trigger is used\r\nconfigure the combo with <tt>lastQuery=''</tt>. Example use:\r\n<pre><code>\r\nvar combo = new Ext.form.ComboBox({\r\n...\r\nmode: 'local',\r\ntriggerAction: 'all',\r\nlastQuery: ''\r\n});\r\n</code></pre>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"view","summary":"The {@link Ext.DataView DataView} used to display the ComboBox's options.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"getListParent","summary":"<p>Returns the element used to house this ComboBox's pop-up list. Defaults to the document body.</p>\r\nA custom implementation may be provided as a configuration option if the floating list needs to be rendered\r\nto a different Element. An example might be rendering the list inside a Menu so that clicking\r\nthe list does not hide the Menu:<pre><code>\r\nvar store = new Ext.data.ArrayStore({\r\n    autoDestroy: true,\r\n    fields: ['initials', 'fullname'],\r\n    data : [\r\n        ['FF', 'Fred Flintstone'],\r\n        ['BR', 'Barney Rubble']\r\n    ]\r\n});\r\n\r\nvar combo = new Ext.form.ComboBox({\r\n    store: store,\r\n    displayField: 'fullname',\r\n    emptyText: 'Select a name...',\r\n    forceSelection: true,\r\n    getListParent: function () {\r\n        return this.el.up('.x-menu');\r\n    },\r\n    iconCls: 'no-icon', //use iconCls if placing within menu to shift to right side of menu\r\n    mode: 'local',\r\n    selectOnFocus: true,\r\n    triggerAction: 'all',\r\n    typeAhead: true,\r\n    width: 135\r\n});\r\n\r\nvar menu = new Ext.menu.Menu({\r\n    id: 'mainMenu',\r\n    items: [\r\n        combo // A Field in a Menu\r\n    ]\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"Ext.data.Store","summary":"The store"},"hide":false,"private":false,"name":"getStore","summary":"Returns the store associated with this combo.\r\n"},{"parameters":[],"return":{"type":"String","summary":"value The selected value"},"hide":false,"private":false,"name":"getValue","summary":"Returns the currently selected field value or empty string if no value is set.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearValue","summary":"Clears any text/value currently set in the field\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The value to match"}],"return":{"type":"Ext.form.Field","summary":"this"},"hide":false,"private":false,"name":"setValue","summary":"Sets the specified value into the field.  If the value finds a match, the corresponding record text\r\nwill be displayed in the field.  If the value does not match the data value of an existing item,\r\nand the valueNotFoundText config option is defined, it will be displayed as the default field text.\r\nOtherwise the field will be blank (although the value will still be set).\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isExpanded","summary":"Returns true if the dropdown list is expanded, else false.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The data value of the item to select"},{"type":"Boolean","optional":false,"name":"scrollIntoView","summary":"False to prevent the dropdown list from autoscrolling to display the\r\nselected item if it is not currently in view (defaults to true)"}],"return":{"type":"Boolean","summary":"True if the value matched an item in the list, else false"},"hide":false,"private":false,"name":"selectByValue","summary":"Select an item in the dropdown list by its data value. This function does NOT cause the select event to fire.\r\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The zero-based index of the list item to select"},{"type":"Boolean","optional":false,"name":"scrollIntoView","summary":"False to prevent the dropdown list from autoscrolling to display the\r\nselected item if it is not currently in view (defaults to true)"}],"return":null,"hide":false,"private":false,"name":"select","summary":"Select an item in the dropdown list by its numeric index in the list. This function does NOT cause the select event to fire.\r\nThe store must be loaded and the list expanded for this function to work, otherwise use setValue.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"query","summary":"The SQL query to execute"},{"type":"Boolean","optional":false,"name":"forceAll","summary":"<tt>true</tt> to force the query to execute even if there are currently fewer\r\ncharacters in the field than the minimum specified by the <tt>{@link #minChars}</tt> config option.  It\r\nalso clears any filter previously saved in the current store (defaults to <tt>false</tt>)"}],"return":null,"hide":false,"private":false,"name":"doQuery","summary":"Execute a query to filter the dropdown list.  Fires the {@link #beforequery} event prior to performing the\r\nquery allowing the query action to be canceled if needed.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"collapse","summary":"Hides the dropdown list if it is currently expanded. Fires the {@link #collapse} event on completion.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"expand","summary":"Expands the dropdown list if it is currently hidden. Fires the {@link #expand} event on completion.\r\n"}],"events":[{"parameters":[{"type":"Ext.form.ComboBox","optional":false,"name":"combo","summary":"This combo box"}],"name":"expand","summary":"Fires when the dropdown list is expanded."},{"parameters":[{"type":"Ext.form.ComboBox","optional":false,"name":"combo","summary":"This combo box"}],"name":"collapse","summary":"Fires when the dropdown list is collapsed."},{"parameters":[{"type":"Ext.form.ComboBox","optional":false,"name":"combo","summary":"This combo box"},{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The data record returned from the underlying store"},{"type":"Number","optional":false,"name":"index","summary":"The index of the selected item in the dropdown list"}],"name":"beforeselect","summary":"Fires before a list item is selected. Return false to cancel the selection."},{"parameters":[{"type":"Ext.form.ComboBox","optional":false,"name":"combo","summary":"This combo box"},{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The data record returned from the underlying store"},{"type":"Number","optional":false,"name":"index","summary":"The index of the selected item in the dropdown list"}],"name":"select","summary":"Fires when a list item is selected."},{"parameters":[{"type":"Object","optional":false,"name":"queryEvent","summary":"An object that has these properties:<ul>"}],"name":"beforequery","summary":"Fires before all queries are processed. Return false to cancel the query or set the queryEvent's cancel property to true. <li><code>combo</code> : Ext.form.ComboBox <div class=\"sub-desc\">This combo box</div></li> <li><code>query</code> : String <div class=\"sub-desc\">The query</div></li> <li><code>forceAll</code> : Boolean <div class=\"sub-desc\">True to force \"all\" query</div></li> <li><code>cancel</code> : Boolean <div class=\"sub-desc\">Set to true to cancel the query</div></li> </ul>."}]},{"name":"DateField","fullName":"Ext.form.DateField","summary":"Provides a date input field with a {@link Ext.DatePicker} dropdown and automatic date validation.\r\n","package":"form","definedIn":"widgets\\form\\DateField.js","xtype":"datefield","extends":"Ext.form.TriggerField","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new DateField."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"format","summary":"The default date format string which can be overriden for localization support.  The format must be\r\nvalid according to {@link Date#parseDate} (defaults to <tt>'m/d/Y'</tt>).\r\n"},{"type":"String","optional":false,"name":"altFormats","summary":"Multiple date formats separated by \"<tt>|</tt>\" to try when parsing a user input value and it\r\ndoes not match the defined format (defaults to\r\n<tt>'m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d'</tt>).\r\n"},{"type":"String","optional":false,"name":"disabledDaysText","summary":"The tooltip to display when the date falls on a disabled day (defaults to <tt>'Disabled'</tt>)\r\n"},{"type":"String","optional":false,"name":"disabledDatesText","summary":"The tooltip text to display when the date falls on a disabled date (defaults to <tt>'Disabled'</tt>)\r\n"},{"type":"String","optional":false,"name":"minText","summary":"The error text to display when the date in the cell is before <tt>{@link #minValue}</tt> (defaults to\r\n<tt>'The date in this field must be after {minValue}'</tt>).\r\n"},{"type":"String","optional":false,"name":"maxText","summary":"The error text to display when the date in the cell is after <tt>{@link #maxValue}</tt> (defaults to\r\n<tt>'The date in this field must be before {maxValue}'</tt>).\r\n"},{"type":"String","optional":false,"name":"invalidText","summary":"The error text to display when the date in the field is invalid (defaults to\r\n<tt>'{value} is not a valid date - it must be in the format {format}'</tt>).\r\n"},{"type":"String","optional":false,"name":"triggerClass","summary":"An additional CSS class used to style the trigger button.  The trigger will always get the\r\nclass <tt>'x-form-trigger'</tt> and <tt>triggerClass</tt> will be <b>appended</b> if specified\r\n(defaults to <tt>'x-form-date-trigger'</tt> which displays a calendar icon).\r\n"},{"type":"Boolean","optional":false,"name":"showToday","summary":"<tt>false</tt> to hide the footer area of the DatePicker containing the Today button and disable\r\nthe keyboard handler for spacebar that selects the current date (defaults to <tt>true</tt>).\r\n"},{"type":"Date/String","optional":false,"name":"minValue","summary":"The minimum allowed date. Can be either a Javascript date object or a string date in a\r\nvalid format (defaults to null).\r\n"},{"type":"Date/String","optional":false,"name":"maxValue","summary":"The maximum allowed date. Can be either a Javascript date object or a string date in a\r\nvalid format (defaults to null).\r\n"},{"type":"Array","optional":false,"name":"disabledDays","summary":"An array of days to disable, 0 based (defaults to null). Some examples:<pre><code>\r\n// disable Sunday and Saturday:\r\ndisabledDays:  [0, 6]\r\n// disable weekdays:\r\ndisabledDays: [1,2,3,4,5]\r\n</code></pre>\r\n"},{"type":"Array","optional":false,"name":"disabledDates","summary":"An array of \"dates\" to disable, as strings. These strings will be used to build a dynamic regular\r\nexpression so they are very powerful. Some examples:<pre><code>\r\n// disable these exact dates:\r\ndisabledDates: [\"03/08/2003\", \"09/16/2003\"]\r\n// disable these days for every year:\r\ndisabledDates: [\"03/08\", \"09/16\"]\r\n// only match the beginning (useful if you are using short years):\r\ndisabledDates: [\"^03/08\"]\r\n// disable every day in March 2006:\r\ndisabledDates: [\"03/../2006\"]\r\n// disable every day in every March:\r\ndisabledDates: [\"^03\"]\r\n</code></pre>\r\nNote that the format of the dates included in the array should exactly match the {@link #format} config.\r\nIn order to support regular expressions, if you are using a {@link #format date format} that has \".\" in\r\nit, you will have to escape the dot when restricting dates. For example: <tt>[\"03\\\\.08\\\\.03\"]</tt>.\r\n"},{"type":"String/Object","optional":false,"name":"autoCreate","summary":"A {@link Ext.DomHelper DomHelper element specification object}, or <tt>true</tt> for the default element\r\nspecification object:<pre><code>\r\nautoCreate: {tag: \"input\", type: \"text\", size: \"10\", autocomplete: \"off\"}\r\n</code></pre>\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Array","optional":false,"name":"disabledDates","summary":"An array of date strings (see the <tt>{@link #disabledDates}</tt> config\r\nfor details on supported values) used to disable a pattern of dates."}],"return":null,"hide":false,"private":false,"name":"setDisabledDates","summary":"Replaces any existing disabled dates with new values and refreshes the DatePicker.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"disabledDays","summary":"An array of disabled day indexes. See the <tt>{@link #disabledDays}</tt>\r\nconfig for details on supported values."}],"return":null,"hide":false,"private":false,"name":"setDisabledDays","summary":"Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.\r\n"},{"parameters":[{"type":"Date","optional":false,"name":"value","summary":"The minimum date that can be selected"}],"return":null,"hide":false,"private":false,"name":"setMinValue","summary":"Replaces any existing <tt>{@link #minValue}</tt> with the new value and refreshes the DatePicker.\r\n"},{"parameters":[{"type":"Date","optional":false,"name":"value","summary":"The maximum date that can be selected"}],"return":null,"hide":false,"private":false,"name":"setMaxValue","summary":"Replaces any existing <tt>{@link #maxValue}</tt> with the new value and refreshes the DatePicker.\r\n"},{"parameters":[],"return":{"type":"Date","summary":"The date value"},"hide":false,"private":false,"name":"getValue","summary":"Returns the current date value of the date field.\r\n"},{"parameters":[{"type":"String/Date","optional":false,"name":"date","summary":"The date or valid date string"}],"return":{"type":"Ext.form.Field","summary":"this"},"hide":false,"private":false,"name":"setValue","summary":"Sets the value of the date field.  You can pass a date object or any string that can be\r\nparsed into a valid date, using <tt>{@link #format}</tt> as the date format, according\r\nto the same rules as {@link Date#parseDate} (the default format used is <tt>\"m/d/Y\"</tt>).\r\n<br />Usage:\r\n<pre><code>\r\n//All of these calls set the same date value (May 4, 2006)\r\n\r\n//Pass a date object:\r\nvar dt = new Date('5/4/2006');\r\ndateField.setValue(dt);\r\n\r\n//Pass a date string (default format):\r\ndateField.setValue('05/04/2006');\r\n\r\n//Pass a date string (custom format):\r\ndateField.format = 'Y-m-d';\r\ndateField.setValue('2006-05-04');\r\n</code></pre>\r\n"}],"events":[{"parameters":[{"type":"Ext.form.DateField","optional":false,"name":"el","summary":"this"},{"type":"Date","optional":false,"name":"date","summary":"The date that was selected"}],"name":"select","summary":"Fires when a date is selected via the date picker."}]},{"name":"DisplayField","fullName":"Ext.form.DisplayField","summary":"A display-only text field which is not validated and not submitted.\r\n","package":"form","definedIn":"widgets\\form\\DisplayField.js","xtype":"displayfield","extends":"Ext.form.Field","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new DisplayField."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"disabled","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"fieldClass","summary":""},{"type":"Boolean","optional":false,"name":"htmlEncode","summary":"<tt>false</tt>). This might be useful if you want to include tags in the field's innerHTML rather than\r\nrendering them as string literals per the default logic.\r\n"},{"type":"String","optional":false,"name":"inputType","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"readOnly","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"validateOnBlur","summary":"@hide\r\n"},{"type":"Number","optional":false,"name":"validationDelay","summary":"@hide\r\n"},{"type":"String/Boolean","optional":false,"name":"validationEvent","summary":"@hide\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"Field","fullName":"Ext.form.Field","summary":"Base class for form fields that provides default event handling, sizing, value handling and other functionality.\r\n","package":"form","definedIn":"widgets\\form\\Field.js","xtype":"field","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Field."},"subclasses":"Ext.form.Checkbox,Ext.form.CheckboxGroup,Ext.form.DisplayField,Ext.form.Hidden,Ext.form.HtmlEditor,Ext.form.TextField","configOptions":[{"type":"String/Object","optional":false,"name":"autoCreate","summary":"element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.\r\nSee <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>\r\n<pre><code>{tag: 'input', type: 'text', size: '20', autocomplete: 'off'}</code></pre>\r\n"},{"type":"String","optional":false,"name":"autoEl","summary":""},{"type":"Boolean","optional":false,"name":"autoHeight","summary":""},{"type":"Boolean","optional":false,"name":"autoWidth","summary":""},{"type":"String","optional":false,"name":"cls","summary":""},{"type":"Boolean","optional":false,"name":"disabled","summary":"<p>Be aware that conformant with the <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.12.1\">HTML specification</a>,\r\ndisabled Fields will not be {@link Ext.form.BasicForm#submit submitted}.</p>\r\n"},{"type":"String","optional":false,"name":"fieldClass","summary":""},{"type":"String","optional":false,"name":"focusClass","summary":""},{"type":"String","optional":false,"name":"inputType","summary":"to 'text'). The types 'file' and 'password' must be used to render those field types currently -- there are\r\nno separate Ext components for those. Note that if you use <tt>inputType:'file'</tt>, {@link #emptyText}\r\nis not supported and should be avoided.\r\n"},{"type":"String","optional":false,"name":"invalidClass","summary":""},{"type":"String","optional":false,"name":"invalidText","summary":"(defaults to 'The value in this field is invalid')\r\n"},{"type":"String","optional":false,"name":"msgFx","summary":"(defaults to 'normal').\r\n"},{"type":"String","optional":false,"name":"msgTarget","summary":"(defaults to 'qtip'):\r\n<pre>\r\nValue         Description\r\n-----------   ----------------------------------------------------------------------\r\nqtip          Display a quick tip when the user hovers over the field\r\ntitle         Display a default browser title attribute popup\r\nunder         Add a block div beneath the field containing the error text\r\nside          Add an error icon to the right of the field with a popup on hover\r\n[element id]  Add the error text directly to the innerHTML of the specified element\r\n</pre>\r\n"},{"type":"String","optional":false,"name":"name","summary":"<b>Note</b>: this property must be set if this field is to be automatically included with\r\n{@link Ext.form.BasicForm#submit form submit()}.\r\n"},{"type":"Boolean","optional":false,"name":"preventMark","summary":"<tt>true</tt> to disable {@link #markInvalid marking the field invalid}.\r\nDefaults to <tt>false</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"readOnly","summary":"(defaults to <tt>false</tt>).\r\n<br><p><b>Note</b>: this only sets the element's readOnly DOM attribute.\r\nSetting <code>readOnly=true</code>, for example, will not disable triggering a\r\nComboBox or DateField; it gives you the option of forcing the user to choose\r\nvia the trigger without typing in the text box. To hide the trigger use\r\n<code>{@link Ext.form.TriggerField#hideTrigger hideTrigger}</code>.</p>\r\n"},{"type":"Number","optional":false,"name":"tabIndex","summary":"not those which are built via applyTo (defaults to undefined).\r\n"},{"type":"Boolean","optional":false,"name":"validateOnBlur","summary":""},{"type":"Number","optional":false,"name":"validationDelay","summary":"is initiated (defaults to 250)\r\n"},{"type":"String/Boolean","optional":false,"name":"validationEvent","summary":"      automatic validation (defaults to 'keyup').\r\n"},{"type":"Mixed","optional":false,"name":"value","summary":""}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"originalValue","summary":"The original value of the field as configured in the {@link #value} configuration, or\r\nas loaded by the last form load operation if the form's {@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}\r\nsetting is <code>true</code>.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearInvalid","summary":"Clear any invalid styles/messages for this field\r\n"},{"parameters":[],"return":{"type":"String} name The field {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName","summary":""},"hide":false,"private":false,"name":"getName","summary":"Returns the {@link Ext.form.Field#name name} or {@link Ext.form.ComboBox#hiddenName hiddenName}\r\nattribute of the field if available.\r\n"},{"parameters":[],"return":{"type":"Mixed","summary":"value The field value"},"hide":false,"private":false,"name":"getRawValue","summary":"Returns the raw data value which may or may not be a valid, defined value.  To return a normalized value see {@link #getValue}.\r\n"},{"parameters":[],"return":{"type":"Mixed","summary":"value The field value"},"hide":false,"private":false,"name":"getValue","summary":"Returns the normalized data value (undefined or emptyText will be returned as '').  To return the raw value see {@link #getRawValue}.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if this field has been changed from its original value (and"},"hide":false,"private":false,"name":"isDirty","summary":"<p>Returns true if the value of this Field has been changed from its original value.\r\nWill return false if the field is disabled or has not been rendered yet.</p>\r\n<p>Note that if the owning {@link Ext.form.BasicForm form} was configured with\r\n{@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}\r\nthen the <i>original value</i> is updated when the values are loaded by\r\n{@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#setValues setValues}.</p>\r\nis not disabled), false otherwise.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"preventMark","summary":"True to disable marking the field invalid"}],"return":{"type":"Boolean","summary":"True if the value is valid, else false"},"hide":false,"private":false,"name":"isValid","summary":"Returns whether or not the field value is currently valid by\r\n{@link #validateValue validating} the {@link #processValue processed value}\r\nof the field. <b>Note</b>: {@link #disabled} fields are ignored.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"msg","summary":"The validation message (defaults to {@link #invalidText})"}],"return":null,"hide":false,"private":false,"name":"markInvalid","summary":"Mark this field as invalid, using {@link #msgTarget} to determine how to\r\ndisplay the error and applying {@link #invalidClass} to the field's element.\r\n<b>Note</b>: this method does not actually make the field\r\n{@link #isValid invalid}.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":""}],"return":null,"hide":false,"private":false,"name":"processValue","summary":"This method should only be overridden if necessary to prepare raw values\r\nfor validation (see {@link #validate} and {@link #isValid}).  This method\r\nis expected to return the processed value for the field which will\r\nbe used for validation (see validateValue method).\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"reset","summary":"Resets the current field value to the originally loaded value and clears any validation messages.\r\nSee {@link Ext.form.BasicForm}.{@link Ext.form.BasicForm#trackResetOnLoad trackResetOnLoad}\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to set"}],"return":{"type":"Mixed","summary":"value The field value that is set"},"hide":false,"private":false,"name":"setRawValue","summary":"Sets the underlying DOM field's value directly, bypassing validation.  To set the value with validation see {@link #setValue}.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to set"}],"return":{"type":"Ext.form.Field","summary":"this"},"hide":false,"private":false,"name":"setValue","summary":"Sets a data value into the field and validates it.  To set the value directly without validation see {@link #setRawValue}.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if the value is valid, else false"},"hide":false,"private":false,"name":"validate","summary":"Validates the field value\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":""}],"return":null,"hide":false,"private":false,"name":"validateValue","summary":"Subclasses should provide the validation implementation by overriding this\r\n"}],"events":[{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"}],"name":"blur","summary":"Fires when this field loses input focus."},{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"},{"type":"Mixed","optional":false,"name":"newValue","summary":"The new value"},{"type":"Mixed","optional":false,"name":"oldValue","summary":"The original value"}],"name":"change","summary":"Fires just before the field blurs if the field value has changed."},{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"}],"name":"focus","summary":"Fires when this field receives input focus."},{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"msg","summary":"The validation message"}],"name":"invalid","summary":"Fires after the field has been marked as invalid."},{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"specialkey","summary":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. To handle other keys see {@link Ext.Panel#keys} or {@link Ext.KeyMap}. You can check {@link Ext.EventObject#getKey} to determine which key was pressed. For example: <pre><code> var form = new Ext.form.FormPanel({ ... items: [{ fieldLabel: 'Field 1', name: 'field1', allowBlank: false },{ fieldLabel: 'Field 2', name: 'field2', listeners: { specialkey: function (field, e) { // e.HOME, e.END, e.PAGE_UP, e.PAGE_DOWN, // e.TAB, e.ESC, arrow keys: e.LEFT, e.RIGHT, e.UP, e.DOWN if (e.{@link Ext.EventObject#getKey getKey()} == e.ENTER) { var form = field.ownerCt.getForm(); form.submit(); } } } } ], ... }); </code></pre>."},{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"}],"name":"valid","summary":"Fires after the field has been validated with no errors."}]},{"name":"FieldSet","fullName":"Ext.form.FieldSet","summary":"Standard container used for grouping items within a {@link Ext.form.FormPanel form}.\r\n<pre><code>\r\nvar form = new Ext.FormPanel({\r\n    title: 'Simple Form with FieldSets',\r\n    labelWidth: 75, // label settings here cascade unless overridden\r\n    url: 'save-form.php',\r\n    frame:true,\r\n    bodyStyle:'padding:5px 5px 0',\r\n    width: 700,\r\n    renderTo: document.body,\r\n    layout:'column', // arrange items in columns\r\n    defaults: {      // defaults applied to items\r\n        layout: 'form',\r\n        border: false,\r\n        bodyStyle: 'padding:4px'\r\n    },\r\n    items: [{\r\n        // Fieldset in Column 1\r\n        xtype:'fieldset',\r\n        columnWidth: 0.5,\r\n        title: 'Fieldset 1',\r\n        collapsible: true,\r\n        autoHeight:true,\r\n        defaults: {\r\n            anchor: '-20' // leave room for error icon\r\n        },\r\n        defaultType: 'textfield',\r\n        items :[{\r\n                fieldLabel: 'Field 1'\r\n            }, {\r\n                fieldLabel: 'Field 2'\r\n            }, {\r\n                fieldLabel: 'Field 3'\r\n            }\r\n        ]\r\n    },{\r\n        // Fieldset in Column 2 - Panel inside\r\n        xtype:'fieldset',\r\n        title: 'Show Panel', // title, header, or checkboxToggle creates fieldset header\r\n        autoHeight:true,\r\n        columnWidth: 0.5,\r\n        checkboxToggle: true,\r\n        collapsed: true, // fieldset initially collapsed\r\n        layout:'anchor',\r\n        items :[{\r\n            xtype: 'panel',\r\n            anchor: '100%',\r\n            title: 'Panel inside a fieldset',\r\n            frame: true,\r\n            height: 100\r\n        }]\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"form","definedIn":"widgets\\form\\FieldSet.js","xtype":"fieldset","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Mixed","optional":false,"name":"checkboxToggle","summary":"in front of the legend to expand/collapse the fieldset when the checkbox is toggled. (defaults\r\nto <tt>false</tt>).\r\n<p>A {@link Ext.DomHelper DomHelper} element spec may also be specified to create the checkbox.\r\nIf <tt>true</tt> is specified, the default DomHelper config object used to create the element\r\nis:</p><pre><code>\r\n{tag: 'input', type: 'checkbox', name: this.checkboxName || this.id+'-checkbox'}\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"checkboxName","summary":"(defaults to <tt>'[checkbox id]-checkbox'</tt>).\r\n"},{"type":"Boolean","optional":false,"name":"collapsible","summary":"<tt>true</tt> to make the fieldset collapsible and have the expand/collapse toggle button automatically\r\nrendered into the legend element, <tt>false</tt> to keep the fieldset statically sized with no collapse\r\nbutton (defaults to <tt>false</tt>). Another option is to configure <tt>{@link #checkboxToggle}</tt>.\r\n"},{"type":"Number","optional":false,"name":"labelWidth","summary":""},{"type":"String","optional":false,"name":"itemCls","summary":"{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl} for details).\r\nThis property cascades to child containers.\r\n"},{"type":"String","optional":false,"name":"baseCls","summary":""},{"type":"String","optional":false,"name":"layout","summary":""},{"type":"Boolean","optional":false,"name":"animCollapse","summary":"<tt>true</tt> to animate the transition when the panel is collapsed, <tt>false</tt> to skip the\r\nanimation (defaults to <tt>false</tt>).\r\n"},{"type":"String/Number","optional":false,"name":"activeItem","summary":"@hide\r\n"},{"type":"Mixed","optional":false,"name":"applyTo","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"bodyBorder","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"border","summary":"@hide\r\n"},{"type":"Boolean/Number","optional":false,"name":"bufferResize","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"collapseFirst","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"defaultType","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"disabledClass","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"elements","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"floating","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"footer","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"frame","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"header","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"headerAsText","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"hideCollapseTool","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"iconCls","summary":"@hide\r\n"},{"type":"Boolean/String","optional":false,"name":"shadow","summary":"@hide\r\n"},{"type":"Number","optional":false,"name":"shadowOffset","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"shim","summary":"@hide\r\n"},{"type":"Object/Array","optional":false,"name":"tbar","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"tabTip","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"titleCollapse","summary":"@hide\r\n"},{"type":"Array","optional":false,"name":"tools","summary":"@hide\r\n"},{"type":"Ext.Template/Ext.XTemplate","optional":false,"name":"toolTemplate","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"xtype","summary":"@hide\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"onCheckClick","summary":"This function is called by the fieldset's checkbox when it is toggled (only applies when\r\ncheckboxToggle = true).  This method should never be called externally, but can be\r\noverridden to provide custom behavior when the checkbox is toggled if needed.\r\n"}],"events":[]},{"name":"FormPanel","fullName":"Ext.form.FormPanel","summary":"<p>Standard form container.</p>\r\n\r\n<p><b><u>Layout</u></b></p>\r\n<p>By default, FormPanel is configured with <tt>layout:'form'</tt> to use an {@link Ext.layout.FormLayout}\r\nlayout manager, which styles and renders fields and labels correctly. When nesting additional Containers\r\nwithin a FormPanel, you should ensure that any descendant Containers which host input Fields use the\r\n{@link Ext.layout.FormLayout} layout manager.</p>\r\n\r\n<p><b><u>BasicForm</u></b></p>\r\n<p>Although <b>not listed</b> as configuration options of FormPanel, the FormPanel class accepts all\r\nof the config options required to configure its internal {@link Ext.form.BasicForm} for:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.form.BasicForm#fileUpload file uploads}</li>\r\n<li>functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form</li>\r\n</ul></div>\r\n\r\n<p><b>Note</b>: If subclassing FormPanel, any configuration options for the BasicForm must be applied to\r\nthe <tt><b>initialConfig</b></tt> property of the FormPanel. Applying {@link Ext.form.BasicForm BasicForm}\r\nconfiguration settings to <b><tt>this</tt></b> will <b>not</b> affect the BasicForm's configuration.</p>\r\n\r\n<p><b><u>Form Validation</u></b></p>\r\n<p>For information on form validation see the following:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.form.TextField}</li>\r\n<li>{@link Ext.form.VTypes}</li>\r\n<li>{@link Ext.form.BasicForm#doAction BasicForm.doAction <b>clientValidation</b> notes}</li>\r\n<li><tt>{@link Ext.form.FormPanel#monitorValid monitorValid}</tt></li>\r\n</ul></div>\r\n\r\n<p><b><u>Form Submission</u></b></p>\r\n<p>By default, Ext Forms are submitted through Ajax, using {@link Ext.form.Action}. To enable normal browser\r\nsubmission of the {@link Ext.form.BasicForm BasicForm} contained in this FormPanel, see the\r\n<tt><b>{@link Ext.form.BasicForm#standardSubmit standardSubmit}</b></tt> option.</p>\r\n\r\n","package":"form","definedIn":"widgets\\form\\Form.js","xtype":"form","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Array","optional":false,"name":"buttons","summary":"An array of {@link Ext.Button}s or {@link Ext.Button} configs used to add buttons to the footer of this FormPanel.<br>\r\n<p>Buttons in the footer of a FormPanel may be configured with the option <tt>formBind: true</tt>. This causes\r\nthe form's {@link #monitorValid valid state monitor task} to enable/disable those Buttons depending on\r\nthe form's valid/invalid state.</p>\r\n"},{"type":"String","optional":false,"name":"formId","summary":""},{"type":"Boolean","optional":false,"name":"hideLabels","summary":"<p><tt>true</tt> to hide field labels by default (sets <tt>display:none</tt>). Defaults to\r\n<tt>false</tt>.</p>\r\n<p>Also see {@link Ext.Component}.<tt>{@link Ext.Component#hideLabel hideLabel}</tt>.\r\n"},{"type":"String","optional":false,"name":"itemCls","summary":""},{"type":"String","optional":false,"name":"labelAlign","summary":"for the <b>container</b>. Valid values are <tt>\"left</tt>\", <tt>\"top\"</tt> or <tt>\"right\"</tt>\r\n(defaults to <tt>\"left\"</tt>). This property cascades to child <b>containers</b> and can be\r\noverridden on any child <b>container</b> (e.g., a fieldset can specify a different <tt>labelAlign</tt>\r\nfor its fields).\r\n"},{"type":"Number","optional":false,"name":"labelPad","summary":"The default padding in pixels for field labels (defaults to <tt>5</tt>). <tt>labelPad</tt> only\r\napplies if <tt>{@link #labelWidth}</tt> is also specified, otherwise it will be ignored.\r\n"},{"type":"String","optional":false,"name":"labelSeparator","summary":"See {@link Ext.Component}.<tt>{@link Ext.Component#labelSeparator labelSeparator}</tt>\r\n"},{"type":"Number","optional":false,"name":"labelWidth","summary":"and can be overridden on any child container (e.g., a fieldset can specify a different <tt>labelWidth</tt>\r\nfor its fields) (defaults to <tt>100</tt>).\r\n"},{"type":"String","optional":false,"name":"layout","summary":"For additional details see {@link Ext.layout.FormLayout} and {@link Ext.Container#layout Ext.Container.layout}.\r\n"},{"type":"Number","optional":false,"name":"minButtonWidth","summary":""},{"type":"Number","optional":false,"name":"monitorPoll","summary":""},{"type":"Boolean","optional":false,"name":"monitorValid","summary":"regularly fires the {@link #clientvalidation} event passing that state.<br>\r\n<p>When monitoring valid state, the FormPanel enables/disables any of its configured\r\n{@link #buttons} which have been configured with <code>formBind: true</code> depending\r\non whether the {@link Ext.form.BasicForm#isValid form is valid} or not. Defaults to <tt>false</tt></p>\r\n"}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Ext.form.BasicForm} The {@link Ext.form.BasicForm Form","summary":"which this Panel contains."},"hide":false,"private":false,"name":"getForm","summary":"Provides access to the {@link Ext.form.BasicForm Form} which this Panel contains.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"options","summary":"The options to pass to the action (see {@link Ext.form.BasicForm#doAction} for details)"}],"return":null,"hide":false,"private":false,"name":"load","summary":"This is a proxy for the underlying BasicForm's {@link Ext.form.BasicForm#load} call.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"startMonitoring","summary":"Starts monitoring of the valid state of this form. Usually this is done by passing the config\r\noption \"monitorValid\"\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"stopMonitoring","summary":"Stops monitoring of the valid state of this form\r\n"}],"events":[{"parameters":[{"type":"Ext.form.FormPanel","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"valid","summary":"true if the form has passed client-side validation"}],"name":"clientvalidation","summary":"If the monitorValid config option is true, this event fires repetitively to notify of valid state."}]},{"name":"Hidden","fullName":"Ext.form.Hidden","summary":"A basic hidden field for storing hidden values in forms that need to be passed in the form submit.\r\n","package":"form","definedIn":"widgets\\form\\Hidden.js","xtype":"hidden","extends":"Ext.form.Field","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Hidden field."},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"HtmlEditor","fullName":"Ext.form.HtmlEditor","summary":"Provides a lightweight HTML Editor component. Some toolbar features are not supported by Safari and will be\r\nautomatically hidden when needed.  These are noted in the config options where appropriate.\r\n<br><br>The editor's toolbar buttons have tooltips defined in the {@link #buttonTips} property, but they are not\r\nenabled by default unless the global {@link Ext.QuickTips} singleton is {@link Ext.QuickTips#init initialized}.\r\n<br><br><b>Note: The focus/blur and validation marking functionality inherited from Ext.form.Field is NOT\r\nsupported by this editor.</b>\r\n<br><br>An Editor is a sensitive component that can not be used in all spots standard fields can be used. Putting an Editor within\r\nany element that has display set to 'none' can cause problems in Safari and Firefox due to their default iframe reloading bugs.\r\n<br><br>Example usage:\r\n<pre><code>\r\n// Simple example rendered with default options:\r\nExt.QuickTips.init();  // enable tooltips\r\nnew Ext.form.HtmlEditor({\r\n    renderTo: Ext.getBody(),\r\n    width: 800,\r\n    height: 300\r\n});\r\n\r\n// Passed via xtype into a container and with custom options:\r\nExt.QuickTips.init();  // enable tooltips\r\nnew Ext.Panel({\r\n    title: 'HTML Editor',\r\n    renderTo: Ext.getBody(),\r\n    width: 600,\r\n    height: 300,\r\n    frame: true,\r\n    layout: 'fit',\r\n    items: {\r\n        xtype: 'htmleditor',\r\n        enableColors: false,\r\n        enableAlignments: false\r\n    }\r\n});\r\n</code></pre>\r\n","package":"form","definedIn":"widgets\\form\\HtmlEditor.js","xtype":"htmleditor","extends":"Ext.form.Field","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new HtmlEditor."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"enableFormat","summary":""},{"type":"Boolean","optional":false,"name":"enableFontSize","summary":""},{"type":"Boolean","optional":false,"name":"enableColors","summary":""},{"type":"Boolean","optional":false,"name":"enableAlignments","summary":""},{"type":"Boolean","optional":false,"name":"enableLists","summary":""},{"type":"Boolean","optional":false,"name":"enableSourceEdit","summary":""},{"type":"Boolean","optional":false,"name":"enableLinks","summary":""},{"type":"Boolean","optional":false,"name":"enableFont","summary":""},{"type":"String","optional":false,"name":"createLinkText","summary":""},{"type":"String","optional":false,"name":"defaultLinkValue","summary":""},{"type":"Array","optional":false,"name":"fontFamilies","summary":""},{"type":"String","optional":false,"name":"defaultValue","summary":""},{"type":"String","optional":false,"name":"fieldClass","summary":""},{"type":"String","optional":false,"name":"focusClass","summary":""},{"type":"String","optional":false,"name":"autoCreate","summary":""},{"type":"String","optional":false,"name":"inputType","summary":""},{"type":"String","optional":false,"name":"invalidClass","summary":""},{"type":"String","optional":false,"name":"invalidText","summary":""},{"type":"String","optional":false,"name":"msgFx","summary":""},{"type":"String","optional":false,"name":"validateOnBlur","summary":""},{"type":"Boolean","optional":false,"name":"allowDomMove","summary":""},{"type":"String","optional":false,"name":"applyTo","summary":""},{"type":"String","optional":false,"name":"autoHeight","summary":""},{"type":"String","optional":false,"name":"autoWidth","summary":""},{"type":"String","optional":false,"name":"cls","summary":""},{"type":"String","optional":false,"name":"disabled","summary":""},{"type":"String","optional":false,"name":"disabledClass","summary":""},{"type":"String","optional":false,"name":"msgTarget","summary":""},{"type":"String","optional":false,"name":"readOnly","summary":""},{"type":"String","optional":false,"name":"style","summary":""},{"type":"String","optional":false,"name":"validationDelay","summary":""},{"type":"String","optional":false,"name":"validationEvent","summary":""},{"type":"String","optional":false,"name":"tabIndex","summary":""}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"getDocMarkup","summary":"Protected method that will not generally be called directly. It\r\nis called when the editor initializes the iframe with HTML contents. Override this method if you\r\nwant to change the initialization markup of the iframe (e.g. to add stylesheets).\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"sourceEdit","summary":"True for source edit, false for standard"}],"return":null,"hide":false,"private":false,"name":"toggleSourceEdit","summary":"Toggles the editor between standard and source edit mode.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"markInvalid","summary":"Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearInvalid","summary":"Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide\r\n"},{"parameters":[{"type":"String","optional":false,"name":"html","summary":"The HTML to be cleaned"}],"return":{"type":"String","summary":"The cleaned HTML"},"hide":false,"private":false,"name":"cleanHtml","summary":"Protected method that will not generally be called directly. If you need/want\r\ncustom HTML cleanup, this is the method you should override.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"syncValue","summary":"Protected method that will not generally be called directly. Syncs the contents\r\nof the editor iframe with the textarea.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"pushValue","summary":"Protected method that will not generally be called directly. Pushes the value of the textarea\r\ninto the iframe editor.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"updateToolbar","summary":"Protected method that will not generally be called directly. It triggers\r\na toolbar update by reading the markup state of the current selection in the editor.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"cmd","summary":"The Midas command"},{"type":"String/Boolean","optional":true,"name":"value","summary":"The value to pass to the command (defaults to null)"}],"return":null,"hide":false,"private":false,"name":"relayCmd","summary":"Executes a Midas editor command on the editor document and performs necessary focus and\r\ntoolbar updates. <b>This should only be called after the editor is initialized.</b>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"cmd","summary":"The Midas command"},{"type":"String/Boolean","optional":true,"name":"value","summary":"The value to pass to the command (defaults to null)"}],"return":null,"hide":false,"private":false,"name":"execCmd","summary":"Executes a Midas editor command directly on the editor document.\r\nFor visual commands, you should use {@link #relayCmd} instead.\r\n<b>This should only be called after the editor is initialized.</b>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":""}],"return":null,"hide":false,"private":false,"name":"insertAtCursor","summary":"Inserts the passed text at the current cursor position. Note: the editor must be initialized and activated\r\nto insert text.\r\n"},{"parameters":[],"return":{"type":"Ext.Toolbar","summary":""},"hide":false,"private":false,"name":"getToolbar","summary":"Returns the editor's toolbar. <b>This is only available after the editor has been rendered.</b>\r\n"}],"events":[{"parameters":[{"type":"HtmlEditor","optional":false,"name":"el","summary":"this"}],"name":"initialize","summary":"Fires when the editor is fully initialized (including the iframe)."},{"parameters":[{"type":"HtmlEditor","optional":false,"name":"el","summary":"this"}],"name":"activate","summary":"Fires when the editor is first receives the focus. Any insertion must wait until after this event."},{"parameters":[{"type":"HtmlEditor","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"html","summary":""}],"name":"beforesync","summary":"Fires before the textarea is updated with content from the editor iframe. Return false to cancel the sync."},{"parameters":[{"type":"HtmlEditor","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"html","summary":""}],"name":"beforepush","summary":"Fires before the iframe editor is updated with content from the textarea. Return false to cancel the push."},{"parameters":[{"type":"HtmlEditor","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"html","summary":""}],"name":"sync","summary":"Fires when the textarea is updated with content from the editor iframe."},{"parameters":[{"type":"HtmlEditor","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"html","summary":""}],"name":"push","summary":"Fires when the iframe editor is updated with content from the textarea."},{"parameters":[{"type":"HtmlEditor","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"sourceEdit","summary":"True if source edit, false if standard editing."}],"name":"editmodechange","summary":"Fires when the editor switches edit modes."},{"parameters":[],"name":"blur","summary":"@hide"},{"parameters":[],"name":"change","summary":"@hide"},{"parameters":[],"name":"focus","summary":"@hide"},{"parameters":[],"name":"specialkey","summary":"@hide"}]},{"name":"Label","fullName":"Ext.form.Label","summary":"Basic Label field.\r\n","package":"form","definedIn":"widgets\\form\\Label.js","xtype":"label","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Ext.Element/String/Object","optional":false,"name":"config","summary":"The configuration options.  If an element is passed, it is set as the internal element and its id used as the component id.  If a string is passed, it is assumed to be the id of an existing element and is used as the component id.  Otherwise, it is assumed to be a standard config object and is applied to the component."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Label."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"forId","summary":"attribute. If not specified, the attribute will not be added to the label.\r\n"},{"type":"String","optional":false,"name":"html","summary":"Note that if {@link #text} is specified it will take precedence and this value will be ignored.\r\n"},{"type":"String","optional":false,"name":"text","summary":"tags within the label's innerHTML, use the {@link #html} config instead.\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The new label text"},{"type":"Boolean","optional":true,"name":"encode","summary":"False to skip HTML-encoding the text when rendering it\r\nto the label (defaults to true which encodes the value). This might be useful if you want to include\r\ntags in the label's innerHTML rather than rendering them as string literals per the default logic."}],"return":{"type":"Label","summary":"this"},"hide":false,"private":false,"name":"setText","summary":"Updates the label's innerHTML with the specified string.\r\n"}],"events":[]},{"name":"NumberField","fullName":"Ext.form.NumberField","summary":"Numeric text field that provides automatic keystroke filtering and numeric validation.\r\n","package":"form","definedIn":"widgets\\form\\NumberField.js","xtype":"numberfield","extends":"Ext.form.TextField","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new NumberField."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"allowDecimals","summary":""},{"type":"Boolean","optional":false,"name":"allowNegative","summary":""},{"type":"String","optional":false,"name":"baseChars","summary":""},{"type":"Number","optional":false,"name":"decimalPrecision","summary":""},{"type":"String","optional":false,"name":"decimalSeparator","summary":""},{"type":"String","optional":false,"name":"fieldClass","summary":""},{"type":"RegExp","optional":false,"name":"maskRe","summary":""},{"type":"String","optional":false,"name":"maxText","summary":""},{"type":"Number","optional":false,"name":"maxValue","summary":""},{"type":"String","optional":false,"name":"minText","summary":""},{"type":"Number","optional":false,"name":"minValue","summary":""},{"type":"String","optional":false,"name":"nanText","summary":"if a valid character like '.' or '-' is left in the field with no number (defaults to \"{value} is not a valid number\")\r\n"},{"type":"RegExp","optional":false,"name":"stripCharsRe","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"Radio","fullName":"Ext.form.Radio","summary":"Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.\r\nRadio grouping is handled automatically by the browser if you give each radio in a group the same name.\r\n","package":"form","definedIn":"widgets\\form\\Radio.js","xtype":"radio","extends":"Ext.form.Checkbox","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Radio."},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearInvalid","summary":"Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide\r\n"},{"parameters":[],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"getGroupValue","summary":"If this radio is part of a group, it will return the selected value\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"markInvalid","summary":"Overridden and disabled. The editor element does not support standard valid/invalid marking. @hide\r\n"},{"parameters":[{"type":"String/Boolean} Chec","optional":false,"name":"valueed","summary":"value, or the value of the sibling radio button to check."}],"return":{"type":"Ext.form.Field","summary":"this"},"hide":false,"private":false,"name":"setValue","summary":"Sets either the checked/unchecked status of this Radio, or, if a string value\r\nis passed, checks a sibling Radio of the same name whose value is the value specified.\r\n"}],"events":[]},{"name":"RadioGroup","fullName":"Ext.form.RadioGroup","summary":"A grouping container for {@link Ext.form.Radio} controls.\r\n","package":"form","definedIn":"widgets\\form\\RadioGroup.js","xtype":"radiogroup","extends":"Ext.form.CheckboxGroup","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new RadioGroup."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"allowBlank","summary":"If allowBlank = false and no items are selected at validation time, {@link @blankText} will\r\nbe used as the error text.\r\n"},{"type":"String","optional":false,"name":"blankText","summary":"(defaults to 'You must select one item in this group')\r\n"}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Ext.form.Radio","summary":"The selected radio."},"hide":false,"private":false,"name":"getValue","summary":"Gets the selected {@link Ext.form.Radio} in the group, if it exists.\r\n"},{"parameters":[{"type":"String/Ext.form.Radio","optional":false,"name":"id","summary":"The radio to check."},{"type":"Boolean","optional":false,"name":"value","summary":"The value to set the radio."}],"return":{"type":"Ext.form.RadioGroup","summary":"this"},"hide":false,"private":false,"name":"setValue","summary":"Sets the checked radio in the group.\r\n"}],"events":[{"parameters":[{"type":"Ext.form.RadioGroup","optional":false,"name":"el","summary":"this"},{"type":"Ext.form.Radio","optional":false,"name":"checked","summary":"The checked radio"}],"name":"change","summary":"Fires when the state of a child radio changes."}]},{"name":"TextArea","fullName":"Ext.form.TextArea","summary":"Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds\r\nsupport for auto-sizing.\r\n","package":"form","definedIn":"widgets\\form\\TextArea.js","xtype":"textarea","extends":"Ext.form.TextField","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new TextArea."},"subclasses":"","configOptions":[{"type":"String/Object","optional":false,"name":"autoCreate","summary":"element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.\r\nSee <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>\r\n<pre><code>{tag: \"textarea\", style: \"width:100px;height:60px;\", autocomplete: \"off\"}</code></pre>\r\n"},{"type":"Number","optional":false,"name":"growMax","summary":"(defaults to <tt>1000</tt>)\r\n"},{"type":"Number","optional":false,"name":"growMin","summary":"(defaults to <tt>60</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"preventScrollbars","summary":"in the field. This option is only relevant when {@link #grow} is <tt>true</tt>. Equivalent to setting overflow: hidden, defaults to\r\n<tt>false</tt>.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"autoSize","summary":"Automatically grows the field to accomodate the height of the text up to the maximum field height allowed.\r\nThis only takes effect if grow = true, and fires the {@link #autosize} event if the height changes.\r\n"}],"events":[]},{"name":"TextField","fullName":"Ext.form.TextField","summary":"<p>Basic text field.  Can be used as a direct replacement for traditional text inputs,\r\nor as the base class for more sophisticated input controls (like {@link Ext.form.TextArea}\r\nand {@link Ext.form.ComboBox}).</p>\r\n<p><b><u>Validation</u></b></p>\r\n<p>The validation procedure is described in the documentation for {@link #validateValue}.</p>\r\n<p><b><u>Alter Validation Behavior</u></b></p>\r\n<p>Validation behavior for each field can be configured:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li><code>{@link Ext.form.TextField#invalidText invalidText}</code> : the default validation message to\r\nshow if any validation step above does not provide a message when invalid</li>\r\n<li><code>{@link Ext.form.TextField#maskRe maskRe}</code> : filter out keystrokes before any validation occurs</li>\r\n<li><code>{@link Ext.form.TextField#stripCharsRe stripCharsRe}</code> : filter characters after being typed in,\r\nbut before being validated</li>\r\n<li><code>{@link Ext.form.Field#invalidClass invalidClass}</code> : alternate style when invalid</li>\r\n<li><code>{@link Ext.form.Field#validateOnBlur validateOnBlur}</code>,\r\n<code>{@link Ext.form.Field#validationDelay validationDelay}</code>, and\r\n<code>{@link Ext.form.Field#validationEvent validationEvent}</code> : modify how/when validation is triggered</li>\r\n</ul></div>\r\n\r\n","package":"form","definedIn":"widgets\\form\\TextField.js","xtype":"textfield","extends":"Ext.form.Field","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options "}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.form.NumberField,Ext.form.TextArea,Ext.form.TriggerField","configOptions":[{"type":"Boolean","optional":false,"name":"allowBlank","summary":"<tt>true</tt>)\r\n"},{"type":"String","optional":false,"name":"blankText","summary":"fails (defaults to <tt>'This field is required'</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"disableKeyFilter","summary":"to <tt>false</tt>)\r\n"},{"type":"String","optional":false,"name":"emptyClass","summary":"(defaults to <tt>'x-form-empty-field'</tt>).  This class is automatically added and removed as needed\r\ndepending on the current field value.\r\n"},{"type":"String","optional":false,"name":"emptyText","summary":"<b>Note</b>: that this value will be submitted to the server if this field is enabled and configured\r\nwith a {@link #name}.\r\n"},{"type":"Boolean","optional":false,"name":"enableKeyEvents","summary":"field (defaults to <tt>false</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"grow","summary":"(defaults to <tt>false</tt>)\r\n"},{"type":"Number","optional":false,"name":"growMax","summary":"to <tt>800</tt>)\r\n"},{"type":"Number","optional":false,"name":"growMin","summary":"to <tt>30</tt>)\r\n"},{"type":"RegExp","optional":false,"name":"maskRe","summary":"not match (defaults to <tt>null</tt>)\r\n"},{"type":"Number","optional":false,"name":"maxLength","summary":"This behavior is intended to provide instant feedback to the user by improving usability to allow pasting\r\nand editing or overtyping and back tracking. To restrict the maximum number of characters that can be\r\nentered into the field use <tt><b>{@link Ext.form.Field#autoCreate autoCreate}</b></tt> to add\r\nany attributes you want to a field, for example:<pre><code>\r\nvar myField = new Ext.form.NumberField({\r\n    id: 'mobile',\r\n    anchor:'90%',\r\n    fieldLabel: 'Mobile',\r\n    maxLength: 16, // for validation\r\n    autoCreate: {tag: 'input', type: 'text', size: '20', autocomplete: 'off', maxlength: '10'}\r\n});\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"maxLengthText","summary":"validation fails (defaults to <tt>'The maximum length for this field is {maxLength}'</tt>)\r\n"},{"type":"Number","optional":false,"name":"minLength","summary":""},{"type":"String","optional":false,"name":"minLengthText","summary":"validation fails (defaults to <tt>'The minimum length for this field is {minLength}'</tt>)\r\n"},{"type":"RegExp","optional":false,"name":"regex","summary":"(defaults to <tt>null</tt>). If the test fails, the field will be marked invalid using\r\n<b><tt>{@link #regexText}</tt></b>.\r\n"},{"type":"String","optional":false,"name":"regexText","summary":"test fails during validation (defaults to <tt>''</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"selectOnFocus","summary":"receives input focus (defaults to <tt>false</tt>)\r\n"},{"type":"RegExp","optional":false,"name":"stripCharsRe","summary":"before validation (defaults to <tt>null</tt>).\r\n"},{"type":"Function","optional":false,"name":"validator","summary":"<p>A custom validation function to be called during field validation ({@link #validateValue})\r\n(defaults to <tt>null</tt>). If specified, this function will be called first, allowing the\r\ndeveloper to override the default validation process.</p>\r\n<br><p>This function will be passed the following Parameters:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li><code>value</code>: <i>Mixed</i>\r\n<div class=\"sub-desc\">The current field value</div></li>\r\n</ul></div>\r\n<br><p>This function is to Return:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li><code>true</code>: <i>Boolean</i>\r\n<div class=\"sub-desc\"><code>true</code> if the value is valid</div></li>\r\n<li><code>msg</code>: <i>String</i>\r\n<div class=\"sub-desc\">An error message if the value is invalid</div></li>\r\n</ul></div>\r\n"},{"type":"String","optional":false,"name":"vtype","summary":""},{"type":"String","optional":false,"name":"vtypeText","summary":"for the <b><code>{@link #vtype}</code></b> currently set for this field (defaults to <tt>''</tt>).  <b>Note</b>:\r\nonly applies if <b><code>{@link #vtype}</code></b> is set, else ignored.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"autoSize","summary":"Automatically grows the field to accomodate the width of the text up to the maximum field width allowed.\r\nThis only takes effect if <tt><b>{@link #grow}</b> = true</tt>, and fires the {@link #autosize} event.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"reset","summary":"Resets the current field value to the originally-loaded value and clears any validation messages.\r\nAlso adds <tt><b>{@link #emptyText}</b></tt> and <tt><b>{@link #emptyClass}</b></tt> if the\r\noriginal value was blank.\r\n"},{"parameters":[{"type":"Number","optional":true,"name":"start","summary":"The index where the selection should start (defaults to 0)"},{"type":"Number","optional":true,"name":"end","summary":"The index where the selection should end (defaults to the text length)"}],"return":null,"hide":false,"private":false,"name":"selectText","summary":"Selects text in this field\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to validate"}],"return":{"type":"Boolean","summary":"True if the value is valid, else false"},"hide":false,"private":false,"name":"validateValue","summary":"<p>Validates a value according to the field's validation rules and marks the field as invalid\r\nif the validation fails. Validation rules are processed in the following order:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n\r\n<li><b>1. Field specific validator</b>\r\n<div class=\"sub-desc\">\r\n<p>A validator offers a way to customize and reuse a validation specification.\r\nIf a field is configured with a <code>{@link #validator}</code>\r\nfunction, it will be passed the current field value.  The <code>{@link #validator}</code>\r\nfunction is expected to return either:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>Boolean <tt>true</tt> if the value is valid (validation continues).</li>\r\n<li>a String to represent the invalid message if invalid (validation halts).</li>\r\n</ul></div>\r\n</div></li>\r\n\r\n<li><b>2. Basic Validation</b>\r\n<div class=\"sub-desc\">\r\n<p>If the <code>{@link #validator}</code> has not halted validation,\r\nbasic validation proceeds as follows:</p>\r\n\r\n<div class=\"mdetail-params\"><ul>\r\n\r\n<li><code>{@link #allowBlank}</code> : (Invalid message =\r\n<code>{@link #emptyText}</code>)<div class=\"sub-desc\">\r\nDepending on the configuration of <code>{@link #allowBlank}</code>, a\r\nblank field will cause validation to halt at this step and return\r\nBoolean true or false accordingly.\r\n</div></li>\r\n\r\n<li><code>{@link #minLength}</code> : (Invalid message =\r\n<code>{@link #minLengthText}</code>)<div class=\"sub-desc\">\r\nIf the passed value does not satisfy the <code>{@link #minLength}</code>\r\nspecified, validation halts.\r\n</div></li>\r\n\r\n<li><code>{@link #maxLength}</code> : (Invalid message =\r\n<code>{@link #maxLengthText}</code>)<div class=\"sub-desc\">\r\nIf the passed value does not satisfy the <code>{@link #maxLength}</code>\r\nspecified, validation halts.\r\n</div></li>\r\n\r\n</ul></div>\r\n</div></li>\r\n\r\n<li><b>3. Preconfigured Validation Types (VTypes)</b>\r\n<div class=\"sub-desc\">\r\n<p>If none of the prior validation steps halts validation, a field\r\nconfigured with a <code>{@link #vtype}</code> will utilize the\r\ncorresponding {@link Ext.form.VTypes VTypes} validation function.\r\nIf invalid, either the field's <code>{@link #vtypeText}</code> or\r\nthe VTypes vtype Text property will be used for the invalid message.\r\nKeystrokes on the field will be filtered according to the VTypes\r\nvtype Mask property.</p>\r\n</div></li>\r\n\r\n<li><b>4. Field specific regex test</b>\r\n<div class=\"sub-desc\">\r\n<p>If none of the prior validation steps halts validation, a field's\r\nconfigured <code>{@link #regex}</code> test will be processed.\r\nThe invalid message for this test is configured with\r\n<code>{@link #regexText}</code>.</p>\r\n</div></li>\r\n\r\n"}],"events":[{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"width","summary":"The new field width"}],"name":"autosize","summary":"Fires when the <tt><b>{@link #autoSize}</b></tt> function is triggered. The field may or may not have actually changed size according to the default logic, but this event provides a hook for the developer to apply additional logic at runtime to resize the field if needed."},{"parameters":[{"type":"Ext.form.TextField","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"keydown","summary":"Keydown input field event. This event only fires if <tt><b>{@link #enableKeyEvents}</b></tt> is set to true."},{"parameters":[{"type":"Ext.form.TextField","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"keypress","summary":"Keypress input field event. This event only fires if <tt><b>{@link #enableKeyEvents}</b></tt> is set to true."},{"parameters":[{"type":"Ext.form.TextField","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"keyup","summary":"Keyup input field event. This event only fires if <tt><b>{@link #enableKeyEvents}</b></tt> is set to true."}]},{"name":"TimeField","fullName":"Ext.form.TimeField","summary":"Provides a time input field with a time dropdown and automatic time validation.  Example usage:\r\n<pre><code>\r\nnew Ext.form.TimeField({\r\n    minValue: '9:00 AM',\r\n    maxValue: '6:00 PM',\r\n    increment: 30\r\n});\r\n</code></pre>\r\n","package":"form","definedIn":"widgets\\form\\TimeField.js","xtype":"timefield","extends":"Ext.form.ComboBox","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new TimeField."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"altFormats","summary":"Multiple date formats separated by \"|\" to try when parsing a user input value and it doesn't match the defined\r\nformat (defaults to 'g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H').\r\n"},{"type":"String","optional":false,"name":"format","summary":"The default time format string which can be overriden for localization support.  The format must be\r\nvalid according to {@link Date#parseDate} (defaults to 'g:i A', e.g., '3:15 PM').  For 24-hour time\r\nformat try 'H:i' instead.\r\n"},{"type":"Boolean","optional":false,"name":"grow","summary":""},{"type":"Number","optional":false,"name":"growMax","summary":""},{"type":"Number","optional":false,"name":"growMin","summary":""},{"type":"Number","optional":false,"name":"increment","summary":"The number of minutes between each time value in the list (defaults to 15).\r\n"},{"type":"String","optional":false,"name":"invalidText","summary":"The error text to display when the time in the field is invalid (defaults to\r\n'{value} is not a valid time').\r\n"},{"type":"String","optional":false,"name":"maxText","summary":"The error text to display when the time is after maxValue (defaults to\r\n'The time in this field must be equal to or before {0}').\r\n"},{"type":"Date/String","optional":false,"name":"maxValue","summary":"The maximum allowed time. Can be either a Javascript date object with a valid time value or a string\r\ntime in a valid format -- see {@link #format} and {@link #altFormats} (defaults to null).\r\n"},{"type":"String","optional":false,"name":"minText","summary":"The error text to display when the date in the cell is before minValue (defaults to\r\n'The time in this field must be equal to or after {0}').\r\n"},{"type":"Date/String","optional":false,"name":"minValue","summary":"The minimum allowed time. Can be either a Javascript date object with a valid time value or a string\r\ntime in a valid format -- see {@link #format} and {@link #altFormats} (defaults to null).\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"autoSize","summary":""}],"events":[]},{"name":"TriggerField","fullName":"Ext.form.TriggerField","summary":"Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).\r\nThe trigger has no default action, so you must assign a function to implement the trigger click handler by\r\noverriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox\r\nfor which you can provide a custom implementation.  For example:\r\n<pre><code>\r\nvar trigger = new Ext.form.TriggerField();\r\nettrigger.onTriggerClick = myTriggerFn;\r\nettrigger.applyToMarkup('my-field');\r\n</code></pre>\r\n\r\nHowever, in general you will most likely want to use TriggerField as the base class for a reusable component.\r\n{@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this.\r\n\r\n","package":"form","definedIn":"widgets\\form\\TriggerField.js","xtype":"trigger","extends":"Ext.form.TextField","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options (valid {@Ext.form.TextField} config options will also be applied to the base TextField)"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new TriggerField."},"subclasses":"Ext.form.ComboBox,Ext.form.DateField,Ext.form.TwinTriggerField","configOptions":[{"type":"String/Object","optional":false,"name":"autoCreate","summary":"element spec. Used to create the {@link Ext.Component#getEl Element} which will encapsulate this Component.\r\nSee <tt>{@link Ext.Component#autoEl autoEl}</tt> for details.  Defaults to:</p>\r\n<pre><code>{tag: \"input\", type: \"text\", size: \"16\", autocomplete: \"off\"}</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"editable","summary":"the field will only respond to a click on the trigger to set the value. (defaults to <tt>true</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"grow","summary":""},{"type":"Number","optional":false,"name":"growMax","summary":""},{"type":"Number","optional":false,"name":"growMin","summary":""},{"type":"Boolean","optional":false,"name":"hideTrigger","summary":"text field (defaults to <tt>false</tt>)\r\n"},{"type":"String","optional":false,"name":"triggerClass","summary":"An additional CSS class used to style the trigger button.  The trigger will always get the\r\nclass <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.\r\n"},{"type":"Mixed","optional":false,"name":"triggerConfig","summary":"<p>A {@link Ext.DomHelper DomHelper} config object specifying the structure of the\r\nettrigger element for this Field. (Optional).</p>\r\n<p>Specify this when you need a customized element to act as the trigger button for a TriggerField.</p>\r\n<p>Note that when using this option, it is the developer's responsibility to ensure correct sizing, positioning\r\nand appearance of the trigger.  Defaults to:</p>\r\n<pre><code>{tag: \"img\", src: Ext.BLANK_IMAGE_URL, cls: \"x-form-trigger \" + this.triggerClass}</code></pre>\r\n"},{"type":"String","optional":false,"name":"wrapFocusClass","summary":"<tt>x-trigger-wrap-focus</tt>.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"autoSize","summary":""},{"parameters":[{"type":"EventObject","optional":false,"name":"e","summary":""}],"return":null,"hide":false,"private":false,"name":"onTriggerClick","summary":"The function that should handle the trigger's click event.  This method does nothing by default\r\nuntil overridden by an implementing function.  See Ext.form.ComboBox and Ext.form.DateField for\r\nsample implementations.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"value","summary":"True to allow the user to directly edit the field text"}],"return":null,"hide":false,"private":false,"name":"setEditable","summary":"Allow or prevent the user from directly editing the field text.  If false is passed,\r\nthe user will only be able to modify the field using the trigger.  This method\r\nis the runtime equivalent of setting the 'editable' config option at config time.\r\n"}],"events":[]},{"name":"TwinTriggerField","fullName":"Ext.form.TwinTriggerField","summary":"TwinTriggerField is not a public partial class to be used directly.  It is meant as an abstract base class\r\nto be extended by an implementing class.  For an example of implementing this class, see the custom\r\nSearchField implementation here:\r\n<a href=\"http://extjs.com/deploy/ext/examples/form/custom.html\">http://extjs.com/deploy/ext/examples/form/custom.html</a>\r\n","package":"form","definedIn":"widgets\\form\\TriggerField.js","xtype":null,"extends":"Ext.form.TriggerField","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"trigger1Class","summary":"An additional CSS class used to style the trigger button.  The trigger will always get the\r\nclass <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.\r\n"},{"type":"String","optional":false,"name":"trigger2Class","summary":"An additional CSS class used to style the trigger button.  The trigger will always get the\r\nclass <tt>'x-form-trigger'</tt> by default and <tt>triggerClass</tt> will be <b>appended</b> if specified.\r\n"},{"type":"Mixed","optional":false,"name":"triggerConfig","summary":"<p>A {@link Ext.DomHelper DomHelper} config object specifying the structure of the trigger elements\r\nfor this Field. (Optional).</p>\r\n<p>Specify this when you need a customized element to contain the two trigger elements for this Field.\r\nEach trigger element must be marked by the CSS class <tt>x-form-trigger</tt> (also see\r\n<tt>{@link #trigger1Class}</tt> and <tt>{@link #trigger2Class}</tt>).</p>\r\n<p>Note that when using this option, it is the developer's responsibility to ensure correct sizing,\r\npositioning and appearance of the triggers.</p>\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"EventObject","optional":false,"name":"e","summary":""}],"return":null,"hide":false,"private":false,"name":"onTrigger1Click","summary":"The function that should handle the trigger's click event.  This method does nothing by default\r\nuntil overridden by an implementing function. See {@link Ext.form.TriggerField#onTriggerClick}\r\nfor additional information.\r\n"},{"parameters":[{"type":"EventObject","optional":false,"name":"e","summary":""}],"return":null,"hide":false,"private":false,"name":"onTrigger2Click","summary":"The function that should handle the trigger's click event.  This method does nothing by default\r\nuntil overridden by an implementing function. See {@link Ext.form.TriggerField#onTriggerClick}\r\nfor additional information.\r\n"}],"events":[]},{"name":"VTypes","fullName":"Ext.form.VTypes","summary":"<p>This is a singleton object which contains a set of commonly used field validation functions.\r\nThe validations provided are basic and intended to be easily customizable and extended.</p>\r\n<p>To add custom VTypes specify the <code>{@link Ext.form.TextField#vtype vtype}</code> validation\r\ntest function, and optionally specify any corresponding error text to display and any keystroke\r\nfiltering mask to apply. For example:</p>\r\n<pre><code>\r\n// custom Vtype for vtype:'time'\r\nvar timeTest = /^([1-9]|1[0-9]):([0-5][0-9])(\\s[a|p]m)$/i;\r\nExt.apply(Ext.form.VTypes, {\r\n    //  vtype validation function\r\n    time: function (val, field) {\r\n        return timeTest.test(val);\r\n    },\r\n    // vtype Text property: The error text to display when the validation function returns false\r\n    timeText: 'Not a valid time.  Must be in the format \"12:34 PM\".',\r\n    // vtype Mask property: The keystroke filter mask\r\n    timeMask: /[\\d\\s:amp]/i\r\n});\r\n</code></pre>\r\nAnother example:\r\n<pre><code>\r\n// custom Vtype for vtype:'IPAddress'\r\nExt.apply(Ext.form.VTypes, {\r\n    IPAddress:  function (v) {\r\n        return /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(v);\r\n    },\r\n    IPAddressText: 'Must be a numeric IP address',\r\n    IPAddressMask: /[\\d\\.]/i\r\n});\r\n</code></pre>\r\n","package":"form","definedIn":"widgets\\form\\VTypes.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The value"}],"return":{"type":"Boolean","summary":"true if the RegExp test passed, and false if not."},"hide":false,"private":false,"name":"'alpha'","summary":"The function used to validate alpha values\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The value"}],"return":{"type":"Boolean","summary":"true if the RegExp test passed, and false if not."},"hide":false,"private":false,"name":"'alphanum'","summary":"The function used to validate alphanumeric values\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The email address"}],"return":{"type":"Boolean","summary":"true if the RegExp test passed, and false if not."},"hide":false,"private":false,"name":"'email'","summary":"The function used to validate email addresses.  Note that this is a very basic validation -- complete\r\nvalidation per the email RFC specifications is very complex and beyond the scope of this class, although\r\nthis function can be overridden if a more comprehensive validation scheme is desired.  See the validation\r\nsection of the <a href=\"http://en.wikipedia.org/wiki/E-mail_address\">Wikipedia article on email addresses</a>\r\nfor additional information.  This implementation is intended to validate the following emails:<tt>\r\n'barney@example.de', 'barney.rubble@example.com', 'barney-rubble@example.coop', 'barney+rubble@example.com'\r\n</tt>.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The URL"}],"return":{"type":"Boolean","summary":"true if the RegExp test passed, and false if not."},"hide":false,"private":false,"name":"'url'","summary":"The function used to validate URLs\r\n"}],"events":[]}]},{"name":"grid","fullName":"grid","parentFullName":"Ext","packages":[],"classes":[{"name":"AbstractSelectionModel","fullName":"Ext.grid.AbstractSelectionModel","summary":"Abstract base class for grid SelectionModels.  It provides the interface that should be\r\nimplemented by descendant classes.  This class should not be directly instantiated.\r\n","package":"grid","definedIn":"widgets\\grid\\AbstractSelectionModel.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.grid.CellSelectionModel,Ext.grid.RowSelectionModel","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"grid","summary":"The GridPanel for which this SelectionModel is handling selection. Read-only.\r\n"}],"methods":[{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isLocked","summary":"Returns true if the selections are locked.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"lock","summary":"    init : function (grid) {\r\n        this.grid = grid;\r\n        this.initEvents();\r\n    },\r\n\r\n    /**\r\nLocks the selections.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"unlock","summary":"Unlocks the selections.\r\n"}],"events":[]},{"name":"BooleanColumn","fullName":"Ext.grid.BooleanColumn","summary":"<p>A Column definition class which renders boolean data fields.  See the {@link Ext.grid.Column#xtype xtype}\r\nconfig option of {@link Ext.grid.Column} for more details.</p>\r\n","package":"grid","definedIn":"widgets\\grid\\Column.js","xtype":null,"extends":"Ext.grid.Column","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"falseText","summary":"The string returned by the renderer when the column value is falsey (but not undefined) (defaults to\r\n<tt>'false'</tt>).\r\n"},{"type":"String","optional":false,"name":"trueText","summary":"The string returned by the renderer when the column value is not falsey (defaults to <tt>'true'</tt>).\r\n"},{"type":"String","optional":false,"name":"undefinedText","summary":"The string returned by the renderer when the column value is undefined (defaults to <tt>'&#160;'</tt>).\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"CellSelectionModel","fullName":"Ext.grid.CellSelectionModel","summary":"This class provides the basic implementation for <i>single</i> <b>cell</b> selection in a grid.\r\nThe object stored as the selection contains the following properties:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>cell</b> : see {@link #getSelectedCell}\r\n<li><b>record</b> : Ext.data.record The {@link Ext.data.Record Record}\r\nwhich provides the data for the row containing the selection</li>\r\n</ul></div>\r\n","package":"grid","definedIn":"widgets\\grid\\CellSelectionModel.js","xtype":null,"extends":"Ext.grid.AbstractSelectionModel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The object containing the configuration of this model."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Boolean","optional":false,"name":"preventNotify","summary":"<tt>true</tt> to prevent the gridview from\r\nbeing notified about the change."}],"return":null,"hide":false,"private":false,"name":"clearSelections","summary":"If anything is selected, clears all selections and fires the selectionchange event.\r\n"},{"parameters":[],"return":{"type":"Array","summary":"An array containing the row and column indexes of the selected cell, or null if none selected."},"hide":false,"private":false,"name":"getSelectedCell","summary":"    initEvents : function () {\r\n        this.grid.on(\"cellmousedown\", this.handleMouseDown, this);\r\n        this.grid.getGridEl().on(Ext.EventManager.useKeydown ? \"keydown\" : \"keypress\", this.handleKeyDown, this);\r\n        var view = this.grid.view;\r\n        view.on(\"refresh\", this.onViewChange, this);\r\n        view.on(\"rowupdated\", this.onRowUpdated, this);\r\n        view.on(\"beforerowremoved\", this.clearSelections, this);\r\n        view.on(\"beforerowsinserted\", this.clearSelections, this);\r\n        if (this.grid.isEditor) {\r\n            this.grid.on(\"beforeedit\", this.beforeEdit,  this);\r\n        }\r\n    },\r\n\r\n\t//private\r\n    beforeEdit : function (e) {\r\n        this.select(e.row, e.column, false, true, e.record);\r\n    },\r\n\r\n\t//private\r\n    onRowUpdated : function (v, index, r) {\r\n        if (this.selection && this.selection.record == r) {\r\n            v.onCellSelect(index, this.selection.cell[1]);\r\n        }\r\n    },\r\n\r\n\t//private\r\n    onViewChange : function () {\r\n        this.clearSelections(true);\r\n    },\r\n\r\n\t/**\r\nReturns an array containing the row and column indexes of the currently selected cell\r\n(e.g., [0, 0]), or null if none selected. The array has elements:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>rowIndex</b> : Number<p class=\"sub-desc\">The index of the selected row</p></li>\r\n<li><b>cellIndex</b> : Number<p class=\"sub-desc\">The index of the selected cell.\r\nDue to possible column reordering, the cellIndex should <b>not</b> be used as an\r\nindex into the Record's data. Instead, use the cellIndex to determine the <i>name</i>\r\nof the selected cell and use the field name to retrieve the data value from the record:<pre><code>\r\n// get name\r\nvar fieldName = grid.getColumnModel().getDataIndex(cellIndex);\r\n// get data value based on name\r\nvar data = record.get(fieldName);\r\n</code></pre></p></li>\r\n</ul></div>\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasSelection","summary":"Returns <tt>true</tt> if there is a selection.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"rowIndex","summary":"The index of the row to select"},{"type":"Number","optional":false,"name":"colIndex","summary":"The index of the column to select"},{"type":"Boolean","optional":true,"name":"preventViewNotify","summary":"Specify <tt>true</tt> to\r\nprevent notifying the view (disables updating the selected appearance)"},{"type":"Boolean","optional":true,"name":"preventFocus","summary":"Whether to prevent the cell at\r\nthe specified rowIndex / colIndex from being focused."},{"type":"Ext.data.Record","optional":true,"name":"r","summary":"The record to select"}],"return":null,"hide":false,"private":false,"name":"select","summary":"    handleMouseDown : function (g, row, cell, e) {\r\n        if (e.button !== 0 || this.isLocked()) {\r\n            return;\r\n        }\r\n        this.select(row, cell);\r\n    },\r\n\r\n    /**\r\nSelects a cell.  Before selecting a cell, fires the\r\n{@link #beforecellselect} event.  If this check is satisfied the cell\r\nwill be selected and followed up by  firing the {@link #cellselect} and\r\n{@link #selectionchange} events.\r\n"}],"events":[{"parameters":[{"type":"SelectionModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":"The selected row index"},{"type":"Number","optional":false,"name":"colIndex","summary":"The selected cell index"}],"name":"beforecellselect","summary":"Fires before a cell is selected, return false to cancel the selection."},{"parameters":[{"type":"SelectionModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":"The selected row index"},{"type":"Number","optional":false,"name":"colIndex","summary":"The selected cell index"}],"name":"cellselect","summary":"Fires when a cell is selected."},{"parameters":[{"type":"SelectionModel","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"selection","summary":"null for no selection or an object with two properties"}],"name":"selectionchange","summary":"Fires when the active selection changes. <div class=\"mdetail-params\"><ul> <li><b>cell</b> : see {@link #getSelectedCell} <li><b>record</b> : Ext.data.record<p class=\"sub-desc\">The {@link Ext.data.Record Record} which provides the data for the row containing the selection</p></li> </ul></div>."}]},{"name":"CheckboxSelectionModel","fullName":"Ext.grid.CheckboxSelectionModel","summary":"A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows.\r\n","package":"grid","definedIn":"widgets\\grid\\CheckboxSelectionModel.js","xtype":null,"extends":"Ext.grid.RowSelectionModel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"checkOnly","summary":"checkbox column (defaults to <tt>false</tt>).\r\n"},{"type":"String","optional":false,"name":"header","summary":"checkbox column.  Defaults to:<pre><code>\r\n'&lt;div class=\"x-grid3-hd-checker\">&#38;#160;&lt;/div>'</tt>\r\n</code></pre>\r\nThe default CSS class of <tt>'x-grid3-hd-checker'</tt> displays a checkbox in the header\r\nand provides support for automatic check all/none behavior on header click. This string\r\ncan be replaced by any valid HTML fragment, including a simple text string (e.g.,\r\n<tt>'Select Rows'</tt>), but the automatic check all/none behavior will only work if the\r\n<tt>'x-grid3-hd-checker'</tt> class is supplied.\r\n"},{"type":"Boolean","optional":false,"name":"sortable","summary":"<tt>false</tt>).\r\n"},{"type":"Number","optional":false,"name":"width","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"Column","fullName":"Ext.grid.Column","summary":"<p>This class encapsulates column configuration data to be used in the initialization of a\r\n{@link Ext.grid.ColumnModel ColumnModel}.</p>\r\n<p>While subclasses are provided to render data in different ways, this class renders a passed\r\ndata field unchanged and is usually used for textual columns.</p>\r\n","package":"grid","definedIn":"widgets\\grid\\Column.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.grid.BooleanColumn,Ext.grid.DateColumn,Ext.grid.NumberColumn,Ext.grid.TemplateColumn","configOptions":[{"type":"String","optional":false,"name":"align","summary":""},{"type":"String","optional":false,"name":"css","summary":"(excluding headers). Defaults to undefined.\r\n"},{"type":"String","optional":false,"name":"dataIndex","summary":"grid's {@link Ext.data.Store}'s {@link Ext.data.Record} definition from\r\nwhich to draw the column's value.</p>\r\n"},{"type":"Boolean","optional":false,"name":"editable","summary":"<tt>{@link #editor}</tt>.  Set to <tt>false</tt> to initially disable editing on this column.\r\nThe initial configuration may be dynamically altered using\r\n{@link Ext.grid.ColumnModel}.{@link Ext.grid.ColumnModel#setEditable setEditable()}.\r\n"},{"type":"Ext.form.Field","optional":false,"name":"editor","summary":"if editing is supported by the grid. See <tt>{@link #editable}</tt> also.\r\n"},{"type":"String","optional":false,"name":"emptyGroupText","summary":"may be used to specify the text to display when there is an empty group value. Defaults to the\r\n{@link Ext.grid.GroupingView}.{@link Ext.grid.GroupingView#emptyGroupText emptyGroupText}.\r\n"},{"type":"Boolean","optional":false,"name":"fixed","summary":""},{"type":"Boolean","optional":false,"name":"groupable","summary":"may be used to disable the header menu item to group by the column selected. Defaults to <tt>true</tt>,\r\nwhich enables the header menu group option.  Set to <tt>false</tt> to disable (but still show) the\r\ngroup option in the header menu for the column. See also <code>{@link #groupName}</code>.\r\n"},{"type":"String","optional":false,"name":"groupName","summary":"may be used to specify the text with which to prefix the group field value in the group header line.\r\nSee also {@link #groupRenderer} and\r\n{@link Ext.grid.GroupingView}.{@link Ext.grid.GroupingView#showGroupName showGroupName}.\r\n"},{"type":"Function","optional":false,"name":"groupRenderer","summary":"may be used to specify the function used to format the grouping field value for display in the group\r\n{@link #groupName header}.  If a <tt><b>groupRenderer</b></tt> is not specified, the configured\r\n<tt><b>{@link #renderer}</b></tt> will be called; if a <tt><b>{@link #renderer}</b></tt> is also not specified\r\nthe new value of the group field will be used.</p>\r\n<p>The called function (either the <tt><b>groupRenderer</b></tt> or <tt><b>{@link #renderer}</b></tt>) will be\r\npassed the following parameters:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>v</b> : Object<p class=\"sub-desc\">The new value of the group field.</p></li>\r\n<li><b>unused</b> : undefined<p class=\"sub-desc\">Unused parameter.</p></li>\r\n<li><b>r</b> : Ext.data.Record<p class=\"sub-desc\">The Record providing the data\r\nfor the row which caused group change.</p></li>\r\n<li><b>rowIndex</b> : Number<p class=\"sub-desc\">The row index of the Record which caused group change.</p></li>\r\n<li><b>colIndex</b> : Number<p class=\"sub-desc\">The column index of the group field.</p></li>\r\n<li><b>ds</b> : Ext.data.Store<p class=\"sub-desc\">The Store which is providing the data Model.</p></li>\r\n</ul></div></p>\r\n<p>The function should return a string value.</p>\r\n"},{"type":"String","optional":false,"name":"header","summary":"(html tags are accepted) to display in the Grid view.  <b>Note</b>: to\r\nhave a clickable header with no text displayed use <tt>'&#160;'</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"hidden","summary":"Optional. <tt>true</tt> to initially hide this column. Defaults to <tt>false</tt>.\r\nA hidden column {@link Ext.grid.GridPanel#enableColumnHide may be shown via the header row menu}.\r\nIf a column is never to be shown, simply do not include this column in the Column Model at all.\r\n"},{"type":"Boolean","optional":false,"name":"hideable","summary":"(defaults to true).  To disallow column hiding globally for all columns in the grid, use\r\n{@link Ext.grid.GridPanel#enableColumnHide} instead.\r\n"},{"type":"String","optional":false,"name":"id","summary":"ordinal position.) The <tt>id</tt> is used to create a CSS <b>class</b> name which is applied to all\r\ntable cells (including headers) in that column (in this context the <tt>id</tt> does not need to be\r\nunique). The class name takes the form of <pre>x-grid3-td-<b>id</b></pre>\r\nHeader cells will also receive this class name, but will also have the class <pre>x-grid3-hd</pre>\r\nSo, to target header cells, use CSS selectors such as:<pre>.x-grid3-hd-row .x-grid3-td-<b>id</b></pre>\r\nThe {@link Ext.grid.GridPanel#autoExpandColumn} grid config option references the column via this\r\nunique identifier.\r\n"},{"type":"Boolean","optional":false,"name":"isColumn","summary":"Used by ColumnModel setConfig method to avoid reprocessing a Column\r\nif <code>isColumn</code> is not set ColumnModel will recreate a new Ext.grid.Column\r\nDefaults to true.\r\n"},{"type":"Boolean","optional":false,"name":"menuDisabled","summary":""},{"type":"Mixed","optional":false,"name":"renderer","summary":"<p>For an alternative to specifying a renderer see <code>{@link #xtype}</code></p>\r\n<p>Optional. A renderer is an 'interceptor' method which can be used transform data (value,\r\nappearance, etc.) before it is rendered). This may be specified in either of three ways:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>A renderer function used to return HTML markup for a cell given the cell's data value.</li>\r\n<li>A string which references a property name of the {@link Ext.util.Format} class which\r\nprovides a renderer function.</li>\r\n<li>An object specifying both the renderer function, and its execution scope (<tt><b>this</b></tt>\r\nreference) e.g.:<pre style=\"margin-left:1.2em\"><code>\r\n{\r\n    fn: this.gridRenderer,\r\n    scope: this\r\n}\r\n</code></pre></li></ul></div>\r\nIf not specified, the default renderer uses the raw data value.</p>\r\n<p>For information about the renderer function (passed parameters, etc.), see\r\n{@link Ext.grid.ColumnModel#setRenderer}. An example of specifying renderer function inline:</p><pre><code>\r\nvar companyColumn = {\r\n   header: 'Company Name',\r\n   dataIndex: 'company',\r\n   renderer: function (value, metaData, record, rowIndex, colIndex, store) {\r\n      // provide the logic depending on business rules\r\n      // name of your own choosing to manipulate the cell depending upon\r\n      // the data in the underlying Record object.\r\n      if (value == 'whatever') {\r\n          //metaData.css : String : A CSS class name to add to the TD element of the cell.\r\n          //metaData.attr : String : An html attribute definition string to apply to\r\n          //                         the data container element within the table\r\n          //                         cell (e.g. 'style=\"color:red;\"').\r\n          metaData.css = 'name-of-css-class-you-will-define';\r\n      }\r\n      return value;\r\n   }\r\n}\r\n</code></pre>\r\nSee also {@link #scope}.\r\n"},{"type":"Boolean","optional":false,"name":"resizable","summary":""},{"type":"Object","optional":false,"name":"scope","summary":"renderer.  Defaults to the Column configuration object.\r\n"},{"type":"Boolean","optional":false,"name":"sortable","summary":"Defaults to the value of the <code>{@link Ext.grid.ColumnModel#defaultSortable}</code> property.\r\nWhether local/remote sorting is used is specified in <code>{@link Ext.data.Store#remoteSort}</code>.\r\n"},{"type":"String","optional":false,"name":"tooltip","summary":"are enabled, this value will be used as the text of the quick tip, otherwise it will be set as the\r\nheader's HTML title attribute. Defaults to ''.\r\n"},{"type":"Number","optional":false,"name":"width","summary":"Optional. The initial width in pixels of the column.\r\nThe width of each column can also be affected if any of the following are configured:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.grid.GridPanel}.<tt>{@link Ext.grid.GridPanel#autoExpandColumn autoExpandColumn}</tt></li>\r\n<li>{@link Ext.grid.GridView}.<tt>{@link Ext.grid.GridView#forceFit forceFit}</tt>\r\n<div class=\"sub-desc\">\r\n<p>By specifying <tt>forceFit:true</tt>, {@link #fixed non-fixed width} columns will be\r\nre-proportioned (based on the relative initial widths) to fill the width of the grid so\r\nthat no horizontal scrollbar is shown.</p>\r\n</div></li>\r\n<li>{@link Ext.grid.GridView}.<tt>{@link Ext.grid.GridView#autoFill autoFill}</tt></li>\r\n<li>{@link Ext.grid.GridPanel}.<tt>{@link Ext.grid.GridPanel#minColumnWidth minColumnWidth}</tt></li>\r\n<br><p><b>Note</b>: when the width of each column is determined, a space on the right side\r\nis reserved for the vertical scrollbar.  The\r\n{@link Ext.grid.GridView}.<tt>{@link Ext.grid.GridView#scrollOffset scrollOffset}</tt>\r\ncan be modified to reduce or eliminate the reserved offset.</p>\r\n"},{"type":"String","optional":false,"name":"xtype","summary":"type which is preconfigured with an appropriate <code>{@link #renderer}</code> to be easily\r\nconfigured into a ColumnModel. The predefined {@link Ext.grid.Column} subclass types are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>gridcolumn</tt></b> : {@link Ext.grid.Column} (<b>Default</b>)<p class=\"sub-desc\"></p></li>\r\n<li><b><tt>booleancolumn</tt></b> : {@link Ext.grid.BooleanColumn}<p class=\"sub-desc\"></p></li>\r\n<li><b><tt>numbercolumn</tt></b> : {@link Ext.grid.NumberColumn}<p class=\"sub-desc\"></p></li>\r\n<li><b><tt>datecolumn</tt></b> : {@link Ext.grid.DateColumn}<p class=\"sub-desc\"></p></li>\r\n<li><b><tt>templatecolumn</tt></b> : {@link Ext.grid.TemplateColumn}<p class=\"sub-desc\"></p></li>\r\n</ul></div>\r\n<p>Configuration properties for the specified <code>xtype</code> may be specified with\r\nthe Column configuration properties, for example:</p>\r\n<pre><code>\r\nvar grid = new Ext.grid.GridPanel({\r\n    ...\r\n    columns: [{\r\n        header: 'Last Updated',\r\n        dataIndex: 'lastChange',\r\n        width: 85,\r\n        sortable: true,\r\n        //renderer: Ext.util.Format.dateRenderer('m/d/Y'),\r\n        xtype: 'datecolumn', // use xtype instead of renderer\r\n        format: 'M/d/Y' // configuration property for {@link Ext.grid.DateColumn}\r\n    }, {\r\n        ...\r\n    }]\r\n});\r\n</code></pre>\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"renderer","summary":"Optional. A function which returns displayable data when passed the following parameters:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>value</b> : Object<p class=\"sub-desc\">The data value for the cell.</p></li>\r\n<li><b>metadata</b> : Object<p class=\"sub-desc\">An object in which you may set the following attributes:<ul>\r\n<li><b>css</b> : String<p class=\"sub-desc\">A CSS class name to add to the cell's TD element.</p></li>\r\n<li><b>attr</b> : String<p class=\"sub-desc\">An HTML attribute definition string to apply to the data container\r\nelement <i>within</i> the table cell (e.g. 'style=\"color:red;\"').</p></li></ul></p></li>\r\n<li><b>record</b> : Ext.data.record<p class=\"sub-desc\">The {@link Ext.data.Record} from which the data was\r\nextracted.</p></li>\r\n<li><b>rowIndex</b> : Number<p class=\"sub-desc\">Row index</p></li>\r\n<li><b>colIndex</b> : Number<p class=\"sub-desc\">Column index</p></li>\r\n<li><b>store</b> : Ext.data.Store<p class=\"sub-desc\">The {@link Ext.data.Store} object from which the Record\r\nwas extracted.</p></li>\r\n</ul></div>\r\n"}],"methods":[{"parameters":[{"type":"Number","optional":false,"name":"rowIndex","summary":"The row index"}],"return":{"type":"Ext.Editor","summary":""},"hide":false,"private":false,"name":"getCellEditor","summary":"Returns the {@link Ext.Editor editor} defined for this column that was created to wrap the {@link Ext.form.Field Field}\r\nused to edit the cell.\r\n"}],"events":[]},{"name":"ColumnModel","fullName":"Ext.grid.ColumnModel","summary":"<p>After the data has been read into the client side cache (<b>{@link Ext.data.Store Store}</b>),\r\nthe ColumnModel is used to configure how and what parts of that data will be displayed in the\r\nvertical slices (columns) of the grid. The Ext.grid.ColumnModel Class is the default implementation\r\nof a ColumnModel used by implentations of {@link Ext.grid.GridPanel GridPanel}.</p>\r\n<p>Data is mapped into the store's records and then indexed into the ColumnModel using the\r\n<tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt>:</p>\r\n<pre><code>\r\n{data source} == mapping ==> {data store} == <b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b> ==> {ColumnModel}\r\n</code></pre>\r\n<p>Each {@link Ext.grid.Column Column} in the grid's ColumnModel is configured with a\r\n<tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt> to specify how the data within\r\neach record in the store is indexed into the ColumnModel.</p>\r\n<p>There are two ways to initialize the ColumnModel class:</p>\r\n<p><u>Initialization Method 1: an Array</u></p>\r\n<pre><code>\r\n var colModel = new Ext.grid.ColumnModel([\r\n   { header: \"Ticker\", width: 60, sortable: true},\r\n   { header: \"Company Name\", width: 150, sortable: true, id: 'company'},\r\n   { header: \"Market Cap.\", width: 100, sortable: true},\r\n   { header: \"$ Sales\", width: 100, sortable: true, renderer: money},\r\n   { header: \"Employees\", width: 100, sortable: true, resizable: false}\r\n ]);\r\n </code></pre>\r\n<p>The ColumnModel may be initialized with an Array of {@link Ext.grid.Column} column configuration\r\nobjects to define the initial layout / display of the columns in the Grid. The order of each\r\n{@link Ext.grid.Column} column configuration object within the specified Array defines the initial\r\norder of the column display.  A Column's display may be initially hidden using the\r\n<tt>{@link Ext.grid.Column#hidden hidden}</tt></b> config property (and then shown using the column\r\nheader menu).  Field's that are not included in the ColumnModel will not be displayable at all.</p>\r\n<p>How each column in the grid correlates (maps) to the {@link Ext.data.Record} field in the\r\n{@link Ext.data.Store Store} the column draws its data from is configured through the\r\n<b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b>.  If the\r\n<b><tt>{@link Ext.grid.Column#dataIndex dataIndex}</tt></b> is not explicitly defined (as shown in the\r\nexample above) it will use the column configuration's index in the Array as the index.</p>\r\n<p>See <b><tt>{@link Ext.grid.Column}</tt></b> for additional configuration options for each column.</p>\r\n<p><u>Initialization Method 2: an Object</u></p>\r\n<p>In order to use configuration options from <tt>Ext.grid.ColumnModel</tt>, an Object may be used to\r\ninitialize the ColumnModel.  The column configuration Array will be specified in the <tt><b>{@link #columns}</b></tt>\r\nconfig property. The <tt><b>{@link #defaults}</b></tt> config property can be used to apply defaults\r\nfor all columns, e.g.:</p><pre><code>\r\n var colModel = new Ext.grid.ColumnModel({\r\n    columns: [\r\n       { header: \"Ticker\", width: 60, menuDisabled: false},\r\n       { header: \"Company Name\", width: 150, id: 'company'},\r\n       { header: \"Market Cap.\"},\r\n       { header: \"$ Sales\", renderer: money},\r\n       { header: \"Employees\", resizable: false}\r\n    ],\r\n    defaults: {\r\n        sortable: true,\r\n        menuDisabled: true,\r\n        width: 100\r\n    },\r\n    listeners: {\r\n       {@link #hiddenchange}: function (cm, colIndex, hidden) {\r\n            saveConfig(colIndex, hidden);\r\n        }\r\n    }\r\n});\r\n </code></pre>\r\n<p>In both examples above, the ability to apply a CSS class to all cells in a column (including the\r\nheader) is demonstrated through the use of the <b><tt>{@link Ext.grid.Column#id id}</tt></b> config\r\noption. This column could be styled by including the following css:</p><pre><code>\r\n //add this css *after* the core css is loaded\r\n.x-grid3-td-company {\r\n    color: red; // entire column will have red font\r\n}\r\n// modify the header row only, adding an icon to the column header\r\n.x-grid3-hd-company {\r\n    background: transparent\r\n        url(../../resources/images/icons/silk/building.png)\r\n        no-repeat 3px 3px ! important;\r\n        padding-left:20px;\r\n}\r\n </code></pre>\r\nNote that the \"Company Name\" column could be specified as the\r\n<b><tt>{@link Ext.grid.GridPanel}.{@link Ext.grid.GridPanel#autoExpandColumn autoExpandColumn}</tt></b>.\r\n","package":"grid","definedIn":"widgets\\grid\\ColumnModel.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"config","summary":"Specify either an Array of {@link Ext.grid.Column} configuration objects or specify a configuration Object (see introductory section discussion utilizing Initialization Method 2 above)."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.grid.PropertyColumnModel","configOptions":[{"type":"Array","optional":false,"name":"columns","summary":"<b>{@link Ext.grid.Column}</b> are the options which may appear in the object literal for each\r\nindividual column definition.\r\n"},{"type":"Object","optional":false,"name":"defaults","summary":"configuration options to all <tt><b>{@link #columns}</b></tt>.  Configuration options specified with\r\nindividual {@link Ext.grid.Column column} configs will supersede these <tt><b>{@link #defaults}</b></tt>.\r\n"},{"type":"Boolean","optional":false,"name":"defaultSortable","summary":"sortable specified (defaults to <tt>false</tt>).  This property shall preferably be configured\r\nthrough the <tt><b>{@link #defaults}</b></tt> config property.\r\n"},{"type":"Number","optional":false,"name":"defaultWidth","summary":"specified (defaults to <tt>100</tt>).  This property shall preferably be configured through the\r\n<tt><b>{@link #defaults}</b></tt> config property.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"config","summary":"An Array of {@link Ext.grid.Column Column definition} objects representing the configuration\r\nof this ColumnModel.  See {@link Ext.grid.Column} for the configuration properties that may\r\nbe specified.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"destroy","summary":"Destroys this column model by purging any event listeners, and removing any editors.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"col","summary":"The dataIndex to find"}],"return":{"type":"Number","summary":"The column index, or -1 if no match was found"},"hide":false,"private":false,"name":"findColumnIndex","summary":"Finds the index of the first matching column for the given dataIndex.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"colIndex","summary":"The column index"},{"type":"Number","optional":false,"name":"rowIndex","summary":"The row index\r\nthe {@link Ext.form.Field Field} used to edit the cell."}],"return":{"type":"Ext.Editor} The {@link Ext.Editor Editor","summary":"that was created to wrap"},"hide":false,"private":false,"name":"getCellEditor","summary":"Returns the editor defined for the cell/column.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The column id"}],"return":{"type":"Object","summary":"the column"},"hide":false,"private":false,"name":"getColumnById","summary":"Returns the column for a specified id.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"visibleOnly","summary":"Optional. Pass as true to only include visible columns."}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getColumnCount","summary":"Returns the number of columns.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"getColumnHeader","summary":"Returns the header for the specified column.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The column index"}],"return":{"type":"String","summary":"the id"},"hide":false,"private":false,"name":"getColumnId","summary":"Returns the id of the column at the specified index.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":""},{"type":"Object","optional":true,"name":"scope","summary":""}],"return":{"type":"Array","summary":"result"},"hide":false,"private":false,"name":"getColumnsBy","summary":"Returns the column configs that return true by the passed function that is called\r\nwith (columnConfig, index)\r\n<pre><code>\r\n// returns an array of column config objects for all hidden columns\r\nvar columns = grid.getColumnModel().getColumnsBy(function (c) {\r\n  return c.hidden;\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"getColumnTooltip","summary":"Returns the tooltip for the specified column.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getColumnWidth","summary":"Returns the width for the specified column.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"}],"return":{"type":"String","summary":"The column's dataIndex"},"hide":false,"private":false,"name":"getDataIndex","summary":"Returns the dataIndex for the specified column.\r\n<pre><code>\r\n// Get field name for the column\r\nvar fieldName = grid.getColumnModel().getDataIndex(columnIndex);\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The column id"}],"return":{"type":"Number","summary":"the index, or -1 if not found"},"hide":false,"private":false,"name":"getIndexById","summary":"Returns the index for a specified column id.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index."}],"return":{"type":"Function} The function used to render the cell. See {@link #setRenderer","summary":"."},"hide":false,"private":false,"name":"getRenderer","summary":"Returns the rendering (formatting) function defined for the column.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"includeHidden","summary":"True to include hidden column widths"}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getTotalWidth","summary":"Returns the total width of all columns.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"colIndex","summary":"The column index"},{"type":"Number","optional":false,"name":"rowIndex","summary":"The row index"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isCellEditable","summary":"Returns true if the cell is editable.\r\n<pre><code>\r\nvar store = new Ext.data.Store({...});\r\nvar colModel = new Ext.grid.ColumnModel({\r\n  columns: [...],\r\n  isCellEditable: function (col, row) {\r\n    var record = store.getAt(row);\r\n    if (record.get('readonly')) { // replace with your condition\r\n      return false;\r\n    }\r\n    return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);\r\n  }\r\n});\r\nvar grid = new Ext.grid.GridPanel({\r\n  store: store,\r\n  colModel: colModel,\r\n  ...\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isFixed","summary":"Returns true if the column width cannot be changed\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"colIndex","summary":"The column index"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isHidden","summary":"Returns true if the column is hidden.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isMenuDisabled","summary":"Returns true if the specified column menu is disabled.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isResizable","summary":"Returns true if the column can be resized\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isSortable","summary":"Returns true if the specified column is sortable.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"oldIndex","summary":"The index of the column to move."},{"type":"Number","optional":false,"name":"newIndex","summary":"The position at which to reinsert the coolumn."}],"return":null,"hide":false,"private":false,"name":"moveColumn","summary":"Moves a column from one position to another.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"},{"type":"String","optional":false,"name":"header","summary":"The new header"}],"return":null,"hide":false,"private":false,"name":"setColumnHeader","summary":"Sets the header for a column.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"},{"type":"String","optional":false,"name":"tooltip","summary":"The new tooltip"}],"return":null,"hide":false,"private":false,"name":"setColumnTooltip","summary":"Sets the tooltip for a column.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"},{"type":"Number","optional":false,"name":"width","summary":"The new width"},{"type":"Boolean","optional":false,"name":"suppressEvent","summary":"True to suppress firing the <code>{@link #widthchange}</code>\r\nevent. Defaults to false."}],"return":null,"hide":false,"private":false,"name":"setColumnWidth","summary":"Sets the width for a column.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"config","summary":"Array of Column definition objects."},{"type":"Boolean","optional":false,"name":"initial","summary":"Specify <tt>true</tt> to bypass cleanup which deletes the <tt>totalWidth</tt>\r\nand destroys existing editors."}],"return":null,"hide":false,"private":false,"name":"setConfig","summary":"<p>Reconfigures this column model according to the passed Array of column definition objects.\r\nFor a description of the individual properties of a column definition object, see the\r\n<a href=\"#Ext.grid.ColumnModel-configs\">Config Options</a>.</p>\r\n<p>Causes the {@link #configchange} event to be fired. A {@link Ext.grid.GridPanel GridPanel}\r\nusing this ColumnModel will listen for this event and refresh its UI automatically.</p>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"},{"type":"String","optional":false,"name":"dataIndex","summary":"The new dataIndex"}],"return":null,"hide":false,"private":false,"name":"setDataIndex","summary":"Sets the dataIndex for a column.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"},{"type":"Boolean","optional":false,"name":"editable","summary":"True if the column is editable"}],"return":null,"hide":false,"private":false,"name":"setEditable","summary":"Sets if a column is editable.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"},{"type":"Object","optional":false,"name":"editor","summary":"The editor object"}],"return":null,"hide":false,"private":false,"name":"setEditor","summary":"Sets the editor for a column and destroys the prior editor.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"colIndex","summary":"The column index"},{"type":"Boolean","optional":false,"name":"hidden","summary":"True if the column is hidden"}],"return":null,"hide":false,"private":false,"name":"setHidden","summary":"Sets if a column is hidden.\r\n<pre><code>\r\nmyGrid.getColumnModel().setHidden(0, true); // hide column 0 (0 = the first column).\r\n</code></pre>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"col","summary":"The column index"},{"type":"Function","optional":false,"name":"fn","summary":"The function to use to process the cell's raw data\r\nto return HTML markup for the grid view. The render function is called with\r\nthe following parameters:<ul>\r\n<li><b>value</b> : Object<p class=\"sub-desc\">The data value for the cell.</p></li>\r\n<li><b>metadata</b> : Object<p class=\"sub-desc\">An object in which you may set the following attributes:<ul>\r\n<li><b>css</b> : String<p class=\"sub-desc\">A CSS class name to add to the cell's TD element.</p></li>\r\n<li><b>attr</b> : String<p class=\"sub-desc\">An HTML attribute definition string to apply to the data container element <i>within</i> the table cell\r\n(e.g. 'style=\"color:red;\"').</p></li></ul></p></li>\r\n<li><b>record</b> : Ext.data.record<p class=\"sub-desc\">The {@link Ext.data.Record} from which the data was extracted.</p></li>\r\n<li><b>rowIndex</b> : Number<p class=\"sub-desc\">Row index</p></li>\r\n<li><b>colIndex</b> : Number<p class=\"sub-desc\">Column index</p></li>\r\n<li><b>store</b> : Ext.data.Store<p class=\"sub-desc\">The {@link Ext.data.Store} object from which the Record was extracted.</p></li></ul>"}],"return":null,"hide":false,"private":false,"name":"setRenderer","summary":"Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some\r\ndefault formatting functions.\r\n"}],"events":[{"parameters":[{"type":"ColumnModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"oldIndex","summary":""},{"type":"Number","optional":false,"name":"newIndex","summary":""}],"name":"columnmoved","summary":"Fires when a column is moved."},{"parameters":[{"type":"ColumnModel","optional":false,"name":"el","summary":"this"}],"name":"configchange","summary":"Fires when the configuration is changed."},{"parameters":[{"type":"ColumnModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"columnIndex","summary":"The column index"},{"type":"String","optional":false,"name":"newText","summary":"The new header text"}],"name":"headerchange","summary":"Fires when the text of a header changes."},{"parameters":[{"type":"ColumnModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"columnIndex","summary":"The column index"},{"type":"Boolean","optional":false,"name":"hidden","summary":"true if hidden, false otherwise"}],"name":"hiddenchange","summary":"Fires when a column is hidden or \"unhidden\"."},{"parameters":[{"type":"ColumnModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"columnIndex","summary":"The column index"},{"type":"Number","optional":false,"name":"newWidth","summary":"The new width"}],"name":"widthchange","summary":"Fires when the width of a column is programmaticially changed using <code>{@link #setColumnWidth}</code>. Note internal resizing suppresses the event from firing. See also {@link Ext.grid.GridPanel}.<code>{@link #columnresize}</code>."}]},{"name":"DateColumn","fullName":"Ext.grid.DateColumn","summary":"<p>A Column definition class which renders a passed date according to the default locale, or a configured\r\n{@link #format}. See the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column}\r\nfor more details.</p>\r\n","package":"grid","definedIn":"widgets\\grid\\Column.js","xtype":null,"extends":"Ext.grid.Column","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"format","summary":"A formatting string as used by {@link Date#format} to format a Date for this Column\r\n(defaults to <tt>'m/d/Y'</tt>).\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"EditorGridPanel","fullName":"Ext.grid.EditorGridPanel","summary":"<p>This class extends the {@link Ext.grid.GridPanel GridPanel Class} to provide cell editing\r\non selected {@link Ext.grid.Column columns}. The editable columns are specified by providing\r\nan {@link Ext.grid.ColumnModel#editor editor} in the {@link Ext.grid.Column column configuration}.</p>\r\n<p>Editability of columns may be controlled programatically by inserting an implementation\r\nof {@link Ext.grid.ColumnModel#isCellEditable isCellEditable} into the\r\n{@link Ext.grid.ColumnModel ColumnModel}.</p>\r\n<p>Editing is performed on the value of the <i>field</i> specified by the column's\r\n<tt>{@link Ext.grid.ColumnModel#dataIndex dataIndex}</tt> in the backing {@link Ext.data.Store Store}\r\n(so if you are using a {@link Ext.grid.ColumnModel#setRenderer renderer} in order to display\r\ntransformed data, this must be accounted for).</p>\r\n<p>If a value-to-description mapping is used to render a column, then a {@link Ext.form.Field#ComboBox ComboBox}\r\nwhich uses the same {@link Ext.form.Field#valueField value}-to-{@link Ext.form.Field#displayFieldField description}\r\nmapping would be an appropriate editor.</p>\r\nIf there is a more complex mismatch between the visible data in the grid, and the editable data in\r\nthe {@link Edt.data.Store Store}, then code to transform the data both before and after editing can be\r\ninjected using the {@link #beforeedit} and {@link #afteredit} events.\r\n","package":"grid","definedIn":"widgets\\grid\\EditorGrid.js","xtype":"editorgrid","extends":"Ext.grid.GridPanel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.grid.PropertyGrid","configOptions":[{"type":"Boolean","optional":false,"name":"autoEncode","summary":"True to automatically HTML encode and decode values pre and post edit (defaults to false)\r\n"},{"type":"Number","optional":false,"name":"clicksToEdit","summary":"<p>The number of clicks on a cell required to display the cell's editor (defaults to 2).</p>\r\n<p>Setting this option to 'auto' means that mousedown <i>on the selected cell</i> starts\r\nediting that cell.</p>\r\n"},{"type":"Boolean","optional":false,"name":"forceValidation","summary":"True to force validation even if the value is unmodified (defaults to false)\r\n"},{"type":"Object","optional":false,"name":"selModel","summary":"the grid (defaults to {@link Ext.grid.CellSelectionModel} if not specified).\r\n"},{"type":"Boolean","optional":false,"name":"trackMouseOver","summary":""}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"activeEditor","summary":"The currently active editor or null\r\n"}],"methods":[{"parameters":[{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Number","optional":false,"name":"colIndex","summary":""}],"return":null,"hide":false,"private":false,"name":"startEditing","summary":"Starts editing the specified for the specified row/column\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"cancel","summary":"True to cancel any changes"}],"return":null,"hide":false,"private":false,"name":"stopEditing","summary":"Stops any active editing\r\n"}],"events":[{"parameters":[{"type":"Object","optional":false,"name":"e","summary":"An edit event (see above for description)"}],"name":"afteredit","summary":"Fires after a cell is edited. The edit event object has the following properties <br /> <ul style=\"padding:5px;padding-left:16px;\"> <li>grid - This grid</li> <li>record - The record being edited</li> <li>field - The field name being edited</li> <li>value - The value being set</li> <li>originalValue - The original value for the field, before the edit.</li> <li>row - The grid row index</li> <li>column - The grid column index</li> </ul> <pre><code> grid.on('afteredit', afterEdit, this ); function afterEdit(e) { // execute an XHR to send/commit data to the server, in callback do (if successful): e.record.commit(); }; </code></pre>."},{"parameters":[{"type":"Object","optional":false,"name":"e","summary":"An edit event (see above for description)"}],"name":"beforeedit","summary":"Fires before cell editing is triggered. The edit event object has the following properties <br /> <ul style=\"padding:5px;padding-left:16px;\"> <li>grid - This grid</li> <li>record - The record being edited</li> <li>field - The field name being edited</li> <li>value - The value for the field being edited.</li> <li>row - The grid row index</li> <li>column - The grid column index</li> <li>cancel - Set this to true to cancel the edit or return false from your handler.</li> </ul>."},{"parameters":[{"type":"Object","optional":false,"name":"e","summary":"An edit event (see above for description)"}],"name":"validateedit","summary":"Fires after a cell is edited, but before the value is set in the record. Return false to cancel the change. The edit event object has the following properties <br /> <ul style=\"padding:5px;padding-left:16px;\"> <li>grid - This grid</li> <li>record - The record being edited</li> <li>field - The field name being edited</li> <li>value - The value being set</li> <li>originalValue - The original value for the field, before the edit.</li> <li>row - The grid row index</li> <li>column - The grid column index</li> <li>cancel - Set this to true to cancel the edit or return false from your handler.</li> </ul> Usage example showing how to remove the red triangle (dirty record indicator) from some records (not all). By observing the grid's validateedit event, it can be cancelled if the edit occurs on a targeted row (for example) and then setting the field's new value in the Record directly: <pre><code> grid.on('validateedit', function (e) { var myTargetRow = 6; if (e.row == myTargetRow) { e.cancel = true; e.record.data[e.field] = e.value; } }); </code></pre>."}]},{"name":"GridDragZone","fullName":"Ext.grid.GridDragZone","summary":"<p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the\r\ntemplate methods of DragZone to enable dragging of the selected rows of a GridPanel.</p>\r\n<p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's template method implementations of\r\n{@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},\r\n{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop}</p> are able\r\nto process the {@link #getDragData data} which is provided.\r\n","package":"grid","definedIn":"widgets\\grid\\GridDD.js","xtype":null,"extends":"Ext.dd.DragZone","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"afterRepair","summary":"An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight\r\nthe selected rows to show that they have not been dragged.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getDragData","summary":"<p>The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.</p>\r\n<p>This data is available for processing in the {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},\r\n{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} methods of a cooperating {@link Ext.dd.DropZone DropZone}.</p>\r\n<p>The data object contains the following properties:<ul>\r\n<li><b>grid</b> : Ext.Grid.GridPanel<div class=\"sub-desc\">The GridPanel from which the data is being dragged.</div></li>\r\n<li><b>ddel</b> : htmlElement<div class=\"sub-desc\">An htmlElement which provides the \"picture\" of the data being dragged.</div></li>\r\n<li><b>rowIndex</b> : Number<div class=\"sub-desc\">The index of the row which receieved the mousedown gesture which triggered the drag.</div></li>\r\n<li><b>selections</b> : Array<div class=\"sub-desc\">An Array of the selected Records which are being dragged from the GridPanel.</div></li>\r\n</ul></p>\r\n"},{"parameters":[{"type":"EventObject","optional":false,"name":"e","summary":"The mouse up event"}],"return":{"type":"Array","summary":"The xy location (e.g. [100, 200])"},"hide":false,"private":false,"name":"getRepairXY","summary":"<p>An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.</p>\r\n<p>Called before a repair of an invalid drop to get the XY to animate to.</p>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"onInitDrag","summary":"<p>The provided implementation of the onInitDrag method. Sets the <tt>innerHTML</tt> of the drag proxy which provides the \"picture\"\r\nof the data being dragged.</p>\r\n<p>The <tt>innerHTML</tt> data is found by calling the owning GridPanel's {@link Ext.grid.GridPanel#getDragDropText getDragDropText}.</p>\r\n"}],"events":[]},{"name":"GridPanel","fullName":"Ext.grid.GridPanel","summary":"<p>This class represents the primary interface of a component based grid control to represent data\r\nin a tabular format of rows and columns. The GridPanel is composed of the following:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>{@link Ext.data.Store Store}</b> : The Model holding the data records (rows)\r\n<div class=\"sub-desc\"></div></li>\r\n<li><b>{@link Ext.grid.ColumnModel Column model}</b> : Column makeup\r\n<div class=\"sub-desc\"></div></li>\r\n<li><b>{@link Ext.grid.GridView View}</b> : Encapsulates the user interface\r\n<div class=\"sub-desc\"></div></li>\r\n<li><b>{@link Ext.grid.AbstractSelectionModel selection model}</b> : Selection behavior\r\n<div class=\"sub-desc\"></div></li>\r\n</ul></div>\r\n<p>Example usage:</p>\r\n<pre><code>\r\nvar grid = new Ext.grid.GridPanel({\r\n   {@link #store}: new {@link Ext.data.Store}({\r\n       {@link Ext.data.Store#autoDestroy autoDestroy}: true,\r\n       {@link Ext.data.Store#reader reader}: reader,\r\n       {@link Ext.data.Store#data data}: xg.dummyData\r\n    }),\r\n   {@link #colModel}: new {@link Ext.grid.ColumnModel}({\r\n       {@link Ext.grid.ColumnModel#defaults defaults}: {\r\n            width: 120,\r\n            sortable: true\r\n        },\r\n       {@link Ext.grid.ColumnModel#columns columns}: [\r\n           {id: 'company', header: 'Company', width: 200, sortable: true, dataIndex: 'company'},\r\n           {header: 'Price', renderer: Ext.util.Format.usMoney, dataIndex: 'price'},\r\n           {header: 'Change', dataIndex: 'change'},\r\n           {header: '% Change', dataIndex: 'pctChange'},\r\n            // instead of specifying renderer: Ext.util.Format.dateRenderer('m/d/Y') use xtype\r\n           {\r\n                header: 'Last Updated', width: 135, dataIndex: 'lastChange',\r\n                xtype: 'datecolumn', format: 'M d, Y'\r\n            }\r\n        ],\r\n    }),\r\n   {@link #viewConfig}: {\r\n       {@link Ext.grid.GridView#forceFit forceFit}: true,\r\n\r\n//      Return CSS class to apply to rows depending upon data values\r\n       {@link Ext.grid.GridView#getRowClass getRowClass}: function (record, index) {\r\n            var c = record.{@link Ext.data.Record#get get}('change');\r\n            if (c < 0) {\r\n                return 'price-fall';\r\n            } else if (c > 0) {\r\n                return 'price-rise';\r\n            }\r\n        }\r\n    },\r\n   {@link #sm}: new Ext.grid.RowSelectionModel({singleSelect:true}),\r\n    width: 600,\r\n    height: 300,\r\n    frame: true,\r\n    title: 'Framed with Row Selection and Horizontal Scrolling',\r\n    iconCls: 'icon-grid'\r\n});\r\n</code></pre>\r\n<p><b><u>Notes:</u></b></p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li>Although this class inherits many configuration options from base classes, some of them\r\n(such as autoScroll, autoWidth, layout, items, etc) are not used by this class, and will\r\nhave no effect.</li>\r\n<li>A grid <b>requires</b> a width in which to scroll its columns, and a height in which to\r\nscroll its rows. These dimensions can either be set explicitly through the\r\n<tt>{@link Ext.BoxComponent#height height}</tt> and <tt>{@link Ext.BoxComponent#width width}</tt>\r\nconfiguration options or implicitly set by using the grid as a child item of a\r\n{@link Ext.Container Container} which will have a {@link Ext.Container#layout layout manager}\r\nprovide the sizing of its child items (for example the Container of the Grid may specify\r\n<tt>{@link Ext.Container#layout layout}:'fit'</tt>).</li>\r\n<li>To access the data in a Grid, it is necessary to use the data model encapsulated\r\nby the {@link #store Store}. See the {@link #cellclick} event for more details.</li>\r\n</ul></div>\r\n","package":"grid","definedIn":"widgets\\grid\\GridPanel.js","xtype":"grid","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.grid.EditorGridPanel","configOptions":[{"type":"String","optional":false,"name":"autoExpandColumn","summary":"<p>The <tt>{@link Ext.grid.Column#id id}</tt> of a {@link Ext.grid.Column column} in\r\nthis grid that should expand to fill unused space. This value specified here can not\r\nbe <tt>0</tt>.</p>\r\n<br><p><b>Note</b>: If the Grid's {@link Ext.grid.GridView view} is configured with\r\n<tt>{@link Ext.grid.GridView#forceFit forceFit}=true</tt> the <tt>autoExpandColumn</tt>\r\nis ignored. See {@link Ext.grid.Column}.<tt>{@link Ext.grid.Column#width width}</tt>\r\nfor additional details.</p>\r\n<p>See <tt>{@link #autoExpandMax}</tt> and <tt>{@link #autoExpandMin}</tt> also.</p>\r\n"},{"type":"Number","optional":false,"name":"autoExpandMax","summary":"can have (if enabled). Defaults to <tt>1000</tt>.\r\n"},{"type":"Number","optional":false,"name":"autoExpandMin","summary":"can have (if enabled). Defaults to <tt>50</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"columnLines","summary":"Default is <tt>false</tt>.\r\n"},{"type":"Object","optional":false,"name":"cm","summary":""},{"type":"Object","optional":false,"name":"colModel","summary":""},{"type":"Array","optional":false,"name":"columns","summary":"{@link Ext.grid.ColumnModel}.  The ColumnModel may be explicitly created via the\r\n<tt>{@link #colModel}</tt> configuration property.\r\n"},{"type":"String","optional":false,"name":"ddGroup","summary":""},{"type":"String","optional":false,"name":"ddText","summary":"Configures the text in the drag proxy.  Defaults to:\r\n<pre><code>\r\nddText : '{0} selected row{1}'\r\n</code></pre>\r\n<tt>{0}</tt> is replaced with the number of selected rows.\r\n"},{"type":"Boolean","optional":false,"name":"deferRowRender","summary":"<p>This allows the GridPanel to be initially rendered empty, with the expensive update of the row\r\nstructure deferred so that layouts with GridPanels appear more quickly.</p>\r\n"},{"type":"Boolean","optional":false,"name":"disableSelection","summary":"<p>Ignored if a {@link #selModel SelectionModel} is specified.</p>\r\n"},{"type":"Boolean","optional":false,"name":"enableColumnResize","summary":""},{"type":"Boolean","optional":false,"name":"enableColumnHide","summary":"Defaults to <tt>true</tt> to enable {@link Ext.grid.Column#hidden hiding of columns}\r\nwith the {@link #enableHdMenu header menu}.\r\n"},{"type":"Boolean","optional":false,"name":"enableColumnMove","summary":"to turn off column reordering via drag drop.\r\n"},{"type":"Boolean","optional":false,"name":"enableDragDrop","summary":"<p>Setting this to <b><tt>true</tt></b> causes this GridPanel's {@link #getView GridView} to\r\ncreate an instance of {@link Ext.grid.GridDragZone}. <b>Note</b>: this is available only <b>after</b>\r\nthe Grid has been rendered as the GridView's <tt>{@link Ext.grid.GridView#dragZone dragZone}</tt>\r\nproperty.</p>\r\n<p>A cooperating {@link Ext.dd.DropZone DropZone} must be created who's implementations of\r\n{@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},\r\n{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} are able\r\nto process the {@link Ext.grid.GridDragZone#getDragData data} which is provided.</p>\r\n"},{"type":"Boolean","optional":false,"name":"enableHdMenu","summary":""},{"type":"Boolean","optional":false,"name":"hideHeaders","summary":""},{"type":"Object","optional":false,"name":"loadMask","summary":"loading. Defaults to <code>false</code>.\r\n"},{"type":"Number","optional":false,"name":"maxHeight","summary":""},{"type":"Number","optional":false,"name":"minColumnWidth","summary":""},{"type":"Object","optional":false,"name":"sm","summary":""},{"type":"Object","optional":false,"name":"selModel","summary":"the selection model for the grid (defaults to {@link Ext.grid.RowSelectionModel} if not specified).\r\n"},{"type":"Ext.data.Store","optional":false,"name":"store","summary":""},{"type":"Boolean","optional":false,"name":"stripeRows","summary":"<p>This causes the CSS class <tt><b>x-grid3-row-alt</b></tt> to be added to alternate rows of\r\nthe grid. A default CSS rule is provided which sets a background colour, but you can override this\r\nwith a rule which either overrides the <b>background-color</b> style using the '!important'\r\nmodifier, or which uses a CSS selector of higher specificity.</p>\r\n"},{"type":"Boolean","optional":false,"name":"trackMouseOver","summary":"for GridPanel, but <tt>false</tt> for EditorGridPanel.\r\n"},{"type":"Array","optional":false,"name":"stateEvents","summary":"An array of events that, when fired, should trigger this component to save its state.\r\nDefaults to:<pre><code>\r\nstateEvents: ['columnmove', 'columnresize', 'sortchange']\r\n</code></pre>\r\n<p>These can be any types of events supported by this component, including browser or\r\ncustom events (e.g., <tt>['click', 'customerchange']</tt>).</p>\r\n<p>See {@link Ext.Component#stateful} for an explanation of saving and restoring\r\nComponent state.</p>\r\n"},{"type":"Object","optional":false,"name":"view","summary":"before a call to {@link Ext.Component#render render()}.\r\n"},{"type":"Object","optional":false,"name":"viewConfig","summary":"the config options available for {@link Ext.grid.GridView} can be specified here. This option\r\nis ignored if <tt>{@link #view}</tt> is specified.\r\n"},{"type":"String/Number","optional":false,"name":"activeItem","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"autoDestroy","summary":"@hide\r\n"},{"type":"Object/String/Function","optional":false,"name":"autoLoad","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"autoWidth","summary":"@hide\r\n"},{"type":"Boolean/Number","optional":false,"name":"bufferResize","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"defaultType","summary":"@hide\r\n"},{"type":"Object","optional":false,"name":"defaults","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"hideBorders","summary":"@hide\r\n"},{"type":"Mixed","optional":false,"name":"items","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"layout","summary":"@hide\r\n"},{"type":"Object","optional":false,"name":"layoutConfig","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"monitorResize","summary":"@hide\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Ext.data.Store","optional":false,"name":"store","summary":"The new {@link Ext.data.Store} object"},{"type":"Ext.grid.ColumnModel","optional":false,"name":"colModel","summary":"The new {@link Ext.grid.ColumnModel} object"}],"return":null,"hide":false,"private":false,"name":"reconfigure","summary":"<p>Reconfigures the grid to use a different Store and Column Model\r\nand fires the 'reconfigure' event. The View will be bound to the new\r\nobjects and refreshed.</p>\r\n<p>Be aware that upon reconfiguring a GridPanel, certain existing settings <i>may</i> become\r\ninvalidated. For example the configured {@link #autoExpandColumn} may no longer exist in the\r\nnew ColumnModel. Also, an existing {@link Ext.PagingToolbar PagingToolbar} will still be bound\r\nto the old Store, and will need rebinding. Any {@link #plugins} might also need reconfiguring\r\nwith the new data.</p>\r\n"},{"parameters":[],"return":{"type":"Element","summary":"The element"},"hide":false,"private":false,"name":"getGridEl","summary":"Returns the grid's underlying element.\r\n"},{"parameters":[],"return":{"type":"SelectionModel","summary":""},"hide":false,"private":false,"name":"getSelectionModel","summary":"Returns the grid's selection model configured by the <code>{@link #selModel}</code>\r\nconfiguration option. If no selection model was configured, this will create\r\nand return a {@link Ext.grid.RowSelectionModel RowSelectionModel}.\r\n"},{"parameters":[],"return":{"type":"Ext.data.Store","summary":"The store"},"hide":false,"private":false,"name":"getStore","summary":"Returns the grid's data store.\r\n"},{"parameters":[],"return":{"type":"Ext.grid.ColumnModel","summary":"The column model"},"hide":false,"private":false,"name":"getColumnModel","summary":"Returns the grid's ColumnModel.\r\n"},{"parameters":[],"return":{"type":"Ext.grid.GridView","summary":"The grid view"},"hide":false,"private":false,"name":"getView","summary":"Returns the grid's GridView object.\r\n"},{"parameters":[],"return":{"type":"String","summary":"The text"},"hide":false,"private":false,"name":"getDragDropText","summary":"Called to get grid's drag proxy text, by default returns this.ddText.\r\n"}],"events":[{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"click","summary":"The raw click event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"dblclick","summary":"The raw dblclick event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"contextmenu","summary":"The raw contextmenu event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"mousedown","summary":"The raw mousedown event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"mouseup","summary":"The raw mouseup event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"mouseover","summary":"The raw mouseover event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"mouseout","summary":"The raw mouseout event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"keypress","summary":"The raw keypress event for the entire grid."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"keydown","summary":"The raw keydown event for the entire grid."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"cellmousedown","summary":"Fires before a cell is clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"rowmousedown","summary":"Fires before a row is clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"headermousedown","summary":"Fires before a header is clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"cellclick","summary":"Fires when a cell is clicked. The data for the cell is drawn from the {@link Ext.data.Record Record} for this row. To access the data in the listener function use the following technique: <pre><code> function (grid, rowIndex, columnIndex, e) { var record = grid.getStore().getAt(rowIndex); // Get the Record var fieldName = grid.getColumnModel().getDataIndex(columnIndex); // Get field name var data = record.get(fieldName); } </code></pre>."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"celldblclick","summary":"Fires when a cell is double clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"rowclick","summary":"Fires when a row is clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"rowdblclick","summary":"Fires when a row is double clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"headerclick","summary":"Fires when a header is clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"headerdblclick","summary":"Fires when a header cell is double clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"rowcontextmenu","summary":"Fires when a row is right clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Number","optional":false,"name":"cellIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"cellcontextmenu","summary":"Fires when a cell is right clicked."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"headercontextmenu","summary":"Fires when a header is right clicked."},{"parameters":[{"type":"Number","optional":false,"name":"scrollLeft","summary":""},{"type":"Number","optional":false,"name":"scrollTop","summary":""}],"name":"bodyscroll","summary":"Fires when the body element is scrolled."},{"parameters":[{"type":"Number","optional":false,"name":"columnIndex","summary":""},{"type":"Number","optional":false,"name":"newSize","summary":""}],"name":"columnresize","summary":"Fires when the user resizes a column."},{"parameters":[{"type":"Number","optional":false,"name":"oldIndex","summary":""},{"type":"Number","optional":false,"name":"newIndex","summary":""}],"name":"columnmove","summary":"Fires when the user moves a column."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"sortInfo","summary":"An object with the keys field and direction"}],"name":"sortchange","summary":"Fires when the grid's store sort changes."},{"parameters":[{"type":"Grid","optional":false,"name":"el","summary":"this"},{"type":"Ext.data.Store","optional":false,"name":"store","summary":"The new store"},{"type":"Ext.grid.ColumnModel","optional":false,"name":"colModel","summary":"The new column model"}],"name":"reconfigure","summary":"Fires when the grid is reconfigured with a new store and/or column model."}]},{"name":"GridView","fullName":"Ext.grid.GridView","summary":"<p>This class encapsulates the user interface of an {@link Ext.grid.GridPanel}.\r\nMethods of this class may be used to access user interface elements to enable\r\nspecial display effects. Do not change the DOM structure of the user interface.</p>\r\n<p>This class does not provide ways to manipulate the underlying data. The data\r\nmodel of a Grid is held in an {@link Ext.data.Store}.</p>\r\n","package":"grid","definedIn":"widgets\\grid\\GridView.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.grid.GroupingView","configOptions":[{"type":"Boolean","optional":false,"name":"autoFill","summary":"Defaults to <tt>false</tt>.  Specify <tt>true</tt> to have the column widths re-proportioned\r\nwhen the grid is <b>initially rendered</b>.  The\r\n{@link Ext.grid.Column#width initially configured width}</tt> of each column will be adjusted\r\nto fit the grid width and prevent horizontal scrolling. If columns are later resized (manually\r\nor programmatically), the other columns in the grid will <b>not</b> be resized to fit the grid width.\r\nSee <tt>{@link #forceFit}</tt> also.\r\n"},{"type":"String","optional":false,"name":"cellSelector","summary":""},{"type":"Number","optional":false,"name":"cellSelectorDepth","summary":""},{"type":"String","optional":false,"name":"columnsText","summary":""},{"type":"Boolean","optional":false,"name":"deferEmptyText","summary":"first load (defaults to <tt>true</tt>).\r\n"},{"type":"String","optional":false,"name":"emptyText","summary":"are available (defaults to ''). This value will be used to update the <tt>{@link #mainBody}</tt>:\r\n    <pre><code>\r\n    this.mainBody.update('&lt;div class=\"x-grid-empty\">' + this.emptyText + '&lt;/div>');\r\n    </code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"enableRowBody","summary":"that spans beneath the data row.  Use the {@link #getRowClass} method's rowParams config to customize the row body.\r\n"},{"type":"Boolean","optional":false,"name":"forceFit","summary":"Defaults to <tt>false</tt>.  Specify <tt>true</tt> to have the column widths re-proportioned\r\nat <b>all times</b>.  The {@link Ext.grid.Column#width initially configured width}</tt> of each\r\netcolumn will be adjusted to fit the grid width and prevent horizontal scrolling. If columns are\r\nlater resized (manually or programmatically), the other columns in the grid <b>will</b> be resized\r\nto fit the grid width. See <tt>{@link #autoFill}</tt> also.\r\n"},{"type":"Boolean","optional":false,"name":"headersDisabled","summary":"Use the {@link Ext.grid.ColumnModel ColumnModel} <tt>{@link Ext.grid.ColumnModel#menuDisabled menuDisabled}</tt>\r\nconfig to disable the <i>menu</i> for individual columns.  While this config is true the\r\nfollowing will be disabled:<div class=\"mdetail-params\"><ul>\r\n<li>clicking on header to sort</li>\r\n<li>the trigger to reveal the menu.</li>\r\n</ul></div>\r\n"},{"type":"String","optional":false,"name":"rowSelector","summary":""},{"type":"Number","optional":false,"name":"rowSelectorDepth","summary":""},{"type":"Number","optional":false,"name":"scrollOffset","summary":"(defaults to <tt>undefined</tt>). If an explicit value isn't specified, this will be automatically\r\ncalculated.\r\n"},{"type":"String","optional":false,"name":"selectedRowClass","summary":"example overriding the default styling:\r\n    <pre><code>\r\n    .x-grid3-row-selected {background-color: yellow;}\r\n    </code></pre>\r\nNote that this only controls the row, and will not do anything for the text inside it.  To style inner\r\nfacets (like text) use something like:\r\n    <pre><code>\r\n    .x-grid3-row-selected .x-grid3-cell-inner {\r\n        color: #FFCC00;\r\n    }\r\n    </code></pre>\r\n@type String\r\n"},{"type":"String","optional":false,"name":"sortAscText","summary":""},{"type":"Array","optional":false,"name":"sortClasses","summary":""},{"type":"String","optional":false,"name":"sortDescText","summary":""}],"properties":[{"type":"Ext.grid.GridDragZone","static":false,"hide":false,"private":false,"name":"dragZone","summary":"<p>A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations\r\nof the template methods of DragZone to enable dragging of the selected rows of a GridPanel.\r\nSee {@link Ext.grid.GridDragZone} for details.</p>\r\n<p>This will <b>only</b> be present:<div class=\"mdetail-params\"><ul>\r\n<li><i>if</i> the owning GridPanel was configured with {@link Ext.grid.GridPanel#enableDragDrop enableDragDrop}: <tt>true</tt>.</li>\r\n<li><i>after</i> the owning GridPanel has been rendered.</li>\r\n</ul></div>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"mainBody","summary":"<i>Read-only</i>. The GridView's body Element which encapsulates all rows in the Grid.\r\nThis {@link Ext.Element Element} is only available after the GridPanel has been rendered.\r\n"}],"methods":[{"parameters":[{"type":"HTMLElement","optional":false,"name":"el","summary":"The target element"}],"return":{"type":"Number","summary":"The column index, or <b>false</b> if the target element is not within a row of this GridView."},"hide":false,"private":false,"name":"findCellIndex","summary":"<p>Return the index of the grid column which contains the passed HTMLElement.</p>\r\nSee also {@link #findRowIndex}\r\n"},{"parameters":[{"type":"HTMLElement","optional":false,"name":"el","summary":"The target HTMLElement"}],"return":{"type":"HTMLElement","summary":"The row element, or null if the target element is not within a row of this GridView."},"hide":false,"private":false,"name":"findRow","summary":"Return the HtmlElement representing the grid row which contains the passed element.\r\n"},{"parameters":[{"type":"HTMLElement","optional":false,"name":"el","summary":"The target HTMLElement"}],"return":{"type":"Number","summary":"The row index, or <b>false</b> if the target element is not within a row of this GridView."},"hide":false,"private":false,"name":"findRowIndex","summary":"<p>Return the index of the grid row which contains the passed HTMLElement.</p>\r\nSee also {@link #findCellIndex}\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"row","summary":"The row index"},{"type":"Number","optional":false,"name":"col","summary":"The column index"}],"return":null,"hide":false,"private":false,"name":"focusCell","summary":"Focuses the specified cell.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"row","summary":"The row index"}],"return":null,"hide":false,"private":false,"name":"focusRow","summary":"Focuses the specified row.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"row","summary":"The row index in which to find the cell."},{"type":"Number","optional":false,"name":"col","summary":"The column index of the cell."}],"return":{"type":"HtmlElement","summary":"The td at the specified coordinates."},"hide":false,"private":false,"name":"getCell","summary":"Returns the grid's <tt>&lt;td></tt> HtmlElement at the specified coordinates.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The column index"}],"return":{"type":"HtmlElement","summary":"The td element."},"hide":false,"private":false,"name":"getHeaderCell","summary":"Return the <tt>&lt;td></tt> HtmlElement which represents the Grid's header cell for the specified column index.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The row index"}],"return":{"type":"HtmlElement","summary":"The div element."},"hide":false,"private":false,"name":"getRow","summary":"Return the <tt>&lt;div></tt> HtmlElement which represents a Grid row for the specified index.\r\n"},{"parameters":[{"type":"Record","optional":false,"name":"record","summary":"The {@link Ext.data.Record} corresponding to the current row."},{"type":"Number","optional":false,"name":"index","summary":"The row index."},{"type":"Object","optional":false,"name":"rowParams","summary":"A config object that is passed to the row template during rendering that allows\r\ncustomization of various aspects of a grid row.\r\n<p>If {@link #enableRowBody} is configured <b><tt></tt>true</b>, then the following properties may be set\r\nby this function, and will be used to render a full-width expansion row below each grid row:</p>\r\n<ul>\r\n<li><code>body</code> : String <div class=\"sub-desc\">An HTML fragment to be used as the expansion row's body content (defaults to '').</div></li>\r\n<li><code>bodyStyle</code> : String <div class=\"sub-desc\">A CSS style specification that will be applied to the expansion row's &lt;tr> element. (defaults to '').</div></li>\r\n</ul>\r\nThe following property will be passed in, and may be appended to:\r\n<ul>\r\n<li><code>tstyle</code> : String <div class=\"sub-desc\">A CSS style specification that willl be applied to the &lt;table> element which encapsulates\r\nboth the standard grid row, and any expansion row.</div></li>\r\n</ul>"},{"type":"Store","optional":false,"name":"store","summary":"The {@link Ext.data.Store} this grid is bound to"}],"return":{"type":"String","summary":"a CSS class name to add to the row."},"hide":false,"private":false,"name":"getRowClass","summary":"Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom\r\nparameters to the row template for the current row to customize how it is rendered using the <b>rowParams</b>\r\nparameter.  This function should return the CSS class name (or empty string '' for none) that will be added\r\nto the row's wrapping div.  To apply multiple class names, simply return them space-delimited within the string\r\n(e.g., 'my-class another-class'). Example usage:\r\n    <pre><code>\r\nviewConfig: {\r\n    forceFit: true,\r\n    showPreview: true, // custom property\r\n    enableRowBody: true, // required to create a second, full-width row to show expanded Record data\r\n    getRowClass: function (record, rowIndex, rp, ds) { // rp = rowParams\r\n        if (this.showPreview) {\r\n            rp.body = '&lt;p>'+record.data.excerpt+'&lt;/p>';\r\n            return 'x-grid3-row-expanded';\r\n        }\r\n        return 'x-grid3-row-collapsed';\r\n    }\r\n},     \r\n    </code></pre>\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"headersToo","summary":"True to also refresh the headers"}],"return":null,"hide":false,"private":false,"name":"refresh","summary":"Refreshs the grid UI\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"scrollToTop","summary":"Scrolls the grid to the top\r\n"}],"events":[{"parameters":[{"type":"Ext.grid.GridView","optional":false,"name":"view","summary":""}],"name":"beforerefresh","summary":"Internal UI Event. Fired before the view is refreshed."},{"parameters":[{"type":"Ext.grid.GridView","optional":false,"name":"view","summary":""},{"type":"Number","optional":false,"name":"rowIndex","summary":"The index of the row to be removed."},{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The Record to be removed"}],"name":"beforerowremoved","summary":"Internal UI Event. Fired before a row is removed."},{"parameters":[{"type":"Ext.grid.GridView","optional":false,"name":"view","summary":""},{"type":"Number","optional":false,"name":"firstRow","summary":"The index of the first row to be inserted."},{"type":"Number","optional":false,"name":"lastRow","summary":"The index of the last row to be inserted."}],"name":"beforerowsinserted","summary":"Internal UI Event. Fired before rows are inserted."},{"parameters":[{"type":"Ext.grid.GridView","optional":false,"name":"view","summary":""}],"name":"refresh","summary":"Internal UI Event. Fired after the GridView's body has been refreshed."},{"parameters":[{"type":"Ext.grid.GridView","optional":false,"name":"view","summary":""},{"type":"Number","optional":false,"name":"rowIndex","summary":"The index of the row that was removed."},{"type":"Ext.data.Record","optional":false,"name":"record","summary":"The Record that was removed"}],"name":"rowremoved","summary":"Internal UI Event. Fired after a row is removed."},{"parameters":[{"type":"Ext.grid.GridView","optional":false,"name":"view","summary":""},{"type":"Number","optional":false,"name":"firstRow","summary":"The index of the first inserted."},{"type":"Number","optional":false,"name":"lastRow","summary":"The index of the last row inserted."}],"name":"rowsinserted","summary":"Internal UI Event. Fired after rows are inserted."},{"parameters":[{"type":"Ext.grid.GridView","optional":false,"name":"view","summary":""},{"type":"Number","optional":false,"name":"firstRow","summary":"The index of the row updated."},{"type":"Ext.data.record","optional":false,"name":"record","summary":"The Record backing the row updated."}],"name":"rowupdated","summary":"Internal UI Event. Fired after a row has been updated."}]},{"name":"GroupingView","fullName":"Ext.grid.GroupingView","summary":"Adds the ability for single level grouping to the grid. A {@link Ext.data.GroupingStore GroupingStore}\r\nmust be used to enable grouping.  Some grouping characteristics may also be configured at the\r\n{@link Ext.grid.Column Column level}<div class=\"mdetail-params\"><ul>\r\n<li><code>{@link Ext.grid.Column#emptyGroupText emptyGroupText}</li>\r\n<li><code>{@link Ext.grid.Column#groupable groupable}</li>\r\n<li><code>{@link Ext.grid.Column#groupName groupName}</li>\r\n<li><code>{@link Ext.grid.Column#groupRender groupRender}</li>\r\n</ul></div>\r\n<p>Sample usage:</p>\r\n<pre><code>\r\nvar grid = new Ext.grid.GridPanel({\r\n    // A groupingStore is required for a GroupingView\r\n    store: new {@link Ext.data.GroupingStore}({\r\n        autoDestroy: true,\r\n        reader: reader,\r\n        data: xg.dummyData,\r\n        sortInfo: {field: 'company', direction: 'ASC'},\r\n       {@link Ext.data.GroupingStore#groupOnSort groupOnSort}: true,\r\n       {@link Ext.data.GroupingStore#remoteGroup remoteGroup}: true,\r\n       {@link Ext.data.GroupingStore#groupField groupField}: 'industry'\r\n    }),\r\n    colModel: new {@link Ext.grid.ColumnModel}({\r\n        columns:[\r\n           {id:'company',header: 'Company', width: 60, dataIndex: 'company'},\r\n            // {@link Ext.grid.Column#groupable groupable}, {@link Ext.grid.Column#groupName groupName}, {@link Ext.grid.Column#groupRender groupRender} are also configurable at column level\r\n           {header: 'Price', renderer: Ext.util.Format.usMoney, dataIndex: 'price', {@link Ext.grid.Column#groupable groupable}: false},\r\n           {header: 'Change', dataIndex: 'change', renderer: Ext.util.Format.usMoney},\r\n           {header: 'Industry', dataIndex: 'industry'},\r\n           {header: 'Last Updated', renderer: Ext.util.Format.dateRenderer('m/d/Y'), dataIndex: 'lastChange'}\r\n        ],\r\n        defaults: {\r\n            sortable: true,\r\n            menuDisabled: false,\r\n            width: 20\r\n        }\r\n    }),\r\n\r\n    view: new Ext.grid.GroupingView({\r\n       {@link Ext.grid.GridView#forceFit forceFit}: true,\r\n        // custom grouping text template to display the number of items per group\r\n       {@link #groupTextTpl}: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? \"Items\" : \"Item\"]})'\r\n    }),\r\n\r\n    frame:true,\r\n    width: 700,\r\n    height: 450,\r\n    collapsible: true,\r\n    animCollapse: false,\r\n    title: 'Grouping Example',\r\n    iconCls: 'icon-grid',\r\n    renderTo: document.body\r\n});\r\n</code></pre>\r\n","package":"grid","definedIn":"widgets\\grid\\GroupingView.js","xtype":null,"extends":"Ext.grid.GridView","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"emptyGroupText","summary":"May also be specified per column, see {@link Ext.grid.Column}.{@link Ext.grid.Column#emptyGroupText emptyGroupText}.\r\n"},{"type":"Boolean","optional":false,"name":"enableGrouping","summary":""},{"type":"Boolean","optional":false,"name":"enableGroupingMenu","summary":""},{"type":"Boolean","optional":false,"name":"enableNoGroups","summary":""},{"type":"String","optional":false,"name":"groupByText","summary":"(defaults to 'Group By This Field').\r\n"},{"type":"String","optional":false,"name":"groupMode","summary":"raw value, <tt>'display'</tt> constructs the id using the rendered value. Defaults to <tt>'value'</tt>.\r\n"},{"type":"Function","optional":false,"name":"groupRenderer","summary":"each column.\r\n"},{"type":"String","optional":false,"name":"groupTextTpl","summary":"This is used to format an object which contains the following properties:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>group</b> : String<p class=\"sub-desc\">The <i>rendered</i> value of the group field.\r\nBy default this is the unchanged value of the group field. If a <tt><b>{@link Ext.grid.Column#groupRenderer groupRenderer}</b></tt>\r\nis specified, it is the result of a call to that function.</p></li>\r\n<li><b>gvalue</b> : Object<p class=\"sub-desc\">The <i>raw</i> value of the group field.</p></li>\r\n<li><b>text</b> : String<p class=\"sub-desc\">The configured header (as described in <tt>{@link #showGroupName})</tt>\r\nif <tt>{@link #showGroupName}</tt> is <tt>true</tt>) plus the <i>rendered</i> group field value.</p></li>\r\n<li><b>groupId</b> : String<p class=\"sub-desc\">A unique, generated ID which is applied to the\r\nView Element which contains the group.</p></li>\r\n<li><b>startRow</b> : Number<p class=\"sub-desc\">The row index of the Record which caused group change.</p></li>\r\n<li><b>rs</b> : Array<p class=\"sub-desc\">Contains a single element: The Record providing the data\r\nfor the row which caused group change.</p></li>\r\n<li><b>cls</b> : String<p class=\"sub-desc\">The generated class name string to apply to the group header Element.</p></li>\r\n<li><b>style</b> : String<p class=\"sub-desc\">The inline style rules to apply to the group header Element.</p></li>\r\n</ul></div></p>\r\nSee {@link Ext.XTemplate} for information on how to format data using a template. Possible usage:<pre><code>\r\nvar grid = new Ext.grid.GridPanel({\r\n    ...\r\n    view: new Ext.grid.GroupingView({\r\n        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? \"Items\" : \"Item\"]})'\r\n    }),\r\n});\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"hideGroupedColumn","summary":""},{"type":"Boolean","optional":false,"name":"ignoreAdd","summary":""},{"type":"Boolean","optional":false,"name":"showGroupName","summary":"in the group header line.  The prefix will consist of the <tt><b>{@link Ext.grid.Column#groupName groupName}</b></tt>\r\n(or the configured <tt><b>{@link Ext.grid.Column#header header}</b></tt> if not provided) configured in the\r\n{@link Ext.grid.Column} for each set of grouped rows (defaults to <tt>true</tt>).\r\n"},{"type":"String","optional":false,"name":"showGroupsText","summary":"(defaults to 'Show in Groups').\r\n"},{"type":"Boolean","optional":false,"name":"startCollapsed","summary":""}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"collapseAllGroups","summary":"Collapses all grouped rows.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"expandAllGroups","summary":"Expands all grouped rows.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":""}],"return":{"type":"String","summary":"The group id"},"hide":false,"private":false,"name":"getGroupId","summary":"Dynamically tries to determine the groupId of a specific value\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"expanded","summary":""}],"return":null,"hide":false,"private":false,"name":"toggleAllGroups","summary":"Toggles all groups if no value is passed, otherwise sets the expanded state of all groups to the value passed.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"groupId","summary":"The groupId assigned to the group (see getGroupId)"},{"type":"Boolean","optional":true,"name":"expanded","summary":""}],"return":null,"hide":false,"private":false,"name":"toggleGroup","summary":"Toggles the specified group if no value is passed, otherwise sets the expanded state of the group to the value passed.\r\n"}],"events":[]},{"name":"NumberColumn","fullName":"Ext.grid.NumberColumn","summary":"<p>A Column definition class which renders a numeric data field according to a {@link #format} string.  See the\r\n{@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more details.</p>\r\n","package":"grid","definedIn":"widgets\\grid\\Column.js","xtype":null,"extends":"Ext.grid.Column","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"format","summary":"A formatting string as used by {@link Ext.util.Format#number} to format a numeric value for this Column\r\n(defaults to <tt>'0,000.00'</tt>).\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"PropertyColumnModel","fullName":"Ext.grid.PropertyColumnModel","summary":"A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly.\r\n","package":"grid","definedIn":"widgets\\grid\\PropertyGrid.js","xtype":null,"extends":"Ext.grid.ColumnModel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Ext.grid.Grid","optional":false,"name":"grid","summary":"The grid this store will be bound to"},{"type":"Object","optional":false,"name":"source","summary":"The source data config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"PropertyGrid","fullName":"Ext.grid.PropertyGrid","summary":"A specialized grid implementation intended to mimic the traditional property grid as typically seen in\r\ndevelopment IDEs.  Each row in the grid represents a property of some object, and the data is stored\r\nas a set of name/value pairs in {@link Ext.grid.PropertyRecord}s.  Example usage:\r\n<pre><code>\r\nvar grid = new Ext.grid.PropertyGrid({\r\n    title: 'Properties Grid',\r\n    autoHeight: true,\r\n    width: 300,\r\n    renderTo: 'grid-ct',\r\n    source: {\r\n        \"(name)\": \"My Object\",\r\n        \"Created\": new Date(Date.parse('10/15/2006')),\r\n        \"Available\": false,\r\n        \"Version\": .01,\r\n        \"Description\": \"A test object\"\r\n    }\r\n});\r\n</code></pre>\r\n","package":"grid","definedIn":"widgets\\grid\\PropertyGrid.js","xtype":null,"extends":"Ext.grid.EditorGridPanel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The grid config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Object","optional":false,"name":"customEditors","summary":"the grid to support additional types of editable fields.  By default, the grid supports strongly-typed editing\r\nof strings, dates, numbers and booleans using built-in form editors, but any custom type can be supported and\r\nassociated with a custom input control by specifying a custom editor.  The name of the editor\r\ntype should correspond with the name of the property that will use the editor.  Example usage:\r\n<pre><code>\r\nvar grid = new Ext.grid.PropertyGrid({\r\n    ...\r\n    customEditors: {\r\n        'Start Time': new Ext.grid.GridEditor(new Ext.form.TimeField({selectOnFocus:true}))\r\n    },\r\n    source: {\r\n        'Start Time': '10:00 AM'\r\n    }\r\n});\r\n</code></pre>\r\n"},{"type":"Object","optional":false,"name":"propertyNames","summary":"If specified, the display name will be shown in the name column instead of the property name.\r\n"},{"type":"Object","optional":false,"name":"source","summary":""}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Object","summary":"The data object"},"hide":false,"private":false,"name":"getSource","summary":"Gets the source data object containing the property data.  See {@link #setSource} for details regarding the\r\nformat of the data object.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"source","summary":"The data object"}],"return":null,"hide":false,"private":false,"name":"setSource","summary":"Sets the source data object containing the property data.  The data object can contain one or more name/value\r\npairs representing all of the properties of an object to display in the grid, and this data will automatically\r\nbe loaded into the grid's {@link #store}.  The values should be supplied in the proper data type if needed,\r\notherwise string type will be assumed.  If the grid already contains data, this method will replace any\r\nexisting data.  See also the {@link #source} config value.  Example usage:\r\n<pre><code>\r\netgrid.setSource({\r\n    \"(name)\": \"My Object\",\r\n    \"Created\": new Date(Date.parse('10/15/2006')),  // date type\r\n    \"Available\": false,  // boolean type\r\n    \"Version\": .01,      // decimal type\r\n    \"Description\": \"A test object\"\r\n});\r\n</code></pre>\r\n"}],"events":[{"parameters":[{"type":"Object","optional":false,"name":"source","summary":"The source data object for the grid (corresponds to the same object passed in"},{"type":"String","optional":false,"name":"recordId","summary":"The record's id in the data store"},{"type":"Mixed","optional":false,"name":"value","summary":"The current edited property value"},{"type":"Mixed","optional":false,"name":"oldValue","summary":"The original property value prior to editing"}],"name":"beforepropertychange","summary":"Fires before a property value changes. Handlers can return false to cancel the property change (this will internally call {@link Ext.data.Record#reject} on the property's record). as the {@link #source} config property)."},{"parameters":[{"type":"Object","optional":false,"name":"source","summary":"The source data object for the grid (corresponds to the same object passed in"},{"type":"String","optional":false,"name":"recordId","summary":"The record's id in the data store"},{"type":"Mixed","optional":false,"name":"value","summary":"The current edited property value"},{"type":"Mixed","optional":false,"name":"oldValue","summary":"The original property value prior to editing"}],"name":"propertychange","summary":"Fires after a property value has changed. as the {@link #source} config property)."}]},{"name":"PropertyRecord","fullName":"Ext.grid.PropertyRecord","summary":"A specific {@link Ext.data.Record} type that represents a name/value pair and is made to work with the\r\n{@link Ext.grid.PropertyGrid}.  Typically, PropertyRecords do not need to be created directly as they can be\r\ncreated implicitly by simply using the appropriate data configs either via the {@link Ext.grid.PropertyGrid#source}\r\nconfig property or by calling {@link Ext.grid.PropertyGrid#setSource}.  However, if the need arises, these records\r\ncan also be created explicitly as shwon below.  Example usage:\r\n<pre><code>\r\nvar rec = new Ext.grid.PropertyRecord({\r\n    name: 'Birthday',\r\n    value: new Date(Date.parse('05/26/1972'))\r\n});\r\n// Add record to an already populated grid\r\netgrid.store.addSorted(rec);\r\n</code></pre>\r\n","package":"grid","definedIn":"widgets\\grid\\PropertyGrid.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A data object in the format: {name: [name], value: [value]}.  The specified value's type will be read automatically by the grid to determine the type of editor to use when displaying it."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"PropertyStore","fullName":"Ext.grid.PropertyStore","summary":"A custom wrapper for the {@link Ext.grid.PropertyGrid}'s {@link Ext.data.Store}. This class handles the mapping\r\nbetween the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format\r\nrequired for compatibility with the underlying store. Generally this class should not need to be used directly --\r\nthe grid's data should be accessed from the underlying store via the {@link #store} property.\r\n","package":"grid","definedIn":"widgets\\grid\\PropertyGrid.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Ext.grid.Grid","optional":false,"name":"grid","summary":"The grid this store will be bound to"},{"type":"Object","optional":false,"name":"source","summary":"The source data config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"RowNumberer","fullName":"Ext.grid.RowNumberer","summary":"This is a utility class that can be passed into a {@link Ext.grid.ColumnModel} as a column config that provides\r\nan automatic row numbering column.\r\n<br>Usage:<br>\r\n <pre><code>\r\n // This is a typical column config with the first column providing row numbers\r\n var colModel = new Ext.grid.ColumnModel([\r\n    new Ext.grid.RowNumberer(),\r\n   {header: \"Name\", width: 80, sortable: true},\r\n   {header: \"Code\", width: 50, sortable: true},\r\n   {header: \"Description\", width: 200, sortable: true}\r\n ]);\r\n </code></pre>\r\n","package":"grid","definedIn":"widgets\\grid\\RowNumberer.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"header","summary":"number column (defaults to '').\r\n"},{"type":"Boolean","optional":false,"name":"sortable","summary":"@hide\r\n"},{"type":"Number","optional":false,"name":"width","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"RowSelectionModel","fullName":"Ext.grid.RowSelectionModel","summary":"The default SelectionModel used by {@link Ext.grid.GridPanel}.\r\nIt supports multiple selections and keyboard selection/navigation. The objects stored\r\nas selections and returned by {@link #getSelected}, and {@link #getSelections} are\r\nthe {@link Ext.data.Record Record}s which provide the data for the selected rows.\r\n","package":"grid","definedIn":"widgets\\grid\\RowSelectionModel.js","xtype":null,"extends":"Ext.grid.AbstractSelectionModel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.grid.CheckboxSelectionModel","configOptions":[{"type":"Boolean","optional":false,"name":"moveEditorOnEnter","summary":"<tt>false</tt> to turn off moving the editor to the next row down when the enter key is pressed\r\nor the next row up when shift + enter keys are pressed.\r\n"},{"type":"Boolean","optional":false,"name":"singleSelect","summary":"<tt>true</tt> to allow selection of only one row at a time (defaults to <tt>false</tt>\r\nallowing multiple selections)\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Boolean","optional":true,"name":"fast","summary":"<tt>true</tt> to bypass the\r\nconditional checks and events described in {@link #deselectRow}."}],"return":null,"hide":false,"private":false,"name":"clearSelections","summary":"Clears all selections if the selection model\r\n{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"startRow","summary":"The index of the first row in the range"},{"type":"Number","optional":false,"name":"endRow","summary":"The index of the last row in the range"}],"return":null,"hide":false,"private":false,"name":"deselectRange","summary":"Deselects a range of rows if the selection model\r\n{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.\r\nAll rows in between startRow and endRow are also deselected.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"row","summary":"The index of the row to deselect"},{"type":"Boolean","optional":true,"name":"preventViewNotify","summary":"Specify <tt>true</tt> to\r\nprevent notifying the view (disables updating the selected appearance)"}],"return":null,"hide":false,"private":false,"name":"deselectRow","summary":"Deselects a row.  Before deselecting a row, checks if the selection model\r\n{@link Ext.grid.AbstractSelectionModel#isLocked is locked}.\r\nIf this check is satisfied the row will be deselected and followed up by\r\nfiring the {@link #rowdeselect} and {@link #selectionchange} events.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":""},{"type":"Object","optional":true,"name":"scope","summary":""}],"return":{"type":"Boolean","summary":"true if all selections were iterated"},"hide":false,"private":false,"name":"each","summary":"Calls the passed function with each selection. If the function returns\r\n<tt>false</tt>, iteration is stopped and this function returns\r\n<tt>false</tt>. Otherwise it returns <tt>true</tt>.\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getCount","summary":"Gets the number of selected rows.\r\n"},{"parameters":[],"return":{"type":"Record","summary":""},"hide":false,"private":false,"name":"getSelected","summary":"Returns the first selected record.\r\n"},{"parameters":[],"return":{"type":"Array","summary":"Array of selected records"},"hide":false,"private":false,"name":"getSelections","summary":"Returns the selected records\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasNext","summary":"Returns true if there is a next record to select\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasPrevious","summary":"Returns true if there is a previous record to select\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasSelection","summary":"Returns <tt>true</tt> if there is a selection.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The id of record to check"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isIdSelected","summary":"Returns <tt>true</tt> if the specified record id is selected.\r\n"},{"parameters":[{"type":"Number/Record","optional":false,"name":"index","summary":"The record or index of the record to check"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isSelected","summary":"Returns <tt>true</tt> if the specified row is selected.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"selectAll","summary":"Selects all rows if the selection model\r\n{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"selectFirstRow","summary":"Selects the first row in the grid.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"keepExisting","summary":"<tt>true</tt> to keep existing selections"}],"return":null,"hide":false,"private":false,"name":"selectLastRow","summary":"Select the last row.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"keepExisting","summary":"<tt>true</tt> to keep existing selections"}],"return":{"type":"Boolean","summary":"<tt>true</tt> if there is a next row, else <tt>false</tt>"},"hide":false,"private":false,"name":"selectNext","summary":"Selects the row immediately following the last selected row.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"keepExisting","summary":"<tt>true</tt> to keep existing selections"}],"return":{"type":"Boolean","summary":"<tt>true</tt> if there is a previous row, else <tt>false</tt>"},"hide":false,"private":false,"name":"selectPrevious","summary":"Selects the row that precedes the last selected row.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"startRow","summary":"The index of the first row in the range"},{"type":"Number","optional":false,"name":"endRow","summary":"The index of the last row in the range"},{"type":"Boolean","optional":true,"name":"keepExisting","summary":"True to retain existing selections"}],"return":null,"hide":false,"private":false,"name":"selectRange","summary":"Selects a range of rows if the selection model\r\n{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.\r\nAll rows in between startRow and endRow are also selected.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"records","summary":"The records to select"},{"type":"Boolean","optional":true,"name":"keepExisting","summary":"<tt>true</tt> to keep existing selections"}],"return":null,"hide":false,"private":false,"name":"selectRecords","summary":"Select records.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"row","summary":"The index of the row to select"},{"type":"Boolean","optional":true,"name":"keepExisting","summary":"<tt>true</tt> to keep existing selections"},{"type":"Boolean","optional":true,"name":"preventViewNotify","summary":"Specify <tt>true</tt> to\r\nprevent notifying the view (disables updating the selected appearance)"}],"return":null,"hide":false,"private":false,"name":"selectRow","summary":"Selects a row.  Before selecting a row, checks if the selection model\r\n{@link Ext.grid.AbstractSelectionModel#isLocked is locked} and fires the\r\n{@link #beforerowselect} event.  If these checks are satisfied the row\r\nwill be selected and followed up by  firing the {@link #rowselect} and\r\n{@link #selectionchange} events.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"rows","summary":"Array of the indexes of the row to select"},{"type":"Boolean","optional":true,"name":"keepExisting","summary":"<tt>true</tt> to keep\r\nexisting selections (defaults to <tt>false</tt>)"}],"return":null,"hide":false,"private":false,"name":"selectRows","summary":"Selects multiple rows.\r\n"}],"events":[{"parameters":[{"type":"SelectionModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":"The index to be selected"},{"type":"Boolean","optional":false,"name":"keepExisting","summary":"False if other selections will be cleared"},{"type":"Record","optional":false,"name":"record","summary":"The record to be selected"}],"name":"beforerowselect","summary":"Fires before a row is selected, return false to cancel the selection."},{"parameters":[{"type":"SelectionModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":""},{"type":"Record","optional":false,"name":"record","summary":""}],"name":"rowdeselect","summary":"Fires when a row is deselected. To prevent deselection {@link Ext.grid.AbstractSelectionModel#lock lock the selections}."},{"parameters":[{"type":"SelectionModel","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"rowIndex","summary":"The selected index"},{"type":"Ext.data.Record","optional":false,"name":"r","summary":"The selected record"}],"name":"rowselect","summary":"Fires when a row is selected."},{"parameters":[{"type":"SelectionModel","optional":false,"name":"el","summary":"this"}],"name":"selectionchange","summary":"Fires when the selection changes."}]},{"name":"TemplateColumn","fullName":"Ext.grid.TemplateColumn","summary":"<p>A Column definition class which renders a value by processing a {@link Ext.data.Record Record}'s\r\n{@link Ext.data.Record#data data} using a {@link #tpl configured} {@link Ext.XTemplate XTemplate}.\r\nSee the {@link Ext.grid.Column#xtype xtype} config option of {@link Ext.grid.Column} for more\r\ndetails.</p>\r\n","package":"grid","definedIn":"widgets\\grid\\Column.js","xtype":null,"extends":"Ext.grid.Column","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String/XTemplate","optional":false,"name":"tpl","summary":"An {@link Ext.XTemplate XTemplate}, or an XTemplate <i>definition string</i> to use to process a\r\n{@link Ext.data.Record Record}'s {@link Ext.data.Record#data data} to produce a column's rendered value.\r\n"}],"properties":[],"methods":[],"events":[]}]},{"name":"layout","fullName":"layout","parentFullName":"Ext","packages":[],"classes":[{"name":"AbsoluteLayout","fullName":"Ext.layout.AbsoluteLayout","summary":"<p>This is a layout that inherits the anchoring of <b>{@link Ext.layout.AnchorLayout}</b> and adds the\r\nability for x/y positioning using the standard x and y component config options.</p>\r\n<p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>\r\nconfiguration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>\r\n<p>Example usage:</p>\r\n<pre><code>\r\nvar form = new Ext.form.FormPanel({\r\n    title: 'Absolute Layout',\r\n    layout:'absolute',\r\n    layoutConfig: {\r\n        // layout-specific configs go here\r\n        extraCls: 'x-abs-layout-item',\r\n    },\r\n    baseCls: 'x-plain',\r\n    url:'save-form.php',\r\n    defaultType: 'textfield',\r\n    items: [{\r\n        x: 0,\r\n        y: 5,\r\n        xtype:'label',\r\n        text: 'Send To:'\r\n    },{\r\n        x: 60,\r\n        y: 0,\r\n        name: 'to',\r\n        anchor:'100%'  // anchor width by percentage\r\n    },{\r\n        x: 0,\r\n        y: 35,\r\n        xtype:'label',\r\n        text: 'Subject:'\r\n    },{\r\n        x: 60,\r\n        y: 30,\r\n        name: 'subject',\r\n        anchor: '100%'  // anchor width by percentage\r\n    },{\r\n        x:0,\r\n        y: 60,\r\n        xtype: 'textarea',\r\n        name: 'msg',\r\n        anchor: '100% 100%'  // anchor width and height\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\AbsoluteLayout.js","xtype":null,"extends":"Ext.layout.AnchorLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"AccordionLayout","fullName":"Ext.layout.AccordionLayout","summary":"<p>This is a layout that contains multiple panels in an expandable accordion style such that only\r\n<b>one panel can be open at any given time</b>.  Each panel has built-in support for expanding and collapsing.\r\n<p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>\r\nconfiguration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>\r\n<p>Example usage:</p>\r\n<pre><code>\r\nvar accordion = new Ext.Panel({\r\n    title: 'Accordion Layout',\r\n    layout:'accordion',\r\n    defaults: {\r\n        // applied to each contained panel\r\n        bodyStyle: 'padding:15px'\r\n    },\r\n    layoutConfig: {\r\n        // layout-specific configs go here\r\n        titleCollapse: false,\r\n        animate: true,\r\n        activeOnTop: true\r\n    },\r\n    items: [{\r\n        title: 'Panel 1',\r\n        html: '&lt;p&gt;Panel content!&lt;/p&gt;'\r\n    },{\r\n        title: 'Panel 2',\r\n        html: '&lt;p&gt;Panel content!&lt;/p&gt;'\r\n    },{\r\n        title: 'Panel 3',\r\n        html: '&lt;p&gt;Panel content!&lt;/p&gt;'\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\AccordionLayout.js","xtype":null,"extends":"Ext.layout.FitLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"activeOnTop","summary":"True to swap the position of each panel as it is expanded so that it becomes the first item in the container,\r\nfalse to keep the panels in the rendered order. <b>This is NOT compatible with \"animate:true\"</b> (defaults to false).\r\n"},{"type":"Boolean","optional":false,"name":"animate","summary":"True to slide the contained panels open and closed during expand/collapse using animation, false to open and\r\nclose directly with no animation (defaults to false).  Note: to defer to the specific config setting of each\r\ncontained panel for this property, set this to undefined at the layout level.\r\n"},{"type":"Boolean","optional":false,"name":"autoWidth","summary":"True to set each contained item's width to 'auto', false to use the item's current width (defaults to true).\r\nNote that some components, in particular the {@link Ext.grid.GridPanel grid}, will not function properly within\r\nlayouts if they have auto width, so in such cases this config should be set to false.\r\n"},{"type":"Boolean","optional":false,"name":"collapseFirst","summary":"True to make sure the collapse/expand toggle button always renders first (to the left of) any other tools\r\nin the contained panels' title bars, false to render it last (defaults to false).\r\n"},{"type":"Boolean","optional":false,"name":"fill","summary":"True to adjust the active item's height to fill the available space in the container, false to use the\r\nitem's current height, or auto height if not explicitly set (defaults to true).\r\n"},{"type":"Boolean","optional":false,"name":"hideCollapseTool","summary":"True to hide the contained panels' collapse/expand toggle buttons, false to display them (defaults to false).\r\nWhen set to true, {@link #titleCollapse} should be true also.\r\n"},{"type":"Boolean","optional":false,"name":"sequence","summary":"<b>Experimental</b>. If animate is set to true, this will result in each animation running in sequence.\r\n"},{"type":"Boolean","optional":false,"name":"titleCollapse","summary":"True to allow expand/collapse of each contained panel by clicking anywhere on the title bar, false to allow\r\nexpand/collapse only when the toggle tool button is clicked (defaults to true).  When set to false,\r\n{@link #hideCollapseTool} should be false also.\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"String/Number","optional":false,"name":"item","summary":"The string component id or numeric index of the item to activate"}],"return":null,"hide":false,"private":false,"name":"setActiveItem","summary":"Sets the active (expanded) item in the layout.\r\n"}],"events":[]},{"name":"AnchorLayout","fullName":"Ext.layout.AnchorLayout","summary":"<p>This is a layout that enables anchoring of contained elements relative to the container's dimensions.\r\nIf the container is resized, all anchored items are automatically rerendered according to their\r\n<b><tt>{@link #anchor}</tt></b> rules.</p>\r\n<p>This class is intended to be extended or created via the layout:'anchor' {@link Ext.Container#layout}\r\nconfig, and should generally not need to be created directly via the new keyword.</p>\r\n<p>AnchorLayout does not have any direct config options (other than inherited ones). By default,\r\nAnchorLayout will calculate anchor measurements based on the size of the container itself. However, the\r\ncontainer using the AnchorLayout can supply an anchoring-specific config property of <b>anchorSize</b>.\r\nIf anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating\r\netanchor measurements based on it instead, allowing the container to be sized independently of the anchoring\r\nlogic if necessary.  For example:</p>\r\n<pre><code>\r\nvar viewport = new Ext.Viewport({\r\n    layout:'anchor',\r\n    anchorSize: {width:800, height:600},\r\n    items:[{\r\n        title:'Item 1',\r\n        html:'Content 1',\r\n        width:800,\r\n        anchor:'right 20%'\r\n    },{\r\n        title:'Item 2',\r\n        html:'Content 2',\r\n        width:300,\r\n        anchor:'50% 30%'\r\n    },{\r\n        title:'Item 3',\r\n        html:'Content 3',\r\n        width:600,\r\n        anchor:'-100 50%'\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\AnchorLayout.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.layout.AbsoluteLayout,Ext.layout.FormLayout","configOptions":[{"type":"String","optional":false,"name":"anchor","summary":"<p>This configuation option is to be applied to <b>child <tt>items</tt></b> of a container managed by\r\nthis layout (ie. configured with <tt>layout:'anchor'</tt>).</p><br/>\r\n\r\n<p>This value is what tells the layout how an item should be anchored to the container. <tt>items</tt>\r\nadded to an AnchorLayout accept an anchoring-specific config property of <b>anchor</b> which is a string\r\ncontaining two values: the horizontal anchor value and the vertical anchor value (for example, '100% 50%').\r\nThe following types of anchor values are supported:<div class=\"mdetail-params\"><ul>\r\n\r\n<li><b>Percentage</b> : Any value between 1 and 100, expressed as a percentage.<div class=\"sub-desc\">\r\nThe first anchor is the percentage width that the item should take up within the container, and the\r\nsecond is the percentage height.  For example:<pre><code>\r\n// two values specified\r\netanchor: '100% 50%' // render item complete width of the container and\r\n                   // 1/2 height of the container\r\n// one value specified\r\netanchor: '100%'     // the width value; the height will default to auto\r\n</code></pre></div></li>\r\n\r\n<li><b>Offsets</b> : Any positive or negative integer value.<div class=\"sub-desc\">\r\nThis is a raw adjustment where the first anchor is the offset from the right edge of the container,\r\nand the second is the offset from the bottom edge. For example:<pre><code>\r\n// two values specified\r\netanchor: '-50 -100' // render item the complete width of the container\r\n                   // minus 50 pixels and\r\n                   // the complete height minus 100 pixels.\r\n// one value specified\r\netanchor: '-50'      // anchor value is assumed to be the right offset value\r\n                   // bottom offset will default to 0\r\n</code></pre></div></li>\r\n\r\n<li><b>Sides</b> : Valid values are <tt>'right'</tt> (or <tt>'r'</tt>) and <tt>'bottom'</tt>\r\n(or <tt>'b'</tt>).<div class=\"sub-desc\">\r\nEither the container must have a fixed size or an anchorSize config value defined at render time in\r\norder for these to have any effect.</div></li>\r\n\r\n<li><b>Mixed</b> : <div class=\"sub-desc\">\r\nAnchor values can also be mixed as needed.  For example, to render the width offset from the container\r\nright edge by 50 pixels and 75% of the container's height use:\r\n<pre><code>\r\netanchor: '-50 75%' \r\n</code></pre></div></li>\r\n\r\n\r\n</ul></div>\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"BorderLayout","fullName":"Ext.layout.BorderLayout","summary":"<p>This is a multi-pane, application-oriented UI layout style that supports multiple\r\nnested panels, automatic {@link Ext.layout.BorderLayout.Region#split split} bars between\r\n{@link Ext.layout.BorderLayout.Region#BorderLayout.Region regions} and built-in\r\n{@link Ext.layout.BorderLayout.Region#collapsible expanding and collapsing} of regions.</p>\r\n<p>This class is intended to be extended or created via the <tt>layout:'border'</tt>\r\n{@link Ext.Container#layout} config, and should generally not need to be created directly\r\nvia the new keyword.</p>\r\n<p>BorderLayout does not have any direct config options (other than inherited ones).\r\nAll configuration options available for customizing the BorderLayout are at the\r\n{@link Ext.layout.BorderLayout.Region} and {@link Ext.layout.BorderLayout.SplitRegion}\r\nlevels.</p>\r\n<p>Example usage:</p>\r\n<pre><code>\r\nvar myBorderPanel = new Ext.Panel({\r\n   {@link Ext.Component#renderTo renderTo}: document.body,\r\n   {@link Ext.BoxComponent#width width}: 700,\r\n   {@link Ext.BoxComponent#height height}: 500,\r\n   {@link Ext.Panel#title title}: 'Border Layout',\r\n   {@link Ext.Container#layout layout}: 'border',\r\n   {@link Ext.Container#items items}: [{\r\n       {@link Ext.Panel#title title}: 'South Region is resizable',\r\n       {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}: 'south',     // position for region\r\n       {@link Ext.BoxComponent#height height}: 100,\r\n       {@link Ext.layout.BorderLayout.Region#split split}: true,         // enable resizing\r\n       {@link Ext.SplitBar#minSize minSize}: 75,         // defaults to {@link Ext.layout.BorderLayout.Region#minHeight 50} \r\n       {@link Ext.SplitBar#maxSize maxSize}: 150,\r\n       {@link Ext.layout.BorderLayout.Region#margins margins}: '0 5 5 5'\r\n    },{\r\n        // xtype: 'panel' implied by default\r\n       {@link Ext.Panel#title title}: 'West Region is collapsible',\r\n       {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}:'west',\r\n       {@link Ext.layout.BorderLayout.Region#margins margins}: '5 0 0 5',\r\n       {@link Ext.BoxComponent#width width}: 200,\r\n       {@link Ext.layout.BorderLayout.Region#collapsible collapsible}: true,   // make collapsible\r\n       {@link Ext.layout.BorderLayout.Region#cmargins cmargins}: '5 5 0 5', // adjust top margin when collapsed\r\n       {@link Ext.Component#id id}: 'west-region-container',\r\n       {@link Ext.Container#layout layout}: 'fit',\r\n       {@link Ext.Panel#unstyled unstyled}: true\r\n    },{\r\n       {@link Ext.Panel#title title}: 'Center Region',\r\n       {@link Ext.layout.BorderLayout.Region#BorderLayout.Region region}: 'center',     // center region is required, no width/height specified\r\n       {@link Ext.Component#xtype xtype}: 'container',\r\n       {@link Ext.Container#layout layout}: 'fit',\r\n       {@link Ext.layout.BorderLayout.Region#margins margins}: '5 5 0 0'\r\n    }]\r\n});\r\n</code></pre>\r\n<p><b><u>Notes</u></b>:</p><div class=\"mdetail-params\"><ul>\r\n<li>Any container using the BorderLayout <b>must</b> have a child item with <tt>region:'center'</tt>.\r\nThe child item in the center region will always be resized to fill the remaining space not used by\r\nthe other regions in the layout.</li>\r\n<li>Any child items with a region of <tt>west</tt> or <tt>east</tt> must have <tt>width</tt> defined\r\n(an integer representing the number of pixels that the region should take up).</li>\r\n<li>Any child items with a region of <tt>north</tt> or <tt>south</tt> must have <tt>height</tt> defined.</li>\r\n<li>The regions of a BorderLayout are <b>fixed at render time</b> and thereafter, its child Components may not be removed or added</b>.  To add/remove\r\nComponents within a BorderLayout, have them wrapped by an additional Container which is directly\r\nmanaged by the BorderLayout.  If the region is to be collapsible, the Container used directly\r\nby the BorderLayout manager should be a Panel.  In the following example a Container (an Ext.Panel)\r\nis added to the west region:\r\n<div style=\"margin-left:16px\"><pre><code>\r\nwrc = {@link Ext#getCmp Ext.getCmp}('west-region-container');\r\nwrc.{@link Ext.Panel#removeAll removeAll}();\r\nwrc.{@link Ext.Container#add add}({\r\n    title: 'Added Panel',\r\n    html: 'Some content'\r\n});\r\nwrc.{@link Ext.Container#doLayout doLayout}();\r\n</code></pre></div>\r\n</li>\r\n<li> To reference a {@link Ext.layout.BorderLayout.Region Region}:\r\n<div style=\"margin-left:16px\"><pre><code>\r\nwr = myBorderPanel.layout.west;\r\n</code></pre></div>\r\n</li>\r\n</ul></div>\r\n","package":"layout","definedIn":"widgets\\layout\\BorderLayout.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"BorderLayout.Region","fullName":"Ext.layout.BorderLayout.Region","summary":"<p>This is a region of a {@link Ext.layout.BorderLayout BorderLayout} that acts as a subcontainer\r\nwithin the layout.  Each region has its own {@link Ext.layout.ContainerLayout layout} that is\r\nindependent of other regions and the containing BorderLayout, and can be any of the\r\n{@link Ext.layout.ContainerLayout valid Ext layout types}.</p>\r\n<p>Region size is managed automatically and cannot be changed by the user -- for\r\n{@link #split resizable regions}, see {@link Ext.layout.BorderLayout.SplitRegion}.</p>\r\n","package":"layout","definedIn":"widgets\\layout\\BorderLayout.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Layout","optional":false,"name":"layout","summary":"The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region."},{"type":"Object","optional":false,"name":"config","summary":"The configuration options"},{"type":"String","optional":false,"name":"position","summary":"The region position.  Valid values are: <tt>north</tt>, <tt>south</tt>, <tt>east</tt>, <tt>west</tt> and <tt>center</tt>.  Every {@link Ext.layout.BorderLayout BorderLayout} <b>must have a center region</b> for the primary content -- all other regions are optional."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Region."},"subclasses":"Ext.layout.BorderLayout.SplitRegion","configOptions":[{"type":"Boolean","optional":false,"name":"animFloat","summary":"When a collapsed region's bar is clicked, the region's panel will be displayed as a floated\r\npanel that will close again once the user mouses out of that panel (or clicks out if\r\n<tt>{@link #autoHide} = false</tt>).  Setting <tt>{@link #animFloat} = false</tt> will\r\nprevent the open and close of these floated panels from being animated (defaults to <tt>true</tt>).\r\n"},{"type":"Boolean","optional":false,"name":"autoHide","summary":"When a collapsed region's bar is clicked, the region's panel will be displayed as a floated\r\npanel.  If <tt>autoHide = true</tt>, the panel will automatically hide after the user mouses\r\nout of the panel.  If <tt>autoHide = false</tt>, the panel will continue to display until the\r\nuser clicks outside of the panel (defaults to <tt>true</tt>).\r\n"},{"type":"Object","optional":false,"name":"cmargins","summary":"An object containing margins to apply to the region when in the collapsed state in the\r\nformat:<pre><code>\r\n{\r\n    top: (top margin),\r\n    right: (right margin),\r\n    bottom: (bottom margin),\r\n    left: (left margin)\r\n}</code></pre>\r\n<p>May also be a string containing space-separated, numeric margin values. The order of the\r\nsides associated with each value matches the way CSS processes margin values.</p>\r\n<p><ul>\r\n<li>If there is only one value, it applies to all sides.</li>\r\n<li>If there are two values, the top and bottom borders are set to the first value and the\r\nright and left are set to the second.</li>\r\n<li>If there are three values, the top is set to the first value, the left and right are set\r\nto the second, and the bottom is set to the third.</li>\r\n<li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>\r\n</ul></p>\r\n"},{"type":"String","optional":false,"name":"collapseMode","summary":"<tt>collapseMode</tt> supports two configuration values:<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>undefined</tt></b> (default)<div class=\"sub-desc\">By default, {@link #collapsible}\r\nregions are collapsed by clicking the expand/collapse tool button that renders into the region's\r\ntitle bar.</div></li>\r\n<li><b><tt>'mini'</tt></b><div class=\"sub-desc\">Optionally, when <tt>collapseMode</tt> is set to\r\n<tt>'mini'</tt> the region's split bar will also display a small collapse button in the center of\r\nthe bar. In <tt>'mini'</tt> mode the region will collapse to a thinner bar than in normal mode.\r\n</div></li>\r\n</ul></div></p>\r\n<p><b>Note</b>: if a collapsible region does not have a title bar, then set <tt>collapseMode =\r\n'mini'</tt> and <tt>{@link #split} = true</tt> in order for the region to be {@link #collapsible}\r\nby the user as the expand/collapse tool button (that would go in the title bar) will not be rendered.</p>\r\n<p>See also <tt>{@link #cmargins}</tt>.</p>\r\n"},{"type":"Boolean","optional":false,"name":"collapsible","summary":"<p><tt>true</tt> to allow the user to collapse this region (defaults to <tt>false</tt>).  If\r\n<tt>true</tt>, an expand/collapse tool button will automatically be rendered into the title\r\nbar of the region, otherwise the button will not be shown.</p>\r\n<p><b>Note</b>: that a title bar is required to display the collapse/expand toggle button -- if\r\nno <tt>title</tt> is specified for the region's panel, the region will only be collapsible if\r\n<tt>{@link #collapseMode} = 'mini'</tt> and <tt>{@link #split} = true</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"floatable","summary":"<tt>true</tt> to allow clicking a collapsed region's bar to display the region's panel floated\r\nabove the layout, <tt>false</tt> to force the user to fully expand a collapsed region by\r\nclicking the expand button to see it again (defaults to <tt>true</tt>).\r\n"},{"type":"Object","optional":false,"name":"margins","summary":"An object containing margins to apply to the region when in the expanded state in the\r\nformat:<pre><code>\r\n{\r\n    top: (top margin),\r\n    right: (right margin),\r\n    bottom: (bottom margin),\r\n    left: (left margin)\r\n}</code></pre>\r\n<p>May also be a string containing space-separated, numeric margin values. The order of the\r\nsides associated with each value matches the way CSS processes margin values:</p>\r\n<p><div class=\"mdetail-params\"><ul>\r\n<li>If there is only one value, it applies to all sides.</li>\r\n<li>If there are two values, the top and bottom borders are set to the first value and the\r\nright and left are set to the second.</li>\r\n<li>If there are three values, the top is set to the first value, the left and right are set\r\nto the second, and the bottom is set to the third.</li>\r\n<li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>\r\n</ul></div></p>\r\n<p>Defaults to:</p><pre><code>\r\n{top:0, right:0, bottom:0, left:0}\r\n</code></pre>\r\n"},{"type":"Number","optional":false,"name":"minHeight","summary":"The minimum allowable height in pixels for this region (defaults to <tt>50</tt>)\r\n<tt>maxHeight</tt> may also be specified.</p><br>\r\n<p><b>Note</b>: setting the <tt>{@link Ext.SplitBar#minSize minSize}</tt> /\r\n<tt>{@link Ext.SplitBar#maxSize maxSize}</tt> supersedes any specified\r\n<tt>minHeight</tt> / <tt>maxHeight</tt>.</p>\r\n"},{"type":"Number","optional":false,"name":"minWidth","summary":"<p>The minimum allowable width in pixels for this region (defaults to <tt>50</tt>).\r\n<tt>maxWidth</tt> may also be specified.</p><br>\r\n<p><b>Note</b>: setting the <tt>{@link Ext.SplitBar#minSize minSize}</tt> /\r\n<tt>{@link Ext.SplitBar#maxSize maxSize}</tt> supersedes any specified\r\n<tt>minWidth</tt> / <tt>maxWidth</tt>.</p>\r\n"},{"type":"Boolean","optional":false,"name":"split","summary":"<p><tt>true</tt> to create a {@link Ext.layout.BorderLayout.SplitRegion SplitRegion} and\r\ndisplay a 5px wide {@link Ext.SplitBar} between this region and its neighbor, allowing the user to\r\nresize the regions dynamically.  Defaults to <tt>false</tt> creating a\r\n{@link Ext.layout.BorderLayout.Region Region}.</p><br>\r\n<p><b>Notes</b>:</p><div class=\"mdetail-params\"><ul>\r\n<li>this configuration option is ignored if <tt>region='center'</tt></li>\r\n<li>when <tt>split == true</tt>, it is common to specify a\r\n<tt>{@link Ext.SplitBar#minSize minSize}</tt> and <tt>{@link Ext.SplitBar#maxSize maxSize}</tt>\r\nfor the {@link Ext.BoxComponent BoxComponent} representing the region. These are not native\r\nconfigs of {@link Ext.BoxComponent BoxComponent}, and are used only by this class.</li>\r\n<li>if <tt>{@link #collapseMode} = 'mini'</tt> requires <tt>split = true</tt> to reserve space\r\nfor the collapse tool</tt></li>\r\n</ul></div>\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"isCollapsed","summary":"True if this region is collapsed. Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"layout","summary":"This region's layout.  Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"panel","summary":"This region's panel.  Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"position","summary":"This region's layout position (north, south, east, west or center).  Read-only.\r\n"}],"methods":[{"parameters":[],"return":{"type":"Object","summary":"An object containing the element's margins: <tt>{left: (left"},"hide":false,"private":false,"name":"getMargins","summary":"Returns the current margins for this region.  If the region is collapsed, the\r\n{@link #cmargins} (collapsed margins) value will be returned, otherwise the\r\n{@link #margins} value will be returned.\r\nmargin), top: (top margin), right: (right margin), bottom: (bottom margin)}</tt>\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The minimum height"},"hide":false,"private":false,"name":"getMinHeight","summary":"Returns the minimum allowable height for this region.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The minimum width"},"hide":false,"private":false,"name":"getMinWidth","summary":"Returns the minimum allowable width for this region.\r\n"},{"parameters":[],"return":{"type":"Object","summary":"An object containing the element's size: <tt>{width: (element width),"},"hide":false,"private":false,"name":"getSize","summary":"Returns the current size of this region.  If the region is collapsed, the size of the\r\ncollapsedEl will be returned, otherwise the size of the region's panel will be returned.\r\nheight: (element height)}</tt>\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isVisible","summary":"True if this region is currently visible, else false.\r\n"},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"panel","summary":"The new panel"}],"return":null,"hide":false,"private":false,"name":"setPanel","summary":"Sets the specified panel as the container element for this region.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"slideIn","summary":"If this Region is {@link #floatable}, and this Region has been slid into floating visibility, then this method slides\r\nthis region back into its collapsed state.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"slideOut","summary":"If this Region is {@link #floatable}, this method slides this Region into full visibility <i>over the top\r\nof the center Region</i> where it floats until either {@link #slideIn} is called, or other regions of the layout\r\nare clicked, or the mouse exits the Region.\r\n"}],"events":[]},{"name":"BorderLayout.SplitRegion","fullName":"Ext.layout.BorderLayout.SplitRegion","summary":"<p>This is a specialized type of {@link Ext.layout.BorderLayout.Region BorderLayout region} that\r\nhas a built-in {@link Ext.SplitBar} for user resizing of regions.  The movement of the split bar\r\nis configurable to move either {@link #tickSize smooth or incrementally}.</p>\r\n","package":"layout","definedIn":"widgets\\layout\\BorderLayout.js","xtype":null,"extends":"Ext.layout.BorderLayout.Region","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Layout","optional":false,"name":"layout","summary":"The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region."},{"type":"Object","optional":false,"name":"config","summary":"The configuration options"},{"type":"String","optional":false,"name":"position","summary":"The region position.  Valid values are: north, south, east, west and center.  Every BorderLayout must have a center region for the primary content -- all other regions are optional."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new SplitRegion."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"collapsibleSplitTip","summary":"The tooltip to display when the user hovers over a\r\n{@link Ext.layout.BorderLayout.Region#collapsible collapsible} region's split bar\r\n(defaults to \"Drag to resize. Double click to hide.\"). Only applies if\r\n<tt>{@link #useSplitTips} = true</tt>.\r\n"},{"type":"String","optional":false,"name":"splitTip","summary":"The tooltip to display when the user hovers over a\r\n{@link Ext.layout.BorderLayout.Region#collapsible non-collapsible} region's split bar\r\n(defaults to <tt>\"Drag to resize.\"</tt>).  Only applies if\r\n<tt>{@link #useSplitTips} = true</tt>.\r\n"},{"type":"Number","optional":false,"name":"tickSize","summary":"The increment, in pixels by which to move this Region's {@link Ext.SplitBar SplitBar}.\r\nBy default, the {@link Ext.SplitBar SplitBar} moves smoothly.\r\n"},{"type":"Boolean","optional":false,"name":"useSplitTips","summary":"<tt>true</tt> to display a tooltip when the user hovers over a region's split bar\r\n(defaults to <tt>false</tt>).  The tooltip text will be the value of either\r\n<tt>{@link #splitTip}</tt> or <tt>{@link #collapsibleSplitTip}</tt> as appropriate.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Ext.SplitBar","summary":"The split bar"},"hide":false,"private":false,"name":"getSplitBar","summary":"Returns a reference to the split bar in use by this region.\r\n"}],"events":[]},{"name":"BoxLayout","fullName":"Ext.layout.BoxLayout","summary":"<p>Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly.</p>\r\n","package":"layout","definedIn":"widgets\\layout\\BoxLayout.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.layout.HBoxLayout,Ext.layout.VBoxLayout","configOptions":[{"type":"Object","optional":false,"name":"defaultMargins","summary":"<p>If the individual contained items do not have a <tt>margins</tt>\r\nproperty specified, the default margins from this property will be\r\napplied to each item.</p>\r\n<br><p>This property may be specified as an object containing margins\r\nto apply in the format:</p><pre><code>\r\n{\r\n    top: (top margin),\r\n    right: (right margin),\r\n    bottom: (bottom margin),\r\n    left: (left margin)\r\n}</code></pre>\r\n<p>This property may also be specified as a string containing\r\nspace-separated, numeric margin values. The order of the sides associated\r\nwith each value matches the way CSS processes margin values:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li>If there is only one value, it applies to all sides.</li>\r\n<li>If there are two values, the top and bottom borders are set to the\r\nfirst value and the right and left are set to the second.</li>\r\n<li>If there are three values, the top is set to the first value, the left\r\nand right are set to the second, and the bottom is set to the third.</li>\r\n<li>If there are four values, they apply to the top, right, bottom, and\r\nleft, respectively.</li>\r\n</ul></div>\r\n<p>Defaults to:</p><pre><code>\r\n{top:0, right:0, bottom:0, left:0}\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"padding","summary":"Defaults to <tt>'0'</tt>. Sets the padding to be applied to all child items managed by this\r\ncontainer's layout.\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"CardLayout","fullName":"Ext.layout.CardLayout","summary":"<p>This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be\r\nvisible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.\r\nThis class is intended to be extended or created via the layout:'card' {@link Ext.Container#layout} config,\r\nand should generally not need to be created directly via the new keyword.</p>\r\n<p>The CardLayout's focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,\r\nthe only way to move from one Component to the next is by calling setActiveItem, passing the id or index of\r\nthe next panel to display.  The layout itself does not provide a user interface for handling this navigation,\r\nso that functionality must be provided by the developer.</p>\r\n<p>In the following example, a simplistic wizard setup is demonstrated.  A button bar is added\r\nto the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a\r\ncommon navigation routine -- for this example, the implementation of that routine has been ommitted since\r\nit can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a\r\ncompletely different implementation.  For serious implementations, a better approach would be to extend\r\nCardLayout to provide the custom functionality needed.  Example usage:</p>\r\n<pre><code>\r\nvar navHandler = function (direction) {\r\n    // This routine could contain business logic required to manage the navigation steps.\r\n    // It would call setActiveItem as needed, manage navigation button state, handle any\r\n    // branching logic that might be required, handle alternate actions like cancellation\r\n    // or finalization, etc.  A complete wizard implementation could get pretty\r\n    // sophisticated depending on the complexity required, and should probably be\r\n    // done as a subclass of CardLayout in a real-world implementation.\r\n};\r\n\r\nvar card = new Ext.Panel({\r\n    title: 'Example Wizard',\r\n    layout:'card',\r\n    activeItem: 0, // make sure the active item is set on the container config!\r\n    bodyStyle: 'padding:15px',\r\n    defaults: {\r\n        // applied to each contained panel\r\n        border:false\r\n    },\r\n    // just an example of one possible navigation scheme, using buttons\r\n    bbar: [\r\n       {\r\n            id: 'move-prev',\r\n            text: 'Back',\r\n            handler: navHandler.createDelegate(this, [-1]),\r\n            disabled: true\r\n        },\r\n        '->', // greedy spacer so that the buttons are aligned to each side\r\n       {\r\n            id: 'move-next',\r\n            text: 'Next',\r\n            handler: navHandler.createDelegate(this, [1])\r\n        }\r\n    ],\r\n    // the panels (or \"cards\") within the layout\r\n    items: [{\r\n        id: 'card-0',\r\n        html: '&lt;h1&gt;Welcome to the Wizard!&lt;/h1&gt;&lt;p&gt;Step 1 of 3&lt;/p&gt;'\r\n    },{\r\n        id: 'card-1',\r\n        html: '&lt;p&gt;Step 2 of 3&lt;/p&gt;'\r\n    },{\r\n        id: 'card-2',\r\n        html: '&lt;h1&gt;Congratulations!&lt;/h1&gt;&lt;p&gt;Step 3 of 3 - Complete&lt;/p&gt;'\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\CardLayout.js","xtype":null,"extends":"Ext.layout.FitLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"deferredRender","summary":"True to render each contained item at the time it becomes active, false to render all contained items\r\nas soon as the layout is rendered (defaults to false).  If there is a significant amount of content or\r\na lot of heavy controls being rendered into panels that are not displayed by default, setting this to\r\ntrue might improve performance.\r\n"},{"type":"Boolean","optional":false,"name":"layoutOnCardChange","summary":"True to force a layout of the active item when the active card is changed. Defaults to false.\r\n"},{"type":"Boolean","optional":false,"name":"renderHidden","summary":""}],"properties":[],"methods":[{"parameters":[{"type":"String/Number","optional":false,"name":"item","summary":"The string component id or numeric index of the item to activate"}],"return":null,"hide":false,"private":false,"name":"setActiveItem","summary":"Sets the active (visible) item in the layout.\r\n"}],"events":[]},{"name":"ColumnLayout","fullName":"Ext.layout.ColumnLayout","summary":"<p>This is the layout style of choice for creating structural layouts in a multi-column format where the width of\r\neach column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.\r\nThis class is intended to be extended or created via the layout:'column' {@link Ext.Container#layout} config,\r\nand should generally not need to be created directly via the new keyword.</p>\r\n<p>ColumnLayout does not have any direct config options (other than inherited ones), but it does support a\r\nspecific config property of <b><tt>columnWidth</tt></b> that can be included in the config of any panel added to it.  The\r\nlayout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.\r\nIf width or columnWidth is not specified for a given panel, its width will default to the panel's width (or auto).</p>\r\n<p>The width property is always evaluated as pixels, and must be a number greater than or equal to 1.\r\nThe columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and\r\nless than 1 (e.g., .25).</p>\r\n<p>The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the\r\nset of contained panels.  During the first layout pass, all panels that either have a fixed width or none\r\nspecified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second\r\npass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on\r\nthe total <b>remaining</b> container width.  In other words, percentage width panels are designed to fill the space\r\nleft over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns\r\nwith different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your\r\nlayout may not render as expected.  Example usage:</p>\r\n<pre><code>\r\n// All columns are percentages -- they must add up to 1\r\nvar p = new Ext.Panel({\r\n    title: 'Column Layout - Percentage Only',\r\n    layout:'column',\r\n    items: [{\r\n        title: 'Column 1',\r\n        columnWidth: .25 \r\n    },{\r\n        title: 'Column 2',\r\n        columnWidth: .6\r\n    },{\r\n        title: 'Column 3',\r\n        columnWidth: .15\r\n    }]\r\n});\r\n\r\n// Mix of width and columnWidth -- all columnWidth values must add up\r\n// to 1. The first column will take up exactly 120px, and the last two\r\n// columns will fill the remaining container width.\r\nvar p = new Ext.Panel({\r\n    title: 'Column Layout - Mixed',\r\n    layout:'column',\r\n    items: [{\r\n        title: 'Column 1',\r\n        width: 120\r\n    },{\r\n        title: 'Column 2',\r\n        columnWidth: .8\r\n    },{\r\n        title: 'Column 3',\r\n        columnWidth: .2\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\ColumnLayout.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"ContainerLayout","fullName":"Ext.layout.ContainerLayout","summary":"<p>The ContainerLayout class is the default layout manager delegated by {@link Ext.Container} to\r\nrender any child Components when no <tt>{@link Ext.Container#layout layout}</tt> is configured into\r\na {@link Ext.Container Container}. ContainerLayout provides the basic foundation for all other layout\r\nclasses in Ext. It simply renders all child Components into the Container, performing no sizing or\r\npositioning services. To utilize a layout that provides sizing and positioning of child Components,\r\nspecify an appropriate <tt>{@link Ext.Container#layout layout}</tt>.</p>\r\n<p>This class is intended to be extended or created via the <tt><b>{@link Ext.Container#layout layout}</b></tt>\r\nconfiguration property.  See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>\r\n","package":"layout","definedIn":"widgets\\layout\\ContainerLayout.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.layout.AnchorLayout,Ext.layout.BorderLayout,Ext.layout.BoxLayout,Ext.layout.ColumnLayout,Ext.layout.FitLayout,Ext.layout.MenuLayout,Ext.layout.TableLayout,Ext.layout.ToolbarLayout","configOptions":[{"type":"String","optional":false,"name":"extraCls","summary":"<p>An optional extra CSS class that will be added to the container. This can be useful for adding\r\ncustomized styles to the container or any of its children using standard CSS rules. See\r\n{@link Ext.Component}.{@link Ext.Component#ctCls ctCls} also.</p>\r\n<p><b>Note</b>: <tt>extraCls</tt> defaults to <tt>''</tt> except for the following classes\r\nwhich assign a value by default:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.layout.AbsoluteLayout Absolute Layout} : <tt>'x-abs-layout-item'</tt></li>\r\n<li>{@link Ext.layout.Box Box Layout} : <tt>'x-box-item'</tt></li>\r\n<li>{@link Ext.layout.ColumnLayout Column Layout} : <tt>'x-column'</tt></li>\r\n</ul></div>\r\nTo configure the above Classes with an extra CSS class append to the default.  For example,\r\nfor ColumnLayout:<pre><code>\r\nextraCls: 'x-column custom-class'\r\n</code></pre>\r\n</p>\r\n"},{"type":"Boolean","optional":false,"name":"renderHidden","summary":"True to hide each contained item on render (defaults to false).\r\n"}],"properties":[{"type":"Ext.Component","static":false,"hide":false,"private":false,"name":"activeItem","summary":"A reference to the {@link Ext.Component} that is active.  For example, <pre><code>\r\nif(myPanel.layout.activeItem.id == 'item-1') { ... }\r\n</code></pre>\r\n<tt>activeItem</tt> only applies to layout styles that can display items one at a time\r\n(like {@link Ext.layout.AccordionLayout}, {@link Ext.layout.CardLayout}\r\nand {@link Ext.layout.FitLayout}).  Read-only.  Related to {@link Ext.Container#activeItem}.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"fieldTpl","summary":"The {@link Ext.Template Ext.Template} used by Field rendering layout classes (such as\r\n{@link Ext.layout.FormLayout}) to create the DOM structure of a fully wrapped,\r\nlabeled and styled form Field. A default Template is supplied, but this may be\r\noverriden to create custom field structures. The template processes values returned from\r\n{@link Ext.layout.FormLayout#getTemplateArgs}.\r\n"}],"methods":[],"events":[]},{"name":"FitLayout","fullName":"Ext.layout.FitLayout","summary":"<p>This is a base class for layouts that contain <b>a single item</b> that automatically expands to fill the layout's\r\ncontainer.  This class is intended to be extended or created via the <tt>layout:'fit'</tt> {@link Ext.Container#layout}\r\nconfig, and should generally not need to be created directly via the new keyword.</p>\r\n<p>FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container\r\nusing FitLayout, simply set layout:'fit' on the container and add a single panel to it.  If the container has\r\nmultiple panels, only the first one will be displayed.  Example usage:</p>\r\n<pre><code>\r\nvar p = new Ext.Panel({\r\n    title: 'Fit Layout',\r\n    layout:'fit',\r\n    items: {\r\n        title: 'Inner Panel',\r\n        html: '&lt;p&gt;This is the inner panel content&lt;/p&gt;',\r\n        border: false\r\n    }\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\FitLayout.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.layout.AccordionLayout,Ext.layout.CardLayout","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"FormLayout","fullName":"Ext.layout.FormLayout","summary":"<p>This layout manager is specifically designed for rendering and managing child Components of\r\n{@link Ext.form.FormPanel forms}. It is responsible for rendering the labels of\r\n{@link Ext.form.Field Field}s.</p>\r\n\r\n<p>This layout manager is used when a Container is configured with the <tt>layout:'form'</tt>\r\n{@link Ext.Container#layout layout} config option, and should generally not need to be created directly\r\nvia the new keyword. See <tt><b>{@link Ext.Container#layout}</b></tt> for additional details.</p>\r\n\r\n<p>In an application, it will usually be preferrable to use a {@link Ext.form.FormPanel FormPanel}\r\n(which is configured with FormLayout as its layout class by default) since it also provides built-in\r\nfunctionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form.</p>\r\n\r\n<p>A {@link Ext.Container Container} <i>using</i> the FormLayout layout manager (e.g.\r\n{@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>) can also accept the following\r\nlayout-specific config properties:<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>{@link Ext.form.FormPanel#hideLabels hideLabels}</tt></b></li>\r\n<li><b><tt>{@link Ext.form.FormPanel#labelAlign labelAlign}</tt></b></li>\r\n<li><b><tt>{@link Ext.form.FormPanel#labelPad labelPad}</tt></b></li>\r\n<li><b><tt>{@link Ext.form.FormPanel#labelSeparator labelSeparator}</tt></b></li>\r\n<li><b><tt>{@link Ext.form.FormPanel#labelWidth labelWidth}</tt></b></li>\r\n</ul></div></p>\r\n\r\n<p>Any Component (including Fields) managed by FormLayout accepts the following as a config option:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>{@link Ext.Component#anchor anchor}</tt></b></li>\r\n</ul></div></p>\r\n\r\n<p>Any Component managed by FormLayout may be rendered as a form field (with an associated label) by\r\nconfiguring it with a non-null <b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b>. Components configured\r\nin this way may be configured with the following options which affect the way the FormLayout renders them:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>{@link Ext.Component#clearCls clearCls}</tt></b></li>\r\n<li><b><tt>{@link Ext.Component#fieldLabel fieldLabel}</tt></b></li>\r\n<li><b><tt>{@link Ext.Component#hideLabel hideLabel}</tt></b></li>\r\n<li><b><tt>{@link Ext.Component#itemCls itemCls}</tt></b></li>\r\n<li><b><tt>{@link Ext.Component#labelSeparator labelSeparator}</tt></b></li>\r\n<li><b><tt>{@link Ext.Component#labelStyle labelStyle}</tt></b></li>\r\n</ul></div></p>\r\n\r\n<p>Example usage:</p>\r\n<pre><code>\r\n// Required if showing validation messages\r\nExt.QuickTips.init();\r\n\r\n// While you can create a basic Panel with layout:'form', practically\r\n// you should usually use a FormPanel to also get its form functionality\r\n// since it already creates a FormLayout internally.\r\nvar form = new Ext.form.FormPanel({\r\n    title: 'Form Layout',\r\n    bodyStyle: 'padding:15px',\r\n    width: 350,\r\n    defaultType: 'textfield',\r\n    defaults: {\r\n        // applied to each contained item\r\n        width: 230,\r\n        msgTarget: 'side'\r\n    },\r\n    items: [{\r\n            fieldLabel: 'First Name',\r\n            name: 'first',\r\n            allowBlank: false,\r\n           {@link Ext.Component#labelSeparator labelSeparator}: ':' // override labelSeparator layout config\r\n        },{\r\n            fieldLabel: 'Last Name',\r\n            name: 'last'\r\n        },{\r\n            fieldLabel: 'Email',\r\n            name: 'email',\r\n            vtype:'email'\r\n        }, {\r\n            xtype: 'textarea',\r\n            hideLabel: true,     // override hideLabels layout config\r\n            name: 'msg',\r\n            anchor: '100% -53'\r\n        }\r\n    ],\r\n    buttons: [\r\n       {text: 'Save'},\r\n       {text: 'Cancel'}\r\n    ],\r\n    layoutConfig: {\r\n       {@link #labelSeparator}: '~' // superseded by assignment below\r\n    },\r\n    // config options applicable to container when layout='form':\r\n    hideLabels: false,\r\n    labelAlign: 'left',   // or 'right' or 'top'\r\n   {@link Ext.form.FormPanel#labelSeparator labelSeparator}: '>>', // takes precedence over layoutConfig value\r\n    labelWidth: 65,       // defaults to 100\r\n    labelPad: 8           // defaults to 5, must specify labelWidth to be honored\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\FormLayout.js","xtype":null,"extends":"Ext.layout.AnchorLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"labelSeparator","summary":"See {@link Ext.form.FormPanel}.{@link Ext.form.FormPanel#labelSeparator labelSeparator}.  Configuration\r\nof this property at the <b>container</b> level takes precedence.\r\n"},{"type":"Boolean","optional":false,"name":"trackLabels","summary":"True to show/hide the field label when the field is hidden. Defaults to <tt>false</tt>.\r\n"},{"type":"Ext.Template","optional":false,"name":"fieldTpl","summary":"A {@link Ext.Template#compile compile}d {@link Ext.Template} for rendering\r\nthe fully wrapped, labeled and styled form Field. Defaults to:</p><pre><code>\r\nnew Ext.Template(\r\n    &#39;&lt;div class=\"x-form-item {itemCls}\" tabIndex=\"-1\">&#39;,\r\n        &#39;&lt;&#108;abel for=\"{id}\" style=\"{labelStyle}\" class=\"x-form-item-&#108;abel\">{&#108;abel}{labelSeparator}&lt;/&#108;abel>&#39;,\r\n        &#39;&lt;div class=\"x-form-element\" id=\"x-form-el-{id}\" style=\"{elementStyle}\">&#39;,\r\n        &#39;&lt;/div>&lt;div class=\"{clearCls}\">&lt;/div>&#39;,\r\n    '&lt;/div>'\r\n);\r\n</code></pre>\r\n<p>This may be specified to produce a different DOM structure when rendering form Fields.</p>\r\n<p>A description of the properties within the template follows:</p><div class=\"mdetail-params\"><ul>\r\n<li><b><tt>itemCls</tt></b> : String<div class=\"sub-desc\">The CSS class applied to the outermost div wrapper\r\nthat contains this field label and field element (the default class is <tt>'x-form-item'</tt> and <tt>itemCls</tt>\r\nwill be added to that). If supplied, <tt>itemCls</tt> at the field level will override the default <tt>itemCls</tt>\r\nsupplied at the container level.</div></li>\r\n<li><b><tt>id</tt></b> : String<div class=\"sub-desc\">The id of the Field</div></li>\r\n<li><b><tt>{@link #labelStyle}</tt></b> : String<div class=\"sub-desc\">\r\nA CSS style specification string to add to the field label for this field (defaults to <tt>''</tt> or the\r\n{@link #labelStyle layout's value for <tt>labelStyle</tt>}).</div></li>\r\n<li><b><tt>label</tt></b> : String<div class=\"sub-desc\">The text to display as the label for this\r\nfield (defaults to <tt>''</tt>)</div></li>\r\n<li><b><tt>{@link #labelSeparator}</tt></b> : String<div class=\"sub-desc\">The separator to display after\r\nthe text of the label for this field (defaults to a colon <tt>':'</tt> or the\r\n{@link #labelSeparator layout's value for labelSeparator}). To hide the separator use empty string ''.</div></li>\r\n<li><b><tt>elementStyle</tt></b> : String<div class=\"sub-desc\">The styles text for the input element's wrapper.</div></li>\r\n<li><b><tt>clearCls</tt></b> : String<div class=\"sub-desc\">The CSS class to apply to the special clearing div\r\nrendered directly after each form field wrapper (defaults to <tt>'x-form-clear-left'</tt>)</div></li>\r\n</ul></div>\r\n<p>Also see <tt>{@link #getTemplateArgs}</tt></p>\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"labelStyle","summary":"Read only. The CSS style specification string added to field labels in this layout if not\r\notherwise {@link Ext.Component#labelStyle specified by each contained field}.\r\n"}],"methods":[{"parameters":[{"type":"","optional":false,"name":"field","summary":"The {@link Field Ext.form.Field} being rendered."}],"return":null,"hide":false,"private":false,"name":"getTemplateArgs","summary":"<p>Provides template arguments for rendering the fully wrapped, labeled and styled form Field.</p>\r\n<p>This method returns an object hash containing properties used by the layout's {@link #fieldTpl}\r\nto create a correctly wrapped, labeled and styled form Field. This may be overriden to\r\ncreate custom layouts. The properties which must be returned are:</p><div class=\"mdetail-params\"><ul>\r\n<li><b><tt>itemCls</tt></b> : String<div class=\"sub-desc\">The CSS class applied to the outermost div wrapper\r\nthat contains this field label and field element (the default class is <tt>'x-form-item'</tt> and <tt>itemCls</tt>\r\nwill be added to that). If supplied, <tt>itemCls</tt> at the field level will override the default <tt>itemCls</tt>\r\nsupplied at the container level.</div></li>\r\n<li><b><tt>id</tt></b> : String<div class=\"sub-desc\">The id of the Field</div></li>\r\n<li><b><tt>{@link #labelStyle}</tt></b> : String<div class=\"sub-desc\">\r\nA CSS style specification string to add to the field label for this field (defaults to <tt>''</tt> or the\r\n{@link #labelStyle layout's value for <tt>labelStyle</tt>}).</div></li>\r\n<li><b><tt>label</tt></b> : String<div class=\"sub-desc\">The text to display as the label for this\r\nfield (defaults to <tt>''</tt>)</div></li>\r\n<li><b><tt>{@link #labelSeparator}</tt></b> : String<div class=\"sub-desc\">The separator to display after\r\nthe text of the label for this field (defaults to a colon <tt>':'</tt> or the\r\n{@link #labelSeparator layout's value for labelSeparator}). To hide the separator use empty string ''.</div></li>\r\n<li><b><tt>elementStyle</tt></b> : String<div class=\"sub-desc\">The styles text for the input element's wrapper.</div></li>\r\n<li><b><tt>clearCls</tt></b> : String<div class=\"sub-desc\">The CSS class to apply to the special clearing div\r\nrendered directly after each form field wrapper (defaults to <tt>'x-form-clear-left'</tt>)</div></li>\r\n</ul></div>\r\n"}],"events":[]},{"name":"HBoxLayout","fullName":"Ext.layout.HBoxLayout","summary":"A layout that arranges items horizontally\r\n","package":"layout","definedIn":"widgets\\layout\\BoxLayout.js","xtype":null,"extends":"Ext.layout.BoxLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"align","summary":"Controls how the child items of the container are aligned. Acceptable configuration values for this\r\nproperty are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>top</tt></b> : <b>Default</b><div class=\"sub-desc\">child items are aligned vertically\r\nat the <b>left</b> side of the container</div></li>\r\n<li><b><tt>middle</tt></b> : <div class=\"sub-desc\">child items are aligned vertically at the\r\n<b>mid-height</b> of the container</div></li>\r\n<li><b><tt>stretch</tt></b> : <div class=\"sub-desc\">child items are stretched vertically to fill\r\nthe height of the container</div></li>\r\n<li><b><tt>stretchmax</tt></b> : <div class=\"sub-desc\">child items are stretched vertically to\r\nthe size of the largest item.</div></li>\r\n"},{"type":"String","optional":false,"name":"pack","summary":"Controls how the child items of the container are packed together. Acceptable configuration values\r\nfor this property are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>start</tt></b> : <b>Default</b><div class=\"sub-desc\">child items are packed together at\r\n<b>left</b> side of container</div></li>\r\n<li><b><tt>center</tt></b> : <div class=\"sub-desc\">child items are packed together at\r\n<b>mid-width</b> of container</div></li>\r\n<li><b><tt>end</tt></b> : <div class=\"sub-desc\">child items are packed together at <b>right</b>\r\nside of container</div></li>\r\n</ul></div>\r\n"},{"type":"Number","optional":false,"name":"flex","summary":"This configuation option is to be applied to <b>child <tt>items</tt></b> of the container managed\r\nby this layout. Each child item with a <tt>flex</tt> property will be flexed <b>horizontally</b>\r\naccording to each item's <b>relative</b> <tt>flex</tt> value compared to the sum of all items with\r\na <tt>flex</tt> value specified.  Any child items that have either a <tt>flex = 0</tt> or\r\n<tt>flex = undefined</tt> will not be 'flexed' (the initial size will not be changed).\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"MenuLayout","fullName":"Ext.layout.MenuLayout","summary":"<p>Layout manager used by {@link Ext.menu.Menu}. Generally this class should not need to be used directly.</p>\r\n","package":"layout","definedIn":"widgets\\menu\\Menu.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"TableLayout","fullName":"Ext.layout.TableLayout","summary":"<p>This layout allows you to easily render content into an HTML table.  The total number of columns can be\r\nspecified, and rowspan and colspan can be used to create complex layouts within the table.\r\nThis class is intended to be extended or created via the layout:'table' {@link Ext.Container#layout} config,\r\nand should generally not need to be created directly via the new keyword.</p>\r\n<p>Note that when creating a layout via config, the layout-specific config properties must be passed in via\r\nthe {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  In the\r\ncase of TableLayout, the only valid layout config property is {@link #columns}.  However, the items added to a\r\nTableLayout can supply the following table-specific config properties:</p>\r\n<ul>\r\n<li><b>rowspan</b> Applied to the table cell containing the item.</li>\r\n<li><b>colspan</b> Applied to the table cell containing the item.</li>\r\n<li><b>cellId</b> An id applied to the table cell containing the item.</li>\r\n<li><b>cellCls</b> A CSS class name added to the table cell containing the item.</li>\r\n</ul>\r\n<p>The basic concept of building up a TableLayout is conceptually very similar to building up a standard\r\nHTML table.  You simply add each panel (or \"cell\") that you want to include along with any span attributes\r\nspecified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.\r\nRather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the\r\ntotal column count in the layoutConfig and start adding panels in their natural order from left to right,\r\ntop to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,\r\nhow to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add\r\nup correctly in your overall layout or you'll end up with missing and/or extra cells!  Example usage:</p>\r\n<pre><code>\r\n// This code will generate a layout table that is 3 columns by 2 rows\r\n// with some spanning included.  The basic layout will be:\r\n// +--------+-----------------+\r\n// |   A    |   B             |\r\n// |        |--------+--------|\r\n// |        |   C    |   D    |\r\n// +--------+--------+--------+\r\nvar table = new Ext.Panel({\r\n    title: 'Table Layout',\r\n    layout:'table',\r\n    defaults: {\r\n        // applied to each contained panel\r\n        bodyStyle:'padding:20px'\r\n    },\r\n    layoutConfig: {\r\n        // The total column count must be specified here\r\n        columns: 3\r\n    },\r\n    items: [{\r\n        html: '&lt;p&gt;Cell A content&lt;/p&gt;',\r\n        rowspan: 2\r\n    },{\r\n        html: '&lt;p&gt;Cell B content&lt;/p&gt;',\r\n        colspan: 2\r\n    },{\r\n        html: '&lt;p&gt;Cell C content&lt;/p&gt;',\r\n        cellCls: 'highlight'\r\n    },{\r\n        html: '&lt;p&gt;Cell D content&lt;/p&gt;'\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"layout","definedIn":"widgets\\layout\\TableLayout.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Number","optional":false,"name":"columns","summary":"The total number of columns to create in the table for this layout.  If not specified, all Components added to\r\nthis layout will be rendered into a single row using one column per Component.\r\n"},{"type":"Object","optional":false,"name":"tableAttrs","summary":"<p>An object containing properties which are added to the {@link Ext.DomHelper DomHelper} specification\r\nused to create the layout's <tt>&lt;table&gt;</tt> element. Example:</p><pre><code>\r\n{\r\n    xtype: 'panel',\r\n    layout: 'table',\r\n    layoutConfig: {\r\n        tableAttrs: {\r\n        \tstyle: {\r\n        \t\twidth: '100%'\r\n        \t}\r\n        },\r\n        columns: 3\r\n    }\r\n}</code></pre>\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"ToolbarLayout","fullName":"Ext.layout.ToolbarLayout","summary":"Layout manager implicitly used by Ext.Toolbar.\r\n","package":"layout","definedIn":"widgets\\Toolbar.js","xtype":null,"extends":"Ext.layout.ContainerLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"VBoxLayout","fullName":"Ext.layout.VBoxLayout","summary":"A layout that arranges items vertically\r\n","package":"layout","definedIn":"widgets\\layout\\BoxLayout.js","xtype":null,"extends":"Ext.layout.BoxLayout","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"align","summary":"Controls how the child items of the container are aligned. Acceptable configuration values for this\r\nproperty are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>left</tt></b> : <b>Default</b><div class=\"sub-desc\">child items are aligned horizontally\r\nat the <b>left</b> side of the container</div></li>\r\n<li><b><tt>center</tt></b> : <div class=\"sub-desc\">child items are aligned horizontally at the\r\n<b>mid-width</b> of the container</div></li>\r\n<li><b><tt>stretch</tt></b> : <div class=\"sub-desc\">child items are stretched horizontally to fill\r\nthe width of the container</div></li>\r\n<li><b><tt>stretchmax</tt></b> : <div class=\"sub-desc\">child items are stretched horizontally to\r\nthe size of the largest item.</div></li>\r\n</ul></div>\r\n"},{"type":"String","optional":false,"name":"pack","summary":"Controls how the child items of the container are packed together. Acceptable configuration values\r\nfor this property are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>start</tt></b> : <b>Default</b><div class=\"sub-desc\">child items are packed together at\r\n<b>top</b> side of container</div></li>\r\n<li><b><tt>center</tt></b> : <div class=\"sub-desc\">child items are packed together at\r\n<b>mid-height</b> of container</div></li>\r\n<li><b><tt>end</tt></b> : <div class=\"sub-desc\">child items are packed together at <b>bottom</b>\r\nside of container</div></li>\r\n</ul></div>\r\n"},{"type":"Number","optional":false,"name":"flex","summary":"This configuation option is to be applied to <b>child <tt>items</tt></b> of the container managed\r\nby this layout. Each child item with a <tt>flex</tt> property will be flexed <b>vertically</b>\r\naccording to each item's <b>relative</b> <tt>flex</tt> value compared to the sum of all items with\r\na <tt>flex</tt> value specified.  Any child items that have either a <tt>flex = 0</tt> or\r\n<tt>flex = undefined</tt> will not be 'flexed' (the initial size will not be changed).\r\n"}],"properties":[],"methods":[],"events":[]}]},{"name":"menu","fullName":"menu","parentFullName":"Ext","packages":[],"classes":[{"name":"BaseItem","fullName":"Ext.menu.BaseItem","summary":"The base class for all items that render into menus.  BaseItem provides default rendering, activated state\r\nmanagement and base configuration options shared by all menu components.\r\n","package":"menu","definedIn":"widgets\\menu\\BaseItem.js","xtype":"menubaseitem","extends":"Ext.Component","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new BaseItem."},"subclasses":"Ext.menu.Item,Ext.menu.Separator,Ext.menu.TextItem","configOptions":[{"type":"String","optional":false,"name":"activeClass","summary":""},{"type":"Boolean","optional":false,"name":"canActivate","summary":""},{"type":"Number","optional":false,"name":"clickHideDelay","summary":""},{"type":"Function","optional":false,"name":"handler","summary":"A function that will handle the click event of this menu item (optional).\r\nThe handler is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><code>b</code> : Item<div class=\"sub-desc\">This menu Item.</div></li>\r\n<li><code>e</code> : EventObject<div class=\"sub-desc\">The click event.</div></li>\r\n</ul></div>\r\n"},{"type":"Boolean","optional":false,"name":"hideOnClick","summary":""},{"type":"Object","optional":false,"name":"scope","summary":"The scope (<tt><b>this</b></tt> reference) in which the handler function will be called.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"parentMenu","summary":"The parent Menu of this Item.\r\n"}],"methods":[{"parameters":[{"type":"Function","optional":false,"name":"handler","summary":"The function that should be called on click"},{"type":"Object","optional":false,"name":"scope","summary":"The scope that should be passed to the handler"}],"return":null,"hide":false,"private":false,"name":"setHandler","summary":"Sets the function that will handle click events for this item (equivalent to passing in the {@link #handler}\r\nconfig property).  If an existing handler is already registered, it will be unregistered for you.\r\n"}],"events":[{"parameters":[{"type":"Ext.menu.BaseItem","optional":false,"name":"el","summary":"this"}],"name":"activate","summary":"Fires when this item is activated."},{"parameters":[{"type":"Ext.menu.BaseItem","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"click","summary":"Fires when this item is clicked."},{"parameters":[{"type":"Ext.menu.BaseItem","optional":false,"name":"el","summary":"this"}],"name":"deactivate","summary":"Fires when this item is deactivated."}]},{"name":"CheckItem","fullName":"Ext.menu.CheckItem","summary":"Adds a menu item that contains a checkbox by default, but can also be part of a radio group.\r\n","package":"menu","definedIn":"widgets\\menu\\CheckItem.js","xtype":"menucheckitem","extends":"Ext.menu.Item","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new CheckItem."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"checked","summary":"if this checkbox is part of a radio group (group = true) only the last item in the group that is\r\ninitialized with checked = true will be rendered as checked.\r\n"},{"type":"String","optional":false,"name":"group","summary":"All check items with the same group name will automatically be grouped into a single-select\r\nradio button group (defaults to '')\r\n"},{"type":"String","optional":false,"name":"groupClass","summary":""},{"type":"String","optional":false,"name":"itemCls","summary":""}],"properties":[],"methods":[{"parameters":[{"type":"Ext.menu.CheckItem","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"checked","summary":"The checked value that was set"}],"return":null,"hide":false,"private":false,"name":"checkHandler","summary":"A function that handles the checkchange event.  The function is undefined by default, but if an implementation\r\nis provided, it will be called automatically when the checkchange event fires.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"checked","summary":"The new checked value"},{"type":"Boolean","optional":true,"name":"suppressEvent","summary":"True to prevent the checkchange event from firing (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"setChecked","summary":"Set the checked state of this item\r\n"}],"events":[{"parameters":[{"type":"Ext.menu.CheckItem","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"checked","summary":"The new checked value that will be set"}],"name":"beforecheckchange","summary":"Fires before the checked value is set, providing an opportunity to cancel if needed."},{"parameters":[{"type":"Ext.menu.CheckItem","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"checked","summary":"The checked value that was set"}],"name":"checkchange","summary":"Fires after the checked value has been set."}]},{"name":"ColorMenu","fullName":"Ext.menu.ColorMenu","summary":"<p>A menu containing a {@link Ext.ColorPalette} Component.</p>\r\n<p>Notes:</p><div class=\"mdetail-params\"><ul>\r\n<li>Although not listed here, the <b>constructor</b> for this class\r\naccepts all of the configuration options of <b>{@link Ext.ColorPalette}</b>.</li>\r\n<li>If subclassing ColorMenu, any configuration options for the ColorPalette must be\r\napplied to the <tt><b>initialConfig</b></tt> property of the ColorMenu.\r\nApplying {@link Ext.ColorPalette ColorPalette} configuration settings to\r\n<b><tt>this</tt></b> will <b>not</b> affect the ColorPalette's configuration.</li>\r\n</ul></div> *\r\n","package":"menu","definedIn":"widgets\\menu\\ColorMenu.js","xtype":"colormenu","extends":"Ext.menu.Menu","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"enableScrolling","summary":"@hide\r\n"},{"type":"Function","optional":false,"name":"handler","summary":"Optional. A function that will handle the select event of this menu.\r\nThe handler is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><code>palette</code> : ColorPalette<div class=\"sub-desc\">The {@link #palette Ext.ColorPalette}.</div></li>\r\n<li><code>color</code> : String<div class=\"sub-desc\">The 6-digit color hex code (without the # symbol).</div></li>\r\n</ul></div>\r\n"},{"type":"Boolean","optional":false,"name":"hideOnClick","summary":"False to continue showing the menu after a color is selected, defaults to true.\r\n"},{"type":"Number","optional":false,"name":"maxHeight","summary":"@hide\r\n"},{"type":"Object","optional":false,"name":"scope","summary":"The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>\r\nfunction will be called.  Defaults to this ColorMenu instance.\r\n"},{"type":"Number","optional":false,"name":"scrollIncrement","summary":"@hide\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"palette","summary":"The {@link Ext.ColorPalette} instance for this ColorMenu\r\n"}],"methods":[],"events":[{"parameters":[],"name":"click","summary":"@hide"},{"parameters":[],"name":"itemclick","summary":"@hide"},{"parameters":[{"type":"Ext.ColorPalette","optional":false,"name":"palette","summary":"The {@link #palette Ext.ColorPalette}"},{"type":"String","optional":false,"name":"color","summary":"The 6-digit color hex code (without the # symbol)"}],"name":"select","summary":"Fires when a color is selected from the {@link #palette Ext.ColorPalette}."}]},{"name":"DateMenu","fullName":"Ext.menu.DateMenu","summary":"<p>A menu containing an {@link Ext.DatePicker} Component.</p>\r\n<p>Notes:</p><div class=\"mdetail-params\"><ul>\r\n<li>Although not listed here, the <b>constructor</b> for this class\r\naccepts all of the configuration options of <b>{@link Ext.DatePicker}</b>.</li>\r\n<li>If subclassing DateMenu, any configuration options for the DatePicker must be\r\napplied to the <tt><b>initialConfig</b></tt> property of the DateMenu.\r\nApplying {@link Ext.DatePicker DatePicker} configuration settings to\r\n<b><tt>this</tt></b> will <b>not</b> affect the DatePicker's configuration.</li>\r\n</ul></div>\r\n","package":"menu","definedIn":"widgets\\menu\\DateMenu.js","xtype":"datemenu","extends":"Ext.menu.Menu","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"enableScrolling","summary":"@hide\r\n"},{"type":"Function","optional":false,"name":"handler","summary":"Optional. A function that will handle the select event of this menu.\r\nThe handler is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><code>picker</code> : DatePicker<div class=\"sub-desc\">The Ext.DatePicker.</div></li>\r\n<li><code>date</code> : Date<div class=\"sub-desc\">The selected date.</div></li>\r\n</ul></div>\r\n"},{"type":"Boolean","optional":false,"name":"hideOnClick","summary":"False to continue showing the menu after a date is selected, defaults to true.\r\n"},{"type":"Number","optional":false,"name":"maxHeight","summary":"@hide\r\n"},{"type":"Object","optional":false,"name":"scope","summary":"The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>\r\nfunction will be called.  Defaults to this DateMenu instance.\r\n"},{"type":"Number","optional":false,"name":"scrollIncrement","summary":"@hide\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"picker","summary":"The {@link Ext.DatePicker} instance for this DateMenu\r\n"}],"methods":[],"events":[{"parameters":[],"name":"click","summary":"@hide"},{"parameters":[],"name":"itemclick","summary":"@hide"},{"parameters":[{"type":"DatePicker","optional":false,"name":"picker","summary":"The {@link #picker Ext.DatePicker}"},{"type":"Date","optional":false,"name":"date","summary":"The selected date"}],"name":"select","summary":"Fires when a date is selected from the {@link #picker Ext.DatePicker}."}]},{"name":"Item","fullName":"Ext.menu.Item","summary":"A base class for all menu items that require menu-related functionality (like sub-menus) and are not static\r\ndisplay items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific\r\nactivation and click handling.\r\n","package":"menu","definedIn":"widgets\\menu\\Item.js","xtype":"menuitem","extends":"Ext.menu.BaseItem","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Item."},"subclasses":"Ext.menu.CheckItem","configOptions":[{"type":"Boolean","optional":false,"name":"canActivate","summary":""},{"type":"String","optional":false,"name":"href","summary":""},{"type":"String","optional":false,"name":"hrefTarget","summary":""},{"type":"String","optional":false,"name":"icon","summary":"icon is specified {@link #iconCls} should not be.\r\n"},{"type":"String","optional":false,"name":"iconCls","summary":"this item (defaults to '').  If iconCls is specified {@link #icon} should not be.\r\n"},{"type":"String","optional":false,"name":"itemCls","summary":""},{"type":"Mixed","optional":false,"name":"menu","summary":"{@link Ext.menu.Menu} which acts as the submenu when this item is activated.\r\n"},{"type":"Number","optional":false,"name":"showDelay","summary":""},{"type":"String","optional":false,"name":"text","summary":""}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"menu","summary":"The submenu associated with this Item if one was configured.\r\n"}],"methods":[{"parameters":[{"type":"String","optional":false,"name":"cls","summary":"The CSS class to apply"}],"return":null,"hide":false,"private":false,"name":"setIconClass","summary":"Sets the CSS class to apply to the item's icon element\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to display"}],"return":null,"hide":false,"private":false,"name":"setText","summary":"Sets the text to display in this menu item\r\n"}],"events":[]},{"name":"Menu","fullName":"Ext.menu.Menu","summary":"<p>A menu object.  This is the container to which you may add menu items.  Menu can also serve as a base class\r\nwhen you want a specialized menu based off of another component (like {@link Ext.menu.DateMenu} for example).</p>\r\n<p>Menus may contain either {@link Ext.menu.Item menu items}, or general {@link Ext.Component Component}s.</p>\r\n<p>To make a contained general {@link Ext.Component Component} line up with other {@link Ext.menu.Item menu items}\r\nspecify <tt>iconCls: 'no-icon'</tt>.  This reserves a space for an icon, and indents the Component in line\r\nwith the other menu items.  See {@link Ext.form.ComboBox}.{@link Ext.form.ComboBox#getListParent getListParent}\r\nfor an example.</p>\r\n<p>By default, Menus are absolutely positioned, floating Components. By configuring a Menu with\r\n<b><tt>{@link #floating}:false</tt></b>, a Menu may be used as child of a Container.</p>\r\n\r\n","package":"menu","definedIn":"widgets\\menu\\Menu.js","xtype":"menu","extends":"Ext.Container","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.menu.ColorMenu,Ext.menu.DateMenu","configOptions":[{"type":"Boolean","optional":false,"name":"allowOtherMenus","summary":""},{"type":"String","optional":false,"name":"defaultAlign","summary":"relative to its element of origin (defaults to 'tl-bl?')\r\n"},{"type":"Array","optional":false,"name":"defaultOffsets","summary":"change the default Menu popup position after aligning according to the {@link #defaultAlign}\r\nconfiguration. Defaults to <tt>[0, 0]</tt>.\r\n"},{"type":"Object","optional":false,"name":"defaults","summary":"A config object that will be applied to all items added to this container either via the {@link #items}\r\nconfig or via the {@link #add} method.  The defaults config can contain any number of\r\nname/value property pairs to be added to each item, and should be valid for the types of items\r\nbeing added to the menu.\r\n"},{"type":"Boolean","optional":false,"name":"enableScrolling","summary":""},{"type":"Boolean","optional":false,"name":"floating","summary":"<p>By default, a Menu configured as <b><code>floating:true</code></b>\r\nwill be rendered as an {@link Ext.Layer} (an absolutely positioned,\r\nfloating Component with zindex=15000).\r\nIf configured as <b><code>floating:false</code></b>, the Menu may be\r\nused as child item of another Container instead of a free-floating\r\n{@link Ext.Layer Layer}.\r\n"},{"type":"Boolean","optional":false,"name":"ignoreParentClicks","summary":"a submenu) so that the submenu is not dismissed when clicking the parent item (defaults to false).\r\n"},{"type":"Mixed","optional":false,"name":"items","summary":"An array of items to be added to this menu. Menus may contain either {@link Ext.menu.Item menu items},\r\nor general {@link Ext.Component Component}s.\r\n"},{"type":"String/Object","optional":false,"name":"layout","summary":"This class assigns a default layout (<code>layout:'<b>menu</b>'</code>).\r\nDevelopers <i>may</i> override this configuration option if another layout is required.\r\nSee {@link Ext.Container#layout} for additional information.\r\n"},{"type":"Number","optional":false,"name":"maxHeight","summary":""},{"type":"Number","optional":false,"name":"minWidth","summary":""},{"type":"Number","optional":false,"name":"scrollIncrement","summary":""},{"type":"Boolean/String","optional":false,"name":"shadow","summary":"for bottom-right shadow (defaults to 'sides')\r\n"},{"type":"Boolean","optional":false,"name":"showSeparator","summary":""},{"type":"String","optional":false,"name":"subMenuAlign","summary":"this menu (defaults to 'tl-tr?')\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element or DOM node to add, or its id"}],"return":{"type":"Ext.menu.Item","summary":"The menu item that was added"},"hide":false,"private":false,"name":"addElement","summary":"Adds an {@link Ext.Element} object to the menu\r\n"},{"parameters":[{"type":"Ext.menu.Item","optional":false,"name":"item","summary":"The menu item to add"}],"return":{"type":"Ext.menu.Item","summary":"The menu item that was added"},"hide":false,"private":false,"name":"addItem","summary":"Adds an existing object based on {@link Ext.menu.BaseItem} to the menu\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A MenuItem config object"}],"return":{"type":"Ext.menu.Item","summary":"The menu item that was added"},"hide":false,"private":false,"name":"addMenuItem","summary":"Creates a new {@link Ext.menu.Item} based an the supplied config object and adds it to the menu\r\n"},{"parameters":[],"return":{"type":"Ext.menu.Item","summary":"The menu item that was added"},"hide":false,"private":false,"name":"addSeparator","summary":"Adds a separator bar to the menu\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to display in the menu item"}],"return":{"type":"Ext.menu.Item","summary":"The menu item that was added"},"hide":false,"private":false,"name":"addText","summary":"Creates a new {@link Ext.menu.TextItem} with the supplied text and adds it to the menu\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"deep","summary":"True to hide all parent menus recursively, if any (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hides this menu and optionally all parent menus\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"element","summary":"The element to align to"},{"type":"String","optional":true,"name":"position","summary":"The {@link Ext.Element#alignTo} anchor position to use in aligning to\r\nthe element (defaults to this.defaultAlign)"},{"type":"Ext.menu.Menu","optional":true,"name":"parentMenu","summary":"This menu's parent menu, if applicable (defaults to undefined)"}],"return":null,"hide":false,"private":false,"name":"show","summary":"If <code>{@link #floating}=true</code>, shows this menu relative to\r\nanother element using {@link #showat}, otherwise uses {@link Ext.Component#show}.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"xyPosition","summary":"Contains X & Y [x, y] values for the position at which to show the menu (coordinates are page-based)"},{"type":"Ext.menu.Menu","optional":true,"name":"parentMenu","summary":"This menu's parent menu, if applicable (defaults to undefined)"}],"return":null,"hide":false,"private":false,"name":"showAt","summary":"Displays this menu at a specific xy position and fires the 'show' event if a\r\nhandler for the 'beforeshow' event does not return false cancelling the operation.\r\n"}],"events":[{"parameters":[{"type":"Ext.menu.Menu","optional":false,"name":"el","summary":"this"},{"type":"Ext.menu.Item","optional":false,"name":"menuItem","summary":"The menu item that was clicked"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"click","summary":"Fires when this menu is clicked (or when the enter key is pressed while it is active)."},{"parameters":[{"type":"Ext.menu.BaseItem","optional":false,"name":"baseItem","summary":"The BaseItem that was clicked"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""}],"name":"itemclick","summary":"Fires when a menu item contained in this menu is clicked."},{"parameters":[{"type":"Ext.menu.Menu","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""},{"type":"Ext.menu.Item","optional":false,"name":"menuItem","summary":"The menu item that was clicked"}],"name":"mouseout","summary":"Fires when the mouse exits this menu."},{"parameters":[{"type":"Ext.menu.Menu","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":""},{"type":"Ext.menu.Item","optional":false,"name":"menuItem","summary":"The menu item that was clicked"}],"name":"mouseover","summary":"Fires when the mouse is hovering over this menu."}]},{"name":"MenuMgr","fullName":"Ext.menu.MenuMgr","summary":"Provides a common registry of all menu items on a page so that they can be easily accessed by id.\r\n","package":"menu","definedIn":"widgets\\menu\\MenuMgr.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String/Object","optional":false,"name":"menu","summary":"The string menu id, an existing menu object reference, or a Menu config that will\r\nbe used to generate and return a new Menu instance."}],"return":{"type":"Ext.menu.Menu","summary":"The specified menu, or null if none are found"},"hide":false,"private":false,"name":"get","summary":"Returns a {@link Ext.menu.Menu} object\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hideAll","summary":"Hides all menus that are currently visible\r\n"}],"events":[]},{"name":"Separator","fullName":"Ext.menu.Separator","summary":"Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will\r\nadd one of these by using \"-\" in you call to add() or in your items config rather than creating one directly.\r\n","package":"menu","definedIn":"widgets\\menu\\Separator.js","xtype":"menuseparator","extends":"Ext.menu.BaseItem","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"Configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"activeClass","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"hideOnClick","summary":""},{"type":"String","optional":false,"name":"itemCls","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"TextItem","fullName":"Ext.menu.TextItem","summary":"Adds a static text string to a menu, usually used as either a heading or group separator.\r\n","package":"menu","definedIn":"widgets\\menu\\TextItem.js","xtype":"menutextitem","extends":"Ext.menu.BaseItem","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object/String","optional":false,"name":"config","summary":"If config is a string, it is used as the text to display, otherwise it is applied as a config object (and should contain a <tt>text</tt> property)."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new TextItem."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"hideOnClick","summary":""},{"type":"String","optional":false,"name":"itemCls","summary":""},{"type":"String","optional":false,"name":"text","summary":""}],"properties":[],"methods":[],"events":[]}]},{"name":"state","fullName":"state","parentFullName":"Ext","packages":[],"classes":[{"name":"CookieProvider","fullName":"Ext.state.CookieProvider","summary":"The default Provider implementation which saves state via cookies.\r\n<br />Usage:\r\n <pre><code>\r\n   var cp = new Ext.state.CookieProvider({\r\n       path: \"/cgi-bin/\",\r\n       expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days\r\n       domain: \"extjs.com\"\r\n   });\r\n   Ext.state.Manager.setProvider(cp);\r\n </code></pre>\r\n@cfg {String} path The path for which the cookie is active (defaults to root '/' which makes it active for all pages in the site)\r\n@cfg {Date} expires The cookie expiration date (defaults to 7 days from now)\r\n@cfg {String} domain The domain to save the cookie for.  Note that you cannot specify a different domain than\r\nyour page is on, but you can specify a sub-domain, or simply the domain itself like 'extjs.com' to include\r\nall sub-domains if you need to access cookies across different sub-domains (defaults to null which uses the same\r\ndomain the page is running on including the 'www' like 'www.extjs.com')\r\n@cfg {Boolean} secure True if the site is using SSL (defaults to false)\r\n","package":"state","definedIn":"state\\CookieProvider.js","xtype":null,"extends":"Ext.state.Provider","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new CookieProvider."},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Manager","fullName":"Ext.state.Manager","summary":"This is the global state manager. By default all components that are \"state aware\" check this class\r\nfor state information if you don't pass them a custom state provider. In order for this class\r\nto be useful, it must be initialized with a provider when your application initializes. Example usage:\r\n <pre><code>\r\n// in your initialization function\r\ninit : function () {\r\n   Ext.state.Manager.setProvider(new Ext.state.CookieProvider());\r\n   var win = new Window(...);\r\n   win.restoreState();\r\n}\r\n </code></pre>\r\n","package":"state","definedIn":"state\\StateManager.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The key name"}],"return":null,"hide":false,"private":false,"name":"clear","summary":"Clears a value from the state\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The key name"},{"type":"Mixed","optional":false,"name":"defaultValue","summary":"The default value to return if the key lookup does not match"}],"return":{"type":"Mixed","summary":"The state data"},"hide":false,"private":false,"name":"get","summary":"Returns the current value for a key\r\n"},{"parameters":[],"return":{"type":"Provider","summary":"The state provider"},"hide":false,"private":false,"name":"getProvider","summary":"Gets the currently configured state provider\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The key name"},{"type":"Mixed","optional":false,"name":"value","summary":"The state data"}],"return":null,"hide":false,"private":false,"name":"set","summary":"Sets the value for a key\r\n"},{"parameters":[{"type":"Provider","optional":false,"name":"stateProvider","summary":"The state provider to set"}],"return":null,"hide":false,"private":false,"name":"setProvider","summary":"Configures the default state provider for your application\r\n"}],"events":[]},{"name":"Provider","fullName":"Ext.state.Provider","summary":"Abstract base class for state provider implementations. This class provides methods\r\nfor encoding and decoding <b>typed</b> variables including dates and defines the\r\nProvider interface.\r\n","package":"state","definedIn":"state\\Provider.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.state.CookieProvider","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The key name"}],"return":null,"hide":false,"private":false,"name":"clear","summary":"Clears a value from the state\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The value to decode"}],"return":{"type":"Mixed","summary":"The decoded value"},"hide":false,"private":false,"name":"decodeValue","summary":"Decodes a string previously encoded with {@link #encodeValue}.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to encode"}],"return":{"type":"String","summary":"The encoded value"},"hide":false,"private":false,"name":"encodeValue","summary":"Encodes a value including type information.  Decode with {@link #decodeValue}.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The key name"},{"type":"Mixed","optional":false,"name":"defaultValue","summary":"A default value to return if the key's value is not found"}],"return":{"type":"Mixed","summary":"The state data"},"hide":false,"private":false,"name":"get","summary":"Returns the current value for a key\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The key name"},{"type":"Mixed","optional":false,"name":"value","summary":"The value to set"}],"return":null,"hide":false,"private":false,"name":"set","summary":"Sets the value for a key\r\n"}],"events":[{"parameters":[{"type":"Provider","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"key","summary":"The state key which was changed"},{"type":"String","optional":false,"name":"value","summary":"The encoded value for the state"}],"name":"statechange","summary":"Fires when a state change occurs."}]}]},{"name":"tree","fullName":"tree","parentFullName":"Ext","packages":[],"classes":[{"name":"AsyncTreeNode","fullName":"Ext.tree.AsyncTreeNode","summary":"@cfg {TreeLoader} loader A TreeLoader to be used by this node (defaults to the loader defined on the tree)\r\n","package":"tree","definedIn":"widgets\\tree\\AsyncTreeNode.js","xtype":null,"extends":"Ext.tree.TreeNode","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object/String","optional":false,"name":"attributes","summary":"The attributes/config for the node or just a string with the text for the node"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"loader","summary":"The loader used by this node (defaults to using the tree's defined loader)\r\n"}],"methods":[{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isLoaded","summary":"Returns true if this node has been loaded\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isLoading","summary":"Returns true if this node is currently loading\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"callback","summary":""},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the callback."}],"return":null,"hide":false,"private":false,"name":"reload","summary":"Trigger a reload for this node\r\n"}],"events":[{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"}],"name":"beforeload","summary":"Fires before this node is loaded, return false to cancel."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"}],"name":"load","summary":"Fires when this node is loaded."}]},{"name":"DefaultSelectionModel","fullName":"Ext.tree.DefaultSelectionModel","summary":"The default single selection for a TreePanel.\r\n","package":"tree","definedIn":"widgets\\tree\\TreeSelectionModel.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearSelections","summary":"Clear all selections\r\n"},{"parameters":[],"return":{"type":"TreeNode","summary":"The selected node"},"hide":false,"private":false,"name":"getSelectedNode","summary":"Get the selected node\r\n"},{"parameters":[{"type":"TreeNode","optional":false,"name":"node","summary":"The node to check"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isSelected","summary":"Returns true if the node is selected\r\n"},{"parameters":[{"type":"TreeNode","optional":false,"name":"node","summary":"The node to select"}],"return":{"type":"TreeNode","summary":"The selected node"},"hide":false,"private":false,"name":"select","summary":"Select a node.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"selectNext","summary":"Selects the node above the selected node in the tree, intelligently walking the nodes\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"selectPrevious","summary":"Selects the node above the selected node in the tree, intelligently walking the nodes\r\n"},{"parameters":[{"type":"TreeNode","optional":false,"name":"node","summary":"The node to unselect"}],"return":null,"hide":false,"private":false,"name":"unselect","summary":"Deselect a node.\r\n"}],"events":[{"parameters":[{"type":"DefaultSelectionModel","optional":false,"name":"el","summary":"this"},{"type":"TreeNode","optional":false,"name":"node","summary":"the new selection"}],"name":"beforeselect","summary":"Fires before the selected node changes, return false to cancel the change."},{"parameters":[{"type":"DefaultSelectionModel","optional":false,"name":"el","summary":"this"},{"type":"TreeNode","optional":false,"name":"node","summary":"the new selection"}],"name":"selectionchange","summary":"Fires when the selected node changes."}]},{"name":"MultiSelectionModel","fullName":"Ext.tree.MultiSelectionModel","summary":"Multi selection for a TreePanel.\r\n","package":"tree","definedIn":"widgets\\tree\\TreeSelectionModel.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"clearSelections","summary":"Clear all selections\r\n"},{"parameters":[],"return":{"type":"Array","summary":""},"hide":false,"private":false,"name":"getSelectedNodes","summary":"Returns an array of the selected nodes\r\n"},{"parameters":[{"type":"TreeNode","optional":false,"name":"node","summary":"The node to check"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isSelected","summary":"Returns true if the node is selected\r\n"},{"parameters":[{"type":"TreeNode","optional":false,"name":"node","summary":"The node to select"},{"type":"EventObject","optional":true,"name":"e","summary":"An event associated with the selection"},{"type":"Boolean","optional":false,"name":"keepExisting","summary":"True to retain existing selections"}],"return":{"type":"TreeNode","summary":"The selected node"},"hide":false,"private":false,"name":"select","summary":"Select a node.\r\n"},{"parameters":[{"type":"TreeNode","optional":false,"name":"node","summary":"The node to unselect"}],"return":null,"hide":false,"private":false,"name":"unselect","summary":"Deselect a node.\r\n"}],"events":[{"parameters":[{"type":"MultiSelectionModel","optional":false,"name":"el","summary":"this"},{"type":"Array","optional":false,"name":"nodes","summary":"Array of the selected nodes"}],"name":"selectionchange","summary":"Fires when the selected nodes change."}]},{"name":"RootTreeNodeUI","fullName":"Ext.tree.RootTreeNodeUI","summary":"This class provides the default UI implementation for <b>root</b> Ext TreeNodes.\r\nThe RootTreeNode UI implementation allows customizing the appearance of the root tree node.<br>\r\n<p>\r\nIf you are customizing the Tree's user interface, you\r\nmay need to extend this class, but you should never need to instantiate this class.<br>\r\n","package":"tree","definedIn":"widgets\\tree\\TreeNodeUI.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"TreeDragZone","fullName":"Ext.tree.TreeDragZone","summary":"","package":"tree","definedIn":"widgets\\tree\\TreeDragZone.js","xtype":null,"extends":"Ext.dd.DragZone","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String/HTMLElement/Element","optional":false,"name":"tree","summary":"The {@link Ext.tree.TreePanel} for which to enable dragging"},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"ddGroup","summary":"A named drag drop group to which this object belongs.  If a group is specified, then this object will only\r\ninteract with other drag drop objects in the same group (defaults to 'TreeDD').\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"tree","summary":"The TreePanel for this drag zone\r\n"}],"methods":[],"events":[]},{"name":"TreeDropZone","fullName":"Ext.tree.TreeDropZone","summary":"","package":"tree","definedIn":"widgets\\tree\\TreeDropZone.js","xtype":null,"extends":"Ext.dd.DropZone","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String/HTMLElement/Element","optional":false,"name":"tree","summary":"The {@link Ext.tree.TreePanel} for which to enable dropping"},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"allowContainerDrop","summary":"True if drops on the tree container (outside of a specific tree node) are allowed (defaults to false)\r\n"},{"type":"Boolean","optional":false,"name":"allowParentInsert","summary":"Allow inserting a dragged node between an expanded parent node and its first child that will become a\r\nsibling of the parent when dropped (defaults to false)\r\n"},{"type":"String","optional":false,"name":"appendOnly","summary":"True if the tree should only allow append drops (use for trees which are sorted, defaults to false)\r\n"},{"type":"String","optional":false,"name":"ddGroup","summary":"A named drag drop group to which this object belongs.  If a group is specified, then this object will only\r\ninteract with other drag drop objects in the same group (defaults to 'TreeDD').\r\n"},{"type":"String","optional":false,"name":"expandDelay","summary":"The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node\r\nover the target (defaults to 1000)\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"dragOverData","summary":"Arbitrary data that can be associated with this tree and will be included in the event object that gets\r\npassed to any nodedragover event handler (defaults to {})\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"tree","summary":"The TreePanel for this drop zone\r\n"}],"methods":[],"events":[]},{"name":"TreeEditor","fullName":"Ext.tree.TreeEditor","summary":"Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used\r\nas the editor field.\r\n","package":"tree","definedIn":"widgets\\tree\\TreeEditor.js","xtype":null,"extends":"Ext.Editor","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"TreePanel","optional":false,"name":"tree","summary":""},{"type":"Object","optional":true,"name":"fieldConfig","summary":"Either a prebuilt {@link Ext.form.Field} instance or a Field config object that will be applied to the default field instance (defaults to a {@link Ext.form.TextField})."},{"type":"Object","optional":true,"name":"config","summary":"A TreeEditor config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"alignment","summary":"The position to align to (see {@link Ext.Element#alignTo} for more details, defaults to \"l-l\").\r\n"},{"type":"String","optional":false,"name":"cls","summary":"CSS class to apply to the editor (defaults to \"x-small-editor x-tree-editor\")\r\n"},{"type":"Number","optional":false,"name":"editDelay","summary":"editing on the current node (defaults to 350).  If two clicks occur on the same node within this time span,\r\nthe editor for the node will display, otherwise it will be processed as a regular click.\r\n"},{"type":"Boolean","optional":false,"name":"hideEl","summary":"True to hide the bound element while the editor is displayed (defaults to false)\r\n"},{"type":"Number","optional":false,"name":"maxWidth","summary":"The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed\r\nthe containing tree element's size, it will be automatically limited for you to the container width, taking\r\nscroll and client offsets into account prior to each edit.\r\n"},{"type":"Boolean","optional":false,"name":"shim","summary":"True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"editNode","summary":"The {@link Ext.tree.TreeNode TreeNode} this editor is bound to. Read-only.\r\n"}],"methods":[{"parameters":[{"type":"Ext.tree.TreeNode} The","optional":false,"name":"nodeTreeNode","summary":"to edit. The TreeNode must be {@link Ext.tree.TreeNode#editable editable}."}],"return":null,"hide":false,"private":false,"name":"triggerEdit","summary":"Edit the text of the passed {@link Ext.tree.TreeNode TreeNode}.\r\n"}],"events":[]},{"name":"TreeFilter","fullName":"Ext.tree.TreeFilter","summary":"Note this class is experimental and doesn't update the indent (lines) or expand collapse icons of the nodes\r\n","package":"tree","definedIn":"widgets\\tree\\TreeFilter.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":true,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":null},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"clear","summary":"Clears the current filter. Note: with the \"remove\" option\r\nset a filter cannot be cleared.\r\n"},{"parameters":[{"type":"String/RegExp","optional":false,"name":"value","summary":"Either string that the attribute value\r\nshould start with or a RegExp to test against the attribute"},{"type":"String","optional":true,"name":"attr","summary":"The attribute passed in your node's attributes collection. Defaults to \"text\"."},{"type":"TreeNode","optional":true,"name":"startNode","summary":"The node to start the filter at."}],"return":null,"hide":false,"private":false,"name":"filter","summary":"Filter the data by a specific attribute.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The filter function"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to the current node)"}],"return":null,"hide":false,"private":false,"name":"filterBy","summary":"Filter by a function. The passed function will be called with each\r\nnode in the tree (or from the startNode). If the function returns true, the node is kept\r\notherwise it is filtered. If a node is filtered, its children are also filtered.\r\n"}],"events":[]},{"name":"TreeLoader","fullName":"Ext.tree.TreeLoader","summary":"A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}'s child\r\nnodes from a specified URL. The response must be a JavaScript Array definition\r\nwhose elements are node definition objects. e.g.:\r\n<pre><code>\r\n    [{\r\n        id: 1,\r\n        text: 'A leaf Node',\r\n        leaf: true\r\n    },{\r\n        id: 2,\r\n        text: 'A folder Node',\r\n        children: [{\r\n            id: 3,\r\n            text: 'A child Node',\r\n            leaf: true\r\n        }]\r\n   }]\r\n</code></pre>\r\n<br><br>\r\nA server request is sent, and child nodes are loaded only when a node is expanded.\r\nThe loading node's id is passed to the server under the parameter name \"node\" to\r\nenable the server to produce the correct child nodes.\r\n<br><br>\r\nTo pass extra parameters, an event handler may be attached to the \"beforeload\"\r\nevent, and the parameters specified in the TreeLoader's baseParams property:\r\n<pre><code>\r\n    myTreeLoader.on(\"beforeload\", function (treeLoader, node) {\r\n        this.baseParams.category = node.attributes.category;\r\n    }, this);\r\n</code></pre>\r\nThis would pass an HTTP parameter called \"category\" to the server containing\r\nthe value of the Node's \"category\" attribute.\r\n","package":"tree","definedIn":"widgets\\tree\\TreeLoader.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A config object containing config properties."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Treeloader."},"subclasses":"","configOptions":[{"type":"Object","optional":false,"name":"baseAttrs","summary":"created by this loader. If the attributes sent by the server have an attribute in this object,\r\nthey take priority.\r\n"},{"type":"Object","optional":false,"name":"baseParams","summary":"specify HTTP parameters to be passed to each request for child nodes.\r\n"},{"type":"Boolean","optional":false,"name":"clearOnLoad","summary":"child nodes before loading.\r\n"},{"type":"String","optional":false,"name":"dataUrl","summary":"specifies an array of node definition objects representing the child nodes\r\nto be loaded.\r\n"},{"type":"Function","optional":false,"name":"directFn","summary":"Function to call when executing a request.\r\n"},{"type":"Array/String","optional":false,"name":"paramOrder","summary":"A list of params to be executed\r\nserver side.  Specify the params in the order in which they must be executed on the server-side\r\nas either (1) an Array of String values, or (2) a String of params delimited by either whitespace,\r\ncomma, or pipe. For example,\r\nany of the following would be acceptable:<pre><code>\r\nparamOrder: ['param1','param2','param3']\r\nparamOrder: 'param1 param2 param3'\r\nparamOrder: 'param1,param2,param3'\r\nparamOrder: 'param1|param2|param'\r\n     </code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"paramsAsHash","summary":"Send parameters as a collection of named arguments (defaults to <tt>false</tt>). Providing a\r\n<tt>{@link #paramOrder}</tt> nullifies this configuration.\r\n"},{"type":"Boolean","optional":false,"name":"preloadChildren","summary":""},{"type":"String","optional":false,"name":"requestMethod","summary":""},{"type":"Object","optional":false,"name":"uiProviders","summary":"specify custom {@link Ext.tree.TreeNodeUI} implementations. If the optional\r\n<i>uiProvider</i> attribute of a returned child node is a string rather\r\nthan a reference to a TreeNodeUI implementation, then that string value\r\nis used as a property name in the uiProviders object.\r\n"},{"type":"String","optional":false,"name":"url","summary":""}],"properties":[],"methods":[{"parameters":[{"type":"Object} The","optional":false,"name":"attrattributes","summary":"from which to create the new node."}],"return":null,"hide":false,"private":false,"name":"createNode","summary":"<p>Override this function for custom TreeNode node implementation, or to\r\nmodify the attributes at creation time.</p>\r\nExample:<pre><code>\r\nnew Ext.tree.TreePanel({\r\n    ...\r\n    loader: new Ext.tree.TreeLoader({\r\n        url: 'dataUrl',\r\n        createNode: function (attr) {\r\n//          Allow consolidation consignments to have\r\n//          consignments dropped into them.\r\n            if (attr.isConsolidation) {\r\n                attr.iconCls = 'x-consol',\r\n                attr.allowDrop = true;\r\n            }\r\n            return Ext.tree.TreeLoader.prototype.createNode.call(this, attr);\r\n        }\r\n    }),\r\n    ...\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Ext.tree.TreeNode","optional":false,"name":"node","summary":""},{"type":"Function","optional":false,"name":"callback","summary":""},{"type":"Object","optional":false,"name":"scope","summary":""}],"return":null,"hide":false,"private":false,"name":"load","summary":"Load an {@link Ext.tree.TreeNode} from the URL specified in the constructor.\r\nThis is called automatically when a node is expanded, but may be used to reload\r\na node (or append new children if the {@link #clearOnLoad} option is false.)\r\n"}],"events":[{"parameters":[{"type":"Object","optional":false,"name":"node","summary":"The {@link Ext.tree.TreeNode} object being loaded."},{"type":"Object","optional":false,"name":"callback","summary":"The callback function specified in the {@link #load} call."}],"name":"beforeload","summary":"Fires before a network request is made to retrieve the Json text which specifies a node's children."},{"parameters":[{"type":"Object","optional":false,"name":"node","summary":"The {@link Ext.tree.TreeNode} object being loaded."},{"type":"Object","optional":false,"name":"response","summary":"The response object containing the data from the server."}],"name":"load","summary":"Fires when the node has been successfuly loaded."},{"parameters":[{"type":"Object","optional":false,"name":"node","summary":"The {@link Ext.tree.TreeNode} object being loaded."},{"type":"Object","optional":false,"name":"response","summary":"The response object containing the data from the server."}],"name":"loadexception","summary":"Fires if the network request failed."}]},{"name":"TreeNode","fullName":"Ext.tree.TreeNode","summary":"@cfg {String} text The text for this node\r\n@cfg {Boolean} expanded true to start the node expanded\r\n@cfg {Boolean} allowDrag False to make this node undraggable if {@link #draggable} = true (defaults to true)\r\n@cfg {Boolean} allowDrop False if this node cannot have child nodes dropped on it (defaults to true)\r\n@cfg {Boolean} disabled true to start the node disabled\r\n@cfg {String} icon The path to an icon for the node. The preferred way to do this\r\nis to use the cls or iconCls attributes and add the icon via a CSS background image.\r\n@cfg {String} cls A css class to be added to the node\r\n@cfg {String} iconCls A css class to be added to the nodes icon element for applying css background images\r\n@cfg {String} href URL of the link used for the node (defaults to #)\r\n@cfg {String} hrefTarget target frame for the link\r\n@cfg {Boolean} hidden True to render hidden. (Defaults to false).\r\n@cfg {String} qtip An Ext QuickTip for the node\r\n@cfg {Boolean} expandable If set to true, the node will always show a plus/minus icon, even when empty\r\n@cfg {String} qtipCfg An Ext QuickTip config for the node (used instead of qtip)\r\n@cfg {Boolean} singleClickExpand True for single click expand on this node\r\n@cfg {Function} uiProvider A UI <b>class</b> to use for this node (defaults to Ext.tree.TreeNodeUI)\r\n@cfg {Boolean} checked True to render a checked checkbox for this node, false to render an unchecked checkbox\r\n(defaults to undefined with no checkbox rendered)\r\n@cfg {Boolean} draggable True to make this node draggable (defaults to false)\r\n@cfg {Boolean} isTarget False to not allow this node to act as a drop target (defaults to true)\r\n@cfg {Boolean} allowChildren False to not allow this node to have child nodes (defaults to true)\r\n@cfg {Boolean} editable False to not allow this node to be edited by an (@link Ext.tree.TreeEditor} (defaults to true)\r\n","package":"tree","definedIn":"widgets\\tree\\TreeNode.js","xtype":null,"extends":"Ext.data.Node","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object/String","optional":false,"name":"attributes","summary":"The attributes/config for the node or just a string with the text for the node"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.tree.AsyncTreeNode","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"disabled","summary":"True if this node is disabled.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"hidden","summary":"True if this node is hidden.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"text","summary":"Read-only. The text for this node. To change it use <code>{@link #setText}</code>.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"ui","summary":"Read-only. The UI for this node\r\n"}],"methods":[{"parameters":[{"type":"Boolean","optional":true,"name":"deep","summary":"True to collapse all children as well"},{"type":"Boolean","optional":true,"name":"anim","summary":"false to cancel the default animation"},{"type":"Function","optional":true,"name":"callback","summary":"A callback to be called when\r\nexpanding this node completes (does not wait for deep expand to complete).\r\nCalled with 1 parameter, this node."},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the callback."}],"return":null,"hide":false,"private":false,"name":"collapse","summary":"Collapse this node.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"deep","summary":"true if the child nodes should also collapse their child nodes"}],"return":null,"hide":false,"private":false,"name":"collapseChildNodes","summary":"Collapse all child nodes\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"disable","summary":"Disables this node\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"enable","summary":"Enables this node\r\n"},{"parameters":[{"type":"Function","optional":true,"name":"callback","summary":"A function to call when the node has been made visible."},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the callback."}],"return":null,"hide":false,"private":false,"name":"ensureVisible","summary":"Ensures all parent nodes are expanded, and if necessary, scrolls\r\nthe node into view.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"deep","summary":"True to expand all children as well"},{"type":"Boolean","optional":true,"name":"anim","summary":"false to cancel the default animation"},{"type":"Function","optional":true,"name":"callback","summary":"A callback to be called when\r\nexpanding this node completes (does not wait for deep expand to complete).\r\nCalled with 1 parameter, this node."},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the callback."}],"return":null,"hide":false,"private":false,"name":"expand","summary":"Expand this node.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"deep","summary":"true if the child nodes should also expand their child nodes"}],"return":null,"hide":false,"private":false,"name":"expandChildNodes","summary":"Expand all child nodes\r\n"},{"parameters":[],"return":{"type":"TreeNodeUI","summary":"The object which is providing the user interface for this tree"},"hide":false,"private":false,"name":"getUI","summary":"Returns the UI object for this node.\r\nnode. Unless otherwise specified in the {@link #uiProvider}, this will be an instance\r\nof {@link Ext.tree.TreeNodeUI}\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isExpanded","summary":"Returns true if this node is expanded\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isSelected","summary":"Returns true if this node is selected\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"select","summary":"Triggers selection of this node\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":""}],"return":null,"hide":false,"private":false,"name":"setText","summary":"Sets the text for this node\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"toggle","summary":"Toggles expanded/collapsed state of the node\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"unselect","summary":"Triggers deselection of this node\r\n"}],"events":[{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"}],"name":"beforechildrenrendered","summary":"Fires right before the child nodes for this node are rendered."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"beforeclick","summary":"Fires before click processing. Return false to cancel the default action."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"deep","summary":""},{"type":"Boolean","optional":false,"name":"anim","summary":""}],"name":"beforecollapse","summary":"Fires before this node is collapsed, return false to cancel."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"beforedblclick","summary":"Fires before double click processing. Return false to cancel the default action."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"deep","summary":""},{"type":"Boolean","optional":false,"name":"anim","summary":""}],"name":"beforeexpand","summary":"Fires before this node is expanded, return false to cancel."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"checked","summary":""}],"name":"checkchange","summary":"Fires when a node with a checkbox's checked property changes."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"click","summary":"Fires when this node is clicked."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"}],"name":"collapse","summary":"Fires when this node is collapsed."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"contextmenu","summary":"Fires when this node is right clicked."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"dblclick","summary":"Fires when this node is double clicked."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"disabled","summary":""}],"name":"disabledchange","summary":"Fires when the disabled status of this node changes."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"}],"name":"expand","summary":"Fires when this node is expanded."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"text","summary":"The new text"},{"type":"String","optional":false,"name":"oldText","summary":"The old text"}],"name":"textchange","summary":"Fires when the text for this node is changed."}]},{"name":"TreeNodeUI","fullName":"Ext.tree.TreeNodeUI","summary":"This class provides the default UI implementation for Ext TreeNodes.\r\nThe TreeNode UI implementation is separate from the\r\ntree implementation, and allows customizing of the appearance of\r\ntree nodes.<br>\r\n<p>\r\nIf you are customizing the Tree's user interface, you\r\nmay need to extend this class, but you should never need to instantiate this class.<br>\r\n<p>\r\nThis class provides access to the user interface components of an Ext TreeNode, through\r\n{@link Ext.tree.TreeNode#getUI}\r\n","package":"tree","definedIn":"widgets\\tree\\TreeNodeUI.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String/Array","optional":false,"name":"className","summary":"The CSS class to add, or an array of classes"}],"return":null,"hide":false,"private":false,"name":"addClass","summary":"Adds one or more CSS classes to the node's UI element.\r\nDuplicate classes are automatically filtered out.\r\n"},{"parameters":[],"return":{"type":"HtmlElement","summary":"The DOM anchor element."},"hide":false,"private":false,"name":"getAnchor","summary":"Returns the &lt;a> element that provides focus for the node's UI.\r\n"},{"parameters":[],"return":{"type":"HtmlElement","summary":"The DOM image element."},"hide":false,"private":false,"name":"getIconEl","summary":"Returns the icon &lt;img> element.\r\n"},{"parameters":[],"return":{"type":"HtmlNode","summary":"The DOM text node."},"hide":false,"private":false,"name":"getTextEl","summary":"Returns the text node.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hides this node.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"The checked flag."},"hide":false,"private":false,"name":"isChecked","summary":"Returns the checked status of the node. If the node was rendered with no\r\ncheckbox, it returns false.\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"className","summary":"The CSS class to remove, or an array of classes"}],"return":null,"hide":false,"private":false,"name":"removeClass","summary":"Removes one or more CSS classes from the node's UI element.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"show","summary":"Shows this node.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"toggleCheck","summary":"Sets the checked status of the tree node to the passed value, or, if no value was passed,\r\ntoggles the checked status. If the node was rendered with no checkbox, this has no effect.\r\n"}],"events":[]},{"name":"TreePanel","fullName":"Ext.tree.TreePanel","summary":"<p>The TreePanel provides tree-structured UI representation of tree-structured data.</p>\r\n<p>{@link Ext.tree.TreeNode TreeNode}s added to the TreePanel may each contain metadata\r\nused by your application in their {@link Ext.tree.TreeNode#attributes attributes} property.</p>\r\n<p><b>A TreePanel must have a {@link #root} node before it is rendered.</b> This may either be\r\nspecified using the {@link #root} config option, or using the {@link #setRootNode} method.\r\n<p>An example of tree rendered to an existing div:</p><pre><code>\r\nvar tree = new Ext.tree.TreePanel({\r\n    renderTo: 'tree-div',\r\n    useArrows: true,\r\n    autoScroll: true,\r\n    animate: true,\r\n    enableDD: true,\r\n    containerScroll: true,\r\n    border: false,\r\n    // auto create TreeLoader\r\n    dataUrl: 'get-nodes.php',\r\n\r\n    root: {\r\n        nodeType: 'async',\r\n        text: 'Ext JS',\r\n        draggable: false,\r\n        id: 'source'\r\n    }\r\n});\r\n\r\ntree.getRootNode().expand();\r\n</code></pre>\r\n<p>The example above would work with a data packet similar to this:</p><pre><code>\r\n[{\r\n    \"text\": \"adapter\",\r\n    \"id\": \"source\\/adapter\",\r\n    \"cls\": \"folder\"\r\n}, {\r\n    \"text\": \"dd\",\r\n    \"id\": \"source\\/dd\",\r\n    \"cls\": \"folder\"\r\n}, {\r\n    \"text\": \"debug.js\",\r\n    \"id\": \"source\\/debug.js\",\r\n    \"leaf\": true,\r\n    \"cls\": \"file\"\r\n}]\r\n</code></pre>\r\n<p>An example of tree within a Viewport:</p><pre><code>\r\nnew Ext.Viewport({\r\n    layout: 'border',\r\n    items: [{\r\n        region: 'west',\r\n        collapsible: true,\r\n        title: 'Navigation',\r\n        xtype: 'treepanel',\r\n        width: 200,\r\n        autoScroll: true,\r\n        split: true,\r\n        loader: new Ext.tree.TreeLoader(),\r\n        root: new Ext.tree.AsyncTreeNode({\r\n            expanded: true,\r\n            children: [{\r\n                text: 'Menu Option 1',\r\n                leaf: true\r\n            }, {\r\n                text: 'Menu Option 2',\r\n                leaf: true\r\n            }, {\r\n                text: 'Menu Option 3',\r\n                leaf: true\r\n            }]\r\n        }),\r\n        rootVisible: false,\r\n        listeners: {\r\n            click: function (n) {\r\n                Ext.Msg.alert('Navigation Tree Click', 'You clicked: \"' + n.attributes.text + '\"');\r\n            }\r\n        }\r\n    }, {\r\n        region: 'center',\r\n        xtype: 'tabpanel',\r\n        // remaining code not shown ...\r\n    }]\r\n});\r\n</code></pre>\r\n\r\n@cfg {Ext.tree.TreeNode} root The root node for the tree.\r\n@cfg {Boolean} rootVisible <tt>false</tt> to hide the root node (defaults to <tt>true</tt>)\r\n@cfg {Boolean} lines <tt>false</tt> to disable tree lines (defaults to <tt>true</tt>)\r\n@cfg {Boolean} enableDD <tt>true</tt> to enable drag and drop\r\n@cfg {Boolean} enableDrag <tt>true</tt> to enable just drag\r\n@cfg {Boolean} enableDrop <tt>true</tt> to enable just drop\r\n@cfg {Object} dragConfig Custom config to pass to the {@link Ext.tree.TreeDragZone} instance\r\n@cfg {Object} dropConfig Custom config to pass to the {@link Ext.tree.TreeDropZone} instance\r\n@cfg {String} ddGroup The DD group this TreePanel belongs to\r\n@cfg {Boolean} ddAppendOnly <tt>true</tt> if the tree should only allow append drops (use for trees which are sorted)\r\n@cfg {Boolean} ddScroll <tt>true</tt> to enable body scrolling\r\n@cfg {Boolean} containerScroll <tt>true</tt> to register this container with ScrollManager\r\n@cfg {Boolean} hlDrop <tt>false</tt> to disable node highlight on drop (defaults to the value of {@link Ext#enableFx})\r\n@cfg {String} hlColor The color of the node highlight (defaults to <tt>'C3DAF9'</tt>)\r\n@cfg {Boolean} animate <tt>true</tt> to enable animated expand/collapse (defaults to the value of {@link Ext#enableFx})\r\n@cfg {Boolean} singleExpand <tt>true</tt> if only 1 node per branch may be expanded\r\n@cfg {Object} selModel A tree selection model to use with this TreePanel (defaults to an {@link Ext.tree.DefaultSelectionModel})\r\n@cfg {Boolean} trackMouseOver <tt>false</tt> to disable mouse over highlighting\r\n@cfg {Ext.tree.TreeLoader} loader A {@link Ext.tree.TreeLoader} for use with this TreePanel\r\n@cfg {String} pathSeparator The token used to separate sub-paths in path strings (defaults to <tt>'/'</tt>)\r\n@cfg {Boolean} useArrows <tt>true</tt> to use Vista-style arrows in the tree (defaults to <tt>false</tt>)\r\n@cfg {String} requestMethod The HTTP request method for loading data (defaults to the value of {@link Ext.Ajax#method}).\r\n\r\n","package":"tree","definedIn":"widgets\\tree\\TreePanel.js","xtype":"treepanel","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String/Number","optional":false,"name":"activeItem","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"autoDestroy","summary":"@hide\r\n"},{"type":"Object/String/Function","optional":false,"name":"autoLoad","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"autoWidth","summary":"@hide\r\n"},{"type":"Boolean/Number","optional":false,"name":"bufferResize","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"defaultType","summary":"@hide\r\n"},{"type":"Object","optional":false,"name":"defaults","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"hideBorders","summary":"@hide\r\n"},{"type":"Mixed","optional":false,"name":"items","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"layout","summary":"@hide\r\n"},{"type":"Object","optional":false,"name":"layoutConfig","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"monitorResize","summary":"@hide\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"root","summary":"The root node of this tree.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"dropZone","summary":"The dropZone used by this tree if drop is enabled (see {@link #enableDD} or {@link #enableDrop})\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"dragZone","summary":"The dragZone used by this tree if drag is enabled (see {@link #enableDD} or {@link #enableDrag})\r\n"}],"methods":[{"parameters":[],"return":{"type":"Node","summary":""},"hide":false,"private":false,"name":"getRootNode","summary":"Returns this root node for this tree\r\n"},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":""}],"return":{"type":"Node","summary":""},"hide":false,"private":false,"name":"setRootNode","summary":"Sets the root node for this tree. If the TreePanel has already rendered a root node, the\r\nprevious root node (and all of its descendants) are destroyed before the new root node is rendered.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":""}],"return":{"type":"Node","summary":""},"hide":false,"private":false,"name":"getNodeById","summary":"Gets a node in this tree by its id\r\n"},{"parameters":[{"type":"String","optional":true,"name":"attribute","summary":"Defaults to null (return the actual nodes)"},{"type":"TreeNode","optional":true,"name":"startNode","summary":"The node to start from, defaults to the root"}],"return":{"type":"Array","summary":""},"hide":false,"private":false,"name":"getChecked","summary":"Retrieve an array of checked nodes, or an array of a specific attribute of checked nodes (e.g. \"id\")\r\n"},{"parameters":[],"return":{"type":"Element","summary":"The container element for this TreePanel."},"hide":false,"private":false,"name":"getEl","summary":"Returns the container element for this TreePanel.\r\n"},{"parameters":[],"return":{"type":"Ext.tree.TreeLoader","summary":"The TreeLoader for this TreePanel."},"hide":false,"private":false,"name":"getLoader","summary":"Returns the default {@link Ext.tree.TreeLoader} for this TreePanel.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"expandAll","summary":"Expand all nodes\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"collapseAll","summary":"Collapse all nodes\r\n"},{"parameters":[],"return":{"type":"TreeSelectionModel","summary":"The selection model used by this TreePanel"},"hide":false,"private":false,"name":"getSelectionModel","summary":"Returns the selection model used by this TreePanel.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"path","summary":""},{"type":"String","optional":true,"name":"attr","summary":"The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)"},{"type":"Function","optional":true,"name":"callback","summary":"The callback to call when the expand is complete. The callback will be called with\r\n(bSuccess, oLastNode) where bSuccess is if the expand was successful and oLastNode is the last node that was expanded."}],"return":null,"hide":false,"private":false,"name":"expandPath","summary":"Expands a specified path in this TreePanel. A path can be retrieved from a node with {@link Ext.data.Node#getPath}\r\n"},{"parameters":[{"type":"String","optional":false,"name":"path","summary":""},{"type":"String","optional":true,"name":"attr","summary":"The attribute used in the path (see {@link Ext.data.Node#getPath} for more info)"},{"type":"Function","optional":true,"name":"callback","summary":"The callback to call when the selection is complete. The callback will be called with\r\n(bSuccess, oSelNode) where bSuccess is if the selection was successful and oSelNode is the selected node."}],"return":null,"hide":false,"private":false,"name":"selectPath","summary":"Selects the node in this tree at the specified path. A path can be retrieved from a node with {@link Ext.data.Node#getPath}\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"getTreeEl","summary":"Returns the underlying Element for this tree\r\n"}],"events":[{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The newly appended node"},{"type":"Number","optional":false,"name":"index","summary":"The index of the newly appended node"}],"name":"append","summary":"Fires when a new child node is appended to a node in this tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node removed"}],"name":"remove","summary":"Fires when a child node is removed from a node in this tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"node","summary":"The node moved"},{"type":"Node","optional":false,"name":"oldParent","summary":"The old parent of this node"},{"type":"Node","optional":false,"name":"newParent","summary":"The new parent of this node"},{"type":"Number","optional":false,"name":"index","summary":"The index it was moved to"}],"name":"movenode","summary":"Fires when a node is moved to a new location in the tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node inserted"},{"type":"Node","optional":false,"name":"refNode","summary":"The child node the node was inserted before"}],"name":"insert","summary":"Fires when a new child node is inserted in a node in this tree."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be appended"}],"name":"beforeappend","summary":"Fires before a new child is appended to a node in this tree, return false to cancel the append."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be removed"}],"name":"beforeremove","summary":"Fires before a child is removed from a node in this tree, return false to cancel the remove."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"node","summary":"The node being moved"},{"type":"Node","optional":false,"name":"oldParent","summary":"The parent of the node"},{"type":"Node","optional":false,"name":"newParent","summary":"The new parent the node is moving to"},{"type":"Number","optional":false,"name":"index","summary":"The index it is being moved to"}],"name":"beforemovenode","summary":"Fires before a node is moved to a new location in the tree. Return false to cancel the move."},{"parameters":[{"type":"Tree","optional":false,"name":"tree","summary":"The owner tree"},{"type":"Node","optional":false,"name":"parent","summary":"The parent node"},{"type":"Node","optional":false,"name":"node","summary":"The child node to be inserted"},{"type":"Node","optional":false,"name":"refNode","summary":"The child node the node is being inserted before"}],"name":"beforeinsert","summary":"Fires before a new child is inserted in a node in this tree, return false to cancel the insert."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node being loaded"}],"name":"beforeload","summary":"Fires before a node is loaded, return false to cancel."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node that was loaded"}],"name":"load","summary":"Fires when a node is loaded."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"String","optional":false,"name":"text","summary":"The new text"},{"type":"String","optional":false,"name":"oldText","summary":"The old text"}],"name":"textchange","summary":"Fires when the text for a node is changed."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Boolean","optional":false,"name":"deep","summary":""},{"type":"Boolean","optional":false,"name":"anim","summary":""}],"name":"beforeexpandnode","summary":"Fires before a node is expanded, return false to cancel."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Boolean","optional":false,"name":"deep","summary":""},{"type":"Boolean","optional":false,"name":"anim","summary":""}],"name":"beforecollapsenode","summary":"Fires before a node is collapsed, return false to cancel."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"}],"name":"expandnode","summary":"Fires when a node is expanded."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Boolean","optional":false,"name":"disabled","summary":""}],"name":"disabledchange","summary":"Fires when the disabled status of a node changes."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"}],"name":"collapsenode","summary":"Fires when a node is collapsed."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"beforeclick","summary":"Fires before click processing on a node. Return false to cancel the default action."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"click","summary":"Fires when a node is clicked."},{"parameters":[{"type":"Node","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"checked","summary":""}],"name":"checkchange","summary":"Fires when a node with a checkbox's checked property changes."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"beforedblclick","summary":"Fires before double click processing on a node. Return false to cancel the default action."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"dblclick","summary":"Fires when a node is double clicked."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"contextmenu","summary":"Fires when a node is right clicked. To display a context menu in response to this event, first create a Menu object (see {@link Ext.menu.Menu} for details), then add a handler for this event:<pre><code> new Ext.tree.TreePanel({ title: 'My TreePanel', root: new Ext.tree.AsyncTreeNode({ text: 'The Root', children: [ { text: 'Child node 1', leaf: true }, { text: 'Child node 2', leaf: true } ] }), contextMenu: new Ext.menu.Menu({ items: [{ id: 'delete-node', text: 'Delete Node' }], listeners: { itemclick: function (item) { switch (item.id) { case 'delete-node': var n = item.parentMenu.contextNode; if (n.parentNode) { n.remove(); } break; } } } }), listeners: { contextmenu: function (node, e) { //     Register the context node with the menu so that a Menu Item's handler function can access //     it via its {@link Ext.menu.BaseItem#parentMenu parentMenu} property. node.select(); var c = node.getOwnerTree().contextMenu; c.contextNode = node; c.showAt(e.getXY()); } } }); </code></pre>."},{"parameters":[{"type":"Node","optional":false,"name":"node","summary":"The node"}],"name":"beforechildrenrendered","summary":"Fires right before the child nodes for a node are rendered."},{"parameters":[{"type":"Ext.tree.TreePanel","optional":false,"name":"el","summary":"this"},{"type":"Ext.tree.TreeNode","optional":false,"name":"node","summary":""},{"type":"event","optional":false,"name":"e","summary":"The raw browser event"}],"name":"startdrag","summary":"Fires when a node starts being dragged."},{"parameters":[{"type":"Ext.tree.TreePanel","optional":false,"name":"el","summary":"this"},{"type":"Ext.tree.TreeNode","optional":false,"name":"node","summary":""},{"type":"event","optional":false,"name":"e","summary":"The raw browser event"}],"name":"enddrag","summary":"Fires when a drag operation is complete."},{"parameters":[{"type":"Ext.tree.TreePanel","optional":false,"name":"el","summary":"this"},{"type":"Ext.tree.TreeNode","optional":false,"name":"node","summary":""},{"type":"DD","optional":false,"name":"dd","summary":"The dd it was dropped on"},{"type":"event","optional":false,"name":"e","summary":"The raw browser event"}],"name":"dragdrop","summary":"Fires when a dragged node is dropped on a valid DD target."},{"parameters":[{"type":"Object","optional":false,"name":"dropEvent","summary":""}],"name":"beforenodedrop","summary":"Fires when a DD object is dropped on a node in this tree for preprocessing. Return false to cancel the drop. The dropEvent passed to handlers has the following properties:<br /> <ul style=\"padding:5px;padding-left:16px;\"> <li>tree - The TreePanel</li> <li>target - The node being targeted for the drop</li> <li>data - The drag data from the drag source</li> <li>point - The point of the drop - append, above or below</li> <li>source - The drag source</li> <li>rawEvent - Raw mouse event</li> <li>dropNode - Drop node(s) provided by the source <b>OR</b> you can supply node(s) to be inserted by setting them on this object.</li> <li>cancel - Set this to true to cancel the drop.</li> <li>dropStatus - If the default drop action is cancelled but the drop is valid, setting this to true will prevent the animated \"repair\" from appearing.</li> </ul>."},{"parameters":[{"type":"Object","optional":false,"name":"dropEvent","summary":""}],"name":"nodedrop","summary":"Fires after a DD object is dropped on a node in this tree. The dropEvent passed to handlers has the following properties:<br /> <ul style=\"padding:5px;padding-left:16px;\"> <li>tree - The TreePanel</li> <li>target - The node being targeted for the drop</li> <li>data - The drag data from the drag source</li> <li>point - The point of the drop - append, above or below</li> <li>source - The drag source</li> <li>rawEvent - Raw mouse event</li> <li>dropNode - Dropped node(s).</li> </ul>."},{"parameters":[{"type":"Object","optional":false,"name":"dragOverEvent","summary":""}],"name":"nodedragover","summary":"Fires when a tree node is being targeted for a drag drop, return false to signal drop not allowed. The dragOverEvent passed to handlers has the following properties:<br /> <ul style=\"padding:5px;padding-left:16px;\"> <li>tree - The TreePanel</li> <li>target - The node being targeted for the drop</li> <li>data - The drag data from the drag source</li> <li>point - The point of the drop - append, above or below</li> <li>source - The drag source</li> <li>rawEvent - Raw mouse event</li> <li>dropNode - Drop node(s) provided by the source.</li> <li>cancel - Set this to true to signal drop not allowed.</li> </ul>."}]},{"name":"TreeSorter","fullName":"Ext.tree.TreeSorter","summary":"Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the\r\nassociated TreePanel that might affect the tree's sort order (beforechildrenrendered, append, insert and textchange).\r\nExample usage:<br />\r\n<pre><code>\r\nnew Ext.tree.TreeSorter(myTree, {\r\n    folderSort: true,\r\n    dir: \"desc\",\r\n    sortType: function (node) {\r\n        // sort by a custom, typed attribute:\r\n        return parseInt(node.id, 10);\r\n    }\r\n});\r\n</code></pre>\r\n","package":"tree","definedIn":"widgets\\tree\\TreeSorter.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"TreePanel","optional":false,"name":"tree","summary":""},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"caseSensitive","summary":""},{"type":"String","optional":false,"name":"dir","summary":""},{"type":"Boolean","optional":false,"name":"folderSort","summary":""},{"type":"String","optional":false,"name":"leafAttr","summary":""},{"type":"String","optional":false,"name":"property","summary":"property is only used if no {@link #sortType} function is specified, otherwise it is ignored.\r\n"},{"type":"Function","optional":false,"name":"sortType","summary":"will be called with a single parameter (the {@link Ext.tree.TreeNode} being evaluated) and is expected to return\r\nthe node's sort value cast to the specific data type required for sorting.  This could be used, for example, when\r\na node's text (or other attribute) should be sorted as a date or numeric value.  See the class description for\r\nexample usage.  Note that if a sortType is specified, any {@link #property} config will be ignored.\r\n"}],"properties":[],"methods":[],"events":[]}]},{"name":"util","fullName":"util","parentFullName":"Ext","packages":[],"classes":[{"name":"ClickRepeater","fullName":"Ext.util.ClickRepeater","summary":"\r\n A wrapper class which can be applied to any element. Fires a \"click\" event while the\r\n mouse is pressed. The interval between firings may be specified in the config but\r\n defaults to 20 milliseconds.\r\n\r\n Optionally, a CSS class may be applied to the element during the time it is pressed.\r\n\r\n @cfg {Mixed} el The element to act as a button.\r\n @cfg {Number} delay The initial delay before the repeating event begins firing.\r\n Similar to an autorepeat key delay.\r\n @cfg {Number} interval The interval between firings of the \"click\" event. Default 20 ms.\r\n @cfg {String} pressClass A CSS class name to be applied to the element while pressed.\r\n @cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.\r\n           \"interval\" and \"delay\" are ignored.\r\n @cfg {Boolean} preventDefault True to prevent the default click event\r\n @cfg {Boolean} stopDefault True to stop the default click event\r\n\r\n @history\r\n    2007-02-02 jvs Original code contributed by Nige \"Animal\" White\r\n    2007-02-02 jvs Renamed to ClickRepeater\r\n    2007-02-03 jvs Modifications for FF Mac and Safari\r\n\r\n","package":"util","definedIn":"util\\ClickRepeater.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to listen on"},{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"disable","summary":"Disables the repeater and stops events from firing.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"enable","summary":"Enables the repeater and allows events to fire.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"disabled","summary":""}],"return":null,"hide":false,"private":false,"name":"setDisabled","summary":"Convenience function for setting disabled/enabled by boolean.\r\n"}],"events":[{"parameters":[{"type":"Ext.util.ClickRepeater","optional":false,"name":"el","summary":"this"}],"name":"click","summary":"Fires on a specified interval during the time the element is pressed."},{"parameters":[{"type":"Ext.util.ClickRepeater","optional":false,"name":"el","summary":"this"}],"name":"mousedown","summary":"Fires when the mouse button is depressed."},{"parameters":[{"type":"Ext.util.ClickRepeater","optional":false,"name":"el","summary":"this"}],"name":"mouseup","summary":"Fires when the mouse key is released."}]},{"name":"Cookies","fullName":"Ext.util.Cookies","summary":"Utility class for managing and interacting with cookies.\r\n","package":"util","definedIn":"util\\Cookies.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The name of the cookie to remove"}],"return":null,"hide":false,"private":false,"name":"clear","summary":"Removes a cookie with the provided name from the browser\r\nif found by setting its expiration date to sometime in the past.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The name of the cookie to get\r\nnull if the cookie name does not exist."}],"return":{"type":"Mixed","summary":"Returns the cookie value for the specified name;"},"hide":false,"private":false,"name":"get","summary":"Retrieves cookies that are accessible by the current page. If a cookie\r\ndoes not exist, <code>get()</code> returns <tt>null</tt>.  The following\r\nexample retrieves the cookie called \"valid\" and stores the String value\r\nin the variable <tt>validStatus</tt>.\r\n<pre><code>\r\nvar validStatus = Ext.util.Cookies.get(\"valid\");\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The name of the cookie to set."},{"type":"Mixed","optional":false,"name":"value","summary":"The value to set for the cookie."},{"type":"Object","optional":true,"name":"expires","summary":"Specify an expiration date the\r\ncookie is to persist until.  Note that the specified Date object will\r\nbe converted to Greenwich Mean Time (GMT)."},{"type":"String","optional":true,"name":"path","summary":"Setting a path on the cookie restricts\r\naccess to pages that match that path. Defaults to all pages (<tt>'/'</tt>)."},{"type":"String","optional":true,"name":"domain","summary":"Setting a domain restricts access to\r\npages on a given domain (typically used to allow cookie access across\r\nsubdomains). For example, \"extjs.com\" will create a cookie that can be\r\naccessed from any subdomain of extjs.com, including www.extjs.com,\r\nsupport.extjs.com, etc."},{"type":"Boolean","optional":true,"name":"secure","summary":"Specify true to indicate that the cookie\r\nshould only be accessible via SSL on a page using the HTTPS protocol.\r\nDefaults to <tt>false</tt>. Note that this will only work if the page\r\ncalling this code uses the HTTPS protocol, otherwise the cookie will be\r\ncreated with default options."}],"return":null,"hide":false,"private":false,"name":"set","summary":"Create a cookie with the specified name and value. Additional settings\r\nfor the cookie may be optionally specified (for example: expiration,\r\naccess restriction, SSL).\r\n"}],"events":[]},{"name":"CSS","fullName":"Ext.util.CSS","summary":"Utility class for manipulating CSS rules\r\n","package":"util","definedIn":"util\\CSS.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"cssText","summary":"The text containing the css rules"},{"type":"String","optional":false,"name":"id","summary":"An id to add to the stylesheet for later removal"}],"return":{"type":"StyleSheet","summary":""},"hide":false,"private":false,"name":"createStyleSheet","summary":"Creates a stylesheet from a text blob of rules.\r\nThese rules will be wrapped in a STYLE tag and appended to the HEAD of the document.\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"selector","summary":"The CSS selector or an array of selectors to try. The first selector that is found is returned."},{"type":"Boolean","optional":false,"name":"refreshCache","summary":"true to refresh the internal cache if you have recently updated any rules or added styles dynamically"}],"return":{"type":"CSSRule","summary":"The CSS rule or null if one is not found"},"hide":false,"private":false,"name":"getRule","summary":"Gets an an individual CSS rule by selector(s)\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"refreshCache","summary":"true to refresh the internal cache"}],"return":{"type":"Object","summary":"An object (hash) of rules indexed by selector"},"hide":false,"private":false,"name":"getRules","summary":"Gets all css rules for the document\r\n"},{"parameters":[],"return":{"type":"Object","summary":"An object (hash) of rules indexed by selector"},"hide":false,"private":false,"name":"refreshCache","summary":"Refresh the rule cache if you have dynamically added stylesheets\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The id of the tag"}],"return":null,"hide":false,"private":false,"name":"removeStyleSheet","summary":"Removes a style or link tag by id\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The id of an existing link tag to remove"},{"type":"String","optional":false,"name":"url","summary":"The href of the new stylesheet to include"}],"return":null,"hide":false,"private":false,"name":"swapStyleSheet","summary":"Dynamically swaps an existing stylesheet reference for a new one\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"selector","summary":"If it's an array it tries each selector until it finds one. Stops immediately once one is found."},{"type":"String","optional":false,"name":"property","summary":"The css property"},{"type":"String","optional":false,"name":"value","summary":"The new value for the property"}],"return":{"type":"Boolean","summary":"true If a rule was found and updated"},"hide":false,"private":false,"name":"updateRule","summary":"Updates a rule property\r\n"}],"events":[]},{"name":"DelayedTask","fullName":"Ext.util.DelayedTask","summary":"<p> The DelayedTask class provides a convenient way to \"buffer\" the execution of a method,\r\nperforming setTimeout where a new timeout cancels the old timeout. When called, the\r\ntask will wait the specified time period before executing. If durng that time period,\r\nthe task is called again, the original call will be cancelled. This continues so that\r\nthe function is only called a single time for each iteration.</p>\r\n<p>This method is especially useful for things like detecting whether a user has finished\r\ntyping in a text field. An example would be performing validation on a keypress. You can\r\nuse this class to buffer the keypress events for a certain number of milliseconds, and\r\nperform only if they stop for that amount of time.  Usage:</p><pre><code>\r\nvar task = new Ext.util.DelayedTask(function () {\r\n    alert(Ext.getDom('myInputField').value.length);\r\n});\r\n// Wait 500ms before calling our function. If the user presses another key \r\n// during that 500ms, it will be cancelled and we'll wait another 500ms.\r\nExt.get('myInputField').on('keypress', function () {\r\n    task.{@link #delay}(500); \r\n});\r\n</code></pre>\r\n<p>Note that we are using a DelayedTask here to illustrate a point. The configuration\r\noption <tt>buffer</tt> for {@link Ext.util.Observable#addListener addListener/on} will\r\nalso setup a delayed task for you to buffer events.</p>\r\n","package":"util","definedIn":"util\\core\\DelayedTask.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Function","optional":true,"name":"fn","summary":"The default function to call."},{"type":"Object","optional":false,"name":"scope","summary":"The default scope (The <code><b>this</b></code> reference) in which the function is called. If not specified, <code>this</code> will refer to the browser window."},{"type":"Array","optional":true,"name":"args","summary":"The default Array of arguments."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"cancel","summary":"Cancel the last queued timeout\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"delay","summary":"The milliseconds to delay"},{"type":"Function","optional":true,"name":"newFn","summary":"Overrides function passed to constructor"},{"type":"Object","optional":true,"name":"newScope","summary":"Overrides scope passed to constructor. Remember that if no scope\r\nis specified, <code>this</code> will refer to the browser window."},{"type":"Array","optional":true,"name":"newArgs","summary":"Overrides args passed to constructor"}],"return":null,"hide":false,"private":false,"name":"delay","summary":"Cancels any pending timeout and queues a new one\r\n"}],"events":[]},{"name":"Format","fullName":"Ext.util.Format","summary":"Reusable data formatting functions\r\n","package":"util","definedIn":"util\\Format.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The text to convert"}],"return":{"type":"String","summary":"The converted text"},"hide":false,"private":false,"name":"capitalize","summary":"Converts the first character only of a string to upper case\r\n"},{"parameters":[{"type":"String/Date","optional":false,"name":"value","summary":"The value to format (Strings must conform to the format expected by the javascript Date object's <a href=\"http://www.w3schools.com/jsref/jsref_parse.asp\">parse()</a> method)"},{"type":"String","optional":true,"name":"format","summary":"Any valid date format string (defaults to 'm/d/Y')"}],"return":{"type":"String","summary":"The formatted date string"},"hide":false,"private":false,"name":"date","summary":"Parse a value into a formatted date using the specified format pattern.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"format","summary":"Any valid date format string"}],"return":{"type":"Function","summary":"The date formatting function"},"hide":false,"private":false,"name":"dateRenderer","summary":"Returns a date rendering function that can be reused to apply a date format multiple times efficiently\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"Reference to check"},{"type":"String","optional":false,"name":"defaultValue","summary":"The value to insert of it's undefined (defaults to \"\")"}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"defaultValue","summary":"Checks a reference and converts it to the default value if it's empty\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The string to truncate"},{"type":"Number","optional":false,"name":"length","summary":"The maximum length to allow before truncating"},{"type":"Boolean","optional":false,"name":"word","summary":"True to try to find a common work break"}],"return":{"type":"String","summary":"The converted text"},"hide":false,"private":false,"name":"ellipsis","summary":"Truncate a string and add an ellipsis ('...') to the end if it exceeds the specified length\r\n"},{"parameters":[{"type":"Number/String","optional":false,"name":"size","summary":"The numeric value to format"}],"return":{"type":"String","summary":"The formatted file size"},"hide":false,"private":false,"name":"fileSize","summary":"Simple format for a file size (xxx bytes, xxx KB, xxx MB)\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The string to decode"}],"return":{"type":"String","summary":"The decoded text"},"hide":false,"private":false,"name":"htmlDecode","summary":"Convert certain characters (&, <, >, and ') from their HTML character equivalents.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The string to encode"}],"return":{"type":"String","summary":"The encoded text"},"hide":false,"private":false,"name":"htmlEncode","summary":"Convert certain characters (&, <, >, and ') to their HTML character equivalents for literal display in web pages.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The text to convert"}],"return":{"type":"String","summary":"The converted text"},"hide":false,"private":false,"name":"lowercase","summary":"Converts a string to all lower case letters\r\n"},{"parameters":[],"return":{"type":"Function","summary":"A function that operates on the passed value."},"hide":false,"private":false,"name":"math","summary":"It does simple math for use in a template, for example:<pre><code>\r\nvar tpl = new Ext.Template('{value} * 10 = {value:math(\"* 10\")}');\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"String","summary":"The string with embedded &lt;br/> tags in place of newlines."},"hide":false,"private":false,"name":"nl2br","summary":"Converts newline characters to the HTML tag &lt;br/>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"v","summary":"The number to format."},{"type":"String","optional":false,"name":"format","summary":"The way you would like to format this text."}],"return":{"type":"String","summary":"The formatted number."},"hide":false,"private":false,"name":"number","summary":"Formats the number according to the format string.\r\n<div style=\"margin-left:40px\">examples (123456.789):\r\n<div style=\"margin-left:10px\">\r\n0 - (123456) show only digits, no precision<br>\r\n0.00 - (123456.78) show only digits, 2 precision<br>\r\n0.0000 - (123456.7890) show only digits, 4 precision<br>\r\n0,000 - (123,456) show comma and digits, no precision<br>\r\n0,000.00 - (123,456.78) show comma and digits, 2 precision<br>\r\n0,0.00 - (123,456.78) shortcut method, show comma and digits, 2 precision<br>\r\nTo reverse the grouping (,) and decimal (.) for international numbers, add /i to the end.\r\nFor example: 0.000,00/i\r\n</div></div>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"format","summary":"Any valid number format string for {@link #number}"}],"return":{"type":"Function","summary":"The number formatting function"},"hide":false,"private":false,"name":"numberRenderer","summary":"Returns a number rendering function that can be reused to apply a number format multiple times efficiently\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"value","summary":"The value to compare against"},{"type":"String","optional":false,"name":"singular","summary":"The singular form of the word"},{"type":"String","optional":true,"name":"plural","summary":"The plural form of the word (defaults to the singular with an \"s\")"}],"return":null,"hide":false,"private":false,"name":"plural","summary":"Selectively do a plural form of a word based on a numeric value. For example, in a template,\r\n{commentCount:plural(\"Comment\")}  would result in \"1 Comment\" if commentCount was 1 or would be \"x Comments\"\r\nif the value is 0 or greater than 1.\r\n"},{"parameters":[{"type":"Number/String","optional":false,"name":"value","summary":"The numeric value to round."},{"type":"Number","optional":false,"name":"precision","summary":"The number of decimal places to which to round the first parameter's value."}],"return":{"type":"Number","summary":"The rounded value."},"hide":false,"private":false,"name":"round","summary":"Rounds the passed number to the required decimal precision.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The text from which to strip script tags"}],"return":{"type":"String","summary":"The stripped text"},"hide":false,"private":false,"name":"stripScripts","summary":"Strips all script tags\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The text from which to strip tags"}],"return":{"type":"String","summary":"The stripped text"},"hide":false,"private":false,"name":"stripTags","summary":"Strips all HTML tags\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The original text"},{"type":"Number","optional":false,"name":"start","summary":"The start index of the substring"},{"type":"Number","optional":false,"name":"length","summary":"The length of the substring"}],"return":{"type":"String","summary":"The substring"},"hide":false,"private":false,"name":"substr","summary":"Returns a substring from within an original string\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The text to trim"}],"return":{"type":"String","summary":"The trimmed text"},"hide":false,"private":false,"name":"trim","summary":"Trims any whitespace from either side of a string\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"Reference to check"}],"return":{"type":"Mixed","summary":"Empty string if converted, otherwise the original value"},"hide":false,"private":false,"name":"undef","summary":"Checks a reference and converts it to empty string if it is undefined\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The text to convert"}],"return":{"type":"String","summary":"The converted text"},"hide":false,"private":false,"name":"uppercase","summary":"Converts a string to all upper case letters\r\n"},{"parameters":[{"type":"Number/String","optional":false,"name":"value","summary":"The numeric value to format"}],"return":{"type":"String","summary":"The formatted currency string"},"hide":false,"private":false,"name":"usMoney","summary":"Format a number as US currency\r\n"}],"events":[]},{"name":"JSON","fullName":"Ext.util.JSON","summary":"Modified version of Douglas Crockford\"s json.js that doesn\"t\r\nmess with the Object prototype\r\nhttp://www.json.org/js.html\r\n\r\nModified version of Douglas Crockford\"s json.js that doesn\"t\r\nmess with the Object prototype\r\nhttp://www.json.org/js.html\r\n","package":"util","definedIn":"util\\core\\JSON.js,util\\JSON.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"json","summary":"The JSON string"}],"return":{"type":"Object","summary":"The resulting object"},"hide":false,"private":false,"name":"decode","summary":"Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError unless the safe option is set.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"o","summary":"The variable to encode"}],"return":{"type":"String","summary":"The JSON string"},"hide":false,"private":false,"name":"encode","summary":"Encodes an Object, Array or other value\r\n"}],"events":[]},{"name":"MixedCollection","fullName":"Ext.util.MixedCollection","summary":"A Collection class that maintains both numeric indexes and keys and exposes events.\r\n","package":"util","definedIn":"util\\MixedCollection.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Boolean","optional":false,"name":"allowFunctions","summary":"Specify <tt>true</tt> if the {@link #addAll} function should add function references to the collection. Defaults to <tt>false</tt>."},{"type":"Function","optional":false,"name":"keyFn","summary":"A function that can accept an item of the type(s) stored in this MixedCollection and return the key value for that item.  This is used when available to look up the key on items that were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is equivalent to providing an implementation for the {@link #getKey} method."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.StoreMgr","configOptions":[{"type":"Boolean","optional":false,"name":"allowFunctions","summary":"function should add function references to the collection. Defaults to\r\n<tt>false</tt>.\r\n"}],"properties":[{"type":null,"static":false,"hide":false,"private":false,"name":"get","summary":"This method calls {@link #item item()}.\r\nReturns the item associated with the passed key OR index. Key has priority\r\nover index.  This is the equivalent of calling {@link #key} first, then if\r\nnothing matched calling {@link #itemAt}.\r\n@param {String/Number} key The key or index of the item.\r\n@return {Object} If the item is found, returns the item.  If the item was\r\nnot found, returns <tt>undefined</tt>. If an item was found, but is a Class,\r\nreturns <tt>null</tt>.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"_sort","summary":"Defaults to sorting by numeric value.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"key","summary":"<p>The key to associate with the item, or the new item.</p>\r\n<p>If a {@link #getKey} implementation was specified for this MixedCollection,\r\nor if the key of the stored items is in a property called <tt><b>id</b></tt>,\r\nthe MixedCollection will be able to <i>derive</i> the key for the new item.\r\nIn this case just pass the new item in this parameter.</p>"},{"type":"Object","optional":false,"name":"o","summary":"The item to add."}],"return":{"type":"Object","summary":"The item added."},"hide":false,"private":false,"name":"add","summary":"Adds an item to the collection. Fires the {@link #add} event when complete.\r\n"},{"parameters":[{"type":"Object/Array","optional":false,"name":"objs","summary":"An Object containing properties which will be added\r\nto the collection, or an Array of values, each of which are added to the collection.\r\nFunctions references will be added to the collection if <code>{@link #allowFunctions}</code>\r\nhas been set to <tt>true</tt>."}],"return":null,"hide":false,"private":false,"name":"addAll","summary":"Adds all elements of an Array or an Object to the collection.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"clear","summary":"Removes all items from the collection.  Fires the {@link #clear} event when complete.\r\n"},{"parameters":[],"return":{"type":"MixedCollection","summary":""},"hide":false,"private":false,"name":"clone","summary":"Creates a shallow copy of this collection\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The Object to look for in the collection."}],"return":{"type":"Boolean","summary":"True if the collection contains the Object as an item."},"hide":false,"private":false,"name":"contains","summary":"Returns true if the collection contains the passed Object as an item.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"key","summary":"The key to look for in the collection."}],"return":{"type":"Boolean","summary":"True if the collection contains the Object as a key."},"hide":false,"private":false,"name":"containsKey","summary":"Returns true if the collection contains the passed Object as a key.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to execute for each item."},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the function."}],"return":null,"hide":false,"private":false,"name":"each","summary":"Executes the specified function once for every item in the collection, passing the following arguments:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>item</b> : Mixed<p class=\"sub-desc\">The collection item</p></li>\r\n<li><b>index</b> : Number<p class=\"sub-desc\">The item's index</p></li>\r\n<li><b>length</b> : Number<p class=\"sub-desc\">The total number of items in the collection</p></li>\r\n</ul></div>\r\nThe function should return a boolean value. Returning false from the function will stop the iteration.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to execute for each item."},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the function."}],"return":null,"hide":false,"private":false,"name":"eachKey","summary":"Executes the specified function once for every key in the collection, passing each\r\nkey, and its associated item as the first two parameters.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"property","summary":"A property on your objects"},{"type":"String/RegExp","optional":false,"name":"value","summary":"Either string that the property values\r\nshould start with or a RegExp to test against the property"},{"type":"Boolean","optional":true,"name":"anyMatch","summary":"True to match any part of the string, not just the beginning"},{"type":"Boolean","optional":true,"name":"caseSensitive","summary":"True for case sensitive comparison (defaults to False)."}],"return":{"type":"MixedCollection","summary":"The new filtered collection"},"hide":false,"private":false,"name":"filter","summary":"Filter the <i>objects</i> in this collection by a specific property.\r\nReturns a new collection that has been filtered.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to be called, it will receive the args o (the object), k (the key)"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to this)"}],"return":{"type":"MixedCollection","summary":"The new filtered collection"},"hide":false,"private":false,"name":"filterBy","summary":"Filter by a function. Returns a <i>new</i> collection that has been filtered.\r\nThe passed function will be called with each object in the collection.\r\nIf the function returns true, the value is included otherwise it is filtered.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The selection function to execute for each item."},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the function."}],"return":{"type":"Object","summary":"The first item in the collection which returned true from the selection function."},"hide":false,"private":false,"name":"find","summary":"Returns the first item in the collection which elicits a true return value from the\r\npassed selection function.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"property","summary":"The name of a property on your objects."},{"type":"String/RegExp","optional":false,"name":"value","summary":"A string that the property values\r\nshould start with or a RegExp to test against the property."},{"type":"Number","optional":true,"name":"start","summary":"The index to start searching at (defaults to 0)."},{"type":"Boolean","optional":true,"name":"anyMatch","summary":"True to match any part of the string, not just the beginning."},{"type":"Boolean","optional":true,"name":"caseSensitive","summary":"True for case sensitive comparison."}],"return":{"type":"Number","summary":"The matched index or -1"},"hide":false,"private":false,"name":"findIndex","summary":"Finds the index of the first matching object in this collection by a specific property/value.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to be called, it will receive the args o (the object), k (the key)."},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to this)."},{"type":"Number","optional":true,"name":"start","summary":"The index to start searching at (defaults to 0)."}],"return":{"type":"Number","summary":"The matched index or -1"},"hide":false,"private":false,"name":"findIndexBy","summary":"Find the index of the first matching object in this collection by a function.\r\nIf the function returns <i>true</i> it is considered a match.\r\n"},{"parameters":[],"return":{"type":"Object","summary":"the first item in the collection.."},"hide":false,"private":false,"name":"first","summary":"Returns the first item in the collection.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"the number of items in the collection."},"hide":false,"private":false,"name":"getCount","summary":"Returns the number of items in the collection.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"item","summary":"The item for which to find the key."}],"return":{"type":"Object","summary":"The key for the passed item."},"hide":false,"private":false,"name":"getKey","summary":"MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation\r\nsimply returns <b><code>item.id</code></b> but you can provide your own implementation\r\nto return a different value as in the following examples:<pre><code>\r\n// normal way\r\nvar mc = new Ext.util.MixedCollection();\r\nmc.add(someEl.dom.id, someEl);\r\nmc.add(otherEl.dom.id, otherEl);\r\n//and so on\r\n\r\n// using getKey\r\nvar mc = new Ext.util.MixedCollection();\r\nmc.getKey = function (el) {\r\n   return el.dom.id;\r\n};\r\nmc.add(someEl);\r\nmc.add(otherEl);\r\n\r\n// or via the constructor\r\nvar mc = new Ext.util.MixedCollection(false, function (el) {\r\n   return el.dom.id;\r\n});\r\nmc.add(someEl);\r\nmc.add(otherEl);\r\n</code></pre>\r\n"},{"parameters":[{"type":"Number","optional":true,"name":"startIndex","summary":"The starting index. Defaults to 0."},{"type":"Number","optional":true,"name":"endIndex","summary":"The ending index. Defaults to the last item."}],"return":{"type":"Array","summary":"An array of items"},"hide":false,"private":false,"name":"getRange","summary":"Returns a range of items in this collection\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The item to find the index of."}],"return":{"type":"Number","summary":"index of the item. Returns -1 if not found."},"hide":false,"private":false,"name":"indexOf","summary":"Returns index within the collection of the passed Object.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"key","summary":"The key to find the index of."}],"return":{"type":"Number","summary":"index of the key."},"hide":false,"private":false,"name":"indexOfKey","summary":"Returns index within the collection of the passed key.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index to insert the item at."},{"type":"String","optional":false,"name":"key","summary":"The key to associate with the new item, or the item itself."},{"type":"Object","optional":true,"name":"o","summary":"If the second parameter was a key, the new item."}],"return":{"type":"Object","summary":"The item inserted."},"hide":false,"private":false,"name":"insert","summary":"Inserts an item at the specified index in the collection. Fires the {@link #add} event when complete.\r\n"},{"parameters":[{"type":"String/Number","optional":false,"name":"key","summary":"The key or index of the item.\r\nIf an item was found, but is a Class, returns <tt>null</tt>."}],"return":{"type":"Object","summary":"If the item is found, returns the item.  If the item was not found, returns <tt>undefined</tt>."},"hide":false,"private":false,"name":"item","summary":"Returns the item associated with the passed key OR index.\r\nKey has priority over index.  This is the equivalent\r\nof calling {@link #key} first, then if nothing matched calling {@link #itemAt}.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index of the item."}],"return":{"type":"Object","summary":"The item at the specified index."},"hide":false,"private":false,"name":"itemAt","summary":"Returns the item at the specified index.\r\n"},{"parameters":[{"type":"String/Number","optional":false,"name":"key","summary":"The key of the item."}],"return":{"type":"Object","summary":"The item associated with the passed key."},"hide":false,"private":false,"name":"key","summary":"Returns the item associated with the passed key.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"direction","summary":"'ASC' or 'DESC'. Defaults to 'ASC'."},{"type":"Function","optional":true,"name":"fn","summary":"Comparison function that defines the sort order.\r\nDefaults to sorting by case insensitive string."}],"return":null,"hide":false,"private":false,"name":"keySort","summary":"Sorts this collection by <b>key</b>s.\r\n"},{"parameters":[],"return":{"type":"Object","summary":"the last item in the collection.."},"hide":false,"private":false,"name":"last","summary":"Returns the last item in the collection.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The item to remove."}],"return":{"type":"Object","summary":"The item removed or false if no item was removed."},"hide":false,"private":false,"name":"remove","summary":"Remove an item from the collection.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index within the collection of the item to remove."}],"return":{"type":"Object","summary":"The item removed or false if no item was removed."},"hide":false,"private":false,"name":"removeAt","summary":"Remove an item from a specified index in the collection. Fires the {@link #remove} event when complete.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"key","summary":"The key of the item to remove."}],"return":{"type":"Object","summary":"The item removed or false if no item was removed."},"hide":false,"private":false,"name":"removeKey","summary":"Removed an item associated with the passed key fom the collection.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"key","summary":"<p>The key associated with the item to replace, or the replacement item.</p>\r\n<p>If you supplied a {@link #getKey} implementation for this MixedCollection, or if the key\r\nof your stored items is in a property called <tt><b>id</b></tt>, then the MixedCollection\r\nwill be able to <i>derive</i> the key of the replacement item. If you want to replace an item\r\nwith one having the same key value, then just pass the replacement item in this parameter.</p>"},{"type":"Object} ","optional":true,"name":"o","summary":"If the first parameter passed was a key, the item to associate\r\nwith that key."}],"return":{"type":"Object","summary":"The new item."},"hide":false,"private":false,"name":"replace","summary":"Replaces an item in the collection. Fires the {@link #replace} event when complete.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"direction","summary":"'ASC' or 'DESC'. Defaults to 'ASC'."},{"type":"Function","optional":true,"name":"fn","summary":"Comparison function that defines the sort order.\r\nDefaults to sorting by numeric value."}],"return":null,"hide":false,"private":false,"name":"sort","summary":"Sorts this collection by <b>item</b> value with the passed comparison function.\r\n"}],"events":[{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index at which the item was added."},{"type":"Object","optional":false,"name":"o","summary":"The item added."},{"type":"String","optional":false,"name":"key","summary":"The key associated with the added item."}],"name":"add","summary":"Fires when an item is added to the collection."},{"parameters":[],"name":"clear","summary":"Fires when the collection is cleared."},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The item being removed."},{"type":"String","optional":false,"name":"key","summary":"The key associated with the removed item."}],"name":"remove","summary":"Fires when an item is removed from the collection."},{"parameters":[{"type":"String","optional":false,"name":"key","summary":"he key associated with the new added."},{"type":"Object","optional":false,"name":"old","summary":"The item being replaced."},{"type":"Object","optional":false,"name":"new","summary":"The new item."}],"name":"replace","summary":"Fires when an item is replaced in the collection."}]},{"name":"Observable","fullName":"Ext.util.Observable","summary":"Base class that provides a common interface for publishing events. Subclasses are expected to\r\nto have a property \"events\" with all the events defined, and, optionally, a property \"listeners\"\r\nwith configured listeners defined.<br>\r\nFor example:\r\n<pre><code>\r\nEmployee = Ext.extend(Ext.util.Observable, {\r\n    constructor: function (config) {\r\n        this.name = config.name;\r\n        this.addEvents({\r\n            \"fired\" : true,\r\n            \"quit\" : true\r\n        });\r\n\r\n        // Copy configured listeners into *this* object so that the base class&#39;s\r\n        // constructor will add them.\r\n        this.listeners = config.listeners;\r\n\r\n        // Call our superclass constructor to complete construction process.\r\n        Employee.superclass.constructor.call(config)\r\n    }\r\n});\r\n</code></pre>\r\nThis could then be used like this:<pre><code>\r\nvar newEmployee = new Employee({\r\n    name: employeeName,\r\n    listeners: {\r\n        quit: function () {\r\n            // By default, \"this\" will be the object that fired the event.\r\n            alert(this.name + \" has quit!\");\r\n        }\r\n    }\r\n});\r\n</code></pre>\r\n\r\n","package":"util","definedIn":"util\\core\\Observable.js,util\\Observable-more.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.data.Connection,Ext.data.DataProxy,Ext.data.Node,Ext.data.Store,Ext.data.Tree,Ext.dd.DragTracker,Ext.direct.Provider,Ext.form.BasicForm,Ext.grid.AbstractSelectionModel,Ext.grid.ColumnModel,Ext.grid.GridView,Ext.grid.PropertyStore,Ext.tree.DefaultSelectionModel,Ext.tree.MultiSelectionModel,Ext.tree.TreeLoader,Ext.util.ClickRepeater,Ext.util.MixedCollection,Ext.Component,Ext.Direct,Ext.History,Ext.ListView.ColumnResizer,Ext.ListView.Sorter,Ext.Resizable,Ext.SplitBar,Ext.Updater","configOptions":[{"type":"Object","optional":false,"name":"listeners","summary":"object during initialization.  This should be a valid listeners config object as specified in the\r\n{@link #addListener} example for attaching multiple handlers at once.</p>\r\n<br><p><b><u>DOM events from ExtJs {@link Ext.Component Components}</u></b></p>\r\n<br><p>While <i>some</i> ExtJs Component classes export selected DOM events (e.g. \"click\", \"mouseover\" etc), this\r\nis usually only done when extra value can be added. For example the {@link Ext.DataView DataView}'s\r\n<b><code>{@link Ext.DataView#click click}</code></b> event passing the node clicked on. To access DOM\r\nevents directly from a Component's HTMLElement, listeners must be added to the <i>{@link Ext.Component#getEl Element}</i> after the Component\r\nhas been rendered. A plugin can simplify this step:<pre><code>\r\n// Plugin is configured with a listeners config object.\r\n// The Component is appended to the argument list of all handler functions.\r\nExt.DomObserver = Ext.extend(Object, {\r\n    constructor: function (config) {\r\n        this.listeners = config.listeners ? config.listeners : config;\r\n    },\r\n\r\n    // Component passes itself into plugin&#39;s init method\r\n    init: function (c) {\r\n        var p, l = this.listeners;\r\n        for (p in l) {\r\n            if (Ext.isFunction(l[p])) {\r\n                l[p] = this.createHandler(l[p], c);\r\n            } else {\r\n                l[p].fn = this.createHandler(l[p].fn, c);\r\n            }\r\n        }\r\n\r\n        // Add the listeners to the Element immediately following the render call\r\n        c.render = c.render.{@link Function#createSequence createSequence}(function () {\r\n            var e = c.getEl();\r\n            if (e) {\r\n                e.on(l);\r\n            }\r\n        });\r\n    },\r\n\r\n    createHandler: function (fn, c) {\r\n        return function (e) {\r\n            fn.call(this, e, c);\r\n        };\r\n    }\r\n});\r\n\r\nvar combo = new Ext.form.ComboBox({\r\n\r\n    // Collapse combo when its element is clicked on\r\n    plugins: [ new Ext.DomObserver({\r\n        click: function (evt, comp) {\r\n            comp.collapse();\r\n        }\r\n    })],\r\n    store: myStore,\r\n    typeAhead: true,\r\n    mode: 'local',\r\n    triggerAction: 'all'\r\n});\r\n</code></pre></p>\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"object","summary":"The object with the events defined"}],"return":null,"hide":false,"private":false,"name":"addEvents","summary":"Used to define events on this Observable\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The name of the event to listen for."},{"type":"Function","optional":false,"name":"handler","summary":"The method the event invokes."},{"type":"Object","optional":true,"name":"scope","summary":"The scope (<code><b>this</b></code> reference) in which the handler function is executed.\r\n<b>If omitted, defaults to the object which fired the event.</b>"},{"type":"Object","optional":true,"name":"options","summary":"An object containing handler configuration.\r\nproperties. This may contain any of the following properties:<ul>\r\n<li><b>scope</b> : Object<div class=\"sub-desc\">The scope (<code><b>this</b></code> reference) in which the handler function is executed.\r\n<b>If omitted, defaults to the object which fired the event.</b></div></li>\r\n<li><b>delay</b> : Number<div class=\"sub-desc\">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>\r\n<li><b>single</b> : Boolean<div class=\"sub-desc\">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>\r\n<li><b>buffer</b> : Number<div class=\"sub-desc\">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\r\nby the specified number of milliseconds. If the event fires again within that time, the original\r\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>\r\n<li><b>target</b> : Observable<div class=\"sub-desc\">Only call the handler if the event was fired on the target Observable, <i>not</i>\r\nif the event was bubbled up from a child Observable.</div></li>\r\n</ul><br>\r\n<p>\r\n<b>Combining Options</b><br>\r\nUsing the options argument, it is possible to combine different types of listeners:<br>\r\n<br>\r\nA delayed, one-time listener.\r\n<pre><code>\r\nmyDataView.on('click', this.onClick, this, {\r\nsingle: true,\r\ndelay: 100\r\n});</code></pre>\r\n<p>\r\n<b>Attaching multiple handlers in 1 call</b><br>\r\nThe method also allows for a single argument to be passed which is a config object containing properties\r\nwhich specify multiple handlers.\r\n<p>\r\n<pre><code>\r\nmyGridPanel.on({\r\n'click' : {\r\nfn: this.onClick,\r\nscope: this,\r\ndelay: 100\r\n},\r\n'mouseover' : {\r\nfn: this.onMouseOver,\r\nscope: this\r\n},\r\n'mouseout' : {\r\nfn: this.onMouseOut,\r\nscope: this\r\n}\r\n});</code></pre>\r\n<p>\r\nOr a shorthand syntax:<br>\r\n<pre><code>\r\nmyGridPanel.on({\r\n'click' : this.onClick,\r\n'mouseover' : this.onMouseOver,\r\n'mouseout' : this.onMouseOut,\r\nscope: this\r\n});</code></pre>"}],"return":null,"hide":false,"private":false,"name":"addListener","summary":"Appends an event handler to this object.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The name of the event to check for"}],"return":{"type":"Boolean","summary":"True if the event is being listened for, else false"},"hide":false,"private":false,"name":"hasListener","summary":"Checks to see if this object has any listeners for a specified event\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The type of event to listen for"},{"type":"Function","optional":false,"name":"handler","summary":"The method the event invokes"},{"type":"Object","optional":true,"name":"scope","summary":"The scope (<code><b>this</b></code> reference) in which the handler function is executed.\r\n<b>If omitted, defaults to the object which fired the event.</b>"},{"type":"Object","optional":true,"name":"options","summary":"An object containing handler configuration."}],"return":null,"hide":false,"private":false,"name":"on","summary":"Appends an event handler to this object (shorthand for {@link #addListener}.)\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"purgeListeners","summary":"Removes all listeners for this object\r\n"},{"parameters":[{"type":"Observable","optional":false,"name":"o","summary":"The Observable to release\r\n@static"}],"return":null,"hide":false,"private":false,"name":"releaseCapture","summary":"Removes <b>all</b> added captures from the Observable.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The type of event the handler was associated with."},{"type":"Function","optional":false,"name":"handler","summary":"The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>"},{"type":"Object","optional":true,"name":"scope","summary":"The scope originally specified for the handler."}],"return":null,"hide":false,"private":false,"name":"removeListener","summary":"Removes an event handler.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"resumeEvents","summary":"Resume firing events. (see {@link #suspendEvents})\r\nIf events were suspended using the <tt><b>queueSuspended</b></tt> parameter, then all\r\nevents fired during event suspension will be sent to any listeners now.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"queueSuspended","summary":"Pass as true to queue up suspended events to be fired\r\nafter the {@link #resumeEvents} call instead of discarding all suspended events;"}],"return":null,"hide":false,"private":false,"name":"suspendEvents","summary":"Suspend the firing of all events. (see {@link #resumeEvents})\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The type of event the handler was associated with."},{"type":"Function","optional":false,"name":"handler","summary":"The handler to remove. <b>This must be a reference to the function passed into the {@link #addListener} call.</b>"},{"type":"Object","optional":true,"name":"scope","summary":"The scope originally specified for the handler."}],"return":null,"hide":false,"private":false,"name":"un","summary":"Removes an event handler (shorthand for {@link #removeListener}.)\r\n"},{"parameters":[{"type":"Observable","optional":false,"name":"o","summary":"The Observable to capture"},{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope (this object) for the fn\r\n@static"}],"return":null,"hide":false,"private":false,"name":"capture","summary":"Starts capture on the specified Observable. All events will be passed\r\nto the supplied function with the event name + standard signature of the event\r\n<b>before</b> the event is fired. If the supplied function returns false,\r\nthe event will not fire.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"events","summary":""}],"return":null,"hide":false,"private":false,"name":"enableBubble","summary":"Used to enable bubbling of events\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"c","summary":"The class constructor to make observable.\r\n@static"}],"return":null,"hide":false,"private":false,"name":"observeClass","summary":"Sets observability on the passed class constructor.<p>\r\n<p>This makes any event fired on any instance of the passed class also fire a single event through\r\nthe <i>class</i> allowing for central handling of events on many instances at once.</p>\r\n<p>Usage:</p><pre><code>\r\nExt.util.Observable.observeClass(Ext.data.Connection);\r\nExt.data.Connection.on('beforerequest', function (con, options) {\r\n    console.log(\"Ajax request made to \" + options.url);\r\n});</code></pre>\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The Observable whose events this object is to relay."},{"type":"Array","optional":false,"name":"events","summary":"Array of event names to relay."}],"return":null,"hide":false,"private":false,"name":"relayEvents","summary":"Relays selected events from the specified Observable as if the events were fired by <tt><b>this</b></tt>.\r\n"}],"events":[]},{"name":"TaskRunner","fullName":"Ext.util.TaskRunner","summary":"Provides the ability to execute one or more arbitrary tasks in a multithreaded\r\nmanner.  Generally, you can use the singleton {@link Ext.TaskMgr} instead, but\r\nif needed, you can create separate instances of TaskRunner.  Any number of\r\nseparate tasks can be started at any time and will run independently of each\r\nother. Example usage:\r\n<pre><code>\r\n// Start a simple clock task that updates a div once per second\r\nvar updateClock = function () {\r\n    Ext.fly('clock').update(new Date().format('g:i:s A'));\r\n} \r\nvar task = {\r\n    run: updateClock,\r\n    interval: 1000 //1 second\r\n}\r\nvar runner = new Ext.util.TaskRunner();\r\nrunner.start(task);\r\n\r\n// equivalent using TaskMgr\r\nExt.TaskMgr.start({\r\n    run: updateClock,\r\n    interval: 1000\r\n});\r\n\r\n</code></pre>\r\nAlso see {@link Ext.util.DelayedTask}.\r\n\r\n","package":"util","definedIn":"util\\core\\TaskMgr.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Number","optional":true,"name":"interval","summary":"The minimum precision in milliseconds supported by this TaskRunner instance (defaults to 10)"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.TaskMgr","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"task","summary":"A config object that supports the following properties:<ul>\r\n<li><code>run</code> : Function<div class=\"sub-desc\">The function to execute each time the task is run. The\r\nfunction will be called at each interval and passed the <code>args</code> argument if specified.  If a\r\nparticular scope is required, be sure to specify it using the <code>scope</code> argument.</div></li>\r\n<li><code>interval</code> : Number<div class=\"sub-desc\">The frequency in milliseconds with which the task\r\nshould be executed.</div></li>\r\n<li><code>args</code> : Array<div class=\"sub-desc\">(optional) An array of arguments to be passed to the function\r\nspecified by <code>run</code>.</div></li>\r\n<li><code>scope</code> : Object<div class=\"sub-desc\">(optional) The scope (<tt>this</tt> reference) in which to execute the\r\n<code>run</code> function. Defaults to the task config object.</div></li>\r\n<li><code>duration</code> : Number<div class=\"sub-desc\">(optional) The length of time in milliseconds to execute\r\nthe task before stopping automatically (defaults to indefinite).</div></li>\r\n<li><code>repeat</code> : Number<div class=\"sub-desc\">(optional) The number of times to execute the task before\r\nstopping automatically (defaults to indefinite).</div></li>\r\n</ul>"}],"return":{"type":"Object","summary":"The task"},"hide":false,"private":false,"name":"start","summary":"Starts a new task.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"task","summary":"The task to stop"}],"return":{"type":"Object","summary":"The task"},"hide":false,"private":false,"name":"stop","summary":"Stops an existing running task.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"stopAll","summary":"Stops all tasks that are currently running.\r\n"}],"events":[]},{"name":"TextMetrics","fullName":"Ext.util.TextMetrics","summary":"Provides precise pixel measurements for blocks of text so that you can determine exactly how high and\r\nwide, in pixels, a given block of text will be. Note that when measuring text, it should be plain text and\r\nshould not contain any HTML, otherwise it may not be measured correctly.\r\n","package":"util","definedIn":"util\\TextMetrics.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The element, dom node or id"}],"return":null,"hide":false,"private":false,"name":"bind","summary":"Binds this TextMetrics instance to an element from which to copy existing CSS styles\r\nthat can affect the size of the rendered text\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The element, dom node or id that the instance will be bound to"},{"type":"Number","optional":true,"name":"fixedWidth","summary":"If the text will be multiline, you have to set a fixed width\r\nin order to accurately measure the text height"}],"return":{"type":"Ext.util.TextMetrics.Instance","summary":"instance The new instance"},"hide":false,"private":false,"name":"createInstance","summary":"Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces\r\nthe overhead of multiple calls to initialize the style properties on each measurement.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to measure"}],"return":{"type":"Number","summary":"height The height in pixels"},"hide":false,"private":false,"name":"getHeight","summary":"Returns the measured height of the specified text.  For multiline text, be sure to call\r\n{@link #setFixedWidth} if necessary.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to measure"}],"return":{"type":"Object} An object containing the text's size {width: (width), height: (height)","summary":""},"hide":false,"private":false,"name":"getSize","summary":"Returns the size of the specified text based on the internal element's style and width properties\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to measure. Defaults to the innerHTML of the element."},{"type":"Number","optional":true,"name":"min","summary":"The minumum value to return."},{"type":"Number","optional":true,"name":"max","summary":"The maximum value to return.\r\n@member Ext.Element getTextWidth"}],"return":{"type":"Number","summary":"The text width in pixels."},"hide":false,"private":false,"name":"getTextWidth","summary":"Returns the width in pixels of the passed text, or the width of the text in this Element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to measure"}],"return":{"type":"Number","summary":"width The width in pixels"},"hide":false,"private":false,"name":"getWidth","summary":"Returns the measured width of the specified text\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The element, dom node or id from which to copy existing CSS styles\r\nthat can affect the size of the rendered text"},{"type":"String","optional":false,"name":"text","summary":"The text to measure"},{"type":"Number","optional":true,"name":"fixedWidth","summary":"If the text will be multiline, you have to set a fixed width\r\nin order to accurately measure the text height"}],"return":{"type":"Object} An object containing the text's size {width: (width), height: (height)","summary":""},"hide":false,"private":false,"name":"measure","summary":"Measures the size of the specified text\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"width","summary":"The width to set on the element"}],"return":null,"hide":false,"private":false,"name":"setFixedWidth","summary":"Sets a fixed width on the internal measurement element.  If the text will be multiline, you have\r\nto set a fixed width in order to accurately measure the text height.\r\n"}],"events":[]}]}],"classes":[{"name":"Action","fullName":"Ext.Action","summary":"<p>An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it\r\ncan be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI\r\nupdates across any components that support the Action interface (primarily {@link Ext.Toolbar}, {@link Ext.Button}\r\nand {@link Ext.menu.Menu} components).</p>\r\n<p>Aside from supporting the config object interface, any component that needs to use Actions must also support\r\nthe following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),\r\nsetDisabled(boolean), setVisible(boolean) and setHandler(function).</p>\r\nExample usage:<br>\r\n<pre><code>\r\n// Define the shared action.  Each component below will have the same\r\n// display text and icon, and will display the same message on click.\r\nvar action = new Ext.Action({\r\n   {@link #text}: 'Do something',\r\n   {@link #handler}: function () {\r\n        Ext.Msg.alert('Click', 'You did something.');\r\n    },\r\n   {@link #iconCls}: 'do-something',\r\n   {@link #itemId}: 'myAction'\r\n});\r\n\r\nvar panel = new Ext.Panel({\r\n    title: 'Actions',\r\n    width: 500,\r\n    height: 300,\r\n    tbar: [\r\n        // Add the action directly to a toolbar as a menu button\r\n        action,\r\n       {\r\n            text: 'Action Menu',\r\n            // Add the action to a menu as a text item\r\n            menu: [action]\r\n        }\r\n    ],\r\n    items: [\r\n        // Add the action to the panel body as a standard button\r\n        new Ext.Button(action)\r\n    ],\r\n    renderTo: Ext.getBody()\r\n});\r\n\r\n// Change the text for all components using the action\r\naction.setText('Something else');\r\n\r\n// Reference an action through a container using the itemId\r\nvar btn = panel.getComponent('myAction');\r\nvar aRef = btn.baseAction;\r\naRef.setText('New text');\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Action.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"disabled","summary":""},{"type":"Function","optional":false,"name":"handler","summary":"when the component's primary event is triggered (defaults to undefined).\r\n"},{"type":"Boolean","optional":false,"name":"hidden","summary":""},{"type":"String","optional":false,"name":"iconCls","summary":"The CSS class selector that specifies a background image to be used as the header icon for\r\nall components using this action (defaults to '').\r\n<p>An example of specifying a custom icon class would be something like:\r\n</p><pre><code>\r\n// specify the property in the config for the class:\r\n     ...\r\n     iconCls: 'do-something'\r\n\r\n// css class that specifies background image to be used as the icon image:\r\n.do-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"itemId","summary":"See {@link Ext.Component}.{@link Ext.Component#itemId itemId}.\r\n"},{"type":"Object","optional":false,"name":"scope","summary":""},{"type":"String","optional":false,"name":"text","summary":""}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"disable","summary":"Disables all components using this action.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to execute for each component"},{"type":"Object","optional":false,"name":"scope","summary":"The scope in which the function will execute"}],"return":null,"hide":false,"private":false,"name":"each","summary":"Executes the specified function once for each component currently tied to this action.  The function passed\r\nin should accept a single argument that will be an object that supports the basic Action config/method interface.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"enable","summary":"Enables all components using this action.\r\n"},{"parameters":[{"type":"Mixed","optional":true,"name":"arg1","summary":"Variable number of arguments passed to the handler function"},{"type":"Mixed","optional":true,"name":"arg2","summary":""},{"type":"Mixed","optional":true,"name":"etc...","summary":""}],"return":null,"hide":false,"private":false,"name":"execute","summary":"Executes this action manually using the handler function specified in the original config object\r\nor the handler function set with <code>{@link #setHandler}</code>.  Any arguments passed to this\r\nfunction will be passed on to the handler function.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getIconClass","summary":"Gets the icon CSS class currently used by all components using this action.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getText","summary":"Gets the text currently displayed by all components using this action.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hides all components using this action.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isDisabled","summary":"Returns true if the components using this action are currently disabled, else returns false.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isHidden","summary":"Returns true if the components using this action are currently hidden, else returns false.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"disabled","summary":"True to disable the component, false to enable it"}],"return":null,"hide":false,"private":false,"name":"setDisabled","summary":"Sets the disabled state of all components using this action.  Shortcut method\r\nfor {@link #enable} and {@link #disable}.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function that will be invoked by the action's components.  The function\r\nwill be called with no arguments."},{"type":"Object","optional":false,"name":"scope","summary":"The scope in which the function will execute"}],"return":null,"hide":false,"private":false,"name":"setHandler","summary":"Sets the function that will be called by each component using this action when its primary event is triggered.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"hidden","summary":"True to hide the component, false to show it"}],"return":null,"hide":false,"private":false,"name":"setHidden","summary":"Sets the hidden state of all components using this action.  Shortcut method\r\nfor <code>{@link #hide}</code> and <code>{@link #show}</code>.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"cls","summary":"The CSS class supplying the icon image"}],"return":null,"hide":false,"private":false,"name":"setIconClass","summary":"Sets the icon CSS class for all components using this action.  The class should supply\r\na background image that will be used as the icon image.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to display"}],"return":null,"hide":false,"private":false,"name":"setText","summary":"Sets the text to be displayed by all components using this action.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"show","summary":"Shows all components using this action.\r\n"}],"events":[]},{"name":"Ajax","fullName":"Ext.Ajax","summary":"<p>The global Ajax request class that provides a simple way to make Ajax requests\r\nwith maximum flexibility.</p>\r\n<p>Since Ext.Ajax is a singleton, you can set common properties/events for it once\r\nand override them at the request function level only if necessary.</p>\r\n<p>Common <b>Properties</b> you may want to set are:<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>{@link #method}</tt></b><p class=\"sub-desc\"></p></li>\r\n<li><b><tt>{@link #extraParams}</tt></b><p class=\"sub-desc\"></p></li>\r\n<li><b><tt>{@link #url}</tt></b><p class=\"sub-desc\"></p></li>\r\n</ul></div>\r\n<pre><code>\r\n// Default headers to pass in every request\r\nExt.Ajax.defaultHeaders = {\r\n    'Powered-By': 'Ext'\r\n};\r\n</code></pre>\r\n</p>\r\n<p>Common <b>Events</b> you may want to set are:<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>{@link Ext.data.Connection#beforerequest beforerequest}</tt></b><p class=\"sub-desc\"></p></li>\r\n<li><b><tt>{@link Ext.data.Connection#requestcomplete requestcomplete}</tt></b><p class=\"sub-desc\"></p></li>\r\n<li><b><tt>{@link Ext.data.Connection#requestexception requestexception}</tt></b><p class=\"sub-desc\"></p></li>\r\n</ul></div>\r\n<pre><code>\r\n// Example: show a spinner during all Ajax requests\r\nExt.Ajax.on('beforerequest', this.showSpinner, this);\r\nExt.Ajax.on('requestcomplete', this.hideSpinner, this);\r\nExt.Ajax.on('requestexception', this.hideSpinner, this);\r\n</code></pre>\r\n</p>\r\n<p>An example request:</p>\r\n<pre><code>\r\n// Basic request\r\nExt.Ajax.{@link Ext.data.Connection#request request}({\r\n   url: 'foo.php',\r\n   success: someFn,\r\n   failure: otherFn,\r\n   headers: {\r\n       'my-header': 'foo'\r\n   },\r\n   params: { foo: 'bar' }\r\n});\r\n\r\n// Simple ajax form submission\r\nExt.Ajax.{@link Ext.data.Connection#request request}({\r\n    form: 'some-form',\r\n    params: 'foo=bar'\r\n});\r\n</code></pre>\r\n</p>\r\n","package":"Ext","definedIn":"data\\core\\Connection.js","xtype":null,"extends":"Ext.data.Connection","singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"autoAbort","summary":""},{"type":"Object","optional":false,"name":"defaultHeaders","summary":""},{"type":"Boolean","optional":false,"name":"disableCaching","summary":""},{"type":"Object","optional":false,"name":"extraParams","summary":""},{"type":"String","optional":false,"name":"method","summary":""},{"type":"Number","optional":false,"name":"timeout","summary":""},{"type":"String","optional":false,"name":"url","summary":""}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"autoAbort","summary":"Whether a new request should abort any pending requests. (defaults to false)\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"defaultHeaders","summary":"An object containing request headers which are added to each request made by this object\r\n(defaults to undefined).\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"disableCaching","summary":"True to add a unique cache-buster param to GET requests. (defaults to true)\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"extraParams","summary":"An object containing properties which are used as extra parameters to each request made\r\nby this object (defaults to undefined). Session information and other data that you need\r\nto pass with each request are commonly put here.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"method","summary":"The default HTTP method to be used for requests. Note that this is case-sensitive and\r\nshould be all caps (defaults to undefined; if not set but params are present will use\r\n<tt>\"POST\"</tt>, otherwise will use <tt>\"GET\"</tt>.)\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"timeout","summary":"The timeout in milliseconds to be used for requests. (defaults to 30000)\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"url","summary":"The default URL to be used for requests to the server. (defaults to undefined)\r\nIf the server receives all requests through one URL, setting this once is easier than\r\nentering it on every request.\r\n"}],"methods":[{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"form","summary":""}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"serializeForm","summary":"Serialize the passed form into a url encoded string\r\n"}],"events":[]},{"name":"BoxComponent","fullName":"Ext.BoxComponent","summary":"<p>Base class for any {@link Ext.Component Component} that is to be sized as a box, using width and height.</p>\r\n<p>BoxComponent provides automatic box model adjustments for sizing and positioning and will work correctly\r\nwithin the Component rendering model.</p>\r\n<p>A BoxComponent may be created as a custom Component which encapsulates any HTML element, either a pre-existing\r\nelement, or one that is created to your specifications at render time. Usually, to participate in layouts,\r\na Component will need to be a <b>Box</b>Component in order to have its width and height managed.</p>\r\n<p>To use a pre-existing element as a BoxComponent, configure it so that you preset the <b>el</b> property to the\r\nelement to reference:<pre><code>\r\nvar pageHeader = new Ext.BoxComponent({\r\n    el: 'my-header-div'\r\n});</code></pre>\r\nThis may then be {@link Ext.Container#add added} to a {@link Ext.Container Container} as a child item.</p>\r\n<p>To create a BoxComponent based around a HTML element to be created at render time, use the\r\n{@link Ext.Component#autoEl autoEl} config option which takes the form of a\r\n{@link Ext.DomHelper DomHelper} specification:<pre><code>\r\nvar myImage = new Ext.BoxComponent({\r\n    autoEl: {\r\n        tag: 'img',\r\n        src: '/images/my-image.jpg'\r\n    }\r\n});</code></pre></p>\r\n","package":"Ext","definedIn":"widgets\\BoxComponent.js","xtype":"box","extends":"Ext.Component","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Ext.Element/String/Object","optional":false,"name":"config","summary":"The configuration options."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.form.Field,Ext.form.Label,Ext.Button,Ext.Container,Ext.DataView,Ext.FlashComponent,Ext.ProgressBar,Ext.Slider,Ext.Spacer,Ext.Toolbar.Item","configOptions":[{"type":"Boolean","optional":false,"name":"autoHeight","summary":"<p>True to use height:'auto', false to use fixed height (or allow it to be managed by its parent\r\nContainer's {@link Ext.Container#layout layout manager}. Defaults to false.</p>\r\n<p><b>Note</b>: Although many components inherit this config option, not all will\r\nfunction as expected with a height of 'auto'. Setting autoHeight:true means that the\r\nbrowser will manage height based on the element's contents, and that Ext will not manage it at all.</p>\r\n<p>If the <i>browser</i> is managing the height, be aware that resizes performed by the browser in response\r\nto changes within the structure of the Component cannot be detected. Therefore changes to the height might\r\nresult in elements needing to be synchronized with the new height. Example:</p><pre><code>\r\nvar w = new Ext.Window({\r\n    title: 'Window',\r\n    width: 600,\r\n    autoHeight: true,\r\n    items: {\r\n        title: 'Collapse Me',\r\n        height: 400,\r\n        collapsible: true,\r\n        border: false,\r\n        listeners: {\r\n            beforecollapse: function () {\r\n                w.el.shadow.hide();\r\n            },\r\n            beforeexpand: function () {\r\n                w.el.shadow.hide();\r\n            },\r\n            collapse: function () {\r\n                w.syncShadow();\r\n            },\r\n            expand: function () {\r\n                w.syncShadow();\r\n            }\r\n        }\r\n    }\r\n}).show();\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"autoWidth","summary":"<p>True to use width:'auto', false to use fixed width (or allow it to be managed by its parent\r\nContainer's {@link Ext.Container#layout layout manager}. Defaults to false.</p>\r\n<p><b>Note</b>: Although many components  inherit this config option, not all will\r\nfunction as expected with a width of 'auto'. Setting autoWidth:true means that the\r\nbrowser will manage width based on the element's contents, and that Ext will not manage it at all.</p>\r\n<p>If the <i>browser</i> is managing the width, be aware that resizes performed by the browser in response\r\nto changes within the structure of the Component cannot be detected. Therefore changes to the width might\r\nresult in elements needing to be synchronized with the new width. For example, where the target element is:</p><pre><code>\r\n&lt;div id='grid-container' style='margin-left:25%;width:50%'>&lt;/div>\r\n</code></pre>\r\nA Panel rendered into that target element must listen for browser window resize in order to relay its\r\nchild items when the browser changes its width:<pre><code>\r\nvar myPanel = new Ext.Panel({\r\n    renderTo: 'grid-container',\r\n    monitorResize: true, // relay on browser resize\r\n    title: 'Panel',\r\n    height: 400,\r\n    autoWidth: true,\r\n    layout: 'hbox',\r\n    layoutConfig: {\r\n        align: 'stretch'\r\n    },\r\n    defaults: {\r\n        flex: 1\r\n    },\r\n    items: [{\r\n        title: 'Box 1',\r\n    }, {\r\n        title: 'Box 2'\r\n    }, {\r\n        title: 'Box 3'\r\n    }],\r\n});\r\n</code></pre>\r\n"},{"type":"Number","optional":false,"name":"height","summary":"The height of this component in pixels (defaults to auto).\r\n<b>Note</b> to express this dimension as a percentage or offset see {@link Ext.Component#anchor}.\r\n"},{"type":"Object","optional":false,"name":"margins","summary":"by a Container which has been configured to use the <b>{@link Ext.layout.BorderLayout BorderLayout}</b>\r\nor one of the two <b>{@link Ext.layout.BoxLayout BoxLayout} subclasses.</b></p>\r\n<p>An object containing margins to apply to this BoxComponent in the\r\nformat:</p><pre><code>\r\n{\r\n    top: (top margin),\r\n    right: (right margin),\r\n    bottom: (bottom margin),\r\n    left: (left margin)\r\n}</code></pre>\r\n<p>May also be a string containing space-separated, numeric margin values. The order of the\r\nsides associated with each value matches the way CSS processes margin values:</p>\r\n<p><div class=\"mdetail-params\"><ul>\r\n<li>If there is only one value, it applies to all sides.</li>\r\n<li>If there are two values, the top and bottom borders are set to the first value and the\r\nright and left are set to the second.</li>\r\n<li>If there are three values, the top is set to the first value, the left and right are set\r\nto the second, and the bottom is set to the third.</li>\r\n<li>If there are four values, they apply to the top, right, bottom, and left, respectively.</li>\r\n</ul></div></p>\r\n<p>Defaults to:</p><pre><code>\r\n{top:0, right:0, bottom:0, left:0}\r\n</code></pre>\r\n"},{"type":"Number","optional":false,"name":"pageX","summary":"The page level x coordinate for this component if contained within a positioning container.\r\n"},{"type":"Number","optional":false,"name":"pageY","summary":"The page level y coordinate for this component if contained within a positioning container.\r\n"},{"type":"String","optional":false,"name":"region","summary":"by a Container which has been configured to use the <b>{@link Ext.layout.BorderLayout BorderLayout}</b>\r\nlayout manager (e.g. specifying <tt>layout:'border'</tt>).</p><br>\r\n<p>See {@link Ext.layout.BorderLayout} also.</p>\r\n"},{"type":"Number","optional":false,"name":"width","summary":"The width of this component in pixels (defaults to auto).\r\n<b>Note</b> to express this dimension as a percentage or offset see {@link Ext.Component#anchor}.\r\n"},{"type":"Number","optional":false,"name":"x","summary":"The local x (left) coordinate for this component if contained within a positioning container.\r\n"},{"type":"Number","optional":false,"name":"y","summary":"The local y (top) coordinate for this component if contained within a positioning container.\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Boolean","optional":true,"name":"local","summary":"If true the element's left and top are returned instead of page XY (defaults to false)"}],"return":{"type":"Object} box An object in the format {x, y, width, height","summary":""},"hide":false,"private":false,"name":"getBox","summary":"Gets the current box measurements of the component's underlying element.\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getHeight","summary":"Gets the current height of the component's underlying element.\r\n"},{"parameters":[],"return":{"type":"Object} An object containing the element's size {width: (element width + left/right margins), height: (element height + top/bottom margins)","summary":""},"hide":false,"private":false,"name":"getOuterSize","summary":"Gets the current size of the component's underlying element, including space taken by its margins.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"local","summary":"If true the element's left and top are returned instead of page XY (defaults to false)"}],"return":{"type":"Array","summary":"The XY position of the element (e.g., [100, 200])"},"hide":false,"private":false,"name":"getPosition","summary":"Gets the current XY position of the component's underlying element.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getResizeEl","summary":"<p>Returns the outermost Element of this Component which defines the Components overall size.</p>\r\n<p><i>Usually</i> this will return the same Element as <code>{@link #getEl}</code>,\r\nbut in some cases, a Component may have some more wrapping Elements around its main\r\nactive Element.</p>\r\n<p>An example is a ComboBox. It is encased in a <i>wrapping</i> Element which\r\ncontains both the <code>&lt;input></code> Element (which is what would be returned\r\nby its <code>{@link #getEl}</code> method, <i>and</i> the trigger button Element.\r\nThis Element is returned as the <code>resizeEl</code>.\r\n"},{"parameters":[],"return":{"type":"Object} An object containing the element's size {width: (element width), height: (element height)","summary":""},"hide":false,"private":false,"name":"getSize","summary":"Gets the current size of the component's underlying element.\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getWidth","summary":"Gets the current width of the component's underlying element.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"height","summary":"The new height to set. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>\r\n<li>A String used to set the CSS height style.</li>\r\n<li><i>undefined</i> to leave the height unchanged.</li>\r\n</ul></div>"}],"return":{"type":"Ext.BoxComponent","summary":"this"},"hide":false,"private":false,"name":"setHeight","summary":"Sets the height of the component.  This method fires the {@link #resize} event.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"x","summary":"The new x position"},{"type":"Number","optional":false,"name":"y","summary":"The new y position"}],"return":{"type":"Ext.BoxComponent","summary":"this"},"hide":false,"private":false,"name":"setPagePosition","summary":"Sets the page XY position of the component.  To set the left and top instead, use {@link #setPosition}.\r\nThis method fires the {@link #move} event.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"left","summary":"The new left"},{"type":"Number","optional":false,"name":"top","summary":"The new top"}],"return":{"type":"Ext.BoxComponent","summary":"this"},"hide":false,"private":false,"name":"setPosition","summary":"Sets the left and top of the component.  To set the page XY position instead, use {@link #setPagePosition}.\r\nThis method fires the {@link #move} event.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"width","summary":"The new width to set. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>\r\n<li>A String used to set the CSS width style.</li>\r\n<li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>\r\n<li><code>undefined</code> to leave the width unchanged.</li>\r\n</ul></div>"},{"type":"Mixed","optional":false,"name":"height","summary":"The new height to set (not required if a size object is passed as the first arg).\r\nThis may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new height in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>\r\n<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>\r\n<li><code>undefined</code> to leave the height unchanged.</li>\r\n</ul></div>"}],"return":{"type":"Ext.BoxComponent","summary":"this"},"hide":false,"private":false,"name":"setSize","summary":"Sets the width and height of this BoxComponent. This method fires the {@link #resize} event. This method can accept\r\neither width and height as separate arguments, or you can pass a size object like <code>{width:10, height:20}</code>.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"width","summary":"The new width to setThis may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new width in the {@link #getEl Element}'s {@link Ext.Element#defaultUnit}s (by default, pixels).</li>\r\n<li>A String used to set the CSS width style.</li>\r\n</ul></div>"}],"return":{"type":"Ext.BoxComponent","summary":"this"},"hide":false,"private":false,"name":"setWidth","summary":"Sets the width of the component.  This method fires the {@link #resize} event.\r\n"},{"parameters":[],"return":{"type":"Ext.BoxComponent","summary":"this"},"hide":false,"private":false,"name":"syncSize","summary":"Force the component's size to recalculate based on the underlying element's current height and width.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"box","summary":"An object in the format {x, y, width, height}"}],"return":{"type":"Ext.BoxComponent","summary":"this"},"hide":false,"private":false,"name":"updateBox","summary":"Sets the current box measurements of the component's underlying element.\r\n"}],"events":[{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"x","summary":"The new x position"},{"type":"Number","optional":false,"name":"y","summary":"The new y position"}],"name":"move","summary":"Fires after the component is moved."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"adjWidth","summary":"The box-adjusted width that was set"},{"type":"Number","optional":false,"name":"adjHeight","summary":"The box-adjusted height that was set"},{"type":"Number","optional":false,"name":"rawWidth","summary":"The width that was originally specified"},{"type":"Number","optional":false,"name":"rawHeight","summary":"The height that was originally specified"}],"name":"resize","summary":"Fires after the component is resized."}]},{"name":"Button","fullName":"Ext.Button","summary":"Simple Button class\r\n@cfg {String} text The button text to be used as innerHTML (html tags are accepted)\r\n@cfg {String} icon The path to an image to display in the button (the image will be set as the background-image\r\nCSS property of the button by default, so if you want a mixed icon/text button, set cls:'x-btn-text-icon')\r\n@cfg {Function} handler A function called when the button is clicked (can be used instead of click event).\r\nThe handler is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><code>b</code> : Button<div class=\"sub-desc\">This Button.</div></li>\r\n<li><code>e</code> : EventObject<div class=\"sub-desc\">The click event.</div></li>\r\n</ul></div>\r\n@cfg {Number} minWidth The minimum width for this button (used to give a set of buttons a common width).\r\nSee also {@link Ext.Panel}.<tt>{@link Ext.Panel#minButtonWidth minButtonWidth}</tt>.\r\n@cfg {String/Object} tooltip The tooltip for the button - can be a string to be used as innerHTML (html tags are accepted) or QuickTips config object\r\n@cfg {Boolean} hidden True to start hidden (defaults to false)\r\n@cfg {Boolean} disabled True to start disabled (defaults to false)\r\n@cfg {Boolean} pressed True to start pressed (only if enableToggle = true)\r\n@cfg {String} toggleGroup The group this toggle button is a member of (only 1 per group can be pressed)\r\n@cfg {Boolean/Object} repeat True to repeat fire the click event while the mouse is down. This can also be\r\na {@link Ext.util.ClickRepeater ClickRepeater} config object (defaults to false).\r\n","package":"Ext","definedIn":"widgets\\Button.js","xtype":"button","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new button."},"subclasses":"Ext.SplitButton","configOptions":[{"type":"Boolean","optional":false,"name":"allowDepress","summary":"False to not allow a pressed Button to be depressed (defaults to undefined). Only valid when {@link #enableToggle} is true.\r\n"},{"type":"String","optional":true,"name":"arrowAlign","summary":"<p>The side of the Button box to render the arrow if the button has an associated {@link #menu}.\r\nTwo values are allowed:</p>\r\n<ul class=\"mdetail-params\">\r\n<li>'right'<div class=\"sub-desc\"></div></li>\r\n<li>'bottom'<div class=\"sub-desc\"></div></li>\r\n</ul>\r\n<p>Defaults to <b><tt>'right'</tt></b>.</p>"},{"type":"String","optional":false,"name":"autoEl","summary":""},{"type":"String","optional":true,"name":"buttonSelector","summary":"<p>A {@link Ext.DomQuery DomQuery} selector which is used to extract the active, clickable element from the\r\nDOM structure created.</p>\r\n<p>When a custom {@link #template} is used, you  must ensure that this selector results in the selection of\r\na focussable element.</p>\r\n<p>Defaults to <b><tt>'button:first-child'</tt></b>.</p>"},{"type":"String","optional":false,"name":"clickEvent","summary":"The type of event to map to the button's event handler (defaults to 'click')\r\n"},{"type":"String","optional":false,"name":"cls","summary":"A CSS class string to apply to the button's main element.\r\n"},{"type":"Boolean","optional":false,"name":"enableToggle","summary":"True to enable pressed/not pressed toggling (defaults to false)\r\n"},{"type":"Boolean","optional":false,"name":"handleMouseEvents","summary":"False to disable visual cues on mouseover, mouseout and mousedown (defaults to true)\r\n"},{"type":"String","optional":true,"name":"iconAlign","summary":"<p>The side of the Button box to render the icon. Four values are allowed:</p>\r\n<ul class=\"mdetail-params\">\r\n<li>'top'<div class=\"sub-desc\"></div></li>\r\n<li>'right'<div class=\"sub-desc\"></div></li>\r\n<li>'bottom'<div class=\"sub-desc\"></div></li>\r\n<li>'left'<div class=\"sub-desc\"></div></li>\r\n</ul>\r\n<p>Defaults to <b><tt>'left'</tt></b>.</p>"},{"type":"String","optional":false,"name":"iconCls","summary":"A css class which sets a background image to be used as the icon for this button\r\n"},{"type":"Mixed","optional":false,"name":"menu","summary":"Standard menu attribute consisting of a reference to a menu object, a menu id or a menu config blob (defaults to undefined).\r\n"},{"type":"String","optional":false,"name":"menuAlign","summary":"The position to align the menu to (see {@link Ext.Element#alignTo} for more details, defaults to 'tl-bl?').\r\n"},{"type":"String","optional":false,"name":"overflowText","summary":"text to be used if this item is shown in the overflow menu. See also\r\n{@link Ext.Toolbar.Item}.<code>{@link Ext.Toolbar.Item#overflowText overflowText}</code>.\r\n"},{"type":"String","optional":true,"name":"scale","summary":"<p>The size of the Button. Three values are allowed:</p>\r\n<ul class=\"mdetail-params\">\r\n<li>'small'<div class=\"sub-desc\">Results in the button element being 16px high.</div></li>\r\n<li>'medium'<div class=\"sub-desc\">Results in the button element being 24px high.</div></li>\r\n<li>'large'<div class=\"sub-desc\">Results in the button element being 32px high.</div></li>\r\n</ul>\r\n<p>Defaults to <b><tt>'small'</tt></b>.</p>"},{"type":"Object","optional":false,"name":"scope","summary":"<code>{@link #handler}</code> and <code>{@link #toggleHandler}</code> is\r\nexecuted. Defaults to this Button.\r\n"},{"type":"Number","optional":false,"name":"tabIndex","summary":""},{"type":"Ext.Template","optional":false,"name":"template","summary":"<p>A {@link Ext.Template Template} used to create the Button's DOM structure.</p>\r\nInstances, or subclasses which need a different DOM structure may provide a different\r\ntemplate layout in conjunction with an implementation of {@link #getTemplateArgs}.\r\n@type Ext.Template\r\n@property template\r\n"},{"type":"Function","optional":false,"name":"toggleHandler","summary":"Function called when a Button with {@link #enableToggle} set to true is clicked. Two arguments are passed:<ul class=\"mdetail-params\">\r\n<li><b>button</b> : Ext.Button<div class=\"sub-desc\">this Button object</div></li>\r\n<li><b>state</b> : Boolean<div class=\"sub-desc\">The next state if the Button, true means pressed.</div></li>\r\n</ul>\r\n"},{"type":"String","optional":false,"name":"tooltipType","summary":"The type of tooltip to use. Either 'qtip' (default) for QuickTips or 'title' for title attribute.\r\n"},{"type":"String","optional":false,"name":"type","summary":"submit, reset or button - defaults to 'button'\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"btnEl","summary":"An {@link Ext.Element Element} encapsulating the Button's clickable element. By default,\r\nthis references a <tt>&lt;button&gt;</tt> element. Read only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"menu","summary":"The {@link Ext.menu.Menu Menu} object associated with this Button when configured with the {@link #menu} config option.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"ownerCt","summary":"The Button's owner {@link Ext.Panel} (defaults to undefined, and is set automatically when\r\nthe Button is added to a container).  Read-only.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"focus","summary":"Focus the button\r\n"},{"parameters":[{"type":"String","optional":false,"name":"group","summary":""}],"return":null,"hide":false,"private":false,"name":"getPressed","summary":"Gets the pressed button in the passed group or null\r\n"},{"parameters":[],"return":{"type":"Object","summary":"Substitution data for a Template."},"hide":false,"private":false,"name":"getTemplateArgs","summary":"<p>This method returns an object which provides substitution parameters for the {@link #template Template} used\r\nto create this Button's DOM structure.</p>\r\n<p>Instances or subclasses which use a different Template to create a different DOM structure may need to provide their\r\nown implementation of this method.</p>\r\n<p>The default implementation which provides data for the default {@link #template} returns an Array containing the\r\nfollowing items:</p><div class=\"mdetail-params\"><ul>\r\n<li>The Button's {@link #text}</li>\r\n<li>The &lt;button&gt;'s {@link #type}</li>\r\n<li>The {@link iconCls} applied to the &lt;button&gt; {@link #btnEl element}</li>\r\n<li>The {@link #cls} applied to the Button's main {@link #getEl Element}</li>\r\n<li>A CSS class name controlling the Button's {@link #scale} and {@link #iconAlign icon alignment}</li>\r\n<li>A CSS class name which applies an arrow to the Button if configured with a {@link #menu}</li>\r\n</ul></div>\r\n"},{"parameters":[],"return":{"type":"String","summary":"The button text"},"hide":false,"private":false,"name":"getText","summary":"Gets the text for this Button\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasVisibleMenu","summary":"Returns true if the button has a menu and it is visible\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hideMenu","summary":"Hide this button's menu (if it has one)\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"handler","summary":"The function to call when the button is clicked"},{"type":"Object","optional":true,"name":"scope","summary":"Scope for the function passed in. Defaults to this Button."}],"return":{"type":"Ext.Button","summary":"this"},"hide":false,"private":false,"name":"setHandler","summary":"Assigns this Button's click handler\r\n"},{"parameters":[{"type":"String","optional":false,"name":"cls","summary":"The CSS class providing the icon image"}],"return":{"type":"Ext.Button","summary":"this"},"hide":false,"private":false,"name":"setIconClass","summary":"Sets the CSS class that provides a background image to use as the button's icon.  This method also changes\r\nthe value of the {@link iconCls} config internally.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The button text"}],"return":{"type":"Ext.Button","summary":"this"},"hide":false,"private":false,"name":"setText","summary":"Sets this Button's text\r\n"},{"parameters":[{"type":"String/Object","optional":false,"name":"tooltip.","summary":"This may be:<div class=\"mdesc-details\"><ul>\r\n<li><b>String</b> : A string to be used as innerHTML (html tags are accepted) to show in a tooltip</li>\r\n<li><b>Object</b> : A configuration object for {@link Ext.QuickTips#register}.</li>\r\n</ul></div>"}],"return":{"type":"Ext.Button","summary":"this"},"hide":false,"private":false,"name":"setTooltip","summary":"Sets the tooltip for this Button.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"showMenu","summary":"Show this button's menu (if it has one)\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"state","summary":"Force a particular state"},{"type":"Boolean","optional":true,"name":"supressEvent","summary":"True to stop events being fired when calling this method."}],"return":{"type":"Ext.Button","summary":"this"},"hide":false,"private":false,"name":"toggle","summary":"If a state it passed, it becomes the pressed state otherwise the current state is toggled.\r\n"}],"events":[{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"EventObject","optional":false,"name":"e","summary":"The click event"}],"name":"click","summary":"Fires when this button is clicked."},{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"Menu","optional":false,"name":"menu","summary":""}],"name":"menuhide","summary":"If this button has a menu, this event fires when it is hidden."},{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"Menu","optional":false,"name":"menu","summary":""}],"name":"menushow","summary":"If this button has a menu, this event fires when it is shown."},{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"Menu","optional":false,"name":"menu","summary":""},{"type":"EventObject","optional":false,"name":"e","summary":""}],"name":"menutriggerout","summary":"If this button has a menu, this event fires when the mouse leaves the menu triggering element."},{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"Menu","optional":false,"name":"menu","summary":""},{"type":"EventObject","optional":false,"name":"e","summary":""}],"name":"menutriggerover","summary":"If this button has a menu, this event fires when the mouse enters the menu triggering element."},{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"Event","optional":false,"name":"e","summary":"The event object"}],"name":"mouseout","summary":"Fires when the mouse exits the button."},{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"Event","optional":false,"name":"e","summary":"The event object"}],"name":"mouseover","summary":"Fires when the mouse hovers over the button."},{"parameters":[{"type":"Button","optional":false,"name":"el","summary":"this"},{"type":"Boolean","optional":false,"name":"pressed","summary":""}],"name":"toggle","summary":"Fires when the 'pressed' state of this button changes (only if enableToggle = true)."}]},{"name":"ButtonGroup","fullName":"Ext.ButtonGroup","summary":"Container for a group of buttons. Example usage:\r\n<pre><code>\r\nvar p = new Ext.Panel({\r\n    title: 'Panel with Button Group',\r\n    width: 300,\r\n    height:200,\r\n    renderTo: document.body,\r\n    html: 'whatever',\r\n    tbar: [{\r\n        xtype: 'buttongroup',\r\n       {@link #columns}: 3,\r\n        title: 'Clipboard',\r\n        items: [{\r\n            text: 'Paste',\r\n            scale: 'large',\r\n            rowspan: 3, iconCls: 'add',\r\n            iconAlign: 'top',\r\n            cls: 'x-btn-as-arrow'\r\n        },{\r\n            xtype:'splitbutton',\r\n            text: 'Menu Button',\r\n            scale: 'large',\r\n            rowspan: 3,\r\n            iconCls: 'add',\r\n            iconAlign: 'top',\r\n            arrowAlign:'bottom',\r\n            menu: [{text: 'Menu Item 1'}]\r\n        },{\r\n            xtype:'splitbutton', text: 'Cut', iconCls: 'add16', menu: [{text: 'Cut Menu Item'}]\r\n        },{\r\n            text: 'Copy', iconCls: 'add16'\r\n        },{\r\n            text: 'Format', iconCls: 'add16'\r\n        }]\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\ButtonGroup.js","xtype":"buttongroup","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"baseCls","summary":""},{"type":"Number","optional":false,"name":"columns","summary":"{@link #layout configured layout manager}. See {@link Ext.layout.TableLayout#columns}.\r\n"},{"type":"Boolean","optional":false,"name":"frame","summary":""},{"type":"String","optional":false,"name":"layout","summary":""},{"type":"Array","optional":false,"name":"tools","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"ColorPalette","fullName":"Ext.ColorPalette","summary":"Simple color palette class for choosing colors.  The palette can be rendered to any container.<br />\r\nHere's an example of typical usage:\r\n<pre><code>\r\nvar cp = new Ext.ColorPalette({value:'993300'});  // initial selected color\r\ncp.render('my-div');\r\n\r\ncp.on('select', function (palette, selColor) {\r\n    // do something with selColor\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\ColorPalette.js","xtype":"colorpalette","extends":"Ext.Component","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new ColorPalette."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"allowReselect","summary":""},{"type":"String","optional":false,"name":"autoEl","summary":""},{"type":"Function","optional":false,"name":"handler","summary":"Optional. A function that will handle the select event of this palette.\r\nThe handler is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><code>palette</code> : ColorPalette<div class=\"sub-desc\">The {@link #palette Ext.ColorPalette}.</div></li>\r\n<li><code>color</code> : String<div class=\"sub-desc\">The 6-digit color hex code (without the # symbol).</div></li>\r\n</ul></div>\r\n"},{"type":"String","optional":false,"name":"itemCls","summary":"The CSS class to apply to the containing element (defaults to 'x-color-palette')\r\n"},{"type":"Object","optional":false,"name":"scope","summary":"The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>\r\nfunction will be called.  Defaults to this ColorPalette instance.\r\n"},{"type":"String","optional":false,"name":"tpl","summary":""},{"type":"String","optional":false,"name":"value","summary":"The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that\r\nthe hex codes are case-sensitive.\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"color","summary":"A valid 6-digit color hex code (# will be stripped if included)"}],"return":null,"hide":false,"private":false,"name":"select","summary":"Selects the specified color in the palette (fires the {@link #select} event)\r\n"}],"events":[{"parameters":[{"type":"ColorPalette","optional":false,"name":"el","summary":"this"},{"type":"String","optional":false,"name":"color","summary":"The 6-digit color hex code (without the # symbol)"}],"name":"select","summary":"Fires when a color is selected."}]},{"name":"Component","fullName":"Ext.Component","summary":"<p>Base class for all Ext components.  All subclasses of Component may participate in the automated\r\nExt component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.\r\nComponents may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,\r\nor they may be added dynamically via the {@link Ext.Container#add add} method.</p>\r\n<p>The Component base class has built-in support for basic hide/show and enable/disable behavior.</p>\r\n<p>All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via\r\n{@link Ext#getCmp}, passing the {@link #id}.</p>\r\n<p>All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or\r\n{@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).</p>\r\n<p>See the <a href=\"http://extjs.com/learn/Tutorial:Creating_new_UI_controls\">Creating new UI controls</a> tutorial for details on how\r\nand to either extend or augment ExtJs base classes to create custom Components.</p>\r\n<p>Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the\r\nxtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:</p>\r\n<pre>\r\nxtype            Class\r\n-------------    ------------------\r\nbox             {@link Ext.BoxComponent}\r\nbutton          {@link Ext.Button}\r\nbuttongroup     {@link Ext.ButtonGroup}\r\ncolorpalette    {@link Ext.ColorPalette}\r\ncomponent       {@link Ext.Component}\r\ncontainer       {@link Ext.Container}\r\ncycle           {@link Ext.CycleButton}\r\ndataview        {@link Ext.DataView}\r\ndatepicker      {@link Ext.DatePicker}\r\neditor          {@link Ext.Editor}\r\neditorgrid      {@link Ext.grid.EditorGridPanel}\r\nflash           {@link Ext.FlashComponent}\r\netgrid            {@link Ext.grid.GridPanel}\r\nlistview        {@link Ext.ListView}\r\npanel           {@link Ext.Panel}\r\nprogress        {@link Ext.ProgressBar}\r\netpropertygrid    {@link Ext.grid.PropertyGrid}\r\nslider          {@link Ext.Slider}\r\nspacer          {@link Ext.Spacer}\r\nsplitbutton     {@link Ext.SplitButton}\r\ntabpanel        {@link Ext.TabStrip}\r\nettreepanel       {@link Ext.tree.TreePanel}\r\netviewport        {@link Ext.ViewPort}\r\nwindow          {@link Ext.Window}\r\n\r\nToolbar components\r\n---------------------------------------\r\npaging          {@link Ext.PagingToolbar}\r\ntoolbar         {@link Ext.Toolbar}\r\ntbbutton        {@link Ext.Toolbar.Button}        (deprecated; use button)\r\ntbfill          {@link Ext.Toolbar.Fill}\r\ntbitem          {@link Ext.Toolbar.Item}\r\ntbseparator     {@link Ext.Toolbar.Separator}\r\nettbspacer        {@link Ext.Toolbar.Spacer}\r\ntbsplit         {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)\r\ntbtext          {@link Ext.Toolbar.TextItem}\r\n\r\nMenu components\r\n---------------------------------------\r\nmenu            {@link Ext.menu.Menu}\r\ncolormenu       {@link Ext.menu.ColorMenu}\r\ndatemenu        {@link Ext.menu.DateMenu}\r\nmenubaseitem    {@link Ext.menu.BaseItem}\r\nmenucheckitem   {@link Ext.menu.CheckItem}\r\nmenuitem        {@link Ext.menu.Item}\r\nmenuseparator   {@link Ext.menu.Separator}\r\nmenutextitem    {@link Ext.menu.TextItem}\r\n\r\nForm components\r\n---------------------------------------\r\nform            {@link Ext.FormPanel}\r\ncheckbox        {@link Ext.form.Checkbox}\r\ncheckboxgroup   {@link Ext.form.CheckboxGroup}\r\ncombo           {@link Ext.form.ComboBox}\r\ndatefield       {@link Ext.form.DateField}\r\ndisplayfield    {@link Ext.form.DisplayField}\r\nfield           {@link Ext.form.Field}\r\nfieldset        {@link Ext.form.FieldSet}\r\nhidden          {@link Ext.form.Hidden}\r\nhtmleditor      {@link Ext.form.HtmlEditor}\r\nlabel           {@link Ext.form.Label}\r\nnumberfield     {@link Ext.form.NumberField}\r\nradio           {@link Ext.form.Radio}\r\nradiogroup      {@link Ext.form.RadioGroup}\r\ntextarea        {@link Ext.form.TextArea}\r\ntextfield       {@link Ext.form.TextField}\r\ntimefield       {@link Ext.form.TimeField}\r\nettrigger         {@link Ext.form.TriggerField}\r\n\r\nChart components\r\n---------------------------------------\r\nchart           {@link Ext.chart.Chart}\r\nbarchart        {@link Ext.chart.BarChart}\r\ncartesianchart  {@link Ext.chart.CartesianChart}\r\ncolumnchart     {@link Ext.chart.ColumnChart}\r\nlinechart       {@link Ext.chart.LineChart}\r\npiechart        {@link Ext.chart.PieChart}\r\n\r\nStore xtypes\r\n---------------------------------------\r\narraystore      {@link Ext.data.ArrayStore}\r\ndirectstore     {@link Ext.data.DirectStore}\r\ngroupingstore   {@link Ext.data.GroupingStore}\r\njsonstore       {@link Ext.data.JsonStore}\r\nsimplestore     {@link Ext.data.SimpleStore}      (deprecated; use arraystore)\r\nstore           {@link Ext.data.Store}\r\nxmlstore        {@link Ext.data.XmlStore}\r\n</pre>\r\n","package":"Ext","definedIn":"widgets\\Component.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Ext.Element/String/Object","optional":false,"name":"config","summary":"The configuration options may be specified as either: <div class=\"mdetail-params\"><ul> <li><b>an element</b> : <p class=\"sub-desc\">it is set as the internal element and its id used as the component id</p></li> <li><b>a string</b> : <p class=\"sub-desc\">it is assumed to be the id of an existing element and is used as the component id</p></li> <li><b>anything else</b> : <p class=\"sub-desc\">it is assumed to be a standard config object and is applied to the component</p></li> </ul></div>"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.menu.BaseItem,Ext.BoxComponent,Ext.ColorPalette,Ext.DatePicker,Ext.Editor","configOptions":[{"type":"Boolean","optional":false,"name":"allowDomMove","summary":"Whether the component can move the Dom node when rendering (defaults to true).\r\n"},{"type":"String","optional":false,"name":"anchor","summary":"by a Container which has been configured to use an <b>{@link Ext.layout.AnchorLayout AnchorLayout}</b>\r\nbased layout manager, for example:<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.form.FormPanel}</li>\r\n<li>specifying <code>layout: 'anchor' // or 'form', or 'absolute'</code></li>\r\n</ul></div></p>\r\n<p>See {@link Ext.layout.AnchorLayout}.{@link Ext.layout.AnchorLayout#anchor anchor} also.</p>\r\n"},{"type":"Mixed","optional":false,"name":"applyTo","summary":"<p>Specify the id of the element, a DOM element or an existing Element corresponding to a DIV\r\nthat is already present in the document that specifies some structural markup for this\r\ncomponent.</p><div><ul>\r\n<li><b>Description</b> : <ul>\r\n<div class=\"sub-desc\">When <tt>applyTo</tt> is used, constituent parts of the component can also be specified\r\nby id or CSS class name within the main element, and the component being created may attempt\r\nto create its subcomponents from that markup if applicable.</div>\r\n</ul></li>\r\n<li><b>Notes</b> : <ul>\r\n<div class=\"sub-desc\">When using this config, a call to render() is not required.</div>\r\n<div class=\"sub-desc\">If applyTo is specified, any value passed for {@link #renderTo} will be ignored and the target\r\nelement's parent node will automatically be used as the component's container.</div>\r\n</ul></li>\r\n</ul></div>\r\n"},{"type":"Mixed","optional":false,"name":"autoEl","summary":"<p>A tag name or {@link Ext.DomHelper DomHelper} spec used to create the {@link #getEl Element} which will\r\nencapsulate this Component.</p>\r\n<p>You do not normally need to specify this. For the base classes {@link Ext.Component}, {@link Ext.BoxComponent},\r\nand {@link Ext.Container}, this defaults to <b><tt>'div'</tt></b>. The more complex Ext classes use a more complex\r\nDOM structure created by their own onRender methods.</p>\r\n<p>This is intended to allow the developer to create application-specific utility Components encapsulated by\r\ndifferent DOM elements. Example usage:</p><pre><code>\r\n{\r\n    xtype: 'box',\r\n    autoEl: {\r\n        tag: 'img',\r\n        src: 'http://www.example.com/example.jpg'\r\n    }\r\n}, {\r\n    xtype: 'box',\r\n    autoEl: {\r\n        tag: 'blockquote',\r\n        html: 'autoEl is cool!'\r\n    }\r\n}, {\r\n    xtype: 'container',\r\n    autoEl: 'ul',\r\n    cls: 'ux-unordered-list',\r\n    items: {\r\n        xtype: 'box',\r\n        autoEl: 'li',\r\n        html: 'First list item'\r\n    }\r\n}\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"autoShow","summary":"True if the component should check for hidden classes (e.g. 'x-hidden' or 'x-hide-display') and remove\r\nthem on render (defaults to false).\r\n"},{"type":"String","optional":false,"name":"clearCls","summary":"directly after each form field wrapper to provide field clearing (defaults to\r\n<tt>'x-form-clear-left'</tt>).</p>\r\n<br><p><b>Note</b>: this config is only used when this Component is rendered by a Container\r\nwhich has been configured to use the <b>{@link Ext.layout.FormLayout FormLayout}</b> layout\r\nmanager (e.g. {@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>) and either a\r\n<tt>{@link #fieldLabel}</tt> is specified or <tt>isFormField=true</tt> is specified.</p><br>\r\n<p>See {@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl} also.</p>\r\n"},{"type":"String","optional":false,"name":"cls","summary":"An optional extra CSS class that will be added to this component's Element (defaults to '').  This can be\r\nuseful for adding customized styles to the component or any of its children using standard CSS rules.\r\n"},{"type":"String","optional":false,"name":"ctCls","summary":"<p>An optional extra CSS class that will be added to this component's container. This can be useful for\r\nadding customized styles to the container or any of its children using standard CSS rules.  See\r\n{@link Ext.layout.ContainerLayout}.{@link Ext.layout.ContainerLayout#extraCls extraCls} also.</p>\r\n<p><b>Note</b>: <tt>ctCls</tt> defaults to <tt>''</tt> except for the following class\r\nwhich assigns a value by default:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.layout.Box Box Layout} : <tt>'x-box-layout-ct'</tt></li>\r\n</ul></div>\r\nTo configure the above Class with an extra CSS class append to the default.  For example,\r\nfor BoxLayout (Hbox and Vbox):<pre><code>\r\nctCls: 'x-box-layout-ct custom-class'\r\n</code></pre>\r\n</p>\r\n"},{"type":"Boolean","optional":false,"name":"disabled","summary":"Render this component disabled (default is false).\r\n"},{"type":"String","optional":false,"name":"disabledClass","summary":"CSS class added to the component when it is disabled (defaults to 'x-item-disabled').\r\n"},{"type":"String","optional":false,"name":"fieldLabel","summary":"<br><p><b>Note</b>: this config is only used when this Component is rendered by a Container which\r\nhas been configured to use the <b>{@link Ext.layout.FormLayout FormLayout}</b> layout manager (e.g.\r\n{@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>).</p><br>\r\n<p>Also see <tt>{@link #hideLabel}</tt> and\r\n{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.</p>\r\nExample use:<pre><code>\r\nnew Ext.FormPanel({\r\n    height: 100,\r\n    renderTo: Ext.getBody(),\r\n    items: [{\r\n        xtype: 'textfield',\r\n        fieldLabel: 'Name'\r\n    }]\r\n});\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"hidden","summary":"Render this component hidden (default is false). If <tt>true</tt>, the\r\n{@link #hide} method will be called internally.\r\n"},{"type":"Boolean","optional":false,"name":"hideLabel","summary":"({@link #fieldLabel label} and {@link #labelSeparator separator}). Defaults to <tt>false</tt>.\r\nBy default, even if you do not specify a <tt>{@link #fieldLabel}</tt> the space will still be\r\nreserved so that the field will line up with other fields that do have labels.\r\nSetting this to <tt>true</tt> will cause the field to not reserve that space.</p>\r\n<br><p><b>Note</b>: see the note for <tt>{@link #clearCls}</tt>.</p><br>\r\nExample use:<pre><code>\r\nnew Ext.FormPanel({\r\n    height: 100,\r\n    renderTo: Ext.getBody(),\r\n    items: [{\r\n        xtype: 'textfield'\r\n        hideLabel: true\r\n    }]\r\n});\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"hideMode","summary":"<p>How this component should be hidden. Supported values are <tt>'visibility'</tt>\r\n(css visibility), <tt>'offsets'</tt> (negative offset position) and <tt>'display'</tt>\r\n(css display).</p>\r\n<br><p><b>Note</b>: the default of <tt>'display'</tt> is generally preferred\r\nsince items are automatically laid out when they are first shown (no sizing\r\nis done while hidden).</p>\r\n"},{"type":"Boolean","optional":false,"name":"hideParent","summary":"True to hide and show the component's container when hide/show is called on the component, false to hide\r\nand show the component itself (defaults to false).  For example, this can be used as a shortcut for a hide\r\nbutton on a window by setting hide:true on the button when adding it to its parent container.\r\n"},{"type":"String","optional":false,"name":"id","summary":"<p>The <b>unique</b> id of this component (defaults to an {@link #getId auto-assigned id}).\r\nYou should assign an id if you need to be able to access the component later and you do\r\nnot have an object reference available (e.g., using {@link Ext}.{@link Ext#getCmp getCmp}).</p>\r\n<p>Note that this id will also be used as the element id for the containing HTML element\r\nthat is rendered to the page for this component. This allows you to write id-based CSS\r\nrules to style the specific instance of this component uniquely, and also to select\r\nsub-elements using this component's id as the parent.</p>\r\n<p><b>Note</b>: to avoid complications imposed by a unique <tt>id</tt> also see\r\n<code>{@link #itemId}</code> and <code>{@link #ref}</code>.</p>\r\n<p><b>Note</b>: to access the container of an item see <code>{@link #ownerCt}</code>.</p>\r\n"},{"type":"String","optional":false,"name":"itemCls","summary":"<p><b>Note</b>: this config is only used when this Component is rendered by a Container which\r\nhas been configured to use the <b>{@link Ext.layout.FormLayout FormLayout}</b> layout manager (e.g.\r\n{@link Ext.form.FormPanel} or specifying <tt>layout:'form'</tt>).</p><br>\r\n<p>An additional CSS class to apply to the div wrapping the form item\r\nelement of this field.  If supplied, <tt>itemCls</tt> at the <b>field</b> level will override\r\nthe default <tt>itemCls</tt> supplied at the <b>container</b> level. The value specified for\r\n<tt>itemCls</tt> will be added to the default class (<tt>'x-form-item'</tt>).</p>\r\n<p>Since it is applied to the item wrapper (see\r\n{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}), it allows\r\nyou to write standard CSS rules that can apply to the field, the label (if specified), or\r\nany other element within the markup for the field.</p>\r\n<br><p><b>Note</b>: see the note for <tt>{@link #fieldLabel}</tt>.</p><br>\r\nExample use:<pre><code>\r\n// Apply a style to the field&#39;s label:\r\n&lt;style>\r\n    .required .x-form-item-label {font-weight:bold;color:red;}\r\n&lt;/style>\r\n\r\nnew Ext.FormPanel({\r\n    height: 100,\r\n    renderTo: Ext.getBody(),\r\n    items: [{\r\n        xtype: 'textfield',\r\n        fieldLabel: 'Name',\r\n        itemCls: 'required' //this label will be styled\r\n    },{\r\n        xtype: 'textfield',\r\n        fieldLabel: 'Favorite Color'\r\n    }]\r\n});\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"itemId","summary":"<p>An <tt>itemId</tt> can be used as an alternative way to get a reference to a component\r\nwhen no object reference is available.  Instead of using an <code>{@link #id}</code> with\r\n{@link Ext}.{@link Ext#getCmp getCmp}, use <code>itemId</code> with\r\n{@link Ext.Container}.{@link Ext.Container#getComponent getComponent} which will retrieve\r\n<code>itemId</code>'s or <tt>{@link #id}</tt>'s. Since <code>itemId</code>'s are an index to the\r\ncontainer's internal MixedCollection, the <code>itemId</code> is scoped locally to the container --\r\navoiding potential conflicts with {@link Ext.ComponentMgr} which requires a <b>unique</b>\r\n<code>{@link #id}</code>.</p>\r\n<pre><code>\r\nvar c = new Ext.Panel({ //\r\n   {@link Ext.BoxComponent#height height}: 300,\r\n   {@link #renderTo}: document.body,\r\n   {@link Ext.Container#layout layout}: 'auto',\r\n   {@link Ext.Container#items items}: [\r\n       {\r\n            itemId: 'p1',\r\n           {@link Ext.Panel#title title}: 'Panel 1',\r\n           {@link Ext.BoxComponent#height height}: 150\r\n        },\r\n       {\r\n            itemId: 'p2',\r\n           {@link Ext.Panel#title title}: 'Panel 2',\r\n           {@link Ext.BoxComponent#height height}: 150\r\n        }\r\n    ]\r\n})\r\np1 = c.{@link Ext.Container#getComponent getComponent}('p1'); // not the same as {@link Ext#getCmp Ext.getCmp()}\r\np2 = p1.{@link #ownerCt}.{@link Ext.Container#getComponent getComponent}('p2'); // reference via a sibling\r\n</code></pre>\r\n<p>Also see <tt>{@link #id}</tt> and <code>{@link #ref}</code>.</p>\r\n<p><b>Note</b>: to access the container of an item see <tt>{@link #ownerCt}</tt>.</p>\r\n"},{"type":"String","optional":false,"name":"labelSeparator","summary":"<tt>{@link #fieldLabel}</tt>.  This property may be configured at various levels.\r\nThe order of precedence is:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>field / component level</li>\r\n<li>container level</li>\r\n<li>{@link Ext.layout.FormLayout#labelSeparator layout level} (defaults to colon <tt>':'</tt>)</li>\r\n</ul></div>\r\nTo display no separator for this field's label specify empty string ''.</p>\r\n<br><p><b>Note</b>: see the note for <tt>{@link #clearCls}</tt>.</p><br>\r\n<p>Also see <tt>{@link #hideLabel}</tt> and\r\n{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.</p>\r\nExample use:<pre><code>\r\nnew Ext.FormPanel({\r\n    height: 100,\r\n    renderTo: Ext.getBody(),\r\n    layoutConfig: {\r\n        labelSeparator: '~'   // layout config has lowest priority (defaults to ':')\r\n    },\r\n   {@link Ext.layout.FormLayout#labelSeparator labelSeparator}: '>>',     // config at container level\r\n    items: [{\r\n        xtype: 'textfield',\r\n        fieldLabel: 'Field 1',\r\n        labelSeparator: '...' // field/component level config supersedes others\r\n    },{\r\n        xtype: 'textfield',\r\n        fieldLabel: 'Field 2' // labelSeparator will be '='\r\n    }]\r\n});\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"labelStyle","summary":"label.  Defaults to the container's labelStyle value if set (e.g.,\r\n<tt>{@link Ext.layout.FormLayout#labelStyle}</tt> , or '').</p>\r\n<br><p><b>Note</b>: see the note for <code>{@link #clearCls}</code>.</p><br>\r\n<p>Also see <code>{@link #hideLabel}</code> and\r\n<code>{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.</code></p>\r\nExample use:<pre><code>\r\nnew Ext.FormPanel({\r\n    height: 100,\r\n    renderTo: Ext.getBody(),\r\n    items: [{\r\n        xtype: 'textfield',\r\n        fieldLabel: 'Name',\r\n        labelStyle: 'font-weight:bold;'\r\n    }]\r\n});\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"overCls","summary":"An optional extra CSS class that will be added to this component's Element when the mouse moves\r\nover the Element, and removed when the mouse moves out. (defaults to '').  This can be\r\nuseful for adding customized 'active' or 'hover' styles to the component or any of its children using standard CSS rules.\r\n"},{"type":"Object/Array","optional":false,"name":"plugins","summary":"An object or array of objects that will provide custom functionality for this component.  The only\r\nrequirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.\r\nWhen a component is created, if any plugins are available, the component will call the init method on each\r\nplugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the\r\ncomponent as needed to provide its functionality.\r\n"},{"type":"String","optional":false,"name":"ptype","summary":"The registered <tt>ptype</tt> to create. This config option is not used when passing\r\na config object into a constructor. This config option is used only when\r\nlazy instantiation is being used, and a Plugin is being\r\nspecified not as a fully instantiated Component, but as a <i>Component config\r\nobject</i>. The <tt>ptype</tt> will be looked up at render time up to determine what\r\ntype of Plugin to create.<br><br>\r\nIf you create your own Plugins, you may register them using\r\n{@link Ext.ComponentMgr#registerPlugin} in order to be able to\r\ntake advantage of lazy instantiation and rendering.\r\n"},{"type":"String","optional":false,"name":"ref","summary":"<p>A path specification, relative to the Component's {@link #ownerCt} specifying into which\r\nancestor Container to place a named reference to this Component.</p>\r\n<p>The ancestor axis can be traversed by using '/' characters in the path.\r\nFor example, to put a reference to a Toolbar Button into <i>the Panel which owns the Toolbar</i>:</p><pre><code>\r\nvar myGrid = new Ext.grid.EditorGridPanel({\r\n    title: 'My EditorGridPanel',\r\n    store: myStore,\r\n    colModel: myColModel,\r\n    tbar: [{\r\n        text: 'Save',\r\n        handler: saveChanges,\r\n        disabled: true,\r\n        ref: '../saveButton'\r\n    }],\r\n    listeners: {\r\n        afteredit: function () {\r\n//          The button reference is in the GridPanel\r\n            myGrid.saveButton.enable();\r\n        }\r\n    }\r\n});\r\n</code></pre>\r\n<p>In the code above, if the ref had been <code>'saveButton'</code> the reference would\r\nhave been placed into the Toolbar. Each '/' in the ref moves up one level from the\r\nComponent's {@link #ownerCt}.</p>\r\n"},{"type":"Mixed","optional":false,"name":"renderTo","summary":"<p>Specify the id of the element, a DOM element or an existing Element that this component\r\nwill be rendered into.</p><div><ul>\r\n<li><b>Notes</b> : <ul>\r\n<div class=\"sub-desc\">Do <u>not</u> use this option if the Component is to be a child item of\r\na {@link Ext.Container Container}. It is the responsibility of the\r\n{@link Ext.Container Container}'s {@link Ext.Container#layout layout manager}\r\nto render and manage its child items.</div>\r\n<div class=\"sub-desc\">When using this config, a call to render() is not required.</div>\r\n</ul></li>\r\n</ul></div>\r\n<p>See <tt>{@link #render}</tt> also.</p>\r\n"},{"type":"Array","optional":false,"name":"stateEvents","summary":"<p>An array of events that, when fired, should trigger this component to\r\nsave its state (defaults to none). <code>stateEvents</code> may be any type\r\nof event supported by this component, including browser or custom events\r\n(e.g., <tt>['click', 'customerchange']</tt>).</p>\r\n<p>See <code>{@link #stateful}</code> for an explanation of saving and\r\nrestoring Component state.</p>\r\n"},{"type":"Boolean","optional":false,"name":"stateful","summary":"<p>A flag which causes the Component to attempt to restore the state of\r\ninternal properties from a saved state on startup. The component must have\r\neither a <code>{@link #stateId}</code> or <code>{@link #id}</code> assigned\r\nfor state to be managed. Auto-generated ids are not guaranteed to be stable\r\nacross page loads and cannot be relied upon to save and restore the same\r\nstate for a component.<p>\r\n<p>For state saving to work, the state manager's provider must have been\r\nset to an implementation of {@link Ext.state.Provider} which overrides the\r\n{@link Ext.state.Provider#set set} and {@link Ext.state.Provider#get get}\r\nmethods to save and recall name/value pairs. A built-in implementation,\r\n{@link Ext.state.CookieProvider} is available.</p>\r\n<p>To set the state provider for the current page:</p>\r\n<pre><code>\r\nExt.state.Manager.setProvider(new Ext.state.CookieProvider({\r\n    expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now\r\n}));\r\n</code></pre>\r\n<p>A stateful Component attempts to save state when one of the events\r\nlisted in the <code>{@link #stateEvents}</code> configuration fires.</p>\r\n<p>To save state, a stateful Component first serializes its state by\r\ncalling <b><code>getState</code></b>. By default, this function does\r\nnothing. The developer must provide an implementation which returns an\r\nobject hash which represents the Component's restorable state.</p>\r\n<p>The value yielded by getState is passed to {@link Ext.state.Manager#set}\r\nwhich uses the configured {@link Ext.state.Provider} to save the object\r\nkeyed by the Component's <code>{@link stateId}</code>, or, if that is not\r\nspecified, its <code>{@link #id}</code>.</p>\r\n<p>During construction, a stateful Component attempts to <i>restore</i>\r\nits state by calling {@link Ext.state.Manager#get} passing the\r\n<code>{@link #stateId}</code>, or, if that is not specified, the\r\n<code>{@link #id}</code>.</p>\r\n<p>The resulting object is passed to <b><code>applyState</code></b>.\r\nThe default implementation of <code>applyState</code> simply copies\r\nproperties into the object, but a developer may override this to support\r\nmore behaviour.</p>\r\n<p>You can perform extra processing on state save and restore by attaching\r\nhandlers to the {@link #beforestaterestore}, {@link #staterestore},\r\n{@link #beforestatesave} and {@link #statesave} events.</p>\r\n"},{"type":"String","optional":false,"name":"stateId","summary":"The unique id for this component to use for state management purposes\r\n(defaults to the component id if one was set, otherwise null if the\r\ncomponent is using a generated id).\r\n<p>See <code>{@link #stateful}</code> for an explanation of saving and\r\nrestoring Component state.</p>\r\n"},{"type":"String","optional":false,"name":"style","summary":"A custom style specification to be applied to this component's Element.  Should be a valid argument to\r\n{@link Ext.Element#applyStyles}.\r\n<pre><code>\r\nnew Ext.Panel({\r\n    title: 'Some Title',\r\n    renderTo: Ext.getBody(),\r\n    width: 400, height: 300,\r\n    layout: 'form',\r\n    items: [{\r\n        xtype: 'textarea',\r\n        style: {\r\n            width: '95%',\r\n            marginBottom: '10px'\r\n        }\r\n    },\r\n        new Ext.Button({\r\n            text: 'Send',\r\n            minWidth: '100',\r\n            style: {\r\n                marginBottom: '10px'\r\n            }\r\n        })\r\n    ]\r\n});\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"xtype","summary":"The registered <tt>xtype</tt> to create. This config option is not used when passing\r\na config object into a constructor. This config option is used only when\r\nlazy instantiation is being used, and a child item of a Container is being\r\nspecified not as a fully instantiated Component, but as a <i>Component config\r\nobject</i>. The <tt>xtype</tt> will be looked up at render time up to determine what\r\ntype of child Component to create.<br><br>\r\nThe predefined xtypes are listed {@link Ext.Component here}.\r\n<br><br>\r\nIf you subclass Components to create your own Components, you may register\r\nthem using {@link Ext.ComponentMgr#registerType} in order to be able to\r\ntake advantage of lazy instantiation and rendering.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"disabled","summary":"True if this component is disabled. Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"el","summary":"<p>The {@link Ext.Element} which encapsulates this Component. Read-only.</p>\r\n<p>This will <i>usually</i> be a &lt;DIV> element created by the class's onRender method, but\r\nthat may be overridden using the <code>{@link #autoEl}</code> config.</p>\r\n<br><p><b>Note</b>: this element will not be available until this Component has been rendered.</p><br>\r\n<p>To add listeners for <b>DOM events</b> to this Component (as opposed to listeners\r\nfor this Component's own Observable events), see the {@link Ext.util.Observable#listeners listeners}\r\nconfig for a suggestion, or use a render listener directly:</p><pre><code>\r\nnew Ext.Panel({\r\ntitle: 'The Clickable Panel',\r\nlisteners: {\r\nrender: function (p) {\r\n// Append the Panel to the click handler&#39;s argument list.\r\np.getEl().on('click', handlePanelClick.createDelegate(null, [p], true));\r\n},\r\nsingle: true  // Remove the listener after first invocation\r\n}\r\n});\r\n</code></pre>\r\n<p>See also <tt>{@link #getEl getEl}</p>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"hidden","summary":"True if this component is hidden. Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"initialConfig","summary":"This Component's initial configuration specification. Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"ownerCt","summary":"The component's owner {@link Ext.Container} (defaults to undefined, and is set automatically when\r\nthe component is added to a container).  Read-only.\r\n<p><b>Note</b>: to access items within the container see <tt>{@link #itemId}</tt>.</p>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"rendered","summary":"True if this component has been rendered. Read-only.\r\n"}],"methods":[{"parameters":[{"type":"string","optional":false,"name":"cls","summary":"The CSS class name to add"}],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"addClass","summary":"Adds a CSS class to the component's underlying element.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":""}],"return":null,"hide":false,"private":false,"name":"applyToMarkup","summary":"Apply this component to existing markup that is valid. With this function, no call to render() is required.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"overrides","summary":"A new config containing any properties to override in the cloned version.\r\nAn id property can be passed on this object, otherwise one will be generated to avoid duplicates."}],"return":{"type":"Ext.Component","summary":"clone The cloned copy of this component"},"hide":false,"private":false,"name":"cloneConfig","summary":"Clone the current component using the original config values passed into this instance by default.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"destroy","summary":"Destroys this component by purging any event listeners, removing the component's element from the DOM,\r\nremoving the component from its {@link Ext.Container} (if applicable) and unregistering it from\r\n{@link Ext.ComponentMgr}.  Destruction is generally handled automatically by the framework and this method\r\nshould usually not need to be called directly.\r\n\r\n"},{"parameters":[],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"disable","summary":"Disable this component and fire the 'disable' event.\r\n"},{"parameters":[],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"enable","summary":"Enable this component and fire the 'enable' event.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The custom function to call with the arguments (container, this component)."}],"return":{"type":"Ext.Container","summary":"The first Container for which the custom function returns true"},"hide":false,"private":false,"name":"findParentBy","summary":"Find a container above this component at any level by a custom function. If the passed function returns\r\ntrue, the container will be returned.\r\n"},{"parameters":[{"type":"String/Class","optional":false,"name":"xtype","summary":"The xtype string for a component, or the class of the component directly"}],"return":{"type":"Ext.Container","summary":"The first Container which matches the given xtype or class"},"hide":false,"private":false,"name":"findParentByType","summary":"Find a container above this component at any level by xtype or class\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"selectText","summary":"If applicable, true to also select the text in this component"},{"type":"Boolean/Number","optional":true,"name":"delay","summary":"Delay the focus this number of milliseconds (true for 10 milliseconds)"}],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"focus","summary":"Try to focus this component.\r\n"},{"parameters":[],"return":{"type":"Ext.Container","summary":"the Container which owns this Component."},"hide":false,"private":false,"name":"getBubbleTarget","summary":"Provides the link for Observable's fireEvent method to bubble up the ownership hierarchy.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The Element which encapsulates this Component."},"hide":false,"private":false,"name":"getEl","summary":"<p>Returns the {@link Ext.Element} which encapsulates this Component.</p>\r\n<p>This will <i>usually</i> be a &lt;DIV> element created by the class's onRender method, but\r\nthat may be overridden using the {@link #autoEl} config.</p>\r\n<br><p><b>Note</b>: this element will not be available until this Component has been rendered.</p><br>\r\n<p>To add listeners for <b>DOM events</b> to this Component (as opposed to listeners\r\nfor this Component's own Observable events), see the {@link #listeners} config for a suggestion,\r\nor use a render listener directly:</p><pre><code>\r\nnew Ext.Panel({\r\n    title: 'The Clickable Panel',\r\n    listeners: {\r\n        render: function (p) {\r\n            // Append the Panel to the click handler&#39;s argument list.\r\n            p.getEl().on('click', handlePanelClick.createDelegate(null, [p], true));\r\n        },\r\n        single: true  // Remove the listener after first invocation\r\n    }\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"String","summary":"id"},"hide":false,"private":false,"name":"getId","summary":"Returns the <code>id</code> of this component or automatically generates and\r\nreturns an <code>id</code> if an <code>id</code> is not defined yet:<pre><code>\r\n'ext-comp-' + (++Ext.Component.AUTO_ID)\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"getItemId","summary":"Returns the <code>{@link #itemId}</code> of this component.  If an\r\n<code>{@link #itemId}</code> was not assigned through configuration the\r\n<code>id</code> is returned using <code>{@link #getId}</code>.\r\n"},{"parameters":[],"return":{"type":"String","summary":"The xtype"},"hide":false,"private":false,"name":"getXType","summary":"Gets the xtype for this component as registered with {@link Ext.ComponentMgr}. For a list of all\r\navailable xtypes, see the {@link Ext.Component} header. Example usage:\r\n<pre><code>\r\nvar t = new Ext.form.TextField();\r\nalert(t.getXType());  // alerts 'textfield'\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"String","summary":"The xtype hierarchy string"},"hide":false,"private":false,"name":"getXTypes","summary":"<p>Returns this Component's xtype hierarchy as a slash-delimited string. For a list of all\r\navailable xtypes, see the {@link Ext.Component} header.</p>\r\n<p><b>If using your own subclasses, be aware that a Component must register its own xtype\r\nto participate in determination of inherited xtypes.</b></p>\r\n<p>Example usage:</p>\r\n<pre><code>\r\nvar t = new Ext.form.TextField();\r\nalert(t.getXTypes());  // alerts 'component/box/field/textfield'\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"hide","summary":"Hide this component.  Listen to the '{@link #beforehide}' event and return\r\n<tt>false</tt> to cancel hiding the component.  Fires the '{@link #hide}'\r\nevent after hiding the component. Note this method is called internally if\r\nthe component is configured to be <code>{@link #hidden}</code>.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if this component is visible, false otherwise."},"hide":false,"private":false,"name":"isVisible","summary":"Returns true if this component is visible.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"xtype","summary":"The xtype to check for this Component"},{"type":"Boolean","optional":true,"name":"shallow","summary":"False to check whether this Component is descended from the xtype (this is\r\nthe default), or true to check whether this Component is directly of the specified xtype."}],"return":{"type":"Boolean","summary":"True if this component descends from the specified xtype, false otherwise."},"hide":false,"private":false,"name":"isXType","summary":"<p>Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended\r\nfrom the xtype (default) or whether it is directly of the xtype specified (shallow = true).</p>\r\n<p><b>If using your own subclasses, be aware that a Component must register its own xtype\r\nto participate in determination of inherited xtypes.</b></p>\r\n<p>For a list of all available xtypes, see the {@link Ext.Component} header.</p>\r\n<p>Example usage:</p>\r\n<pre><code>\r\nvar t = new Ext.form.TextField();\r\nvar isText = t.isXType('textfield');        // true\r\nvar isBoxSubclass = t.isXType('box');       // true, descended from BoxComponent\r\nvar isBoxInstance = t.isXType('box', true); // false, not a direct BoxComponent instance\r\n</code></pre>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"nextSibling","summary":"Returns the next component in the owning container\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"previousSibling","summary":"Returns the previous component in the owning container\r\n"},{"parameters":[{"type":"string","optional":false,"name":"cls","summary":"The CSS class name to remove"}],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"removeClass","summary":"Removes a CSS class from the component's underlying element.\r\n"},{"parameters":[{"type":"Element/HTMLElement/String","optional":true,"name":"container","summary":"The element this Component should be\r\nrendered into. If it is being created from existing markup, this should be omitted."},{"type":"String/Number","optional":true,"name":"position","summary":"The element ID or DOM node index within the container <b>before</b>\r\nwhich this component will be inserted (defaults to appending to the end of the container)"}],"return":null,"hide":false,"private":false,"name":"render","summary":"<p>Render this Component into the passed HTML element.</p>\r\n<p><b>If you are using a {@link Ext.Container Container} object to house this Component, then\r\ndo not use the render method.</b></p>\r\n<p>A Container's child Components are rendered by that Container's\r\n{@link Ext.Container#layout layout} manager when the Container is first rendered.</p>\r\n<p>Certain layout managers allow dynamic addition of child components. Those that do\r\ninclude {@link Ext.layout.CardLayout}, {@link Ext.layout.AnchorLayout},\r\n{@link Ext.layout.FormLayout}, {@link Ext.layout.TableLayout}.</p>\r\n<p>If the Container is already rendered when a new child Component is added, you may need to call\r\nthe Container's {@link Ext.Container#doLayout doLayout} to refresh the view which causes any\r\nunrendered child Components to be rendered. This is required so that you can add multiple\r\nchild components if needed while only refreshing the layout once.</p>\r\n<p>When creating complex UIs, it is important to remember that sizing and positioning\r\nof child items is the responsibility of the Container's {@link Ext.Container#layout layout} manager.\r\nIf you expect child items to be sized in response to user interactions, you must\r\nconfigure the Container with a layout manager which creates and manages the type of layout you\r\nhave in mind.</p>\r\n<p><b>Omitting the Container's {@link Ext.Container#layout layout} config means that a basic\r\nlayout manager is used which does nothing but render child components sequentially into the\r\nContainer. No sizing or positioning will be performed in this situation.</b></p>\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"disabled","summary":""}],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"setDisabled","summary":"Convenience function for setting disabled/enabled by boolean.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"visible","summary":"True to show, false to hide"}],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"setVisible","summary":"Convenience function to hide or show this component by boolean.\r\n"},{"parameters":[],"return":{"type":"Ext.Component","summary":"this"},"hide":false,"private":false,"name":"show","summary":"Show this component.  Listen to the '{@link #beforeshow}' event and return\r\n<tt>false</tt> to cancel showing the component.  Fires the '{@link #show}'\r\nevent after showing the component.\r\n"}],"events":[{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"afterrender","summary":"<p>Fires after the component rendering is finished.</p> <p>The afterrender event is fired after this Component has been {@link #rendered}, been postprocesed by any afterRender method defined for the Component, and, if {@link #stateful}, after state has been restored.</p>."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"beforedestroy","summary":"Fires before the component is {@link #destroy}ed. Return false from an event handler to stop the {@link #destroy}."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"beforehide","summary":"Fires before the component is hidden by calling the {@link #hide} method. Return false from an event handler to stop the hide."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"beforerender","summary":"Fires before the component is {@link #rendered}. Return false from an event handler to stop the {@link #render}."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"beforeshow","summary":"Fires before the component is shown by calling the {@link #show} method. Return false from an event handler to stop the show."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"state","summary":"The hash of state values returned from the StateProvider. If this"}],"name":"beforestaterestore","summary":"Fires before the state of the component is restored. Return false from an event handler to stop the restore. event is not vetoed, then the state object is passed to <b><tt>applyState</tt></b>. By default, that simply copies property values into this Component. The method maybe overriden to provide custom state restoration."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"state","summary":"The hash of state values. This is determined by calling"}],"name":"beforestatesave","summary":"Fires before the state of the component is saved to the configured state provider. Return false to stop the save. <b><tt>getState()</tt></b> on the Component. This method must be provided by the developer to return whetever representation of state is required, by default, Ext.Component has a null implementation."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"destroy","summary":"Fires after the component is {@link #destroy}ed."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"disable","summary":"Fires after the component is disabled."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"enable","summary":"Fires after the component is enabled."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"hide","summary":"Fires after the component is hidden. Fires after the component is hidden when calling the {@link #hide} method."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"render","summary":"Fires after the component markup is {@link #rendered}."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"}],"name":"show","summary":"Fires after the component is shown when calling the {@link #show} method."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"state","summary":"The hash of state values returned from the StateProvider. This is passed"}],"name":"staterestore","summary":"Fires after the state of the component is restored. to <b><tt>applyState</tt></b>. By default, that simply copies property values into this Component. The method maybe overriden to provide custom state restoration."},{"parameters":[{"type":"Ext.Component","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"state","summary":"The hash of state values. This is determined by calling"}],"name":"statesave","summary":"Fires after the state of the component is saved to the configured state provider. <b><tt>getState()</tt></b> on the Component. This method must be provided by the developer to return whetever representation of state is required, by default, Ext.Component has a null implementation."}]},{"name":"ComponentMgr","fullName":"Ext.ComponentMgr","summary":"<p>Provides a registry of all Components (instances of {@link Ext.Component} or any subclass\r\nthereof) on a page so that they can be easily accessed by {@link Ext.Component component}\r\n{@link Ext.Component#id id} (see {@link #get}, or the convenience method {@link Ext#getCmp Ext.getCmp}).</p>\r\n<p>This object also provides a registry of available Component <i>classes</i>\r\nindexed by a mnemonic code known as the Component's {@link Ext.Component#xtype xtype}.\r\nThe <tt>{@link Ext.Component#xtype xtype}</tt> provides a way to avoid instantiating child Components\r\nwhen creating a full, nested config object for a complete Ext page.</p>\r\n<p>A child Component may be specified simply as a <i>config object</i>\r\nas long as the correct <tt>{@link Ext.Component#xtype xtype}</tt> is specified so that if and when the Component\r\nneeds rendering, the correct type can be looked up for lazy instantiation.</p>\r\n<p>For a list of all available <tt>{@link Ext.Component#xtype xtypes}</tt>, see {@link Ext.Component}.</p>\r\n","package":"Ext","definedIn":"widgets\\ComponentMgr.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A configuration object for the Component you wish to create."},{"type":"Constructor","optional":false,"name":"defaultType","summary":"The constructor to provide the default Component type if\r\nthe config object does not contain a <tt>xtype</tt>. (Optional if the config contains a <tt>xtype</tt>)."}],"return":{"type":"Ext.Component","summary":"The newly instantiated Component."},"hide":false,"private":false,"name":"create","summary":"Creates a new Component from the specified config object using the\r\nconfig object's {@link Ext.component#xtype xtype} to determine the class to instantiate.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"A configuration object for the Plugin you wish to create."},{"type":"Constructor","optional":false,"name":"defaultType","summary":"The constructor to provide the default Plugin type if\r\nthe config object does not contain a <tt>ptype</tt>. (Optional if the config contains a <tt>ptype</tt>)."}],"return":{"type":"Ext.Component","summary":"The newly instantiated Plugin."},"hide":false,"private":false,"name":"createPlugin","summary":"Creates a new Plugin from the specified config object using the\r\nconfig object's {@link Ext.component#ptype ptype} to determine the class to instantiate.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The component {@link Ext.Component#id id}\r\nClass was found."}],"return":null,"hide":false,"private":false,"name":"get","summary":"Returns a component by {@link Ext.Component#id id}.\r\nFor additional details see {@link Ext.util.MixedCollection#get}.\r\n"},{"parameters":[{"type":"Ext.Component","optional":false,"name":"xtype","summary":"The mnemonic string by which the Component class may be looked up"}],"return":{"type":"Boolean","summary":"Whether the type is registered."},"hide":false,"private":false,"name":"isRegistered","summary":"Checks if a Component type is registered.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The component {@link Ext.Component#id id}"},{"type":"Function","optional":false,"name":"fn","summary":"The callback function"},{"type":"Object","optional":false,"name":"scope","summary":"The scope of the callback"}],"return":null,"hide":false,"private":false,"name":"onAvailable","summary":"Registers a function that will be called when a specified component is added to ComponentMgr\r\n"},{"parameters":[{"type":"String","optional":false,"name":"ptype","summary":"The {@link Ext.component#ptype mnemonic string} by which the Plugin class\r\nmay be looked up."},{"type":"Constructor","optional":false,"name":"cls","summary":"The new Plugin class.\r\n@member Ext"}],"return":null,"hide":false,"private":false,"name":"preg","summary":"Shorthand for {@link Ext.ComponentMgr#registerPlugin}\r\n"},{"parameters":[{"type":"String","optional":false,"name":"xtype","summary":"The {@link Ext.component#xtype mnemonic string} by which the Component class\r\nmay be looked up."},{"type":"Constructor","optional":false,"name":"cls","summary":"The new Component class.\r\n@member Ext"}],"return":null,"hide":false,"private":false,"name":"reg","summary":"Shorthand for {@link Ext.ComponentMgr#registerType}\r\n"},{"parameters":[{"type":"Ext.Component","optional":false,"name":"c","summary":"The component"}],"return":null,"hide":false,"private":false,"name":"register","summary":"Registers a component.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"ptype","summary":"The mnemonic string by which the Plugin class may be looked up."},{"type":"Constructor","optional":false,"name":"cls","summary":"The new Plugin class."}],"return":null,"hide":false,"private":false,"name":"registerPlugin","summary":"<p>Registers a new Plugin constructor, keyed by a new\r\n{@link Ext.Component#ptype}.</p>\r\n<p>Use this method (or its alias {@link Ext#preg Ext.preg}) to register new\r\nplugins for {@link Ext.Component}s so that lazy instantiation may be used when specifying\r\nPlugins.</p>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"xtype","summary":"The mnemonic string by which the Component class may be looked up."},{"type":"Constructor","optional":false,"name":"cls","summary":"The new Component class."}],"return":null,"hide":false,"private":false,"name":"registerType","summary":"<p>Registers a new Component constructor, keyed by a new\r\n{@link Ext.Component#xtype}.</p>\r\n<p>Use this method (or its alias {@link Ext#reg Ext.reg}) to register new\r\nsubclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying\r\nchild Components.\r\nsee {@link Ext.Container#items}</p>\r\n"},{"parameters":[{"type":"Ext.Component","optional":false,"name":"c","summary":"The component"}],"return":null,"hide":false,"private":false,"name":"unregister","summary":"Unregisters a component.\r\n"}],"events":[]},{"name":"CompositeElement","fullName":"Ext.CompositeElement","summary":"Standard composite class. Creates a Ext.Element for every element in the collection.\r\n<br><br>\r\n<b>NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element\r\nactions will be performed on all the elements in this collection.</b>\r\n<br><br>\r\nAll methods return <i>this</i> and can be chained.\r\n <pre><code>\r\n var els = Ext.select(\"#some-el div.some-class\", true);\r\n // or select directly from an existing element\r\n var el = Ext.get('some-el');\r\n el.select('div.some-class', true);\r\n\r\n els.setWidth(100); // all elements become 100 width\r\n els.hide(true); // all elements fade out and hide\r\n // or\r\n els.setWidth(100).hide(true);\r\n </code></pre>\r\n","package":"Ext","definedIn":"core\\CompositeElement.js","xtype":null,"extends":"Ext.CompositeElementLite","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String/Array","optional":false,"name":"els","summary":"A string CSS selector, an array of elements or an element"}],"return":{"type":"CompositeElement","summary":"this"},"hide":false,"private":false,"name":"add","summary":"Adds elements to this composite.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to be called with each\r\n<code>element</code>. If the supplied function returns <tt>false</tt>,\r\niteration stops. This function is called with the following arguments:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><code>element</code> : <i>Object</i>\r\n<div class=\"sub-desc\">The element at the current <code>index</code>\r\nin the <code>composite</code></div></li>\r\n<li><code>composite</code> : <i>Object</i>\r\n<div class=\"sub-desc\">This composite.</div></li>\r\n<li><code>index</code> : <i>Number</i>\r\n<div class=\"sub-desc\">The current index within the <code>composite</code>\r\n</div></li>\r\n</ul></div>"},{"type":"Object","optional":true,"name":"scope","summary":"The scope to call the specified function.\r\nDefaults to the <code>element</code> at the current <code>index</code>\r\nwithin the composite."}],"return":{"type":"CompositeElement","summary":"this"},"hide":false,"private":false,"name":"each","summary":"Iterates each <code>element</code> in this <code>composite</code>\r\ncalling the supplied function using {@link Ext#each}.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":""}],"return":{"type":"Ext.Element","summary":""},"hide":false,"private":false,"name":"item","summary":"Returns the Element object at the specified index\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"selector","summary":"The CSS selector or an array of elements"},{"type":"Boolean","optional":true,"name":"unique","summary":"true to create a unique Ext.Element for each element (defaults to a shared flyweight object)"},{"type":"HTMLElement/String","optional":true,"name":"root","summary":"The root element of the query or id of the root\r\n@member Ext.Element"}],"return":{"type":"CompositeElementLite/CompositeElement","summary":""},"hide":false,"private":false,"name":"select","summary":"Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods\r\nto be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or\r\n{@link Ext.CompositeElementLite CompositeElementLite} object.\r\n"}],"events":[]},{"name":"CompositeElementLite","fullName":"Ext.CompositeElementLite","summary":"\r\nFlyweight composite class. Reuses the same Ext.Element for element operations.\r\n <pre><code>\r\n var els = Ext.select(\"#some-el div.some-class\");\r\n // or select directly from an existing element\r\n var el = Ext.get('some-el');\r\n el.select('div.some-class');\r\n\r\n els.setWidth(100); // all elements become 100 width\r\n els.hide(true); // all elements fade out and hide\r\n // or\r\n els.setWidth(100).hide(true);\r\n </code></pre><br><br>\r\n<b>NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element\r\nactions will be performed on all the elements in this collection.</b>\r\n","package":"Ext","definedIn":"core\\CompositeElementLite-more.js,core\\core\\CompositeElementLite.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.CompositeElement","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Mixed} T","optional":false,"name":"ele","summary":"id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection."}],"return":null,"hide":false,"private":false,"name":"contains","summary":"Returns true if this composite contains the passed element\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"els","summary":"A string CSS selector, an array of elements or an element"}],"return":{"type":"CompositeElement","summary":"this"},"hide":false,"private":false,"name":"fill","summary":"Clears this composite and adds the elements returned by the passed selector.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"A string CSS selector"}],"return":{"type":"CompositeElement","summary":"this"},"hide":false,"private":false,"name":"filter","summary":"Filters this composite to only elements that match the passed selector.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":""},"hide":false,"private":false,"name":"first","summary":"Returns the first Element\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":""},"hide":false,"private":false,"name":"last","summary":"Returns the last Element\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The id of an element, the Element itself, the index of the element in this composite\r\nor an array of any of those."},{"type":"Boolean","optional":true,"name":"removeDom","summary":"True to also remove the element from the document"}],"return":{"type":"CompositeElement","summary":"this"},"hide":false,"private":false,"name":"removeElement","summary":"Removes the specified element(s).\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"clear","summary":"Removes all elements.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The <i>this</i> object (defaults to the element)"}],"return":{"type":"CompositeElement","summary":"this"},"hide":false,"private":false,"name":"each","summary":"Calls the passed function passing (el, this, index) for each element in this composite. <b>The element\r\npassed is the flyweight (shared) Ext.Element instance, so if you require a\r\na reference to the dom node, use el.dom.</b>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getCount","summary":"Returns the number of elements in this composite\r\n"},{"parameters":[{"type":"Mixed} T","optional":false,"name":"ele","summary":"id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection."}],"return":null,"hide":false,"private":false,"name":"indexOf","summary":"Find the index of the passed element within the composite collection.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":""}],"return":{"type":"Ext.Element","summary":""},"hide":false,"private":false,"name":"item","summary":"Returns a flyweight Element of the dom element object at the specified index\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The id of an element, the Element itself, the index of the element in this composite\r\nto replace."},{"type":"Mixed","optional":false,"name":"replacement","summary":"The id of an element or the Element itself."},{"type":"Boolean","optional":true,"name":"domReplace","summary":"True to remove and replace the element in the document too."}],"return":{"type":"CompositeElement","summary":"this"},"hide":false,"private":false,"name":"replaceElement","summary":"Replaces the specified element with the passed element.\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"selector","summary":"The CSS selector or an array of elements"},{"type":"Boolean","optional":true,"name":"unique","summary":"true to create a unique Ext.Element for each element (defaults to a shared flyweight object) <b>Not supported in core</b>"},{"type":"HTMLElement/String","optional":true,"name":"root","summary":"The root element of the query or id of the root\r\n@member Ext.Element"}],"return":{"type":"CompositeElementLite/CompositeElement","summary":""},"hide":false,"private":false,"name":"select","summary":"Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods\r\nto be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or\r\n{@link Ext.CompositeElementLite CompositeElementLite} object.\r\n"}],"events":[]},{"name":"Container","fullName":"Ext.Container","summary":"<p>Base class for any {@link Ext.BoxComponent} that may contain other Components. Containers handle the\r\nbasic behavior of containing items, namely adding, inserting and removing items.</p>\r\n\r\n<p>The most commonly used Container classes are {@link Ext.Panel}, {@link Ext.Window} and {@link Ext.TabStrip}.\r\nIf you do not need the capabilities offered by the aforementioned classes you can create a lightweight\r\nContainer to be encapsulated by an HTML element to your specifications by using the\r\n<tt><b>{@link Ext.Component#autoEl autoEl}</b></tt> config option. This is a useful technique when creating\r\nembedded {@link Ext.layout.ColumnLayout column} layouts inside {@link Ext.form.FormPanel FormPanels}\r\nfor example.</p>\r\n\r\n<p>The code below illustrates both how to explicitly create a Container, and how to implicitly\r\ncreate one using the <b><tt>'container'</tt></b> xtype:<pre><code>\r\n// explicitly create a Container\r\nvar embeddedColumns = new Ext.Container({\r\n    autoEl: 'div',  // This is the default\r\n    layout: 'column',\r\n    defaults: {\r\n        // implicitly create Container by specifying xtype\r\n        xtype: 'container',\r\n        autoEl: 'div', // This is the default.\r\n        layout: 'form',\r\n        columnWidth: 0.5,\r\n        style: {\r\n            padding: '10px'\r\n        }\r\n    },\r\n//  The two items below will be Ext.Containers, each encapsulated by a &lt;DIV> element.\r\n    items: [{\r\n        items: {\r\n            xtype: 'datefield',\r\n            name: 'startDate',\r\n            fieldLabel: 'Start date'\r\n        }\r\n    }, {\r\n        items: {\r\n            xtype: 'datefield',\r\n            name: 'endDate',\r\n            fieldLabel: 'End date'\r\n        }\r\n    }]\r\n});</code></pre></p>\r\n\r\n<p><u><b>Layout</b></u></p>\r\n<p>Container classes delegate the rendering of child Components to a layout\r\nmanager class which must be configured into the Container using the\r\n<code><b>{@link #layout}</b></code> configuration property.</p>\r\n<p>When either specifying child <code>{@link #items}</code> of a Container,\r\nor dynamically {@link #add adding} Components to a Container, remember to\r\nconsider how you wish the Container to arrange those child elements, and\r\nwhether those child elements need to be sized using one of Ext's built-in\r\n<b><code>{@link #layout}</code></b> schemes. By default, Containers use the\r\n{@link Ext.layout.ContainerLayout ContainerLayout} scheme which only\r\nrenders child components, appending them one after the other inside the\r\nContainer, and <b>does not apply any sizing</b> at all.</p>\r\n<p>A common mistake is when a developer neglects to specify a\r\n<b><code>{@link #layout}</code></b> (e.g. widgets like GridPanels or\r\nTreePanels are added to Containers for which no <tt><b>{@link #layout}</b></tt>\r\nhas been specified). If a Container is left to use the default\r\n{@link Ext.layout.ContainerLayout ContainerLayout} scheme, none of its\r\nchild components will be resized, or changed in any way when the Container\r\nis resized.</p>\r\n<p>Certain layout managers allow dynamic addition of child components.\r\nThose that do include {@link Ext.layout.CardLayout},\r\n{@link Ext.layout.AnchorLayout}, {@link Ext.layout.FormLayout}, and\r\n{@link Ext.layout.TableLayout}. For example:<pre><code>\r\n//  Create the GridPanel.\r\nvar myNewGrid = new Ext.grid.GridPanel({\r\n    store: myStore,\r\n    columns: myColumnModel,\r\n    title: 'Results', // the title becomes the title of the tab\r\n});\r\n\r\nmyTabStrip.add(myNewGrid); // {@link Ext.TabStrip} implicitly uses {@link Ext.layout.CardLayout CardLayout}\r\nmyTabStrip.{@link Ext.TabStrip#setActiveTab setActiveTab}(myNewGrid);\r\n</code></pre></p>\r\n<p>The example above adds a newly created GridPanel to a TabStrip. Note that\r\na TabStrip uses {@link Ext.layout.CardLayout} as its layout manager which\r\nmeans all its child items are sized to {@link Ext.layout.FitLayout fit}\r\nexactly into its client area.\r\n<p><b><u>Overnesting is a common problem</u></b>.\r\nAn example of overnesting occurs when a GridPanel is added to a TabStrip\r\nby wrapping the GridPanel <i>inside</i> a wrapping Panel (that has no\r\n<tt><b>{@link #layout}</b></tt> specified) and then add that wrapping Panel\r\nto the TabStrip. The point to realize is that a GridPanel <b>is</b> a\r\nComponent which can be added directly to a Container. If the wrapping Panel\r\nhas no <tt><b>{@link #layout}</b></tt> configuration, then the overnested\r\nGridPanel will not be sized as expected.<p>\r\n\r\n<p><u><b>Adding via remote configuration</b></u></p>\r\n\r\n<p>A server side script can be used to add Components which are generated dynamically on the server.\r\nAn example of adding a GridPanel to a TabStrip where the GridPanel is generated by the server\r\nbased on certain parameters:\r\n</p><pre><code>\r\n// execute an Ajax request to invoke server side script:\r\nExt.Ajax.request({\r\n    url: 'gen-invoice-grid.php',\r\n    // send additional parameters to instruct server script\r\n    params: {\r\n        startDate: Ext.getCmp('start-date').getValue(),\r\n        endDate: Ext.getCmp('end-date').getValue()\r\n    },\r\n    // process the response object to add it to the TabStrip:\r\n    success: function (xhr) {\r\n        var newComponent = eval(xhr.responseText); // see discussion below\r\n        myTabStrip.add(newComponent); // add the component to the TabStrip\r\n        myTabStrip.setActiveTab(newComponent);\r\n    },\r\n    failure: function () {\r\n        Ext.Msg.alert(\"Grid create failed\", \"Server communication failure\");\r\n    }\r\n});\r\n</code></pre>\r\n<p>The server script needs to return an executable Javascript statement which, when processed\r\nusing <tt>eval()</tt>, will return either a config object with an {@link Ext.Component#xtype xtype},\r\nor an instantiated Component. The server might return this for example:</p><pre><code>\r\n(function () {\r\n    function formatDate(value) {\r\n        return value ? value.dateFormat('M d, Y') : '';\r\n    };\r\n\r\n    var store = new Ext.data.Store({\r\n        url: 'get-invoice-data.php',\r\n        baseParams: {\r\n            startDate: '01/01/2008',\r\n            endDate: '01/31/2008'\r\n        },\r\n        reader: new Ext.data.JsonReader({\r\n            record: 'transaction',\r\n            idProperty: 'id',\r\n            totalRecords: 'total'\r\n        }, [\r\n           'customer',\r\n           'invNo',\r\n          {name: 'date', type: 'date', dateFormat: 'm/d/Y'},\r\n          {name: 'value', type: 'float'}\r\n        ])\r\n    });\r\n\r\n    var grid = new Ext.grid.GridPanel({\r\n        title: 'Invoice Report',\r\n        bbar: new Ext.PagingToolbar(store),\r\n        store: store,\r\n        columns: [\r\n           {header: \"Customer\", width: 250, dataIndex: 'customer', sortable: true},\r\n           {header: \"Invoice Number\", width: 120, dataIndex: 'invNo', sortable: true},\r\n           {header: \"Invoice Date\", width: 100, dataIndex: 'date', renderer: formatDate, sortable: true},\r\n           {header: \"Value\", width: 120, dataIndex: 'value', renderer: 'usMoney', sortable: true}\r\n        ],\r\n    });\r\n    store.load();\r\n    return grid;  // return instantiated component\r\n})();\r\n</code></pre>\r\n<p>When the above code fragment is passed through the <tt>eval</tt> function in the success handler\r\nof the Ajax request, the code is executed by the Javascript processor, and the anonymous function\r\nruns, and returns the instantiated grid component.</p>\r\n<p>Note: since the code above is <i>generated</i> by a server script, the <tt>baseParams</tt> for\r\nthe Store, the metadata to allow generation of the Record layout, and the ColumnModel\r\ncan all be generated into the code since these are all known on the server.</p>\r\n\r\n","package":"Ext","definedIn":"widgets\\Container.js","xtype":"container","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.menu.Menu,Ext.Panel,Ext.Toolbar,Ext.Viewport","configOptions":[{"type":"String/Number","optional":false,"name":"activeItem","summary":"A string component id or the numeric index of the component that should be initially activated within the\r\ncontainer's layout on render.  For example, activeItem: 'item-1' or activeItem: 0 (index 0 = the first\r\nitem in the container's collection).  activeItem only applies to layout styles that can display\r\nitems one at a time (like {@link Ext.layout.AccordionLayout}, {@link Ext.layout.CardLayout} and\r\n{@link Ext.layout.FitLayout}).  Related to {@link Ext.layout.ContainerLayout#activeItem}.\r\n"},{"type":"Boolean/Number","optional":false,"name":"bufferResize","summary":"When set to true (100 milliseconds) or a number of milliseconds, the layout assigned for this container will buffer\r\nthe frequency it calculates and does a re-layout of components. This is useful for heavy containers or containers\r\nwith a large quantity of sub-components for which frequent layout calls would be expensive.\r\n"},{"type":"Object","optional":false,"name":"defaults","summary":"<p>A config object that will be applied to all components added to this container either via the {@link #items}\r\nconfig or via the {@link #add} or {@link #insert} methods.  The <tt>defaults</tt> config can contain any\r\nnumber of name/value property pairs to be added to each item, and should be valid for the types of items\r\nbeing added to the container.  For example, to automatically apply padding to the body of each of a set of\r\ncontained {@link Ext.Panel} items, you could pass: <tt>defaults: {bodyStyle:'padding:15px'}</tt>.</p><br/>\r\n<p><b>Note</b>: <tt>defaults</tt> will not be applied to config objects if the option is already specified.\r\nFor example:</p><pre><code>\r\ndefaults: {               // defaults are applied to items, not the container\r\n    autoScroll:true\r\n},\r\nitems: [\r\n   {\r\n        xtype: 'panel',   // defaults <b>do not</b> have precedence over\r\n        id: 'panel1',     // options in config objects, so the defaults\r\n        autoScroll: false // will not be applied here, panel1 will be autoScroll:false\r\n    },\r\n    new Ext.Panel({       // defaults <b>do</b> have precedence over options\r\n        id: 'panel2',     // options in components, so the defaults\r\n        autoScroll: false // will be applied here, panel2 will be autoScroll:true.\r\n    })\r\n]\r\n</code></pre>\r\n"},{"type":"Object/Array","optional":false,"name":"items","summary":"<pre><b>** IMPORTANT</b>: be sure to <b>{@link #layout specify a <code>layout</code>} if needed ! **</b></pre>\r\n<p>A single item, or an array of child Components to be added to this container,\r\nfor example:</p>\r\n<pre><code>\r\n// specifying a single item\r\nitems: {...},\r\nlayout: 'fit',    // specify a layout!\r\n\r\n// specifying multiple items\r\nitems: [{...}, {...}],\r\nlayout: 'anchor', // specify a layout!\r\n</code></pre>\r\n<p>Each item may be:</p>\r\n<div><ul class=\"mdetail-params\">\r\n<li>any type of object based on {@link Ext.Component}</li>\r\n<li>a fully instanciated object or</li>\r\n<li>an object literal that:</li>\r\n<div><ul class=\"mdetail-params\">\r\n<li>has a specified <code>{@link Ext.Component#xtype xtype}</code></li>\r\n<li>the {@link Ext.Component#xtype} specified is associated with the Component\r\ndesired and should be chosen from one of the available xtypes as listed\r\nin {@link Ext.Component}.</li>\r\n<li>If an <code>{@link Ext.Component#xtype xtype}</code> is not explicitly\r\nspecified, the {@link #defaultType} for that Container is used.</li>\r\n<li>will be \"lazily instanciated\", avoiding the overhead of constructing a fully\r\ninstanciated Component object</li>\r\n</ul></div></ul></div>\r\n<p><b>Notes</b>:</p>\r\n<div><ul class=\"mdetail-params\">\r\n<li>Ext uses lazy rendering. Child Components will only be rendered\r\nshould it become necessary. Items are automatically laid out when they are first\r\nshown (no sizing is done while hidden), or in response to a {@link #doLayout} call.</li>\r\n<li>Do not specify <code>{@link Ext.Panel#contentEl contentEl}</code>/\r\n<code>{@link Ext.Panel#html html}</code> with <code>items</code>.</li>\r\n</ul></div>\r\n"},{"type":"String/Object","optional":false,"name":"layout","summary":"<p><b>*Important</b>: In order for child items to be correctly sized and\r\npositioned, typically a layout manager <b>must</b> be specified through\r\nthe <code>layout</code> configuration option.</p>\r\n<br><p>The sizing and positioning of child {@link items} is the responsibility of\r\nthe Container's layout manager which creates and manages the type of layout\r\nyou have in mind.  For example:</p><pre><code>\r\nnew Ext.Window({\r\n    width:300, height: 300,\r\n    layout: 'fit', // explicitly set layout manager: override the default (layout:'auto')\r\n    items: [{\r\n        title: 'Panel inside a Window'\r\n    }]\r\n}).show();\r\n</code></pre>\r\n<p>If the {@link #layout} configuration is not explicitly specified for\r\na general purpose container (e.g. Container or Panel) the\r\n{@link Ext.layout.ContainerLayout default layout manager} will be used\r\nwhich does nothing but render child components sequentially into the\r\nContainer (no sizing or positioning will be performed in this situation).\r\nSome container classes implicitly specify a default layout\r\n(e.g. FormPanel specifies <code>layout:'form'</code>). Other specific\r\npurpose classes internally specify/manage their internal layout (e.g.\r\nGridPanel, TabStrip, TreePanel, Toolbar, Menu, etc.).</p>\r\n<br><p><b><code>layout</code></b> may be specified as either as an Object or\r\nas a String:</p><div><ul class=\"mdetail-params\">\r\n\r\n<li><u>Specify as an Object</u></li>\r\n<div><ul class=\"mdetail-params\">\r\n<li>Example usage:</li>\r\n<pre><code>\r\nlayout: {\r\n    type: 'vbox',\r\n    padding: '5',\r\n    align: 'left'\r\n}\r\n</code></pre>\r\n\r\n<li><tt><b>type</b></tt></li>\r\n<br/><p>The layout type to be used for this container.  If not specified,\r\na default {@link Ext.layout.ContainerLayout} will be created and used.</p>\r\n<br/><p>Valid layout <tt>type</tt> values are:</p>\r\n<div class=\"sub-desc\"><ul class=\"mdetail-params\">\r\n<li><tt><b>{@link Ext.layout.AbsoluteLayout absolute}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.AccordionLayout accordion}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.AnchorLayout anchor}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.ContainerLayout auto}</b></tt> &nbsp;&nbsp;&nbsp; <b>Default</b></li>\r\n<li><tt><b>{@link Ext.layout.BorderLayout border}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.CardLayout card}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.ColumnLayout column}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.FitLayout fit}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.FormLayout form}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.HBoxLayout hbox}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.MenuLayout menu}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.TableLayout table}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.ToolbarLayout toolbar}</b></tt></li>\r\n<li><tt><b>{@link Ext.layout.VBoxLayout vbox}</b></tt></li>\r\n</ul></div>\r\n\r\n<li>Layout specific configuration properties</li>\r\n<br/><p>Additional layout specific configuration properties may also be\r\nspecified. For complete details regarding the valid config options for\r\neach layout type, see the layout class corresponding to the <tt>type</tt>\r\nspecified.</p>\r\n\r\n</ul></div>\r\n\r\n<li><u>Specify as a String</u></li>\r\n<div><ul class=\"mdetail-params\">\r\n<li>Example usage:</li>\r\n<pre><code>\r\nlayout: 'vbox',\r\nlayoutConfig: {\r\n    padding: '5',\r\n    align: 'left'\r\n}\r\n</code></pre>\r\n<li><tt><b>layout</b></tt></li>\r\n<br/><p>The layout <tt>type</tt> to be used for this container (see list\r\nof valid layout type values above).</p><br/>\r\n<li><tt><b>{@link #layoutConfig}</b></tt></li>\r\n<br/><p>Additional layout specific configuration properties. For complete\r\ndetails regarding the valid config options for each layout type, see the\r\nlayout class corresponding to the <tt>layout</tt> specified.</p>\r\n</ul></div></ul></div>\r\n"},{"type":"Object","optional":false,"name":"layoutConfig","summary":"This is a config object containing properties specific to the chosen\r\n<b><code>{@link #layout}</code></b> if <b><code>{@link #layout}</code></b>\r\nhas been specified as a <i>string</i>.</p>\r\n"},{"type":"Boolean","optional":false,"name":"monitorResize","summary":"True to automatically monitor window resize events to handle anything that is sensitive to the current size\r\nof the viewport.  This value is typically managed by the chosen <code>{@link #layout}</code> and should not need\r\nto be set manually.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"items","summary":"The collection of components in this container as a {@link Ext.util.MixedCollection}\r\n"}],"methods":[{"parameters":[{"type":"Object/Array","optional":false,"name":"component","summary":"\r\n<p>Either a single component or an Array of components to add.  See\r\n<code>{@link #items}</code> for additional information.</p>"}],"return":{"type":"Ext.Component","summary":"component The Component (or config object) that was added."},"hide":false,"private":false,"name":"add","summary":"<p>Adds {@link Ext.Component Component}(s) to this Container.</p>\r\n<br><p><b>Description</b></u> :\r\n<div><ul class=\"mdetail-params\">\r\n<li>Fires the {@link #beforeadd} event before adding</li>\r\n<li>The Container's {@link #defaults default config values} will be applied\r\naccordingly (see <code>{@link #defaults}</code> for details).</li>\r\n<li>Fires the {@link #add} event after the component has been added.</li>\r\n</ul></div>\r\n<br><p><b>Notes</b></u> :\r\n<div><ul class=\"mdetail-params\">\r\n<li>If the Container is <i>already rendered</i> when <tt>add</tt>\r\nis called, you may need to call {@link #doLayout} to refresh the view which causes\r\nany unrendered child Components to be rendered. This is required so that you can\r\n<tt>add</tt> multiple child components if needed while only refreshing the layout\r\nonce. For example:<pre><code>\r\nvar tb = new {@link Ext.Toolbar}();\r\ntb.render(document.body);  // toolbar is rendered\r\ntb.add({text:'Button 1'}); // add multiple items ({@link #defaultType} for {@link Ext.Toolbar Toolbar} is 'button')\r\ntb.add({text:'Button 2'});\r\ntb.{@link #doLayout}();             // refresh the layout\r\n</code></pre></li>\r\n<li><i>Warning:</i> Containers directly managed by the BorderLayout layout manager\r\nmay not be removed or added.  See the Notes for {@link Ext.layout.BorderLayout BorderLayout}\r\nfor more details.</li>\r\n</ul></div>\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to current node)"},{"type":"Array","optional":true,"name":"args","summary":"The args to call the function with (default to passing the current component)"}],"return":{"type":"Ext.Container","summary":"this"},"hide":false,"private":false,"name":"bubble","summary":"Bubbles up the component/container heirarchy, calling the specified function with each component. The scope (<i>this</i>) of\r\nfunction call will be the scope provided or the current component. The arguments to the function\r\nwill be the args provided or the current component. If the function returns false at any point,\r\nthe bubble is stopped.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function (defaults to current component)"},{"type":"Array","optional":true,"name":"args","summary":"The args to call the function with (defaults to passing the current component)"}],"return":{"type":"Ext.Container","summary":"this"},"hide":false,"private":false,"name":"cascade","summary":"Cascades down the component/container heirarchy from this component (called first), calling the specified function with\r\neach component. The scope (<i>this</i>) of\r\nfunction call will be the scope provided or the current component. The arguments to the function\r\nwill be the args provided or the current component. If the function returns false at any point,\r\nthe cascade is stopped on that branch.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"shallow","summary":"True to only calc the layout of this component, and let child components auto\r\ncalc layouts as required (defaults to false, which calls doLayout recursively for each subcontainer)"},{"type":"Boolean","optional":true,"name":"force","summary":"True to force a layout to occur, even if the item is hidden."}],"return":{"type":"Ext.Container","summary":"this"},"hide":false,"private":false,"name":"doLayout","summary":"Force this container's layout to be recalculated. A call to this function is required after adding a new component\r\nto an already rendered container, or possibly after changing sizing/position properties of child components.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"prop","summary":""},{"type":"String","optional":false,"name":"value","summary":""}],"return":{"type":"Array","summary":"Array of Ext.Components"},"hide":false,"private":false,"name":"find","summary":"Find a component under this container at any level by property\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":""}],"return":{"type":"Array","summary":"Array of Ext.Components"},"hide":false,"private":false,"name":"findBy","summary":"Find a component under this container at any level by a custom function. If the passed function returns\r\ntrue, the component will be included in the results. The passed function is called with the arguments (component, this container).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":""}],"return":null,"hide":false,"private":false,"name":"findById","summary":"Find a component under this container at any level by id\r\n"},{"parameters":[{"type":"String/Class","optional":false,"name":"xtype","summary":"The xtype string for a component, or the class of the component directly"},{"type":"Boolean","optional":true,"name":"shallow","summary":"False to check whether this Component is descended from the xtype (this is\r\nthe default), or true to check whether this Component is directly of the specified xtype."}],"return":{"type":"Array","summary":"Array of Ext.Components"},"hide":false,"private":false,"name":"findByType","summary":"Find a component under this container at any level by xtype or class\r\n"},{"parameters":[{"type":"String/Number","optional":false,"name":"key","summary":"The index or id of the component"}],"return":{"type":"Ext.Component","summary":"Ext.Component"},"hide":false,"private":false,"name":"get","summary":"Get a component contained by this container (alias for items.get(key))\r\n"},{"parameters":[{"type":"String/Number","optional":false,"name":"comp","summary":"This parameter may be any of the following:\r\n<div><ul class=\"mdetail-params\">\r\n<li>a <b><tt>String</tt></b> : representing the <code>{@link Ext.Component#itemId itemId}</code>\r\nor <code>{@link Ext.Component#id id}</code> of the child component </li>\r\n<li>a <b><tt>Number</tt></b> : representing the position of the child component\r\nwithin the <code>{@link #items}</code> <b>property</b></li>\r\n</ul></div>\r\n<p>For additional information see {@link Ext.util.MixedCollection#get}."}],"return":null,"hide":false,"private":false,"name":"getComponent","summary":"Examines this container's <code>{@link #items}</code> <b>property</b>\r\nand gets a direct child component of this container.\r\n"},{"parameters":[],"return":{"type":"ContainerLayout","summary":"layout The container's layout"},"hide":false,"private":false,"name":"getLayout","summary":"Returns the layout currently in use by the container.  If the container does not currently have a layout\r\nset, a default {@link Ext.layout.ContainerLayout} will be created and set as the container's layout.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The Element to render child Components into."},"hide":false,"private":false,"name":"getLayoutTarget","summary":"<p>Returns the Element to be used to contain the child Components of this Container.</p>\r\n<p>An implementation is provided which returns the Container's {@link #getEl Element}, but\r\nif there is a more complex structure to a Container, this may be overridden to return\r\nthe element into which the {@link #layout layout} renders child Components.</p>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index at which the Component will be inserted\r\ninto the Container's items collection"},{"type":"Ext.Component","optional":false,"name":"component","summary":"The child Component to insert.<br><br>\r\nExt uses lazy rendering, and will only render the inserted Component should\r\nit become necessary.<br><br>\r\nA Component config object may be passed in order to avoid the overhead of\r\nconstructing a real Component object if lazy rendering might mean that the\r\ninserted Component will not be rendered immediately. To take advantage of\r\nthis 'lazy instantiation', set the {@link Ext.Component#xtype} config\r\nproperty to the registered type of the Component wanted.<br><br>\r\nFor a list of all available xtypes, see {@link Ext.Component}.\r\ninserted with the Container's default config values applied."}],"return":{"type":"Ext.Component","summary":"component The Component (or config object) that was"},"hide":false,"private":false,"name":"insert","summary":"Inserts a Component into this Container at a specified index. Fires the\r\n{@link #beforeadd} event before inserting, then fires the {@link #add} event after the\r\nComponent has been inserted.\r\n"},{"parameters":[{"type":"Component/String","optional":false,"name":"component","summary":"The component reference or id to remove."},{"type":"Boolean","optional":true,"name":"autoDestroy","summary":"True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.\r\nDefaults to the value of this Container's {@link #autoDestroy} config."}],"return":{"type":"Ext.Component","summary":"component The Component that was removed."},"hide":false,"private":false,"name":"remove","summary":"Removes a component from this container.  Fires the {@link #beforeremove} event before removing, then fires\r\nthe {@link #remove} event after the component has been removed.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"autoDestroy","summary":"True to automatically invoke the removed Component's {@link Ext.Component#destroy} function.\r\nDefaults to the value of this Container's {@link #autoDestroy} config."}],"return":{"type":"Array","summary":"Array of the destroyed components"},"hide":false,"private":false,"name":"removeAll","summary":"Removes all components from this container.\r\n"}],"events":[{"parameters":[{"type":"Ext.Container","optional":false,"name":"el","summary":"this"},{"type":"Ext.Component","optional":false,"name":"component","summary":"The component that was added"},{"type":"Number","optional":false,"name":"index","summary":"The index at which the component was added to the container's items collection"}],"name":"add","summary":"@bubbles Fires after any {@link Ext.Component} is added or inserted into the container."},{"parameters":[{"type":"Ext.Container","optional":false,"name":"el","summary":"this"},{"type":"ContainerLayout","optional":false,"name":"layout","summary":"The ContainerLayout implementation for this container"}],"name":"afterlayout","summary":"Fires when the components in this container are arranged by the associated layout manager."},{"parameters":[{"type":"Ext.Container","optional":false,"name":"el","summary":"this"},{"type":"Ext.Component","optional":false,"name":"component","summary":"The component being added"},{"type":"Number","optional":false,"name":"index","summary":"The index at which the component will be added to the container's items collection"}],"name":"beforeadd","summary":"Fires before any {@link Ext.Component} is added or inserted into the container. A handler can return false to cancel the add."},{"parameters":[{"type":"Ext.Container","optional":false,"name":"el","summary":"this"},{"type":"Ext.Component","optional":false,"name":"component","summary":"The component being removed"}],"name":"beforeremove","summary":"Fires before any {@link Ext.Component} is removed from the container. A handler can return false to cancel the remove."},{"parameters":[{"type":"Ext.Container","optional":false,"name":"el","summary":"this"},{"type":"Ext.Component","optional":false,"name":"component","summary":"The component that was removed"}],"name":"remove","summary":"@bubbles Fires after any {@link Ext.Component} is removed from the container."}]},{"name":"CycleButton","fullName":"Ext.CycleButton","summary":"A specialized SplitButton that contains a menu of {@link Ext.menu.CheckItem} elements.  The button automatically\r\ncycles through each menu item on click, raising the button's {@link #change} event (or calling the button's\r\n{@link #changeHandler} function, if supplied) for the active menu item. Clicking on the arrow section of the\r\nbutton displays the dropdown menu just like a normal SplitButton.  Example usage:\r\n<pre><code>\r\nvar btn = new Ext.CycleButton({\r\n    showText: true,\r\n    prependText: 'View as ',\r\n    items: [{\r\n        text:'text only',\r\n        iconCls:'view-text',\r\n        checked:true\r\n    },{\r\n        text:'HTML',\r\n        iconCls:'view-html'\r\n    }],\r\n    changeHandler:function (btn, item) {\r\n        Ext.Msg.alert('Change View', item.text);\r\n    }\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\CycleButton.js","xtype":"cycle","extends":"Ext.SplitButton","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new split button."},"subclasses":"","configOptions":[{"type":"Function","optional":false,"name":"changeHandler","summary":"item in the button's menu has changed.  If this callback is not supplied, the SplitButton will instead\r\nfire the {@link #change} event on active item change.  The changeHandler function will be called with the\r\nfollowing argument list: (SplitButton this, Ext.menu.CheckItem item)\r\n"},{"type":"String","optional":false,"name":"forceIcon","summary":"icon will always be displayed regardless of which item is selected in the dropdown list.  This overrides the\r\ndefault behavior of changing the button's icon to match the selected item's icon on change.\r\n"},{"type":"Array","optional":false,"name":"items","summary":"button's menu items (e.g., {text:'Foo', iconCls:'foo-icon'})\r\n"},{"type":"String","optional":false,"name":"prependText","summary":"button's text (only applies when showText = true, defaults to '')\r\n"},{"type":"Boolean","optional":false,"name":"showText","summary":""}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"menu","summary":"The {@link Ext.menu.Menu Menu} object used to display the {@link Ext.menu.CheckItem CheckItems} representing the available choices.\r\n"}],"methods":[{"parameters":[],"return":{"type":"Ext.menu.CheckItem","summary":"The active item"},"hide":false,"private":false,"name":"getActiveItem","summary":"Gets the currently active menu item.\r\n"},{"parameters":[{"type":"Ext.menu.CheckItem","optional":false,"name":"item","summary":"The item to activate"},{"type":"Boolean","optional":false,"name":"suppressEvent","summary":"True to prevent the button's change event from firing (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"setActiveItem","summary":"Sets the button's active menu item.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"toggleSelected","summary":"This is normally called internally on button click, but can be called externally to advance the button's\r\nactive item programmatically to the next one in the menu.  If the current item is the last one in the menu\r\nthe active item will be set to the first item in the menu.\r\n"}],"events":[{"parameters":[{"type":"Ext.CycleButton","optional":false,"name":"el","summary":"this"},{"type":"Ext.menu.CheckItem","optional":false,"name":"item","summary":"The menu item that was selected"}],"name":"change","summary":"Fires after the button's active menu item has changed. Note that if a {@link #changeHandler} function is set on this CycleButton, it will be called instead on active item change and this change event will not be fired."}]},{"name":"DataView","fullName":"Ext.DataView","summary":"A mechanism for displaying data using custom layout templates and formatting. DataView uses an {@link Ext.XTemplate}\r\nas its internal templating mechanism, and is bound to an {@link Ext.data.Store}\r\nso that as the data in the store changes the view is automatically updated to reflect the changes.  The view also\r\nprovides built-in behavior for many common events that can occur for its contained items including click, doubleclick,\r\nmouseover, mouseout, etc. as well as a built-in selection model. <b>In order to use these features, an {@link #itemSelector}\r\nconfig must be provided for the DataView to determine what nodes it will be working with.</b>\r\n\r\n<p>The example below binds a DataView to a {@link Ext.data.Store} and renders it into an {@link Ext.Panel}.</p>\r\n<pre><code>\r\nvar store = new Ext.data.JsonStore({\r\n    url: 'get-images.php',\r\n    root: 'images',\r\n    fields: [\r\n        'name', 'url',\r\n       {name:'size', type: 'float'},\r\n       {name:'lastmod', type:'date', dateFormat:'timestamp'}\r\n    ]\r\n});\r\nstore.load();\r\n\r\nvar tpl = new Ext.XTemplate(\r\n    '&lt;tpl for=\".\"&gt;',\r\n        '&lt;div class=\"thumb-wrap\" id=\"{name}\"&gt;',\r\n        '&lt;div class=\"thumb\"&gt;&lt;img src=\"{url}\" title=\"{name}\"&gt;&lt;/div&gt;',\r\n        '&lt;span class=\"x-editable\"&gt;{shortName}&lt;/span&gt;&lt;/div&gt;',\r\n    '&lt;/tpl&gt;',\r\n    '&lt;div class=\"x-clear\"&gt;&lt;/div&gt;'\r\n);\r\n\r\nvar panel = new Ext.Panel({\r\n    id:'images-view',\r\n    frame:true,\r\n    width:535,\r\n    autoHeight:true,\r\n    collapsible:true,\r\n    layout:'fit',\r\n    title:'Simple DataView',\r\n\r\n    items: new Ext.DataView({\r\n        store: store,\r\n        tpl: tpl,\r\n        autoHeight:true,\r\n        multiSelect: true,\r\n        overClass:'x-view-over',\r\n        itemSelector:'div.thumb-wrap',\r\n        emptyText: 'No images to display'\r\n    })\r\n});\r\npanel.render(document.body);\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\DataView.js","xtype":"dataview","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new DataView."},"subclasses":"Ext.ListView","configOptions":[{"type":"Boolean","optional":false,"name":"deferEmptyText","summary":""},{"type":"String","optional":false,"name":"emptyText","summary":"The text to display in the view when there is no data to display (defaults to '').\r\n"},{"type":"String","optional":false,"name":"itemSelector","summary":"<b>This is a required setting</b>. A simple CSS selector (e.g. <tt>div.some-class</tt> or\r\n<tt>span:first-child</tt>) that will be used to determine what nodes this DataView will be\r\nworking with.\r\n"},{"type":"String","optional":false,"name":"loadingText","summary":"A string to display during data load operations (defaults to undefined).  If specified, this text will be\r\ndisplayed in a loading div and the view's contents will be cleared while loading, otherwise the view's\r\ncontents will continue to display normally until the new data is loaded and the contents are replaced.\r\n"},{"type":"Boolean","optional":false,"name":"multiSelect","summary":"True to allow selection of more than one item at a time, false to allow selection of only a single item\r\nat a time or no selection at all, depending on the value of {@link #singleSelect} (defaults to false).\r\n"},{"type":"String","optional":false,"name":"overClass","summary":"A CSS class to apply to each item in the view on mouseover (defaults to undefined).\r\n"},{"type":"String","optional":false,"name":"selectedClass","summary":"A CSS class to apply to each selected item in the view (defaults to 'x-view-selected').\r\n"},{"type":"Boolean","optional":false,"name":"simpleSelect","summary":"True to enable multiselection by clicking on multiple items without requiring the user to hold Shift or Ctrl,\r\nfalse to force the user to hold Ctrl or Shift to select more than on item (defaults to false).\r\n"},{"type":"Boolean","optional":false,"name":"singleSelect","summary":"True to allow selection of exactly one item at a time, false to allow no selection at all (defaults to false).\r\nNote that if {@link #multiSelect} = true, this value will be ignored.\r\n"},{"type":"Ext.data.Store","optional":false,"name":"store","summary":"The {@link Ext.data.Store} to bind this DataView to.\r\n"},{"type":"String/Array","optional":false,"name":"tpl","summary":"The HTML fragment or an array of fragments that will make up the template used by this DataView.  This should\r\nbe specified in the same format expected by the constructor of {@link Ext.XTemplate}.\r\n"},{"type":"Boolean","optional":false,"name":"trackOver","summary":""}],"properties":[{"type":null,"static":false,"hide":false,"private":false,"name":"setStore","summary":"Changes the data store bound to this view and refreshes it. (deprecated in favor of bindStore)\r\n@param {Store} store The store to bind to this view\r\n"}],"methods":[{"parameters":[{"type":"Store","optional":false,"name":"store","summary":"The store to bind to this view"}],"return":null,"hide":false,"private":false,"name":"bindStore","summary":"Changes the data store bound to this view and refreshes it.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"suppressEvent","summary":"True to skip firing of the selectionchange event"}],"return":null,"hide":false,"private":false,"name":"clearSelections","summary":"Clears all selections.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"records","summary":"An Array of {@link Ext.data.Record}s to be rendered into the DataView."},{"type":"Number","optional":false,"name":"startIndex","summary":"the index number of the Record being prepared for rendering.\r\ncontain <i>named</i> properties."}],"return":{"type":"Array","summary":"An Array of data objects to be processed by a repeating XTemplate. May also"},"hide":false,"private":false,"name":"collectData","summary":"<p>Function which can be overridden which returns the data object passed to this\r\nDataView's {@link #tpl template} to render the whole DataView.</p>\r\n<p>This is usually an Array of data objects, each element of which is processed by an\r\n{@link Ext.XTemplate XTemplate} which uses <tt>'&lt;tpl for=\".\"&gt;'</tt> to iterate over its supplied\r\ndata object as an Array. However, <i>named</i> properties may be placed into the data object to\r\nprovide non-repeating data such as headings, totals etc.</p>\r\n"},{"parameters":[{"type":"HTMLElement/Number","optional":false,"name":"node","summary":"The node to deselect"}],"return":null,"hide":false,"private":false,"name":"deselect","summary":"Deselects a node.\r\n"},{"parameters":[{"type":"HTMLElement","optional":false,"name":"node","summary":""}],"return":{"type":"HTMLElement","summary":"The template node"},"hide":false,"private":false,"name":"findItemFromChild","summary":"Returns the template node the passed child belongs to, or null if it doesn't belong to one.\r\n"},{"parameters":[{"type":"HTMLElement/String/Number","optional":false,"name":"nodeInfo","summary":"An HTMLElement template node, index of a template node or the id of a template node"}],"return":{"type":"HTMLElement","summary":"The node or null if it wasn't found"},"hide":false,"private":false,"name":"getNode","summary":"Gets a template node.\r\n"},{"parameters":[{"type":"Number","optional":true,"name":"start","summary":"The index of the first node in the range"},{"type":"Number","optional":true,"name":"end","summary":"The index of the last node in the range"}],"return":{"type":"Array","summary":"An array of nodes"},"hide":false,"private":false,"name":"getNodes","summary":"Gets a range nodes.\r\n"},{"parameters":[{"type":"HTMLElement","optional":false,"name":"node","summary":"The node to evaluate"}],"return":{"type":"Record} record The {@link Ext.data.Record","summary":"object"},"hide":false,"private":false,"name":"getRecord","summary":"Gets a record from a node\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"nodes","summary":"The nodes to evaluate"}],"return":{"type":"Array} records The {@link Ext.data.Record","summary":"objects"},"hide":false,"private":false,"name":"getRecords","summary":"Gets an array of the records from an array of nodes\r\n"},{"parameters":[],"return":{"type":"Array","summary":"An array of numeric indexes"},"hide":false,"private":false,"name":"getSelectedIndexes","summary":"Gets the indexes of the selected nodes.\r\n"},{"parameters":[],"return":{"type":"Array","summary":"An array of HTMLElements"},"hide":false,"private":false,"name":"getSelectedNodes","summary":"Gets the currently selected nodes.\r\n"},{"parameters":[],"return":{"type":"Array} An array of {@link Ext.data.Record","summary":"objects"},"hide":false,"private":false,"name":"getSelectedRecords","summary":"Gets an array of the selected records\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The node count"},"hide":false,"private":false,"name":"getSelectionCount","summary":"Gets the number of selected nodes.\r\n"},{"parameters":[],"return":{"type":"Ext.data.Store","summary":"The store"},"hide":false,"private":false,"name":"getStore","summary":"Returns the store associated with this DataView.\r\n"},{"parameters":[{"type":"HTMLElement/String/Number","optional":false,"name":"nodeInfo","summary":"An HTMLElement template node, index of a template node or the id of a template node"}],"return":{"type":"Number","summary":"The index of the node or -1"},"hide":false,"private":false,"name":"indexOf","summary":"Finds the index of the passed node.\r\n"},{"parameters":[{"type":"HTMLElement/Number","optional":false,"name":"node","summary":"The node or node index to check"}],"return":{"type":"Boolean","summary":"True if selected, else false"},"hide":false,"private":false,"name":"isSelected","summary":"Returns true if the passed node is selected, else false.\r\n"},{"parameters":[{"type":"Array/Object","optional":false,"name":"data","summary":"The raw data object that was used to create the Record."},{"type":"Number","optional":false,"name":"recordIndex","summary":"the index number of the Record being prepared for rendering."},{"type":"Record","optional":false,"name":"record","summary":"The Record being prepared for rendering.\r\n(either an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'}))"}],"return":{"type":"Array/Object} The formatted data in a format expected by the internal {@link #tpl template","summary":"'s overwrite() method."},"hide":false,"private":false,"name":"prepareData","summary":"Function which can be overridden to provide custom formatting for each Record that is used by this\r\nDataView's {@link #tpl template} to render each node.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"refresh","summary":"Refreshes the view by reloading the data from the store and re-rendering the template.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The item's data index in the store"}],"return":null,"hide":false,"private":false,"name":"refreshNode","summary":"Refreshes an individual node's data from the store.\r\n"},{"parameters":[{"type":"Array/HTMLElement/String/Number","optional":false,"name":"nodeInfo","summary":"An HTMLElement template node, index of a template node,\r\nid of a template node or an array of any of those to select"},{"type":"Boolean","optional":true,"name":"keepExisting","summary":"true to keep existing selections"},{"type":"Boolean","optional":true,"name":"suppressEvent","summary":"true to skip firing of the selectionchange vent"}],"return":null,"hide":false,"private":false,"name":"select","summary":"Selects a set of nodes.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"start","summary":"The index of the first node in the range"},{"type":"Number","optional":false,"name":"end","summary":"The index of the last node in the range"},{"type":"Boolean","optional":true,"name":"keepExisting","summary":"True to retain existing selections"}],"return":null,"hide":false,"private":false,"name":"selectRange","summary":"Selects a range of nodes. All nodes between start and end are selected.\r\n"}],"events":[{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"index","summary":"The index of the target node"},{"type":"HTMLElement","optional":false,"name":"node","summary":"The target node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"beforeclick","summary":"Fires before a click is processed. Returns false to cancel the default action."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"HTMLElement","optional":false,"name":"node","summary":"The node to be selected"},{"type":"Array","optional":false,"name":"selections","summary":"Array of currently selected nodes"}],"name":"beforeselect","summary":"Fires before a selection is made. If any handlers return false, the selection is cancelled."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"index","summary":"The index of the target node"},{"type":"HTMLElement","optional":false,"name":"node","summary":"The target node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"click","summary":"Fires when a template node is clicked."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"containerclick","summary":"Fires when a click occurs and it is not on a template node."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"containercontextmenu","summary":"Fires when a right click occurs that is not on a template node."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"index","summary":"The index of the target node"},{"type":"HTMLElement","optional":false,"name":"node","summary":"The target node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"contextmenu","summary":"Fires when a template node is right clicked."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"index","summary":"The index of the target node"},{"type":"HTMLElement","optional":false,"name":"node","summary":"The target node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"dblclick","summary":"Fires when a template node is double clicked."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"index","summary":"The index of the target node"},{"type":"HTMLElement","optional":false,"name":"node","summary":"The target node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"mouseenter","summary":"Fires when the mouse enters a template node. trackOver:true or an overCls must be set to enable this event."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"index","summary":"The index of the target node"},{"type":"HTMLElement","optional":false,"name":"node","summary":"The target node"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The raw event object"}],"name":"mouseleave","summary":"Fires when the mouse leaves a template node. trackOver:true or an overCls must be set to enable this event."},{"parameters":[{"type":"Ext.DataView","optional":false,"name":"el","summary":"this"},{"type":"Array","optional":false,"name":"selections","summary":"Array of the selected nodes"}],"name":"selectionchange","summary":"Fires when the selected nodes change."}]},{"name":"DatePicker","fullName":"Ext.DatePicker","summary":"Simple date picker class.\r\n","package":"Ext","definedIn":"widgets\\DatePicker.js","xtype":"datepicker","extends":"Ext.Component","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new DatePicker."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"autoEl","summary":""},{"type":"String","optional":false,"name":"cancelText","summary":"The text to display on the cancel button (defaults to <tt>'Cancel'</tt>)\r\n"},{"type":"Array","optional":false,"name":"dayNames","summary":"An array of textual day names which can be overriden for localization support (defaults to Date.dayNames)\r\n"},{"type":"Array","optional":false,"name":"disabledDates","summary":"An array of 'dates' to disable, as strings. These strings will be used to build a dynamic regular\r\nexpression so they are very powerful. Some examples:\r\n<ul>\r\n<li>['03/08/2003', '09/16/2003'] would disable those exact dates</li>\r\n<li>['03/08', '09/16'] would disable those days for every year</li>\r\n<li>['^03/08'] would only match the beginning (useful if you are using short years)</li>\r\n<li>['03/../2006'] would disable every day in March 2006</li>\r\n<li>['^03'] would disable every day in every March</li>\r\n</ul>\r\nNote that the format of the dates included in the array should exactly match the {@link #format} config.\r\nIn order to support regular expressions, if you are using a date format that has '.' in it, you will have to\r\nescape the dot when restricting dates. For example: ['03\\\\.08\\\\.03'].\r\n"},{"type":"RegExp","optional":false,"name":"disabledDatesRE","summary":"JavaScript regular expression used to disable a pattern of dates (defaults to null).  The {@link #disabledDates}\r\nconfig will generate this regex internally, but if you specify disabledDatesRE it will take precedence over the\r\ndisabledDates value.\r\n"},{"type":"String","optional":false,"name":"disabledDatesText","summary":"The tooltip text to display when the date falls on a disabled date (defaults to <tt>'Disabled'</tt>)\r\n"},{"type":"Array","optional":false,"name":"disabledDays","summary":"An array of days to disable, 0-based. For example, [0, 6] disables Sunday and Saturday (defaults to null).\r\n"},{"type":"String","optional":false,"name":"disabledDaysText","summary":"The tooltip to display when the date falls on a disabled day (defaults to <tt>'Disabled'</tt>)\r\n"},{"type":"String","optional":false,"name":"format","summary":"The default date format string which can be overriden for localization support.  The format must be\r\nvalid according to {@link Date#parseDate} (defaults to <tt>'m/d/y'</tt>).\r\n"},{"type":"Function","optional":false,"name":"handler","summary":"Optional. A function that will handle the select event of this picker.\r\nThe handler is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><code>picker</code> : DatePicker<div class=\"sub-desc\">The Ext.DatePicker.</div></li>\r\n<li><code>date</code> : Date<div class=\"sub-desc\">The selected date.</div></li>\r\n</ul></div>\r\n"},{"type":"Date","optional":false,"name":"maxDate","summary":"Maximum allowable date (JavaScript date object, defaults to null)\r\n"},{"type":"String","optional":false,"name":"maxText","summary":"The error text to display if the maxDate validation fails (defaults to <tt>'This date is after the maximum date'</tt>)\r\n"},{"type":"Date","optional":false,"name":"minDate","summary":"Minimum allowable date (JavaScript date object, defaults to null)\r\n"},{"type":"String","optional":false,"name":"minText","summary":"The error text to display if the minDate validation fails (defaults to <tt>'This date is before the minimum date'</tt>)\r\n"},{"type":"Array","optional":false,"name":"monthNames","summary":"An array of textual month names which can be overriden for localization support (defaults to Date.monthNames)\r\n"},{"type":"String","optional":false,"name":"monthYearText","summary":"The header month selector tooltip (defaults to <tt>'Choose a month (Control+Up/Down to move years)'</tt>)\r\n"},{"type":"String","optional":false,"name":"nextText","summary":"The next month navigation button tooltip (defaults to <tt>'Next Month (Control+Right)'</tt>)\r\n"},{"type":"String","optional":false,"name":"okText","summary":"The text to display on the ok button (defaults to <tt>'&#160;OK&#160;'</tt> to give the user extra clicking room)\r\n"},{"type":"String","optional":false,"name":"prevText","summary":"The previous month navigation button tooltip (defaults to <tt>'Previous Month (Control+Left)'</tt>)\r\n"},{"type":"Object","optional":false,"name":"scope","summary":"The scope (<tt><b>this</b></tt> reference) in which the <code>{@link #handler}</code>\r\nfunction will be called.  Defaults to this DatePicker instance.\r\n"},{"type":"Boolean","optional":false,"name":"showToday","summary":"False to hide the footer area containing the Today button and disable the keyboard handler for spacebar\r\nthat selects the current date (defaults to <tt>true</tt>).\r\n"},{"type":"Number","optional":false,"name":"startDay","summary":"Day index at which the week should begin, 0-based (defaults to 0, which is Sunday)\r\n"},{"type":"String","optional":false,"name":"todayText","summary":"The text to display on the button that selects the current date (defaults to <tt>'Today'</tt>)\r\n"},{"type":"String","optional":false,"name":"todayTip","summary":"The tooltip to display for the button that selects the current date (defaults to <tt>'{current date} (Spacebar)'</tt>)\r\n"}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Date","summary":"The selected date"},"hide":false,"private":false,"name":"getValue","summary":"Gets the current selected value of the date field\r\n"},{"parameters":[{"type":"Array/RegExp","optional":false,"name":"disabledDates","summary":"An array of date strings (see the {@link #disabledDates} config\r\nfor details on supported values), or a JavaScript regular expression used to disable a pattern of dates."}],"return":null,"hide":false,"private":false,"name":"setDisabledDates","summary":"Replaces any existing disabled dates with new values and refreshes the DatePicker.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"disabledDays","summary":"An array of disabled day indexes. See the {@link #disabledDays} config\r\nfor details on supported values."}],"return":null,"hide":false,"private":false,"name":"setDisabledDays","summary":"Replaces any existing disabled days (by index, 0-6) with new values and refreshes the DatePicker.\r\n"},{"parameters":[{"type":"Date","optional":false,"name":"value","summary":"The maximum date that can be selected"}],"return":null,"hide":false,"private":false,"name":"setMaxDate","summary":"Replaces any existing {@link #maxDate} with the new value and refreshes the DatePicker.\r\n"},{"parameters":[{"type":"Date","optional":false,"name":"value","summary":"The minimum date that can be selected"}],"return":null,"hide":false,"private":false,"name":"setMinDate","summary":"Replaces any existing {@link #minDate} with the new value and refreshes the DatePicker.\r\n"},{"parameters":[{"type":"Date","optional":false,"name":"value","summary":"The date to set"}],"return":null,"hide":false,"private":false,"name":"setValue","summary":"Sets the value of the date field\r\n"}],"events":[{"parameters":[{"type":"DatePicker","optional":false,"name":"el","summary":"this"},{"type":"Date","optional":false,"name":"date","summary":"The selected date"}],"name":"select","summary":"Fires when a date is selected."}]},{"name":"Direct","fullName":"Ext.Direct","summary":"<p><b><u>Overview</u></b></p>\r\n\r\n<p>Ext.Direct aims to streamline communication between the client and server\r\nby providing a single interface that reduces the amount of common code\r\ntypically required to validate data and handle returned data packets\r\n(reading data, error conditions, etc).</p>\r\n\r\n<p>The Ext.direct namespace includes several classes for a closer integration\r\nwith the server-side. The Ext.data namespace also includes classes for working\r\nwith Ext.data.Stores which are backed by data from an Ext.Direct method.</p>\r\n\r\n<p><b><u>Specification</u></b></p>\r\n\r\n<p>For additional information consult the\r\n<a href=\"http://extjs.com/products/extjs/direct.php\">Ext.Direct Specification</a>.</p>\r\n\r\n<p><b><u>Providers</u></b></p>\r\n\r\n<p>Ext.Direct uses a provider architecture, where one or more providers are\r\nused to transport data to and from the server. There are several providers\r\nthat exist in the core at the moment:</p><div class=\"mdetail-params\"><ul>\r\n\r\n<li>{@link Ext.direct.JsonProvider JsonProvider} for simple JSON operations</li>\r\n<li>{@link Ext.direct.PollingProvider PollingProvider} for repeated requests</li>\r\n<li>{@link Ext.direct.RemotingProvider RemotingProvider} exposes server side\r\non the client.</li>\r\n</ul></div>\r\n\r\n<p>A provider does not need to be invoked directly, providers are added via\r\n{@link Ext.Direct}.{@link Ext.Direct#add add}.</p>\r\n\r\n<p><b><u>Router</u></b></p>\r\n\r\n<p>Ext.Direct utilizes a \"router\" on the server to direct requests from the client\r\nto the appropriate server-side method. Because the Ext.Direct API is completely\r\nplatform-agnostic, you could completely swap out a Java based server solution\r\nand replace it with one that uses C# without changing the client side JavaScript\r\nat all.</p>\r\n\r\n<p><b><u>Server side events</u></b></p>\r\n\r\n<p>Custom events from the server may be handled by the client by adding\r\nlisteners, for example:</p>\r\n<pre><code>\r\n{\"type\":\"event\",\"name\":\"message\",\"data\":\"Successfully polled at: 11:19:30 am\"}\r\n\r\n// add a handler for a 'message' event sent by the server \r\nExt.Direct.on('message', function (e) {\r\n    out.append(String.format('&lt;p>&lt;i>{0}&lt;/i>&lt;/p>', e.data));\r\n            out.el.scrollTo('t', 100000, true);\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"direct\\Direct.js","xtype":null,"extends":"Ext.util.Observable","singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"eventTypes","summary":"Each event type implements a getData() method. The default event types are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>event</tt></b> : Ext.Direct.Event</li>\r\n<li><b><tt>exception</tt></b> : Ext.Direct.ExceptionEvent</li>\r\n<li><b><tt>rpc</tt></b> : Ext.Direct.RemotingEvent</li>\r\n</ul></div>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"exceptions","summary":"Four types of possible exceptions which can occur:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>Ext.Direct.exceptions.TRANSPORT</tt></b> : 'xhr'</li>\r\n<li><b><tt>Ext.Direct.exceptions.PARSE</tt></b> : 'parse'</li>\r\n<li><b><tt>Ext.Direct.exceptions.LOGIN</tt></b> : 'login'</li>\r\n<li><b><tt>Ext.Direct.exceptions.SERVER</tt></b> : 'exception'</li>\r\n</ul></div>\r\n"}],"methods":[{"parameters":[{"type":"Object/Array","optional":false,"name":"provider","summary":"Accepts either an Array of Provider descriptions (an instance\r\nor config object for a Provider) or any number of Provider descriptions as arguments.  Each\r\nProvider description instructs Ext.Direct how to create client-side stub methods."}],"return":null,"hide":false,"private":false,"name":"addProvider","summary":"Adds an Ext.Direct Provider and creates the proxy or stub methods to execute server-side methods.\r\nIf the provider is not already connected, it will auto-connect.\r\n<pre><code>\r\nvar pollProv = new Ext.direct.PollingProvider({\r\n    url: 'php/poll2.php'\r\n}); \r\n\r\nExt.Direct.addProvider(\r\n   {\r\n        \"type\":\"remoting\",       // create a {@link Ext.direct.RemotingProvider} \r\n        \"url\":\"php\\/router.php\", // url to connect to the Ext.Direct server-side router.\r\n        \"actions\":{              // each property within the actions object represents a Class \r\n            \"TestAction\":[       // array of methods within each server side Class   \r\n           {\r\n                \"name\":\"doEcho\", // name of method\r\n                \"len\":1\r\n            },{\r\n                \"name\":\"multiply\",\r\n                \"len\":1\r\n            },{\r\n                \"name\":\"doForm\",\r\n                \"formHandler\":true, // handle form on server with Ext.Direct.Transaction \r\n                \"len\":1\r\n            }]\r\n        },\r\n        \"namespace\":\"myApplication\",// namespace to create the Remoting Provider in\r\n    },{\r\n        type: 'polling', // create a {@link Ext.direct.PollingProvider} \r\n        url:  'php/poll.php'\r\n    },\r\n    pollProv // reference to previously created instance\r\n);\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"Unique identifier assigned to the provider when calling {@link #addProvider}"}],"return":null,"hide":false,"private":false,"name":"getProvider","summary":"Retrieve a {@link Ext.direct.Provider provider} by the\r\n<b><tt>{@link Ext.direct.Provider#id id}</tt></b> specified when the provider is\r\n{@link #addProvider added}.\r\n"}],"events":[{"parameters":[{"type":"event","optional":false,"name":"e","summary":"The {@link Ext.Direct#eventTypes Ext.Direct.Event type} that occurred."},{"type":"Ext.direct.Provider","optional":false,"name":"provider","summary":"The {@link Ext.direct.Provider Provider}."}],"name":"event","summary":"Fires after an event."},{"parameters":[{"type":"event","optional":false,"name":"e","summary":"The {@link Ext.Direct#eventTypes Ext.Direct.Event type} that occurred."}],"name":"exception","summary":"Fires after an event exception."}]},{"name":"Direct.Transaction","fullName":"Ext.Direct.Transaction","summary":"<p>Supporting Class for Ext.Direct (not intended to be used directly).</p>\r\n","package":"Ext","definedIn":"direct\\Transaction.js","xtype":null,"extends":"Object","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"DomHelper","fullName":"Ext.DomHelper","summary":"<p>The DomHelper class provides a layer of abstraction from DOM and transparently supports creating\r\nelements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates\r\nfrom your DOM building code.</p>\r\n\r\n<p><b><u>DomHelper element specification object</u></b></p>\r\n<p>A specification object is used when creating elements. Attributes of this object\r\nare assumed to be element attributes, except for 4 special attributes:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>tag</tt></b> : <div class=\"sub-desc\">The tag name of the element</div></li>\r\n<li><b><tt>children</tt></b> : or <tt>cn</tt><div class=\"sub-desc\">An array of the\r\nsame kind of element definition objects to be created and appended. These can be nested\r\nas deep as you want.</div></li>\r\n<li><b><tt>cls</tt></b> : <div class=\"sub-desc\">The class attribute of the element.\r\nThis will end up being either the \"class\" attribute on a HTML fragment or className\r\nfor a DOM node, depending on whether DomHelper is using fragments or DOM.</div></li>\r\n<li><b><tt>html</tt></b> : <div class=\"sub-desc\">The innerHTML for the element</div></li>\r\n</ul></div></p>\r\n\r\n<p><b><u>Insertion methods</u></b></p>\r\n<p>Commonly used insertion methods:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>{@link #append}</tt></b> : <div class=\"sub-desc\"></div></li>\r\n<li><b><tt>{@link #insertBefore}</tt></b> : <div class=\"sub-desc\"></div></li>\r\n<li><b><tt>{@link #insertAfter}</tt></b> : <div class=\"sub-desc\"></div></li>\r\n<li><b><tt>{@link #overwrite}</tt></b> : <div class=\"sub-desc\"></div></li>\r\n<li><b><tt>{@link #createTemplate}</tt></b> : <div class=\"sub-desc\"></div></li>\r\n<li><b><tt>{@link #insertHtml}</tt></b> : <div class=\"sub-desc\"></div></li>\r\n</ul></div></p>\r\n\r\n<p><b><u>Example</u></b></p>\r\n<p>This is an example, where an unordered list with 3 children items is appended to an existing\r\nelement with id <tt>'my-div'</tt>:<br>\r\n <pre><code>\r\nvar dh = Ext.DomHelper; // create shorthand alias\r\n// specification object\r\nvar spec = {\r\n    id: 'my-ul',\r\n    tag: 'ul',\r\n    cls: 'my-list',\r\n    // append children after creating\r\n    children: [     // may also specify 'cn' instead of 'children'\r\n       {tag: 'li', id: 'item0', html: 'List Item 0'},\r\n       {tag: 'li', id: 'item1', html: 'List Item 1'},\r\n       {tag: 'li', id: 'item2', html: 'List Item 2'}\r\n    ]\r\n};\r\nvar list = dh.append(\r\n    'my-div', // the context element 'my-div' can either be the id or the actual node\r\n    spec      // the specification object\r\n);\r\n </code></pre></p>\r\n<p>Element creation specification parameters in this class may also be passed as an Array of\r\nspecification objects. This can be used to insert multiple sibling nodes into an existing\r\ncontainer very efficiently. For example, to add more list items to the example above:<pre><code>\r\ndh.append('my-ul', [\r\n   {tag: 'li', id: 'item3', html: 'List Item 3'},\r\n   {tag: 'li', id: 'item4', html: 'List Item 4'}\r\n]);\r\n</code></pre></p>\r\n\r\n<p><b><u>Templating</u></b></p>\r\n<p>The real power is in the built-in templating. Instead of creating or appending any elements,\r\n<tt>{@link #createTemplate}</tt> returns a Template object which can be used over and over to\r\ninsert new elements. Revisiting the example above, we could utilize templating this time:\r\n<pre><code>\r\n// create the node\r\nvar list = dh.append('my-div', {tag: 'ul', cls: 'my-list'});\r\n// get template\r\nvar tpl = dh.createTemplate({tag: 'li', id: 'item{0}', html: 'List Item {0}'});\r\n\r\nfor(var i = 0; i < 5, i++) {\r\n    tpl.append(list, [i]); // use template to append to the actual node\r\n}\r\n</code></pre></p>\r\n<p>An example using a template:<pre><code>\r\nvar html = '<a id=\"{0}\" href=\"{1}\" class=\"nav\">{2}</a>';\r\n\r\nvar tpl = new Ext.DomHelper.createTemplate(html);\r\ntpl.append('blog-roll', ['link1', 'http://www.jackslocum.com/', \"Jack&#39;s Site\"]);\r\ntpl.append('blog-roll', ['link2', 'http://www.dustindiaz.com/', \"Dustin&#39;s Site\"]);\r\n</code></pre></p>\r\n\r\n<p>The same example using named parameters:<pre><code>\r\nvar html = '<a id=\"{id}\" href=\"{url}\" class=\"nav\">{text}</a>';\r\n\r\nvar tpl = new Ext.DomHelper.createTemplate(html);\r\ntpl.append('blog-roll', {\r\n    id: 'link1',\r\n    url: 'http://www.jackslocum.com/',\r\n    text: \"Jack&#39;s Site\"\r\n});\r\ntpl.append('blog-roll', {\r\n    id: 'link2',\r\n    url: 'http://www.dustindiaz.com/',\r\n    text: \"Dustin&#39;s Site\"\r\n});\r\n</code></pre></p>\r\n\r\n<p><b><u>Compiling Templates</u></b></p>\r\n<p>Templates are applied using regular expressions. The performance is great, but if\r\nyou are adding a bunch of DOM elements using the same template, you can increase\r\nperformance even further by {@link Ext.Template#compile \"compiling\"} the template.\r\nThe way \"{@link Ext.Template#compile compile()}\" works is the template is parsed and\r\nbroken up at the different variable points and a dynamic function is created and eval'ed.\r\nThe generated function performs string concatenation of these parts and the passed\r\nvariables instead of using regular expressions.\r\n<pre><code>\r\nvar html = '<a id=\"{id}\" href=\"{url}\" class=\"nav\">{text}</a>';\r\n\r\nvar tpl = new Ext.DomHelper.createTemplate(html);\r\ntpl.compile();\r\n\r\n//... use template like normal\r\n</code></pre></p>\r\n\r\n<p><b><u>Performance Boost</u></b></p>\r\n<p>DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead\r\nof DOM can significantly boost performance.</p>\r\n<p>Element creation specification parameters may also be strings. If {@link #useDom} is <tt>false</tt>,\r\nthen the string is used as innerHTML. If {@link #useDom} is <tt>true</tt>, a string specification\r\nresults in the creation of a text node. Usage:</p>\r\n<pre><code>\r\nExt.DomHelper.useDom = true; // force it to use DOM; reduces performance\r\n</code></pre>\r\n\r\n","package":"Ext","definedIn":"core\\core\\DomHelper.js,core\\DomHelper-more.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/String","optional":false,"name":"o","summary":"The DOM object spec (and children) or raw HTML blob"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node"},"hide":false,"private":false,"name":"append","summary":"Creates new DOM element(s) and appends them to el.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The element to apply styles to"},{"type":"String/Object/Function","optional":false,"name":"styles","summary":"A style specification string e.g. 'width:100px', or object in the form {width:'100px'}, or\r\na function which returns such a specification."}],"return":null,"hide":false,"private":false,"name":"applyStyles","summary":"Applies a style specification to an element.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object","optional":false,"name":"o","summary":"The DOM object spec (and children)"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node"},"hide":false,"private":false,"name":"insertAfter","summary":"Creates new DOM element(s) and inserts them after el.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/String","optional":false,"name":"o","summary":"The DOM object spec (and children) or raw HTML blob"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node"},"hide":false,"private":false,"name":"insertBefore","summary":"Creates new DOM element(s) and inserts them before el.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/String","optional":false,"name":"o","summary":"The DOM object spec (and children) or raw HTML blob"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node"},"hide":false,"private":false,"name":"insertFirst","summary":"Creates new DOM element(s) and inserts them as the first child of el.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"where","summary":"Where to insert the html in relation to el - beforeBegin, afterBegin, beforeEnd, afterEnd."},{"type":"HTMLElement","optional":false,"name":"el","summary":"The context element"},{"type":"String","optional":false,"name":"html","summary":"The HTML fragmenet"}],"return":{"type":"HTMLElement","summary":"The new node"},"hide":false,"private":false,"name":"insertHtml","summary":"Inserts an HTML fragment into the DOM.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The DOM object spec (and children)"}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"markup","summary":"Returns the markup for the passed Element(s) config.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/String","optional":false,"name":"o","summary":"The DOM object spec (and children) or raw HTML blob"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node"},"hide":false,"private":false,"name":"overwrite","summary":"Creates new DOM element(s) and overwrites the contents of el with them.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The DOM object spec (and children)"}],"return":{"type":"Ext.Template","summary":"The new template"},"hide":false,"private":false,"name":"createTemplate","summary":"    function createDom(o, parentNode) {\r\n        var el,\r\n        \tdoc = document,\r\n        \tuseSet,\r\n        \tattr,\r\n        \tval,\r\n        \tcn;\r\n\r\n        if (Ext.isArray(o)) {                       // Allow Arrays of siblings to be inserted\r\n            el = doc.createDocumentFragment(); // in one shot using a DocumentFragment\r\n\t        Ext.each(o, function (v) {\r\n                createDom(v, el);\r\n            });\r\n        } else if (Ext.isString(o)) {         // Allow a string as a child spec.\r\n            el = doc.createTextNode(o);\r\n        } else {\r\n            el = doc.createElement( o.tag || 'div' );\r\n            useSet = !!el.setAttribute; // In IE some elements don't have setAttribute\r\n            Ext.iterate(o, function (attr, val) {\r\n                if (!/tag|children|cn|html|style/.test(attr)) {\r\n\t                if (attr == 'cls') {\r\n\t                    el.className = val;\r\n\t                } else {\r\n                        if (useSet) {\r\n                            el.setAttribute(attr, val);\r\n                        } else {\r\n                            el[attr] = val;\r\n                        }\r\n\t                }\r\n                }\r\n            });\r\n            Ext.DomHelper.applyStyles(el, o.style);\r\n\r\n            if ((cn = o.children || o.cn)) {\r\n                createDom(cn, el);\r\n            } else if (o.html) {\r\n                el.innerHTML = o.html;\r\n            }\r\n        }\r\n        if (parentNode) {\r\n           parentNode.appendChild(el);\r\n        }\r\n        return el;\r\n    }\r\n\r\n\tpub = {\r\n\t\t/**\r\nCreates a new Ext.Template from the DOM object spec.\r\n"}],"events":[]},{"name":"DomQuery","fullName":"Ext.DomQuery","summary":"Provides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).\r\n<p>\r\nDomQuery supports most of the <a href=\"http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors\">CSS3 selectors spec</a>, along with some custom selectors and basic XPath.</p>\r\n\r\n<p>\r\nAll selectors, attribute filters and pseudos below can be combined infinitely in any order. For example \"div.foo:nth-child(odd)[@foo=bar].bar:first\" would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.\r\n</p>\r\n<h4>Element Selectors:</h4>\r\n<ul class=\"list\">\r\n    <li> <b>*</b> any element</li>\r\n    <li> <b>E</b> an element with the tag E</li>\r\n    <li> <b>E F</b> All descendent elements of E that have the tag F</li>\r\n    <li> <b>E > F</b> or <b>E/F</b> all direct children elements of E that have the tag F</li>\r\n    <li> <b>E + F</b> all elements with the tag F that are immediately preceded by an element with the tag E</li>\r\n    <li> <b>E ~ F</b> all elements with the tag F that are preceded by a sibling element with the tag E</li>\r\n</ul>\r\n<h4>Attribute Selectors:</h4>\r\n<p>The use of &#64; and quotes are optional. For example, div[&#64;foo='bar'] is also a valid attribute selector.</p>\r\n<ul class=\"list\">\r\n    <li> <b>E[foo]</b> has an attribute \"foo\"</li>\r\n    <li> <b>E[foo=bar]</b> has an attribute \"foo\" that equals \"bar\"</li>\r\n    <li> <b>E[foo^=bar]</b> has an attribute \"foo\" that starts with \"bar\"</li>\r\n    <li> <b>E[foo$=bar]</b> has an attribute \"foo\" that ends with \"bar\"</li>\r\n    <li> <b>E[foo*=bar]</b> has an attribute \"foo\" that contains the substring \"bar\"</li>\r\n    <li> <b>E[foo%=2]</b> has an attribute \"foo\" that is evenly divisible by 2</li>\r\n    <li> <b>E[foo!=bar]</b> has an attribute \"foo\" that does not equal \"bar\"</li>\r\n</ul>\r\n<h4>Pseudo Classes:</h4>\r\n<ul class=\"list\">\r\n    <li> <b>E:first-child</b> E is the first child of its parent</li>\r\n    <li> <b>E:last-child</b> E is the last child of its parent</li>\r\n    <li> <b>E:nth-child(<i>n</i>)</b> E is the <i>n</i>th child of its parent (1 based as per the spec)</li>\r\n    <li> <b>E:nth-child(odd)</b> E is an odd child of its parent</li>\r\n    <li> <b>E:nth-child(even)</b> E is an even child of its parent</li>\r\n    <li> <b>E:only-child</b> E is the only child of its parent</li>\r\n    <li> <b>E:checked</b> E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) </li>\r\n    <li> <b>E:first</b> the first E in the resultset</li>\r\n    <li> <b>E:last</b> the last E in the resultset</li>\r\n    <li> <b>E:nth(<i>n</i>)</b> the <i>n</i>th E in the resultset (1 based)</li>\r\n    <li> <b>E:odd</b> shortcut for :nth-child(odd)</li>\r\n    <li> <b>E:even</b> shortcut for :nth-child(even)</li>\r\n    <li> <b>E:contains(foo)</b> E's innerHTML contains the substring \"foo\"</li>\r\n    <li> <b>E:nodeValue(foo)</b> E contains a textNode with a nodeValue that equals \"foo\"</li>\r\n    <li> <b>E:not(S)</b> an E element that does not match simple selector S</li>\r\n    <li> <b>E:has(S)</b> an E element that has a descendent that matches simple selector S</li>\r\n    <li> <b>E:next(S)</b> an E element whose next sibling matches simple selector S</li>\r\n    <li> <b>E:prev(S)</b> an E element whose previous sibling matches simple selector S</li>\r\n</ul>\r\n<h4>CSS Value Selectors:</h4>\r\n<ul class=\"list\">\r\n    <li> <b>E{display=none}</b> css value \"display\" that equals \"none\"</li>\r\n    <li> <b>E{display^=none}</b> css value \"display\" that starts with \"none\"</li>\r\n    <li> <b>E{display$=none}</b> css value \"display\" that ends with \"none\"</li>\r\n    <li> <b>E{display*=none}</b> css value \"display\" that contains the substring \"none\"</li>\r\n    <li> <b>E{display%=2}</b> css value \"display\" that is evenly divisible by 2</li>\r\n    <li> <b>E{display!=none}</b> css value \"display\" that does not equal \"none\"</li>\r\n</ul>\r\n\r\nProvides high performance selector/xpath processing by compiling queries into reusable functions. New pseudo classes and matchers can be plugged. It works on HTML and XML documents (if a content node is passed in).\r\n<p>\r\nDomQuery supports most of the <a href=\"http://www.w3.org/TR/2005/WD-css3-selectors-20051215/#selectors\">CSS3 selectors spec</a>, along with some custom selectors and basic XPath.</p>\r\n\r\n<p>\r\nAll selectors, attribute filters and pseudos below can be combined infinitely in any order. For example \"div.foo:nth-child(odd)[@foo=bar].bar:first\" would be a perfectly valid selector. Node filters are processed in the order in which they appear, which allows you to optimize your queries for your document structure.\r\n</p>\r\n<h4>Element Selectors:</h4>\r\n<ul class=\"list\">\r\n    <li> <b>*</b> any element</li>\r\n    <li> <b>E</b> an element with the tag E</li>\r\n    <li> <b>E F</b> All descendent elements of E that have the tag F</li>\r\n    <li> <b>E > F</b> or <b>E/F</b> all direct children elements of E that have the tag F</li>\r\n    <li> <b>E + F</b> all elements with the tag F that are immediately preceded by an element with the tag E</li>\r\n    <li> <b>E ~ F</b> all elements with the tag F that are preceded by a sibling element with the tag E</li>\r\n</ul>\r\n<h4>Attribute Selectors:</h4>\r\n<p>The use of &#64; and quotes are optional. For example, div[&#64;foo='bar'] is also a valid attribute selector.</p>\r\n<ul class=\"list\">\r\n    <li> <b>E[foo]</b> has an attribute \"foo\"</li>\r\n    <li> <b>E[foo=bar]</b> has an attribute \"foo\" that equals \"bar\"</li>\r\n    <li> <b>E[foo^=bar]</b> has an attribute \"foo\" that starts with \"bar\"</li>\r\n    <li> <b>E[foo$=bar]</b> has an attribute \"foo\" that ends with \"bar\"</li>\r\n    <li> <b>E[foo*=bar]</b> has an attribute \"foo\" that contains the substring \"bar\"</li>\r\n    <li> <b>E[foo%=2]</b> has an attribute \"foo\" that is evenly divisible by 2</li>\r\n    <li> <b>E[foo!=bar]</b> has an attribute \"foo\" that does not equal \"bar\"</li>\r\n</ul>\r\n<h4>Pseudo Classes:</h4>\r\n<ul class=\"list\">\r\n    <li> <b>E:first-child</b> E is the first child of its parent</li>\r\n    <li> <b>E:last-child</b> E is the last child of its parent</li>\r\n    <li> <b>E:nth-child(<i>n</i>)</b> E is the <i>n</i>th child of its parent (1 based as per the spec)</li>\r\n    <li> <b>E:nth-child(odd)</b> E is an odd child of its parent</li>\r\n    <li> <b>E:nth-child(even)</b> E is an even child of its parent</li>\r\n    <li> <b>E:only-child</b> E is the only child of its parent</li>\r\n    <li> <b>E:checked</b> E is an element that is has a checked attribute that is true (e.g. a radio or checkbox) </li>\r\n    <li> <b>E:first</b> the first E in the resultset</li>\r\n    <li> <b>E:last</b> the last E in the resultset</li>\r\n    <li> <b>E:nth(<i>n</i>)</b> the <i>n</i>th E in the resultset (1 based)</li>\r\n    <li> <b>E:odd</b> shortcut for :nth-child(odd)</li>\r\n    <li> <b>E:even</b> shortcut for :nth-child(even)</li>\r\n    <li> <b>E:contains(foo)</b> E's innerHTML contains the substring \"foo\"</li>\r\n    <li> <b>E:nodeValue(foo)</b> E contains a textNode with a nodeValue that equals \"foo\"</li>\r\n    <li> <b>E:not(S)</b> an E element that does not match simple selector S</li>\r\n    <li> <b>E:has(S)</b> an E element that has a descendent that matches simple selector S</li>\r\n    <li> <b>E:next(S)</b> an E element whose next sibling matches simple selector S</li>\r\n    <li> <b>E:prev(S)</b> an E element whose previous sibling matches simple selector S</li>\r\n</ul>\r\n<h4>CSS Value Selectors:</h4>\r\n<ul class=\"list\">\r\n    <li> <b>E{display=none}</b> css value \"display\" that equals \"none\"</li>\r\n    <li> <b>E{display^=none}</b> css value \"display\" that starts with \"none\"</li>\r\n    <li> <b>E{display$=none}</b> css value \"display\" that ends with \"none\"</li>\r\n    <li> <b>E{display*=none}</b> css value \"display\" that contains the substring \"none\"</li>\r\n    <li> <b>E{display%=2}</b> css value \"display\" that is evenly divisible by 2</li>\r\n    <li> <b>E{display!=none}</b> css value \"display\" that does not equal \"none\"</li>\r\n</ul>\r\n","package":"Ext","definedIn":"core\\core\\DomQuery.js,core\\DomQuery.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The selector/xpath query"},{"type":"String","optional":true,"name":"type","summary":"Either \"select\" (the default) or \"simple\" for a simple selector match"}],"return":{"type":"Function","summary":""},"hide":false,"private":false,"name":"compile","summary":"Compiles a selector/xpath query into a reusable function. The returned function\r\ntakes one parameter \"root\" (optional), which is the context node from where the query should start.\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"el","summary":"An array of elements to filter"},{"type":"String","optional":false,"name":"selector","summary":"The simple selector to test"},{"type":"Boolean","optional":false,"name":"nonMatches","summary":"If true, it returns the elements that DON'T match\r\nthe selector instead of the ones that match\r\nno matches, and empty Array is returned."}],"return":{"type":"Array","summary":"An Array of DOM elements which match the selector. If there are"},"hide":false,"private":false,"name":"filter","summary":"Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)\r\n"},{"parameters":[{"type":"String/HTMLElement/Array","optional":false,"name":"el","summary":"An element id, element or array of elements"},{"type":"String","optional":false,"name":"selector","summary":"The simple selector to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"is","summary":"Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)\r\n"},{"parameters":[{"type":"String","optional":false,"name":"path","summary":"The selector/xpath query"},{"type":"Node","optional":true,"name":"root","summary":"The start of the query (defaults to document).\r\n@member Ext"}],"return":{"type":"Array","summary":""},"hide":false,"private":false,"name":"query","summary":"Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Ext.DomQuery#select}\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The selector/xpath query (can be a comma separated list of selectors)"},{"type":"Node","optional":true,"name":"root","summary":"The start of the query (defaults to document).\r\nno matches, and empty Array is returned."}],"return":{"type":"Array","summary":"An Array of DOM elements which match the selector. If there are"},"hide":false,"private":false,"name":"select","summary":"Selects a group of elements.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The selector/xpath query"},{"type":"Node","optional":true,"name":"root","summary":"The start of the query (defaults to document)."}],"return":{"type":"Element","summary":"The DOM element which matched the selector."},"hide":false,"private":false,"name":"selectNode","summary":"Selects a single element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The selector/xpath query"},{"type":"Node","optional":true,"name":"root","summary":"The start of the query (defaults to document)."},{"type":"Number","optional":false,"name":"defaultValue","summary":""}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"selectNumber","summary":"Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The selector/xpath query"},{"type":"Node","optional":true,"name":"root","summary":"The start of the query (defaults to document)."},{"type":"String","optional":false,"name":"defaultValue","summary":""}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"selectValue","summary":"Selects the value of a node, optionally replacing null with the defaultValue.\r\n"}],"events":[]},{"name":"Editor","fullName":"Ext.Editor","summary":"A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic.\r\n","package":"Ext","definedIn":"widgets\\Editor.js","xtype":"editor","extends":"Ext.Component","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Editor."},"subclasses":"Ext.tree.TreeEditor","configOptions":[{"type":"String","optional":false,"name":"alignment","summary":"The position to align to (see {@link Ext.Element#alignTo} for more details, defaults to \"c-c?\").\r\n"},{"type":"Boolean","optional":false,"name":"allowBlur","summary":"True to {@link #completeEdit complete the editing process} if in edit mode when the\r\nfield is blurred. Defaults to <tt>false</tt>.\r\n"},{"type":"Boolean/String","optional":false,"name":"autoSize","summary":"True for the editor to automatically adopt the size of the element being edited, \"width\" to adopt the width only,\r\nor \"height\" to adopt the height only (defaults to false)\r\n"},{"type":"Boolean","optional":false,"name":"cancelOnEsc","summary":""},{"type":"Boolean","optional":false,"name":"completeOnEnter","summary":""},{"type":"Boolean","optional":false,"name":"constrain","summary":""},{"type":"Ext.form.Field","optional":false,"name":"field","summary":"The Field object (or descendant) or config object for field\r\n"},{"type":"Boolean","optional":false,"name":"hideEl","summary":"False to keep the bound element visible while the editor is displayed (defaults to true)\r\n"},{"type":"Boolean","optional":false,"name":"ignoreNoChange","summary":"True to skip the edit completion process (no save, no events fired) if the user completes an edit and\r\nthe value has not changed (defaults to false).  Applies only to string values - edits for other data types\r\nwill never be ignored.\r\n"},{"type":"Boolean","optional":false,"name":"revertInvalid","summary":"True to automatically revert the field value and cancel the edit when the user completes an edit and the field\r\nvalidation fails (defaults to true)\r\n"},{"type":"Boolean/String","optional":false,"name":"shadow","summary":"for bottom-right shadow (defaults to \"frame\")\r\n"},{"type":"Boolean","optional":false,"name":"swallowKeys","summary":""},{"type":"Boolean","optional":false,"name":"updateEl","summary":""},{"type":"Mixed","optional":false,"name":"value","summary":"The data value of the underlying field (defaults to \"\")\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Boolean","optional":false,"name":"remainVisible","summary":"Override the default behavior and keep the editor visible after\r\ncancel (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"cancelEdit","summary":"Cancels the editing process and hides the editor without persisting any changes.  The field value will be\r\nreverted to the original starting value.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"remainVisible","summary":"Override the default behavior and keep the editor visible after edit (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"completeEdit","summary":"Ends the editing process, persists the changed value to the underlying field, and hides the editor.\r\n"},{"parameters":[],"return":{"type":"Mixed","summary":"The data value"},"hide":false,"private":false,"name":"getValue","summary":"Gets the data value of the editor\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"realign","summary":"Realigns the editor to the bound field based on the current alignment config value.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"width","summary":"The new width"},{"type":"Number","optional":false,"name":"height","summary":"The new height"}],"return":null,"hide":false,"private":false,"name":"setSize","summary":"Sets the height and width of this editor.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"Any valid value supported by the underlying field"}],"return":null,"hide":false,"private":false,"name":"setValue","summary":"Sets the data value of the editor\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to edit"},{"type":"String","optional":true,"name":"value","summary":"A value to initialize the editor with. If a value is not provided, it defaults\r\nto the innerHTML of el."}],"return":null,"hide":false,"private":false,"name":"startEdit","summary":"Starts the editing process and shows the editor.\r\n"}],"events":[{"parameters":[{"type":"Editor","optional":false,"name":"el","summary":"this"},{"type":"Mixed","optional":false,"name":"value","summary":"The current field value"},{"type":"Mixed","optional":false,"name":"startValue","summary":"The original field value"}],"name":"beforecomplete","summary":"Fires after a change has been made to the field, but before the change is reflected in the underlying field. Saving the change to the field can be canceled by returning false from the handler of this event. Note that if the value has not changed and ignoreNoChange = true, the editing will still end but this event will not fire since no edit actually occurred."},{"parameters":[{"type":"Editor","optional":false,"name":"el","summary":"this"},{"type":"Ext.Element","optional":false,"name":"boundEl","summary":"The underlying element bound to this editor"},{"type":"Mixed","optional":false,"name":"value","summary":"The field value being set"}],"name":"beforestartedit","summary":"Fires when editing is initiated, but before the value changes. Editing can be canceled by returning false from the handler of this event."},{"parameters":[{"type":"Editor","optional":false,"name":"el","summary":"this"},{"type":"Mixed","optional":false,"name":"value","summary":"The user-entered field value that was discarded"},{"type":"Mixed","optional":false,"name":"startValue","summary":"The original field value that was set back into the editor after cancel"}],"name":"canceledit","summary":"Fires after editing has been canceled and the editor's value has been reset."},{"parameters":[{"type":"Editor","optional":false,"name":"el","summary":"this"},{"type":"Mixed","optional":false,"name":"value","summary":"The current field value"},{"type":"Mixed","optional":false,"name":"startValue","summary":"The original field value"}],"name":"complete","summary":"Fires after editing is complete and any changed value has been written to the underlying field."},{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event object"}],"name":"specialkey","summary":"Fires when any key related to navigation (arrows, tab, enter, esc, etc.) is pressed. You can check {@link Ext.EventObject#getKey} to determine which key was pressed."},{"parameters":[{"type":"Ext.Element","optional":false,"name":"boundEl","summary":"The underlying element bound to this editor"},{"type":"Mixed","optional":false,"name":"value","summary":"The starting field value"}],"name":"startedit","summary":"Fires when this editor is displayed."}]},{"name":"Element","fullName":"Ext.Element","summary":"\r\n\r\n<p>Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.</p>\r\n<p>All instances of this class inherit the methods of {@link Ext.Fx} making visual effects easily available to all DOM elements.</p>\r\n<p>Note that the events documented in this class are not Ext events, they encapsulate browser events. To\r\naccess the underlying browser event, see {@link Ext.EventObject#browserEvent}. Some older\r\nbrowsers may not support the full range of events. Which events are supported is beyond the control of ExtJs.</p>\r\nUsage:<br>\r\n<pre><code>\r\n// by id\r\nvar el = Ext.get(\"my-div\");\r\n\r\n// by DOM element reference\r\nvar el = Ext.get(myDivElement);\r\n</code></pre>\r\n<b>Animations</b><br />\r\n<p>When an element is manipulated, by default there is no animation.</p>\r\n<pre><code>\r\nvar el = Ext.get(\"my-div\");\r\n\r\n// no animation\r\nel.setWidth(100);\r\n</code></pre>\r\n<p>Many of the functions for manipulating an element have an optional \"animate\" parameter.  This\r\nparameter can be specified as boolean (<tt>true</tt>) for default animation effects.</p>\r\n<pre><code>\r\n// default animation\r\nel.setWidth(100, true);\r\n</code></pre>\r\n\r\n<p>To configure the effects, an object literal with animation options to use as the Element animation\r\nconfiguration object can also be specified. Note that the supported Element animation configuration\r\noptions are a subset of the {@link Ext.Fx} animation options specific to Fx effects.  The supported\r\nElement animation configuration options are:</p>\r\n<pre>\r\nOption    Default   Description\r\n--------- --------  ---------------------------------------------\r\n{@link Ext.Fx#duration duration}  .35       The duration of the animation in seconds\r\n{@link Ext.Fx#easing easing}    easeOut   The easing method\r\n{@link Ext.Fx#callback callback}  none      A function to execute when the anim completes\r\n{@link Ext.Fx#scope scope}     this      The scope (this) of the callback function\r\n</pre>\r\n\r\n<pre><code>\r\n// Element animation options object\r\nvar opt = {\r\n   {@link Ext.Fx#duration duration}: 1,\r\n   {@link Ext.Fx#easing easing}: 'elasticIn',\r\n   {@link Ext.Fx#callback callback}: this.foo,\r\n   {@link Ext.Fx#scope scope}: this\r\n};\r\n// animation with some options set\r\nel.setWidth(100, opt);\r\n</code></pre>\r\n<p>The Element animation object being used for the animation will be set on the options\r\nobject as \"anim\", which allows you to stop or manipulate the animation. Here is an example:</p>\r\n<pre><code>\r\n// using the \"anim\" property to get the Anim object\r\nif(opt.anim.isAnimated()) {\r\n    opt.anim.stop();\r\n}\r\n</code></pre>\r\n<p>Also see the <tt>{@link #animate}</tt> method for another animation technique.</p>\r\n<p><b> Composite (Collections of) Elements</b></p>\r\n<p>For working with collections of Elements, see {@link Ext.CompositeElement}</p>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","package":"Ext","definedIn":"core\\core\\Element.fx.js,core\\core\\Element.insertion.js,core\\core\\Element.js,core\\core\\Element.position.js,core\\core\\Element.scroll.js,core\\core\\Element.style.js,core\\core\\Element.traversal.js,core\\Element-more.js,core\\Element.alignment.js,core\\Element.dd.js,core\\Element.fx-more.js,core\\Element.insertion-more.js,core\\Element.keys.js,core\\Element.legacy.js,core\\Element.position-more.js,core\\Element.scroll-more.js,core\\Element.style-more.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"element","summary":""},{"type":"Boolean","optional":true,"name":"forceNew","summary":"By default the constructor checks to see if there is already an instance of this element in the cache and if there is it returns the same instance. This will skip that check (useful for extending this class)."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.Layer","configOptions":[],"properties":[{"type":"","static":true,"hide":false,"private":false,"name":"DISPLAY","summary":"Visibility mode constant for use with {@link #setVisibilityMode}. Use display to hide element\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"VISIBILITY","summary":"Visibility mode constant for use with {@link #setVisibilityMode}. Use visibility to hide element\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"autoBoxAdjust","summary":"true to automatically adjust width and height settings for box-model issues (default to true)\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"dom","summary":"The DOM element\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"id","summary":"The DOM element ID\r\n"}],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"args","summary":"The animation control args"},{"type":"Float","optional":true,"name":"duration","summary":"How long the animation lasts in seconds (defaults to <tt>.35</tt>)"},{"type":"Function","optional":true,"name":"onComplete","summary":"Function to call when animation completes"},{"type":"String","optional":true,"name":"easing","summary":"{@link Ext.Fx#easing} method to use (defaults to <tt>'easeOut'</tt>)"},{"type":"String","optional":true,"name":"animType","summary":"<tt>'run'</tt> is the default. Can also be <tt>'color'</tt>,\r\n<tt>'motion'</tt>, or <tt>'scroll'</tt>"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"animate","summary":"Perform custom animation on this element.\r\n<div><ul class=\"mdetail-params\">\r\n<li><u>Animation Properties</u></li>\r\n\r\n<p>The Animation Control Object enables gradual transitions for any member of an\r\nelement's style object that takes a numeric value including but not limited to\r\nthese properties:</p><div><ul class=\"mdetail-params\">\r\n<li><tt>bottom, top, left, right</tt></li>\r\n<li><tt>height, width</tt></li>\r\n<li><tt>margin, padding</tt></li>\r\n<li><tt>borderWidth</tt></li>\r\n<li><tt>opacity</tt></li>\r\n<li><tt>fontSize</tt></li>\r\n<li><tt>lineHeight</tt></li>\r\n</ul></div>\r\n\r\n\r\n<li><u>Animation Property Attributes</u></li>\r\n\r\n<p>Each Animation Property is a config object with optional properties:</p>\r\n<div><ul class=\"mdetail-params\">\r\n<li><tt>by</tt>*  : relative change - start at current value, change by this value</li>\r\n<li><tt>from</tt> : ignore current value, start from this value</li>\r\n<li><tt>to</tt>*  : start at current value, go to this value</li>\r\n<li><tt>unit</tt> : any allowable unit specification</li>\r\n<p>* do not specify both <tt>to</tt> and <tt>by</tt> for an animation property</p>\r\n</ul></div>\r\n\r\n<li><u>Animation Types</u></li>\r\n\r\n<p>The supported animation types:</p><div><ul class=\"mdetail-params\">\r\n<li><tt>'run'</tt> : Default\r\n<pre><code>\r\nvar el = Ext.get('complexEl');\r\nel.animate(\r\n    // animation control object\r\n   {\r\n        borderWidth: {to: 3, from: 0},\r\n        opacity: {to: .3, from: 1},\r\n        height: {to: 50, from: el.getHeight()},\r\n        width: {to: 300, from: el.getWidth()},\r\n        top  : {by: - 100, unit: 'px'},\r\n    },\r\n    0.35,      // animation duration\r\n    null,      // callback\r\n    'easeOut', // easing method\r\n    'run'      // animation type ('run','color','motion','scroll')    \r\n);\r\n</code></pre>\r\n</li>\r\n<li><tt>'color'</tt>\r\n<p>Animates transition of background, text, or border colors.</p>\r\n<pre><code>\r\nel.animate(\r\n    // animation control object\r\n   {\r\n        color: { to: '#06e' },\r\n        backgroundColor: { to: '#e06' }\r\n    },\r\n    0.35,      // animation duration\r\n    null,      // callback\r\n    'easeOut', // easing method\r\n    'color'    // animation type ('run','color','motion','scroll')    \r\n);\r\n</code></pre>\r\n</li>\r\n\r\n<li><tt>'motion'</tt>\r\n<p>Animates the motion of an element to/from specific points using optional bezier\r\nway points during transit.</p>\r\n<pre><code>\r\nel.animate(\r\n    // animation control object\r\n   {\r\n        borderWidth: {to: 3, from: 0},\r\n        opacity: {to: .3, from: 1},\r\n        height: {to: 50, from: el.getHeight()},\r\n        width: {to: 300, from: el.getWidth()},\r\n        top  : {by: - 100, unit: 'px'},\r\n        points: {\r\n            to: [50, 100],  // go to this point\r\n            control: [      // optional bezier way points\r\n                [ 600, 800],\r\n                [-100, 200]\r\n            ]\r\n        }\r\n    },\r\n    3000,      // animation duration (milliseconds!)\r\n    null,      // callback\r\n    'easeOut', // easing method\r\n    'motion'   // animation type ('run','color','motion','scroll')    \r\n);\r\n</code></pre>\r\n</li>\r\n<li><tt>'scroll'</tt>\r\n<p>Animate horizontal or vertical scrolling of an overflowing page element.</p>\r\n<pre><code>\r\nel.animate(\r\n    // animation control object\r\n   {\r\n        scroll: {to: [400, 300]}\r\n    },\r\n    0.35,      // animation duration\r\n    null,      // callback\r\n    'easeOut', // easing method\r\n    'scroll'   // animation type ('run','color','motion','scroll')    \r\n);\r\n</code></pre>\r\n</li>\r\n</ul></div>\r\n\r\n</ul></div>\r\n\r\n"},{"parameters":[{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"hide","summary":"Hide this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if the element is currently visible, else false"},"hide":false,"private":false,"name":"isVisible","summary":"Checks whether the element is currently visible using both visibility and display properties.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"Boolean value to display the element using its default display, or a string to set the display directly."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setDisplayed","summary":"Sets the CSS display property. Uses originalDisplay if the specified value is a boolean true.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"visMode","summary":"Ext.Element.VISIBILITY or Ext.Element.DISPLAY"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setVisibilityMode","summary":"Sets the element's visibility mode. When setVisible() is called it\r\nwill use this to determine whether to set the visibility or the display property.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"visible","summary":"Whether the element is visible"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation, or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setVisible","summary":"Sets the visibility of the element (see details). If the visibilityMode is set to Element.DISPLAY, it will use\r\nthe display property to hide the element, otherwise it uses visibility. The default is to hide and show using the visibility property.\r\n"},{"parameters":[{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"show","summary":"Show this element - Uses display mode to determine whether to use \"display\" or \"visibility\". See {@link #setVisible}.\r\n"},{"parameters":[{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation, or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"toggle","summary":"Toggles the element's visibility or display, depending on visibility mode.\r\n"},{"parameters":[{"type":"String/HTMLElement/Array/Element/CompositeElement","optional":false,"name":"el","summary":""}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"appendChild","summary":"Appends the passed element(s) to this element\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The new parent element"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"appendTo","summary":"Appends this element to the passed element\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"DomHelper element config object.  If no tag is specified (e.g., {tag:'input'}) then a div will be\r\nautomatically generated with the specified attributes."},{"type":"HTMLElement","optional":true,"name":"insertBefore","summary":"a child element of this element"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"true to return the dom node instead of creating an Element"}],"return":{"type":"Ext.Element","summary":"The new child element"},"hide":false,"private":false,"name":"createChild","summary":"Creates the passed DomHelper config and appends it to this element or optionally inserts it before the passed child element.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to insert after"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"insertAfter","summary":"Inserts this element after the passed element in the DOM\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element before which this element will be inserted"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"insertBefore","summary":"Inserts this element before the passed element in the DOM\r\n"},{"parameters":[{"type":"Mixed/Object","optional":false,"name":"el","summary":"The id or element to insert or a DomHelper config to create and insert"}],"return":{"type":"Ext.Element","summary":"The new child"},"hide":false,"private":false,"name":"insertFirst","summary":"Inserts (or creates) an element (or DomHelper config) as the first child of this element\r\n"},{"parameters":[{"type":"String","optional":false,"name":"where","summary":"Where to insert the html in relation to this element - beforeBegin, afterBegin, beforeEnd, afterEnd."},{"type":"String","optional":false,"name":"html","summary":"The HTML fragment"},{"type":"Boolean","optional":true,"name":"returnEl","summary":"True to return an Ext.Element (defaults to false)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The inserted node (or nearest related if more than 1 inserted)"},"hide":false,"private":false,"name":"insertHtml","summary":"Inserts an html fragment into this element\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to replace"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"replace","summary":"Replaces the passed element with this element\r\n"},{"parameters":[{"type":"Mixed/Object","optional":false,"name":"el","summary":"The new element or a DomHelper config of an element to create"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"replaceWith","summary":"Replaces this element with the passed element\r\n"},{"parameters":[{"type":"Object","optional":true,"name":"config","summary":"DomHelper element config object for the wrapper element or null for an empty div"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return the raw DOM element instead of Ext.Element"}],"return":{"type":"HTMLElement/Element","summary":"The newly created wrapper element"},"hide":false,"private":false,"name":"wrap","summary":"Creates and wraps this element with another element\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The type of event to handle"},{"type":"Function","optional":false,"name":"fn","summary":"The handler function the event invokes. This function is passed\r\nthe following parameters:<ul>\r\n<li><b>evt</b> : EventObject<div class=\"sub-desc\">The {@link Ext.EventObject EventObject} describing the event.</div></li>\r\n<li><b>el</b> : HtmlElement<div class=\"sub-desc\">The DOM element which was the target of the event.\r\nNote that this may be filtered by using the <tt>delegate</tt> option.</div></li>\r\n<li><b>o</b> : Object<div class=\"sub-desc\">The options object from the addListener call.</div></li>\r\n</ul>"},{"type":"Object","optional":true,"name":"scope","summary":"The scope (<code><b>this</b></code> reference) in which the handler function is executed.\r\n<b>If omitted, defaults to this Element.</b>."},{"type":"Object","optional":true,"name":"options","summary":"An object containing handler configuration properties.\r\nThis may contain any of the following properties:<ul>\r\n<li><b>scope</b> Object : <div class=\"sub-desc\">The scope (<code><b>this</b></code> reference) in which the handler function is executed.\r\n<b>If omitted, defaults to this Element.</b></div></li>\r\n<li><b>delegate</b> String: <div class=\"sub-desc\">A simple selector to filter the target or look for a descendant of the target. See below for additional details.</div></li>\r\n<li><b>stopEvent</b> Boolean: <div class=\"sub-desc\">True to stop the event. That is stop propagation, and prevent the default action.</div></li>\r\n<li><b>preventDefault</b> Boolean: <div class=\"sub-desc\">True to prevent the default action</div></li>\r\n<li><b>stopPropagation</b> Boolean: <div class=\"sub-desc\">True to prevent event propagation</div></li>\r\n<li><b>normalized</b> Boolean: <div class=\"sub-desc\">False to pass a browser event to the handler function instead of an Ext.EventObject</div></li>\r\n<li><b>target</b> Ext.Element: <div class=\"sub-desc\">Only call the handler if the event was fired on the target Element, <i>not</i> if the event was bubbled up from a child node.</div></li>\r\n<li><b>delay</b> Number: <div class=\"sub-desc\">The number of milliseconds to delay the invocation of the handler after the event fires.</div></li>\r\n<li><b>single</b> Boolean: <div class=\"sub-desc\">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>\r\n<li><b>buffer</b> Number: <div class=\"sub-desc\">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\r\nby the specified number of milliseconds. If the event fires again within that time, the original\r\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>\r\n</ul><br>\r\n<p>\r\n<b>Combining Options</b><br>\r\nIn the following examples, the shorthand form {@link #on} is used rather than the more verbose\r\naddListener.  The two are equivalent.  Using the options argument, it is possible to combine different\r\ntypes of listeners:<br>\r\n<br>\r\nA delayed, one-time listener that auto stops the event and adds a custom argument (forumId) to the\r\noptions object. The options object is available as the third parameter in the handler function.<div style=\"margin: 5px 20px 20px;\">\r\nCode:<pre><code>\r\nel.on('click', this.onClick, this, {\r\nsingle: true,\r\ndelay: 100,\r\nstopEvent : true,\r\nforumId: 4\r\n});</code></pre></p>\r\n<p>\r\n<b>Attaching multiple handlers in 1 call</b><br>\r\nThe method also allows for a single argument to be passed which is a config object containing properties\r\nwhich specify multiple handlers.</p>\r\n<p>\r\nCode:<pre><code>\r\nel.on({\r\n'click' : {\r\nfn: this.onClick,\r\nscope: this,\r\ndelay: 100\r\n},\r\n'mouseover' : {\r\nfn: this.onMouseOver,\r\nscope: this\r\n},\r\n'mouseout' : {\r\nfn: this.onMouseOut,\r\nscope: this\r\n}\r\n});</code></pre>\r\n<p>\r\nOr a shorthand syntax:<br>\r\nCode:<pre><code></p>\r\nel.on({\r\n'click' : this.onClick,\r\n'mouseover' : this.onMouseOver,\r\n'mouseout' : this.onMouseOut,\r\nscope: this\r\n});\r\n</code></pre></p>\r\n<p><b>delegate</b></p>\r\n<p>This is a configuration option that you can pass along when registering a handler for\r\nan event to assist with event delegation. Event delegation is a technique that is used to\r\nreduce memory consumption and prevent exposure to memory-leaks. By registering an event\r\nfor a container element as opposed to each element within a container. By setting this\r\nconfiguration option to a simple selector, the target element will be filtered to look for\r\na descendant of the target.\r\nFor example:<pre><code>\r\n// using this markup:\r\n&lt;div id='elId'>\r\n&lt;p id='p1'>paragraph one&lt;/p>\r\n&lt;p id='p2' class='clickable'>paragraph two&lt;/p>\r\n&lt;p id='p3'>paragraph three&lt;/p>\r\n&lt;/div>\r\n// utilize event delegation to registering just one handler on the container element:\r\nel = Ext.get('elId');\r\nel.on(\r\n'click',\r\nfunction(e,t) {\r\n// handle click\r\nconsole.info(t.id); // 'p2'\r\n},\r\nthis,\r\n{\r\n// filter the target element to be a descendant with the class 'clickable'\r\ndelegate: '.clickable'\r\n}\r\n);\r\n</code></pre></p>"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"addListener","summary":"Appends an event handler to this element.  The shorthand version {@link #on} is equivalent.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"blur","summary":"Tries to blur the element. Any exceptions are caught and ignored.\r\n"},{"parameters":[{"type":"HTMLElement/String","optional":false,"name":"el","summary":"The element to check"}],"return":{"type":"Boolean","summary":"True if this element is an ancestor of el, else false"},"hide":false,"private":false,"name":"contains","summary":"Returns true if this element is an ancestor of the passed element\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The dom node or id"},{"type":"String","optional":true,"name":"named","summary":"Allows for creation of named reusable flyweights to prevent conflicts\r\n(e.g. internally Ext uses \"_global\")\r\n@member Ext.Element"}],"return":{"type":"Element","summary":"The shared Element object (or null if no matching element was found)"},"hide":false,"private":false,"name":"fly","summary":"<p>Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -\r\nthe dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}</p>\r\n<p>Use this to make one-time references to DOM elements which are not going to be accessed again either by\r\napplication code, or by Ext's classes. If accessing an element which will be processed regularly, then {@link Ext#get}\r\nwill be more appropriate to take advantage of the caching provided by the Ext.Element class.</p>\r\n"},{"parameters":[{"type":"Number","optional":true,"name":"defer","summary":"Milliseconds to defer the focus"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"focus","summary":"Tries to focus the element. Any exceptions are caught and ignored.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The id of the node, a DOM Node or an existing Element.\r\n@static\r\n@member Ext.Element"}],"return":{"type":"Element","summary":"The Element object (or null if no matching element was found)"},"hide":false,"private":false,"name":"get","summary":"Retrieves Ext.Element objects.\r\n<p><b>This method does not retrieve {@link Ext.Component Component}s.</b> This method\r\nretrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by\r\nits ID, use {@link Ext.ComponentMgr#get}.</p>\r\n<p>Uses simple caching to consistently return the same object. Automatically fixes if an\r\nobject was recreated with the same id via AJAX or DOM.</p>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The attribute name"},{"type":"String","optional":true,"name":"namespace","summary":"The namespace in which to look for the attribute"}],"return":{"type":"String","summary":"The attribute value"},"hide":false,"private":false,"name":"getAttribute","summary":"Returns the value of an attribute from the element's underlying DOM node.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"namespace","summary":"The namespace in which to look for the attribute"},{"type":"String","optional":false,"name":"name","summary":"The attribute name\r\n@deprecated"}],"return":{"type":"String","summary":"The attribute value"},"hide":false,"private":false,"name":"getAttributeNS","summary":"Returns the value of a namespaced attribute from the element's underlying DOM node.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"asNumber","summary":"true to parse the value as a number"}],"return":{"type":"String/Number","summary":""},"hide":false,"private":false,"name":"getValue","summary":"Returns the value of the \"value\" attribute\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"overFn","summary":"The function to call when the mouse enters the Element."},{"type":"Function","optional":false,"name":"outFn","summary":"The function to call when the mouse leaves the Element."},{"type":"Object","optional":true,"name":"scope","summary":"The scope (<tt>this</tt> reference) in which the functions are executed. Defaults to the Element's DOM element."},{"type":"Object","optional":true,"name":"options","summary":"Options for the listener. See {@link Ext.util.Observable#addListener the <tt>options</tt> parameter}."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"hover","summary":"Sets up event handlers to call the passed functions when the mouse is moved into and out of the Element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The simple selector to test"}],"return":{"type":"Boolean","summary":"True if this element matches the selector, else false"},"hide":false,"private":false,"name":"is","summary":"Returns true if this element matches the passed simple selector (e.g. div.some-class or span:first-child)\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isBorderBox","summary":"Tests various css rules/browsers to determine if this element uses a border box\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"options.","summary":"Either a sring containing the URL from which to load the HTML, or an {@link Ext.Ajax#request} options object specifying\r\nexactly how to request the HTML."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"load","summary":"<p>Updates the <a href=\"http://developer.mozilla.org/en/DOM/element.innerHTML\">innerHTML</a> of this Element\r\nfrom a specified URL. Note that this is subject to the <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">Same Origin Policy</a></p>\r\n<p>Updating innerHTML of an element will <b>not</b> execute embedded <tt>&lt;script></tt> elements. This is a browser restriction.</p>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The type of event to handle"},{"type":"Function","optional":false,"name":"fn","summary":"The handler function the event invokes"},{"type":"Object","optional":true,"name":"scope","summary":"The scope (this element) of the handler function"},{"type":"Object","optional":true,"name":"options","summary":"An object containing standard {@link #addListener} options\r\n@member Ext.Element"}],"return":null,"hide":false,"private":false,"name":"on","summary":"Appends an event handler (shorthand for {@link #addListener}).\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"remove","summary":"Removes this element from the DOM and deletes it from the cache\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"removeAllListeners","summary":"Removes all previous added listeners from this element\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"the type of event to remove"},{"type":"Function","optional":false,"name":"fn","summary":"the method the event invokes"},{"type":"Object","optional":true,"name":"scope","summary":"The scope (The <tt>this</tt> reference) of the handler function. Defaults\r\nto this Element."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"removeListener","summary":"Removes an event handler from this element.  The shorthand version {@link #un} is equivalent.\r\n<b>Note</b>: if a <i>scope</i> was explicitly specified when {@link #addListener adding} the\r\nlistener, the same scope must be specified here.\r\nExample:\r\n<pre><code>\r\nel.removeListener('click', this.handlerFn);\r\n// or\r\nel.un('click', this.handlerFn);\r\n</code></pre>\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The object with the attributes"},{"type":"Boolean","optional":true,"name":"useSet","summary":"false to override the default setAttribute to use expandos."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"set","summary":"Sets the passed attributes as attributes of this element (a style attribute can be a string, object or function)\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"the type of event to remove"},{"type":"Function","optional":false,"name":"fn","summary":"the method the event invokes"},{"type":"Object","optional":true,"name":"scope","summary":"The scope (The <tt>this</tt> reference) of the handler function. Defaults\r\nto this Element.\r\n@member Ext.Element"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"un","summary":"Removes an event handler from this element (see {@link #removeListener} for additional notes).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"html","summary":"The new HTML"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"update","summary":"Update the innerHTML of this element\r\n"},{"parameters":[{"type":"String","optional":true,"name":"value","summary":"The value to use for the left,right,top,bottom, defaults to '' (empty string). You could use 'auto'."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"clearPositioning","summary":"Clear positioning back to the default when the document was loaded\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"local","summary":"True to get the local css position instead of page coordinate"}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getBottom","summary":"Gets the bottom Y coordinate of the element (element Y position + element height)\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"local","summary":"True to get the local css position instead of page coordinate"}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getLeft","summary":"Gets the left X coordinate\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"element","summary":"The element to get the offsets from."}],"return":{"type":"Array","summary":"The XY page offsets (e.g. [100, -200])"},"hide":false,"private":false,"name":"getOffsetsTo","summary":"Returns the offsets of this element from the passed element. Both element must be part of the DOM tree and not have display:none to have page coordinates.\r\n"},{"parameters":[],"return":{"type":"Object","summary":""},"hide":false,"private":false,"name":"getPositioning","summary":"Gets an object with all CSS positioning properties. Useful along with setPostioning to get\r\nsnapshot before performing an update and then restoring the element.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"local","summary":"True to get the local css position instead of page coordinate"}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getRight","summary":"Gets the right X coordinate of the element (element X position + element width)\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"local","summary":"True to get the local css position instead of page coordinate"}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getTop","summary":"Gets the top Y coordinate\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The X position of the element"},"hide":false,"private":false,"name":"getX","summary":"Gets the current X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[],"return":{"type":"Array","summary":"The XY position of the element"},"hide":false,"private":false,"name":"getXY","summary":"Gets the current position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The Y position of the element"},"hide":false,"private":false,"name":"getY","summary":"Gets the current Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"x","summary":"X value for new position (coordinates are page-based)"},{"type":"Number","optional":false,"name":"y","summary":"Y value for new position (coordinates are page-based)"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation, or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"moveTo","summary":"Sets the position of the element in page coordinates, regardless of how the element is positioned.\r\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[{"type":"String","optional":true,"name":"pos","summary":"Positioning to use \"relative\", \"absolute\" or \"fixed\""},{"type":"Number","optional":true,"name":"zIndex","summary":"The zIndex to apply"},{"type":"Number","optional":true,"name":"x","summary":"Set the page X position"},{"type":"Number","optional":true,"name":"y","summary":"Set the page Y position"}],"return":null,"hide":false,"private":false,"name":"position","summary":"Initializes positioning on this element. If a desired position is not passed, it will make the\r\nthe element positioned relative IF it is not already positioned.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"bottom","summary":"The bottom CSS property value"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setBottom","summary":"Sets the element's CSS bottom style.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"left","summary":"The left CSS property value"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setLeft","summary":"Sets the element's left position directly using CSS style (instead of {@link #setX}).\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"x","summary":"X value for new position (coordinates are page-based)"},{"type":"Number","optional":false,"name":"y","summary":"Y value for new position (coordinates are page-based)"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation, or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setLocation","summary":"Sets the position of the element in page coordinates, regardless of how the element is positioned.\r\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"posCfg","summary":""}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setPositioning","summary":"Set positioning with an object returned by getPositioning().\r\n"},{"parameters":[{"type":"String","optional":false,"name":"right","summary":"The right CSS property value"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setRight","summary":"Sets the element's CSS right style.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"top","summary":"The top CSS property value"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setTop","summary":"Sets the element's top position directly using CSS style (instead of {@link #setY}).\r\n"},{"parameters":[{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation, or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setX","summary":"Sets the X position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"pos","summary":"Contains X & Y [x, y] values for new position (coordinates are page-based)"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation, or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setXY","summary":"Sets the position of the element in page coordinates, regardless of how the element is positioned.\r\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation, or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setY","summary":"Sets the Y position of the element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).\r\n"},{"parameters":[{"type":"Number/Array","optional":false,"name":"x","summary":"The page x or an array containing [x, y]"},{"type":"Number","optional":true,"name":"y","summary":"The page y, required if x is not an array"}],"return":{"type":"Object} An object with left and top properties. e.g. {left: (value), top: (value)","summary":""},"hide":false,"private":false,"name":"translatePoints","summary":"Translates the passed page coordinates into left/top css values for this element\r\n"},{"parameters":[],"return":{"type":"Object} An object containing the scroll position in the format {left: (scrollLeft), top: (scrollTop)","summary":""},"hide":false,"private":false,"name":"getScroll","summary":"Returns the current scroll position of the element.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isScrollable","summary":"Returns true if this element is scrollable.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"side","summary":"Either \"left\" for scrollLeft values or \"top\" for scrollTop values."},{"type":"Number","optional":false,"name":"value","summary":"The new scroll value."}],"return":{"type":"Element","summary":"this"},"hide":false,"private":false,"name":"scrollTo","summary":"Scrolls this element the specified scroll point. It does NOT do bounds checking so if you scroll to a weird value it will try to do it. For auto bounds checking, use scroll().\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"className","summary":"The CSS class to add, or an array of classes"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"addClass","summary":"Adds one or more CSS classes to the element. Duplicate classes are automatically filtered out.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"clearOpacity","summary":"Clears any opacity settings from this element. Required in some cases for IE.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"clip","summary":"Store the current overflow setting and clip overflow on the element - use <tt>{@link #unclip}</tt> to remove\r\n"},{"parameters":[{"type":"String","optional":false,"name":"side","summary":"Can be t, l, r, b or any combination of those to add multiple values. For example,\r\npassing <tt>'lr'</tt> would get the border <b><u>l</u></b>eft width + the border <b><u>r</u></b>ight width."}],"return":{"type":"Number","summary":"The width of the sides passed added together"},"hide":false,"private":false,"name":"getBorderWidth","summary":"Gets the width of the border(s) for the specified side(s)\r\n"},{"parameters":[{"type":"String","optional":false,"name":"attr","summary":"The css attribute"},{"type":"String","optional":false,"name":"defaultValue","summary":"The default value to use when a valid color isn't found"},{"type":"String","optional":true,"name":"prefix","summary":"defaults to #. Use an empty string when working with\r\ncolor anims."}],"return":null,"hide":false,"private":false,"name":"getColor","summary":"Return the CSS color for the specified CSS attribute. rgb, 3 digit (like #fff) and valid values\r\nare convert to standard 6 digit hex color.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"contentHeight","summary":"true to get the height minus borders and padding"}],"return":{"type":"Number","summary":"The element's height"},"hide":false,"private":false,"name":"getHeight","summary":"Returns the offset height of the element\r\n"},{"parameters":[{"type":"String","optional":false,"name":"side","summary":"Can be t, l, r, b or any combination of those to add multiple values. For example,\r\npassing <tt>'lr'</tt> would get the padding <b><u>l</u></b>eft + the padding <b><u>r</u></b>ight."}],"return":{"type":"Number","summary":"The padding of the sides passed added together"},"hide":false,"private":false,"name":"getPadding","summary":"Gets the width of the padding(s) for the specified side(s)\r\n"},{"parameters":[{"type":"String","optional":false,"name":"property","summary":"The style property whose value is returned."}],"return":{"type":"String","summary":"The current value of the style property for this element."},"hide":false,"private":false,"name":"getStyle","summary":"Normalizes currentStyle and computedStyle.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"contentWidth","summary":"true to get the width minus borders and padding"}],"return":{"type":"Number","summary":"The element's width"},"hide":false,"private":false,"name":"getWidth","summary":"Returns the offset width of the element\r\n"},{"parameters":[{"type":"String","optional":false,"name":"className","summary":"The CSS class to check for"}],"return":{"type":"Boolean","summary":"True if the class exists, else false"},"hide":false,"private":false,"name":"hasClass","summary":"Checks if the specified CSS class exists on this element's DOM node.\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"className","summary":"The CSS class to add, or an array of classes"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"radioClass","summary":"Adds one or more CSS classes to this element and removes the same class(es) from all siblings.\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"className","summary":"The CSS class to remove, or an array of classes"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"removeClass","summary":"Removes one or more CSS classes from the element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"oldClassName","summary":"The CSS class to replace"},{"type":"String","optional":false,"name":"newClassName","summary":"The replacement CSS class"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"replaceClass","summary":"Replaces a CSS class on the element with another.  If the old name does not exist, the new name will simply be added.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"height","summary":"The new height. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels.)</li>\r\n<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>\r\n</ul></div>"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setHeight","summary":"Set the height of this Element.\r\n<pre><code>\r\n// change the height to 200px and animate with default configuration\r\nExt.fly('elementId').setHeight(200, true);\r\n\r\n// change the height to 150px and animate with a custom configuration\r\nExt.fly('elId').setHeight(150, {\r\n    duration : .5, // animation will have a duration of .5 seconds\r\n    // will change the content to \"finished\"\r\n    callback: function () { this.{@link #update}(\"finished\"); } \r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Float","optional":false,"name":"opacity","summary":"The new opacity. 0 = transparent, .5 = 50% visibile, 1 = fully visible, etc"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"a standard Element animation config object or <tt>true</tt> for\r\nthe default animation (<tt>{duration: .35, easing: 'easeIn'}</tt>)"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setOpacity","summary":"Set the opacity of the element\r\n"},{"parameters":[{"type":"String/Object","optional":false,"name":"property","summary":"The style property to be set, or an object of multiple styles."},{"type":"String","optional":true,"name":"value","summary":"The value to apply to the given property, or null if an object was passed."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setStyle","summary":"Wrapper for setting style properties, also takes single object parameter of multiple styles.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"width","summary":"The new width. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels).</li>\r\n<li>A String used to set the CSS width style. Animation may <b>not</b> be used.\r\n</ul></div>"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setWidth","summary":"Set the width of this Element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"className","summary":"The CSS class to toggle"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"toggleClass","summary":"Toggles the specified CSS class on this element (removes it if it already exists, otherwise adds it).\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"unclip","summary":"Return clipping (overflow) to original clipping before <tt>{@link #clip}</tt> was called\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The CSS selector"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return the DOM node instead of Ext.Element (defaults to false)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The child Ext.Element (or DOM node if returnDom = true)"},"hide":false,"private":false,"name":"child","summary":"Selects a single child at any depth below this element based on the passed CSS selector (the selector should not contain an id).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The CSS selector"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return the DOM node instead of Ext.Element (defaults to false)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The child Ext.Element (or DOM node if returnDom = true)"},"hide":false,"private":false,"name":"down","summary":"Selects a single *direct* child based on the passed CSS selector (the selector should not contain an id).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The simple selector to test"},{"type":"Number/Mixed","optional":true,"name":"maxDepth","summary":"The max depth to search as a number or element (defaults to 50 || document.body)"},{"type":"Boolean","optional":true,"name":"returnEl","summary":"True to return a Ext.Element object instead of DOM node"}],"return":{"type":"HTMLElement","summary":"The matching DOM node (or null if no match was found)"},"hide":false,"private":false,"name":"findParent","summary":"Looks at this node and then at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The simple selector to test"},{"type":"Number/Mixed","optional":true,"name":"maxDepth","summary":"The max depth to\r\nsearch as a number or element (defaults to 10 || document.body)"},{"type":"Boolean","optional":true,"name":"returnEl","summary":"True to return a Ext.Element object instead of DOM node"}],"return":{"type":"HTMLElement","summary":"The matching DOM node (or null if no match was found)"},"hide":false,"private":false,"name":"findParentNode","summary":"Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)\r\n"},{"parameters":[{"type":"String","optional":true,"name":"selector","summary":"Find the next sibling that matches the passed simple selector"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return a raw dom node instead of an Ext.Element"}],"return":{"type":"Ext.Element/HTMLElement","summary":"The first child or null"},"hide":false,"private":false,"name":"first","summary":"Gets the first child, skipping text nodes\r\n"},{"parameters":[{"type":"String","optional":true,"name":"selector","summary":"Find the previous sibling that matches the passed simple selector"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return a raw dom node instead of an Ext.Element"}],"return":{"type":"Ext.Element/HTMLElement","summary":"The last child or null"},"hide":false,"private":false,"name":"last","summary":"Gets the last child, skipping text nodes\r\n"},{"parameters":[{"type":"String","optional":true,"name":"selector","summary":"Find the next sibling that matches the passed simple selector"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return a raw dom node instead of an Ext.Element"}],"return":{"type":"Ext.Element/HTMLElement","summary":"The next sibling or null"},"hide":false,"private":false,"name":"next","summary":"Gets the next sibling, skipping text nodes\r\n"},{"parameters":[{"type":"String","optional":true,"name":"selector","summary":"Find a parent node that matches the passed simple selector"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return a raw dom node instead of an Ext.Element"}],"return":{"type":"Ext.Element/HTMLElement","summary":"The parent node or null"},"hide":false,"private":false,"name":"parent","summary":"Gets the parent node for this element, optionally chaining up trying to match a selector\r\n"},{"parameters":[{"type":"String","optional":true,"name":"selector","summary":"Find the previous sibling that matches the passed simple selector"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return a raw dom node instead of an Ext.Element"}],"return":{"type":"Ext.Element/HTMLElement","summary":"The previous sibling or null"},"hide":false,"private":false,"name":"prev","summary":"Gets the previous sibling, skipping text nodes\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The CSS selector"}],"return":{"type":"Array","summary":"An array of the matched nodes"},"hide":false,"private":false,"name":"query","summary":"Selects child nodes based on the passed CSS selector (the selector should not contain an id).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The CSS selector"},{"type":"Boolean","optional":true,"name":"unique","summary":"True to create a unique Ext.Element for each child (defaults to false, which creates a single shared flyweight object)"}],"return":{"type":"CompositeElement/CompositeElementLite","summary":"The composite element"},"hide":false,"private":false,"name":"select","summary":"Creates a {@link Ext.CompositeElement} for child nodes based on the passed CSS selector (the selector should not contain an id).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"selector","summary":"The simple selector to test"},{"type":"Number/Mixed","optional":true,"name":"maxDepth","summary":"The max depth to\r\nsearch as a number or element (defaults to 10 || document.body)"}],"return":{"type":"Ext.Element","summary":"The matching DOM node (or null if no match was found)"},"hide":false,"private":false,"name":"up","summary":"Walks up the dom looking for a parent node that matches the passed simple selector (e.g. div.some-class or span:first-child).\r\nThis is a shortcut for findParentNode() that always returns an Ext.Element.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"forceReclean","summary":"By default the element\r\nkeeps track if it has been cleaned already so\r\nyou can call this over and over. However, if you update the element and\r\nneed to force a reclean, you can pass true."}],"return":null,"hide":false,"private":false,"name":"clean","summary":"Removes worthless text nodes\r\n"},{"parameters":[{"type":"String/Object","optional":false,"name":"config","summary":"The class name of the proxy element or a DomHelper config object"},{"type":"String/HTMLElement","optional":true,"name":"renderTo","summary":"The element or element id to render the proxy to (defaults to document.body)"},{"type":"Boolean","optional":true,"name":"matchBox","summary":"True to align and size the proxy to this element now (defaults to false)"}],"return":{"type":"Ext.Element","summary":"The new proxy element"},"hide":false,"private":false,"name":"createProxy","summary":"Creates a proxy element of this element\r\n"},{"parameters":[],"return":{"type":"Ext.Updater","summary":"The Updater"},"hide":false,"private":false,"name":"getUpdater","summary":"Gets this element's {@link Ext.Updater Updater}\r\n"},{"parameters":[{"type":"String","optional":false,"name":"eventName","summary":"The type of event to relay"},{"type":"Object","optional":false,"name":"object","summary":"Any object that extends {@link Ext.util.Observable} that will provide the context\r\nfor firing the relayed event"}],"return":null,"hide":false,"private":false,"name":"relayEvent","summary":"Create an event handler on this element such that when the event fires and is handled by this element,\r\nit will be relayed to another object (i.e., fired again as if it originated from that object instead).\r\n"},{"parameters":[{"type":"String/Array","optional":false,"name":"eventName","summary":"an event / array of events to stop from bubbling"},{"type":"Boolean","optional":true,"name":"preventDefault","summary":"true to prevent the default action too"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"swallowEvent","summary":"Stops the specified event(s) from bubbling and optionally prevents the default action\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"element","summary":"The element to align to."},{"type":"String","optional":false,"name":"position","summary":"The position to align to."},{"type":"Array","optional":true,"name":"offsets","summary":"Offset the positioning by [x, y]"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"alignTo","summary":"Aligns this element with another element relative to the specified anchor points. If the other element is the\r\ndocument it aligns it to the viewport.\r\nThe position parameter is optional, and can be specified in any one of the following formats:\r\n<ul>\r\n<li><b>Blank</b>: Defaults to aligning the element's top-left corner to the target's bottom-left corner (\"tl-bl\").</li>\r\n<li><b>One anchor (deprecated)</b>: The passed anchor position is used as the target element's anchor point.\r\nThe element being aligned will position its top-left corner (tl) to that point.  <i>This method has been\r\ndeprecated in favor of the newer two anchor syntax below</i>.</li>\r\n<li><b>Two anchors</b>: If two values from the table below are passed separated by a dash, the first value is used as the\r\nelement's anchor point, and the second value is used as the target's anchor point.</li>\r\n</ul>\r\nIn addition to the anchor points, the position parameter also supports the \"?\" character.  If \"?\" is passed at the end of\r\nthe position string, the element will attempt to align as specified, but the position will be adjusted to constrain to\r\nthe viewport if necessary.  Note that the element being aligned might be swapped to align to a different position than\r\nthat specified in order to enforce the viewport constraints.\r\nFollowing are all of the supported anchor positions:\r\n<pre>\r\nValue  Description\r\n-----  -----------------------------\r\ntl     The top left corner (default)\r\nt      The center of the top edge\r\ntr     The top right corner\r\nl      The center of the left edge\r\nc      In the center of the element\r\nr      The center of the right edge\r\nbl     The bottom left corner\r\nb      The center of the bottom edge\r\nbr     The bottom right corner\r\n</pre>\r\nExample Usage:\r\n<pre><code>\r\n// align el to other-el using the default positioning (\"tl-bl\", non-constrained)\r\nel.alignTo(\"other-el\");\r\n\r\n// align the top left corner of el with the top right corner of other-el (constrained to viewport)\r\nel.alignTo(\"other-el\", \"tr?\");\r\n\r\n// align the bottom right corner of el with the center left edge of other-el\r\nel.alignTo(\"other-el\", \"br-l?\");\r\n\r\n// align the center of el with the bottom left corner of other-el and\r\n// adjust the x position by -6 pixels (and the y position by 0)\r\nel.alignTo(\"other-el\", \"c-bl\", [-6, 0]);\r\n</code></pre>\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"element","summary":"The element to align to."},{"type":"String","optional":false,"name":"position","summary":"The position to align to."},{"type":"Array","optional":true,"name":"offsets","summary":"Offset the positioning by [x, y]"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"True for the default animation or a standard Element animation config object"},{"type":"Boolean/Number","optional":true,"name":"monitorScroll","summary":"True to monitor body scroll and reposition. If this parameter\r\nis a number, it is used as the buffer delay (defaults to 50ms)."},{"type":"Function","optional":false,"name":"callback","summary":"The function to call after the animation finishes"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"anchorTo","summary":"Anchors an element to another element and realigns it when the window is resized.\r\n"},{"parameters":[{"type":"Mixed","optional":true,"name":"centerIn","summary":"The element in which to center the element."}],"return":null,"hide":false,"private":false,"name":"center","summary":"Centers the Element in either the viewport, or another Element.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"element","summary":"The element to align to."},{"type":"String","optional":false,"name":"position","summary":"The position to align to."},{"type":"Array","optional":true,"name":"offsets","summary":"Offset the positioning by [x, y]"}],"return":{"type":"Array","summary":"[x, y]"},"hide":false,"private":false,"name":"getAlignToXY","summary":"Gets the x,y coordinates to align this element with another element. See {@link #alignTo} for more info on the\r\nsupported position values.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"anchor","summary":"The specified anchor position (defaults to \"c\").  See {@link #alignTo}\r\nfor details on supported anchor positions."},{"type":"Boolean","optional":true,"name":"local","summary":"True to get the local (element top/left-relative) anchor position instead\r\nof page coordinates"},{"type":"Object","optional":true,"name":"size","summary":"An object containing the size to use for calculating anchor position\r\n{width: (target width), height: (target height)} (defaults to the element's current size)"}],"return":{"type":"Array","summary":"[x, y] An array containing the element's x and y coordinates"},"hide":false,"private":false,"name":"getAnchorXY","summary":"Gets the x,y coordinates specified by the anchor position on the element.\r\n"},{"parameters":[],"return":{"type":"Array","summary":"The x, y values [x, y]"},"hide":false,"private":false,"name":"getCenterXY","summary":"Calculates the x, y to center this element on the screen\r\n"},{"parameters":[{"type":"String","optional":false,"name":"group","summary":"The group the DD object is member of"},{"type":"Object","optional":false,"name":"config","summary":"The DD config object"},{"type":"Object","optional":false,"name":"overrides","summary":"An object containing methods to override/implement on the DD object"}],"return":{"type":"Ext.dd.DD","summary":"The DD object"},"hide":false,"private":false,"name":"initDD","summary":"Initializes a {@link Ext.dd.DD} drag drop object for this element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"group","summary":"The group the DDProxy object is member of"},{"type":"Object","optional":false,"name":"config","summary":"The DDProxy config object"},{"type":"Object","optional":false,"name":"overrides","summary":"An object containing methods to override/implement on the DDProxy object"}],"return":{"type":"Ext.dd.DDProxy","summary":"The DDProxy object"},"hide":false,"private":false,"name":"initDDProxy","summary":"Initializes a {@link Ext.dd.DDProxy} object for this element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"group","summary":"The group the DDTarget object is member of"},{"type":"Object","optional":false,"name":"config","summary":"The DDTarget config object"},{"type":"Object","optional":false,"name":"overrides","summary":"An object containing methods to override/implement on the DDTarget object"}],"return":{"type":"Ext.dd.DDTarget","summary":"The DDTarget object"},"hide":false,"private":false,"name":"initDDTarget","summary":"Initializes a {@link Ext.dd.DDTarget} object for this element.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The new shim element"},"hide":false,"private":false,"name":"createShim","summary":"Creates an iframe shim for this element to keep selects and other windowed objects from\r\nshowing through.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"display","summary":"What to set display to when visible"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"enableDisplayMode","summary":"Convenience method for setVisibilityMode(Element.DISPLAY)\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isDisplayed","summary":"Returns true if display is not \"none\"\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isMasked","summary":"Returns true if this element is masked\r\n"},{"parameters":[{"type":"String","optional":true,"name":"msg","summary":"A message to display in the mask"},{"type":"String","optional":true,"name":"msgCls","summary":"A css class to apply to the msg element"}],"return":{"type":"Element","summary":"The mask element"},"hide":false,"private":false,"name":"mask","summary":"Puts a mask over this element to disable user interaction. Requires core.css.\r\nThis method can only be applied to elements which accept child nodes.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"unmask","summary":"Removes a previously applied mask.\r\n"},{"parameters":[{"type":"Mixed/Object/Array","optional":false,"name":"el","summary":"The id, element to insert or a DomHelper config to create and insert *or* an array of any of those."},{"type":"String","optional":true,"name":"where","summary":"'before' or 'after' defaults to before"},{"type":"Boolean","optional":true,"name":"returnDom","summary":"True to return the raw DOM element instead of Ext.Element"}],"return":{"type":"Ext.Element","summary":"the inserted Element"},"hide":false,"private":false,"name":"insertSibling","summary":"Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element\r\n"},{"parameters":[{"type":"Number/Array/Object/String","optional":false,"name":"key","summary":"Either a string with the keys to listen for, the numeric key code, array of key codes or an object with the following options:\r\n{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}"},{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function"}],"return":{"type":"Ext.KeyMap","summary":"The KeyMap created"},"hide":false,"private":false,"name":"addKeyListener","summary":"Convenience method for constructing a KeyMap\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The KeyMap config. See {@link Ext.KeyMap} for more details"}],"return":{"type":"Ext.KeyMap","summary":"The KeyMap created"},"hide":false,"private":false,"name":"addKeyMap","summary":"Creates a KeyMap for this element\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"animate","summary":"Animate the transition (defaults to false)"},{"type":"Float","optional":true,"name":"duration","summary":"Length of the animation in seconds (defaults to .35)"},{"type":"Function","optional":true,"name":"onComplete","summary":"Function to call when animation completes"},{"type":"String","optional":true,"name":"easing","summary":"Easing method to use (defaults to easeOut)"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"autoHeight","summary":"Measures the element's content height and updates height to match. Note: this function uses setTimeout so\r\nthe new height may not be available immediately.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"contentBox","summary":"If true a box for the content of the element is returned."},{"type":"Boolean","optional":true,"name":"local","summary":"If true the element's left and top are returned instead of page x/y."}],"return":{"type":"Object} box An object in the format {x, y, width, height","summary":""},"hide":false,"private":false,"name":"getBox","summary":"Return a box {x, y, width, height} that can be used to set another elements\r\nsize/location to match this element.\r\n"},{"parameters":[],"return":{"type":"Region","summary":"A Ext.lib.Region containing \"top, left, bottom, right\" member data."},"hide":false,"private":false,"name":"getRegion","summary":"Returns the region of the given element.\r\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"direction","summary":"Possible values are: \"l\" (or \"left\"), \"r\" (or \"right\"), \"t\" (or \"top\", or \"up\"), \"b\" (or \"bottom\", or \"down\")."},{"type":"Number","optional":false,"name":"distance","summary":"How far to move the element in pixels"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"move","summary":"Move this element relative to its current position.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"x","summary":"X value for new position (coordinates are page-based)"},{"type":"Number","optional":false,"name":"y","summary":"Y value for new position (coordinates are page-based)"},{"type":"Mixed","optional":false,"name":"width","summary":"The new width. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels)</li>\r\n<li>A String used to set the CSS width style. Animation may <b>not</b> be used.\r\n</ul></div>"},{"type":"Mixed","optional":false,"name":"height","summary":"The new height. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels)</li>\r\n<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>\r\n</ul></div>"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setBounds","summary":"Sets the element's position and size in one shot. If animation is true then width, height, x and y will be animated concurrently.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"box","summary":"The box to fill {x, y, width, height}"},{"type":"Boolean","optional":true,"name":"adjust","summary":"Whether to adjust for box-model issues automatically"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setBox","summary":"Sets the element's box. Use getBox() on another element to get a box obj. If animate is true then width, height, x and y will be animated concurrently.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"left","summary":"The left CSS property value"},{"type":"String","optional":false,"name":"top","summary":"The top CSS property value"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setLeftTop","summary":"Quick set left and top adding default units\r\n"},{"parameters":[{"type":"Ext.lib.Region","optional":false,"name":"region","summary":"The region to fill"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setRegion","summary":"Sets the element's position and size the specified region. If animation is true then width, height, x and y will be animated concurrently.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"direction","summary":"Possible values are: \"l\" (or \"left\"), \"r\" (or \"right\"), \"t\" (or \"top\", or \"up\"), \"b\" (or \"bottom\", or \"down\")."},{"type":"Number","optional":false,"name":"distance","summary":"How far to scroll the element in pixels"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object\r\nwas scrolled as far as it could go."}],"return":{"type":"Boolean","summary":"Returns true if a scroll was triggered or false if the element"},"hide":false,"private":false,"name":"scroll","summary":"Scrolls this element the specified direction. Does bounds checking to make sure the scroll is\r\nwithin this element's scrollable range.\r\n"},{"parameters":[{"type":"Mixed","optional":true,"name":"container","summary":"The container element to scroll (defaults to document.body).  Should be a\r\nstring (id), dom node, or Ext.Element."},{"type":"Boolean","optional":true,"name":"hscroll","summary":"False to disable horizontal scroll (defaults to true)"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"scrollIntoView","summary":"Scrolls this element into view within the passed container.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"className","summary":""}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"addClassOnClick","summary":"Sets up event handlers to add and remove a css class when the mouse is down and then up on this element (a click effect)\r\n"},{"parameters":[{"type":"String","optional":false,"name":"className","summary":""}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"addClassOnFocus","summary":"Sets up event handlers to add and remove a css class when this element has the focus\r\n"},{"parameters":[{"type":"String","optional":false,"name":"className","summary":""}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"addClassOnOver","summary":"Sets up event handlers to add and remove a css class when the mouse is over this element\r\n"},{"parameters":[{"type":"String/Object/Function","optional":false,"name":"styles","summary":"A style specification string, e.g. \"width:100px\", or object in the form {width:\"100px\"}, or\r\na function which returns such a specification."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"applyStyles","summary":"More flexible version of {@link #setStyle} for setting style properties.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"class","summary":"A base CSS class to apply to the containing wrapper element\r\n(defaults to <tt>'x-box'</tt>). Note that there are a number of CSS rules that are dependent on\r\nthis name to make the overall effect work, so if you supply an alternate base class, make sure you\r\nalso supply all of the necessary rules."}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"boxWrap","summary":"<p>Wraps the specified element with a special 9 element markup/CSS block that renders by default as\r\na gray container with a gradient background, rounded corners and a 4-way shadow.</p>\r\n<p>This special markup is used throughout Ext when box wrapping elements ({@link Ext.Button},\r\n{@link Ext.Panel} when <tt>{@link Ext.Panel#frame frame=true}</tt>, {@link Ext.Window}).  The markup\r\nis of this form:</p>\r\n<pre><code>\r\nExt.Element.boxMarkup =\r\n    &#39;&lt;div class=\"{0}-tl\">&lt;div class=\"{0}-tr\">&lt;div class=\"{0}-tc\">&lt;/div>&lt;/div>&lt;/div>\r\n     &lt;div class=\"{0}-ml\">&lt;div class=\"{0}-mr\">&lt;div class=\"{0}-mc\">&lt;/div>&lt;/div>&lt;/div>\r\n     &lt;div class=\"{0}-bl\">&lt;div class=\"{0}-br\">&lt;div class=\"{0}-bc\">&lt;/div>&lt;/div>&lt;/div>&#39;;\r\n</code></pre>\r\n<p>Example usage:</p>\r\n<pre><code>\r\n// Basic box wrap\r\nExt.get(\"foo\").boxWrap();\r\n\r\n// You can also add a custom class and use CSS inheritance rules to customize the box look.\r\n// 'x-box-blue' is a built-in alternative -- look at the related CSS definitions as an example\r\n// for how to create a custom box wrap style.\r\nExt.get(\"foo\").boxWrap().addClass(\"x-box-blue\");\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getComputedHeight","summary":"Returns either the offsetHeight or the height of this element based on CSS height adjusted by padding or borders\r\nwhen needed to simulate offsetHeight when offsets aren't available. This may not work on display:none elements\r\nif a height has not been set using CSS.\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getComputedWidth","summary":"Returns either the offsetWidth or the width of this element based on CSS width adjusted by padding or borders\r\nwhen needed to simulate offsetWidth when offsets aren't available. This may not work on display:none elements\r\nif a width has not been set using CSS.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"sides","summary":""}],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getFrameWidth","summary":"Returns the sum width of the padding and borders for the passed \"sides\". See getBorderWidth()\r\n\t     for more information about the sides.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"sides","summary":"Any combination of l, r, t, b to get the sum of those sides"}],"return":{"type":"Object/Number","summary":""},"hide":false,"private":false,"name":"getMargins","summary":"Returns an object with properties top, left, right and bottom representing the margins of this element unless sides is passed,\r\nthen it returns the calculated width of the sides (see getPadding)\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"contentSize","summary":"true to get the width/size minus borders and padding"}],"return":{"type":"Object} An object containing the element's size {width: (element width), height: (element height)","summary":""},"hide":false,"private":false,"name":"getSize","summary":"Returns the size of the element.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"style1","summary":"A style name"},{"type":"String","optional":false,"name":"style2","summary":"A style name"},{"type":"String","optional":false,"name":"etc.","summary":""}],"return":{"type":"Object","summary":"The style object"},"hide":false,"private":false,"name":"getStyles","summary":"Returns an object with properties matching the styles requested.\r\nFor example, el.getStyles('color', 'font-size', 'width') might return\r\n{'color': '#FFFFFF', 'font-size': '13px', 'width': '100px'}.\r\n"},{"parameters":[],"return":{"type":"Object} An object containing the viewport's size {width: (viewport width), height: (viewport height)","summary":""},"hide":false,"private":false,"name":"getViewSize","summary":"Returns the width and height of the viewport.\r\n<pre><code>\r\n        var vpSize = Ext.getBody().getViewSize();\r\n\r\n        // all Windows created afterwards will have a default value of 90% height and 95% width\r\n        Ext.Window.override({\r\n            width: vpSize.width * 0.9,\r\n            height: vpSize.height * 0.95\r\n        });\r\n        // To handle window resizing you would have to hook onto onWindowResize.\r\n        </code></pre>\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"repaint","summary":"Forces the browser to repaint this element\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"width","summary":"The new width. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new width in this Element's {@link #defaultUnit}s (by default, pixels).</li>\r\n<li>A String used to set the CSS width style. Animation may <b>not</b> be used.\r\n<li>A size object in the format <code>{width: widthValue, height: heightValue}</code>.</li>\r\n</ul></div>"},{"type":"Mixed","optional":false,"name":"height","summary":"The new height. This may be one of:<div class=\"mdetail-params\"><ul>\r\n<li>A Number specifying the new height in this Element's {@link #defaultUnit}s (by default, pixels).</li>\r\n<li>A String used to set the CSS height style. Animation may <b>not</b> be used.</li>\r\n</ul></div>"},{"type":"Boolean/Object","optional":true,"name":"animate","summary":"true for the default animation or a standard Element animation config object"}],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"setSize","summary":"Set the size of this Element. If animation is true, both width and height will be animated concurrently.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"this"},"hide":false,"private":false,"name":"unselectable","summary":"Disables text selection for this element (normalized across browsers)\r\n"}],"events":[{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"abort","summary":"Fires when an object/image is stopped from loading before completely loaded."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"blur","summary":"Fires when an element loses focus either via the pointing device or by tabbing navigation."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"change","summary":"Fires when a control loses the input focus and its value has been modified since gaining focus."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"click","summary":"Fires when a mouse click is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"contextmenu","summary":"Fires when a right click is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"dblclick","summary":"Fires when a mouse double click is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMActivate","summary":"Where supported. Fires when an element is activated, for instance, through a mouse click or a keypress."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMAttrModified","summary":"Where supported. Fires when an attribute has been modified."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMCharacterDataModified","summary":"Where supported. Fires when the character data has been modified."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMFocusIn","summary":"Where supported. Similar to HTML focus event, but can be applied to any focusable element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMFocusOut","summary":"Where supported. Similar to HTML blur event, but can be applied to any focusable element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMNodeInserted","summary":"Where supported. Fires when a node has been added as a child of another node."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMNodeInsertedIntoDocument","summary":"Where supported. Fires when a node is being inserted into a document."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMNodeRemoved","summary":"Where supported. Fires when a descendant node of the element is removed."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMNodeRemovedFromDocument","summary":"Where supported. Fires when a node is being removed from a document."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"DOMSubtreeModified","summary":"Where supported. Fires when the subtree is modified."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"error","summary":"Fires when an object/image/frame cannot be loaded properly."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"focus","summary":"Fires when an element receives focus either via the pointing device or by tab navigation."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"keydown","summary":"Fires when a keydown is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"keypress","summary":"Fires when a keypress is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"keyup","summary":"Fires when a keyup is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"load","summary":"Fires when the user agent finishes loading all content within the element. Only supported by window, frames, objects and images."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"mousedown","summary":"Fires when a mousedown is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"mouseenter","summary":"Fires when the mouse enters the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"mouseleave","summary":"Fires when the mouse leaves the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"mousemove","summary":"Fires when a mousemove is detected with the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"mouseout","summary":"Fires when a mouseout is detected with the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"mouseover","summary":"Fires when a mouseover is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"mouseup","summary":"Fires when a mouseup is detected within the element."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"reset","summary":"Fires when a form is reset."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"resize","summary":"Fires when a document view is resized."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"scroll","summary":"Fires when a document view is scrolled."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"select","summary":"Fires when a user selects some text in a text field, including input and textarea."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"submit","summary":"Fires when a form is submitted."},{"parameters":[{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The {@link Ext.EventObject} encapsulating the DOM event."},{"type":"HtmlElement","optional":false,"name":"t","summary":"The target of the event."},{"type":"Object","optional":false,"name":"o","summary":"The options configuration passed to the {@link #addListener} call."}],"name":"unload","summary":"Fires when the user agent removes all content from a window or frame. For elements, it fires when the target element or any of its content has been removed."}]},{"name":"Error","fullName":"Ext.Error","summary":"<p>A base error class. Future implementations are intended to provide more\r\nrobust error handling throughout the framework (<b>in the debug build only</b>)\r\nto check for common errors and problems. The messages issued by this class\r\nwill aid error checking. Error checks will be automatically removed in the\r\nproduction build so that performance is not negatively impacted.</p>\r\n<p>Some sample messages currently implemented:</p><pre>\r\n\"DataProxy attempted to execute an API-action but found an undefined\r\nurl / function. Please review your Proxy url/api-configuration.\"\r\n</pre><pre>\r\n\"Could not locate your \"root\" property in your server response.\r\nPlease review your JsonReader config to ensure the config-property\r\n\"root\" matches the property your server-response.  See the JsonReader\r\ndocs for additional assistance.\"\r\n</pre>\r\n<p>An example of the code used for generating error messages:</p><pre><code>\r\ntry {\r\n    generateError({\r\n        foo: 'bar'\r\n    });\r\n}\r\ncatch (e) {\r\n    console.error(e);\r\n}\r\nfunction generateError(data) {\r\n    throw new Ext.Error('foo-error', data);\r\n}\r\n</code></pre>\r\n","package":"Ext","definedIn":"core\\Error.js","xtype":null,"extends":"Error","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String","optional":false,"name":"message","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":null},"subclasses":"Ext.data.Api.Error,Ext.data.DataProxy.Error,Ext.data.DataReader.Error,Ext.data.Store.Error","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"getMessage","summary":"getMessage\r\n"},{"parameters":[],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"getName","summary":"getName\r\n"},{"parameters":[],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"toJson","summary":"toJson\r\n"}],"events":[]},{"name":"EventManager","fullName":"Ext.EventManager","summary":"Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides\r\nseveral useful events directly.\r\nSee {@link Ext.EventObject} for more details on normalized event objects.\r\n\r\n","package":"Ext","definedIn":"core\\core\\EventManager.js,core\\EventManager-more.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The html element or id to assign the event handler to"},{"type":"String","optional":false,"name":"eventName","summary":"The type of event to listen for"},{"type":"Function","optional":false,"name":"handler","summary":"The handler function the event invokes This function is passed\r\nthe following parameters:<ul>\r\n<li>evt : EventObject<div class=\"sub-desc\">The {@link Ext.EventObject EventObject} describing the event.</div></li>\r\n<li>t : Element<div class=\"sub-desc\">The {@link Ext.Element Element} which was the target of the event.\r\nNote that this may be filtered by using the <tt>delegate</tt> option.</div></li>\r\n<li>o : Object<div class=\"sub-desc\">The options object from the addListener call.</div></li>\r\n</ul>"},{"type":"Object","optional":true,"name":"scope","summary":"The scope (<b><code>this</code></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>."},{"type":"Object","optional":true,"name":"options","summary":"An object containing handler configuration properties.\r\nThis may contain any of the following properties:<ul>\r\n<li>scope : Object<div class=\"sub-desc\">The scope (<b><code>this</code></b> reference) in which the handler function is executed. <b>Defaults to the Element</b>.</div></li>\r\n<li>delegate : String<div class=\"sub-desc\">A simple selector to filter the target or look for a descendant of the target</div></li>\r\n<li>stopEvent : Boolean<div class=\"sub-desc\">True to stop the event. That is stop propagation, and prevent the default action.</div></li>\r\n<li>preventDefault : Boolean<div class=\"sub-desc\">True to prevent the default action</div></li>\r\n<li>stopPropagation : Boolean<div class=\"sub-desc\">True to prevent event propagation</div></li>\r\n<li>normalized : Boolean<div class=\"sub-desc\">False to pass a browser event to the handler function instead of an Ext.EventObject</div></li>\r\n<li>delay : Number<div class=\"sub-desc\">The number of milliseconds to delay the invocation of the handler after te event fires.</div></li>\r\n<li>single : Boolean<div class=\"sub-desc\">True to add a handler to handle just the next firing of the event, and then remove itself.</div></li>\r\n<li>buffer : Number<div class=\"sub-desc\">Causes the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed\r\nby the specified number of milliseconds. If the event fires again within that time, the original\r\nhandler is <em>not</em> invoked, but the new handler is scheduled in its place.</div></li>\r\n<li>target : Element<div class=\"sub-desc\">Only call the handler if the event was fired on the target Element, <i>not</i> if the event was bubbled up from a child node.</div></li>\r\n</ul><br>\r\n<p>See {@link Ext.Element#addListener} for examples of how to use these options.</p>"}],"return":null,"hide":false,"private":false,"name":"addListener","summary":"Appends an event handler to an element.  The shorthand version {@link #on} is equivalent.  Typically you will\r\nuse {@link Ext.Element#addListener} directly on an Element in favor of calling this version.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The html element or id to assign the event handler to"},{"type":"String","optional":false,"name":"eventName","summary":"The type of event to listen for"},{"type":"Function","optional":false,"name":"handler","summary":"The handler function the event invokes"},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the handler\r\nfunction (the handler function's \"this\" context)"},{"type":"Object","optional":true,"name":"options","summary":"An object containing standard {@link #addListener} options\r\n@member Ext.EventManager"}],"return":null,"hide":false,"private":false,"name":"on","summary":"Appends an event handler to an element.  Shorthand for {@link #addListener}.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The method the event invokes"},{"type":"Object","optional":true,"name":"scope","summary":"An object that becomes the scope of the handler"},{"type":"boolean","optional":true,"name":"options","summary":"An object containing standard {@link #addListener} options"}],"return":null,"hide":false,"private":false,"name":"onDocumentReady","summary":"Fires when the document is ready (before onload and before images are loaded). Can be\r\naccessed shorthanded as Ext.onReady().\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The method the event invokes"},{"type":"Object","optional":false,"name":"scope","summary":"An object that becomes the scope of the handler"},{"type":"boolean","optional":true,"name":"options","summary":"An object containing standard {@link #addListener} options\r\n@member Ext"}],"return":null,"hide":false,"private":false,"name":"onReady","summary":"Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Ext.EventManager#onDocumentReady}.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The id or html element from which to remove the event"}],"return":null,"hide":false,"private":false,"name":"removeAll","summary":"Removes all event handers from an element.  Typically you will use {@link Ext.Element#removeAllListeners}\r\ndirectly on an Element in favor of calling this version.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The id or html element from which to remove the event"},{"type":"String","optional":false,"name":"eventName","summary":"The type of event"},{"type":"Function","optional":false,"name":"fn","summary":"The handler function to remove"}],"return":null,"hide":false,"private":false,"name":"removeListener","summary":"Removes an event handler from an element.  The shorthand version {@link #un} is equivalent.  Typically\r\nyou will use {@link Ext.Element#removeListener} directly on an Element in favor of calling this version.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"The id or html element from which to remove the event"},{"type":"String","optional":false,"name":"eventName","summary":"The type of event"},{"type":"Function","optional":false,"name":"fn","summary":"The handler function to remove\r\n@member Ext.EventManager"}],"return":{"type":"Boolean","summary":"True if a listener was actually removed, else false"},"hide":false,"private":false,"name":"un","summary":"Removes an event handler from an element.  Shorthand for {@link #removeListener}.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"hasModifier","summary":"    BACKSPACE: 8,\r\n    /** Key constant @type Number */\r\n    TAB: 9,\r\n    /** Key constant @type Number */\r\n    NUM_CENTER: 12,\r\n    /** Key constant @type Number */\r\n    ENTER: 13,\r\n    /** Key constant @type Number */\r\n    RETURN: 13,\r\n    /** Key constant @type Number */\r\n    SHIFT: 16,\r\n    /** Key constant @type Number */\r\n    CTRL: 17,\r\n    CONTROL : 17, // legacy\r\n    /** Key constant @type Number */\r\n    ALT: 18,\r\n    /** Key constant @type Number */\r\n    PAUSE: 19,\r\n    /** Key constant @type Number */\r\n    CAPS_LOCK: 20,\r\n    /** Key constant @type Number */\r\n    ESC: 27,\r\n    /** Key constant @type Number */\r\n    SPACE: 32,\r\n    /** Key constant @type Number */\r\n    PAGE_UP: 33,\r\n    PAGEUP : 33, // legacy\r\n    /** Key constant @type Number */\r\n    PAGE_DOWN: 34,\r\n    PAGEDOWN : 34, // legacy\r\n    /** Key constant @type Number */\r\n    END: 35,\r\n    /** Key constant @type Number */\r\n    HOME: 36,\r\n    /** Key constant @type Number */\r\n    LEFT: 37,\r\n    /** Key constant @type Number */\r\n    UP: 38,\r\n    /** Key constant @type Number */\r\n    RIGHT: 39,\r\n    /** Key constant @type Number */\r\n    DOWN: 40,\r\n    /** Key constant @type Number */\r\n    PRINT_SCREEN: 44,\r\n    /** Key constant @type Number */\r\n    INSERT: 45,\r\n    /** Key constant @type Number */\r\n    DELETE: 46,\r\n    /** Key constant @type Number */\r\n    ZERO: 48,\r\n    /** Key constant @type Number */\r\n    ONE: 49,\r\n    /** Key constant @type Number */\r\n    TWO: 50,\r\n    /** Key constant @type Number */\r\n    THREE: 51,\r\n    /** Key constant @type Number */\r\n    FOUR: 52,\r\n    /** Key constant @type Number */\r\n    FIVE: 53,\r\n    /** Key constant @type Number */\r\n    SIX: 54,\r\n    /** Key constant @type Number */\r\n    SEVEN: 55,\r\n    /** Key constant @type Number */\r\n    EIGHT: 56,\r\n    /** Key constant @type Number */\r\n    NINE: 57,\r\n    /** Key constant @type Number */\r\n    A: 65,\r\n    /** Key constant @type Number */\r\n    B: 66,\r\n    /** Key constant @type Number */\r\n    C: 67,\r\n    /** Key constant @type Number */\r\n    D: 68,\r\n    /** Key constant @type Number */\r\n    E: 69,\r\n    /** Key constant @type Number */\r\n    F: 70,\r\n    /** Key constant @type Number */\r\n    G: 71,\r\n    /** Key constant @type Number */\r\n    H: 72,\r\n    /** Key constant @type Number */\r\n    I: 73,\r\n    /** Key constant @type Number */\r\n    J: 74,\r\n    /** Key constant @type Number */\r\n    K: 75,\r\n    /** Key constant @type Number */\r\n    L: 76,\r\n    /** Key constant @type Number */\r\n    M: 77,\r\n    /** Key constant @type Number */\r\n    N: 78,\r\n    /** Key constant @type Number */\r\n    O: 79,\r\n    /** Key constant @type Number */\r\n    P: 80,\r\n    /** Key constant @type Number */\r\n    Q: 81,\r\n    /** Key constant @type Number */\r\n    R: 82,\r\n    /** Key constant @type Number */\r\n    S: 83,\r\n    /** Key constant @type Number */\r\n    T: 84,\r\n    /** Key constant @type Number */\r\n    U: 85,\r\n    /** Key constant @type Number */\r\n    V: 86,\r\n    /** Key constant @type Number */\r\n    W: 87,\r\n    /** Key constant @type Number */\r\n    X: 88,\r\n    /** Key constant @type Number */\r\n    Y: 89,\r\n    /** Key constant @type Number */\r\n    Z: 90,\r\n    /** Key constant @type Number */\r\n    CONTEXT_MENU: 93,\r\n    /** Key constant @type Number */\r\n    NUM_ZERO: 96,\r\n    /** Key constant @type Number */\r\n    NUM_ONE: 97,\r\n    /** Key constant @type Number */\r\n    NUM_TWO: 98,\r\n    /** Key constant @type Number */\r\n    NUM_THREE: 99,\r\n    /** Key constant @type Number */\r\n    NUM_FOUR: 100,\r\n    /** Key constant @type Number */\r\n    NUM_FIVE: 101,\r\n    /** Key constant @type Number */\r\n    NUM_SIX: 102,\r\n    /** Key constant @type Number */\r\n    NUM_SEVEN: 103,\r\n    /** Key constant @type Number */\r\n    NUM_EIGHT: 104,\r\n    /** Key constant @type Number */\r\n    NUM_NINE: 105,\r\n    /** Key constant @type Number */\r\n    NUM_MULTIPLY: 106,\r\n    /** Key constant @type Number */\r\n    NUM_PLUS: 107,\r\n    /** Key constant @type Number */\r\n    NUM_MINUS: 109,\r\n    /** Key constant @type Number */\r\n    NUM_PERIOD: 110,\r\n    /** Key constant @type Number */\r\n    NUM_DIVISION: 111,\r\n    /** Key constant @type Number */\r\n    F1: 112,\r\n    /** Key constant @type Number */\r\n    F2: 113,\r\n    /** Key constant @type Number */\r\n    F3: 114,\r\n    /** Key constant @type Number */\r\n    F4: 115,\r\n    /** Key constant @type Number */\r\n    F5: 116,\r\n    /** Key constant @type Number */\r\n    F6: 117,\r\n    /** Key constant @type Number */\r\n    F7: 118,\r\n    /** Key constant @type Number */\r\n    F8: 119,\r\n    /** Key constant @type Number */\r\n    F9: 120,\r\n    /** Key constant @type Number */\r\n    F10: 121,\r\n    /** Key constant @type Number */\r\n    F11: 122,\r\n    /** Key constant @type Number */\r\n    F12: 123,\t\r\n    \r\n    /** @private */\r\n    isNavKeyPress : function () {\r\n        var me = this,\r\n        \tk = this.normalizeKey(me.keyCode);\t\t\r\n        return (k >= 33 && k <= 40) ||  // Page Up/Down, End, Home, Left, Up, Right, Down\r\n\t\tk == me.RETURN ||\r\n\t\tk == me.TAB ||\r\n\t\tk == me.ESC;\r\n    },\r\n\r\n    isSpecialKey : function () {\r\n        var k = this.normalizeKey(this.keyCode);\r\n        return (this.type == 'keypress' && this.ctrlKey) ||\r\n\t\tthis.isNavKeyPress() ||\r\n        (k == this.BACKSPACE) || // Backspace\r\n\t\t(k >= 16 && k <= 20) || // Shift, Ctrl, Alt, Pause, Caps Lock\r\n\t\t(k >= 44 && k <= 45);   // Print Screen, Insert\r\n    },\r\n\t\r\n\tgetPoint : function () {\r\n\t    return new Ext.lib.Point(this.xy[0], this.xy[1]);\r\n\t},\r\n\r\n    /**\r\nReturns true if the control, meta, shift or alt key was pressed during this event.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The method the event invokes"},{"type":"Object","optional":false,"name":"scope","summary":"An object that becomes the scope of the handler"},{"type":"boolean","optional":false,"name":"options","summary":""}],"return":null,"hide":false,"private":false,"name":"onTextResize","summary":"Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The method the event invokes"},{"type":"Object","optional":false,"name":"scope","summary":"An object that becomes the scope of the handler"},{"type":"boolean","optional":false,"name":"options","summary":""}],"return":null,"hide":false,"private":false,"name":"onWindowResize","summary":"Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The method the event invokes"},{"type":"Object","optional":false,"name":"scope","summary":"The scope of handler"}],"return":null,"hide":false,"private":false,"name":"removeResizeListener","summary":"Removes the passed window resize listener.\r\n"}],"events":[]},{"name":"EventObject","fullName":"Ext.EventObject","summary":"Just as {@link Ext.Element} wraps around a native DOM node, Ext.EventObject\r\nwraps the browser's native event-object normalizing cross-browser differences,\r\nsuch as which mouse button is clicked, keys pressed, mechanisms to stop\r\nevent-propagation along with a method to prevent default actions from taking place.\r\n<p>For example:</p>\r\n<pre><code>\r\nfunction handleClick(e, t) { // e is not a standard event object, it is a Ext.EventObject\r\n    e.preventDefault();\r\n    var target = e.getTarget(); // same as t (the target HTMLElement)\r\n    ...\r\n}\r\nvar myDiv = {@link Ext#get Ext.get}(\"myDiv\");  // get reference to an {@link Ext.Element}\r\nmyDiv.on(         // 'on' is shorthand for addListener\r\n    \"click\",      // perform an action on click of myDiv\r\n    handleClick   // reference to the action handler\r\n);  \r\n// other methods to do the same:\r\nExt.EventManager.on(\"myDiv\", 'click', handleClick);\r\nExt.EventManager.addListener(\"myDiv\", 'click', handleClick);\r\n </code></pre>\r\n","package":"Ext","definedIn":"core\\core\\EventManager.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getCharCode","summary":"Gets the character code for the event.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The key code"},"hide":false,"private":false,"name":"getKey","summary":"Returns a normalized keyCode for the event.\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getPageX","summary":"Gets the x coordinate of the event.\r\n"},{"parameters":[],"return":{"type":"Number","summary":""},"hide":false,"private":false,"name":"getPageY","summary":"Gets the y coordinate of the event.\r\n"},{"parameters":[],"return":{"type":"HTMLElement","summary":""},"hide":false,"private":false,"name":"getRelatedTarget","summary":"Gets the related target.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"selector","summary":"A simple selector to filter the target or look for an ancestor of the target"},{"type":"Number/Mixed","optional":true,"name":"maxDepth","summary":"The max depth to\r\nsearch as a number or element (defaults to 10 || document.body)"},{"type":"Boolean","optional":true,"name":"returnEl","summary":"True to return a Ext.Element object instead of DOM node"}],"return":{"type":"HTMLelement","summary":""},"hide":false,"private":false,"name":"getTarget","summary":"Gets the target for the event.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The delta"},"hide":false,"private":false,"name":"getWheelDelta","summary":"Normalizes mouse wheel delta across browsers\r\n"},{"parameters":[],"return":{"type":"Array","summary":"The xy values like [x, y]"},"hide":false,"private":false,"name":"getXY","summary":"Gets the page coordinates of the event.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"preventDefault","summary":"Prevents the browsers default handling of the event.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"stopEvent","summary":"        setEvent : function (e) {\r\n\t        var me = this;\r\n            if (e == me || (e && e.browserEvent)) { // already wrapped\r\n                return e;\r\n            }\r\n            me.browserEvent = e;\r\n            if (e) {\r\n                // normalize buttons\r\n                me.button = e.button ? btnMap[e.button] : (e.which ? e.which - 1 : -1);\r\n                if (e.type == 'click' && me.button == -1) {\r\n                    me.button = 0;\r\n                }\r\n                me.type = e.type;\r\n                me.shiftKey = e.shiftKey;\r\n                // mac metaKey behaves like ctrlKey\r\n                me.ctrlKey = e.ctrlKey || e.metaKey || false;\r\n                me.altKey = e.altKey;\r\n                // in getKey these will be normalized for the mac\r\n                me.keyCode = e.keyCode;\r\n                me.charCode = e.charCode;\r\n                // cache the target for the delayed and or buffered events\r\n                me.target = E.getTarget(e);\r\n                // same for XY\r\n                me.xy = E.getXY(e);\r\n            } else {\r\n                me.button = -1;\r\n                me.shiftKey = false;\r\n                me.ctrlKey = false;\r\n                me.altKey = false;\r\n                me.keyCode = 0;\r\n                me.charCode = 0;\r\n                me.target = null;\r\n                me.xy = [0, 0];\r\n            }\r\n            return me;\r\n        },\r\n\r\n        /**\r\nStop the event (preventDefault and stopPropagation)\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"stopPropagation","summary":"Cancels bubbling of the event.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The id, DOM element or Ext.Element to check"},{"type":"Boolean","optional":true,"name":"related","summary":"true to test if the related target is within el instead of the target"},{"type":"Boolean","optional":false,"name":"allowEl","summary":"{optional} true to also check if the passed element is the target or related target"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"within","summary":"Returns true if the target of this event is a child of el.  Unless the allowEl parameter is set, it will return false if if the target is el.\r\nExample usage:<pre><code>\r\n\t\t// Handle click on any child of an element\r\n\t\tExt.getBody().on('click', function (e) {\r\n\t\t\tif(e.within('some-el')) {\r\n\t\t\t\talert('Clicked on a child of some-el!');\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// Handle click directly on an element, ignoring clicks on child nodes\r\n\t\tExt.getBody().on('click', function (e,t) {\r\n\t\t\tif((t.id == 'some-el') && !e.within(t, true)) {\r\n\t\t\t\talert('Clicked directly on some-el!');\r\n\t\t\t}\r\n\t\t});\r\n\t\t</code></pre>\r\n"}],"events":[]},{"name":"FlashComponent","fullName":"Ext.FlashComponent","summary":"","package":"Ext","definedIn":"widgets\\chart\\FlashComponent.js","xtype":"flash","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.chart.Chart","configOptions":[{"type":"String","optional":false,"name":"backgroundColor","summary":"The background color of the chart. Defaults to <tt>'#ffffff'</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"expressInstall","summary":"True to prompt the user to install flash if not installed. Note that this uses\r\nExt.FlashComponent.EXPRESS_INSTALL_URL, which should be set to the local resource. Defaults to <tt>false</tt>.\r\n"},{"type":"Object","optional":false,"name":"flashParams","summary":"A set of key value pairs to be passed to the flash object as parameters. Possible parameters can be found here:\r\nhttp://kb2.adobe.com/cps/127/tn_12701.html Defaults to <tt>undefined</tt>.\r\n"},{"type":"Object","optional":false,"name":"flashVars","summary":"A set of key value pairs to be passed to the flash object as flash variables. Defaults to <tt>undefined</tt>.\r\n"},{"type":"String","optional":false,"name":"flashVersion","summary":"Indicates the version the flash content was published for. Defaults to <tt>'9.0.45'</tt>.\r\n"},{"type":"String","optional":false,"name":"url","summary":"The URL of the chart to include. Defaults to <tt>undefined</tt>.\r\n"},{"type":"String","optional":false,"name":"wmode","summary":"The wmode of the flash object. This can be used to control layering. Defaults to <tt>'opaque'</tt>.\r\n"}],"properties":[{"type":"","static":true,"hide":false,"private":false,"name":"EXPRESS_INSTALL_URL","summary":"Sets the url for installing flash if it doesn't exist. This should be set to a local resource.\r\n"}],"methods":[],"events":[]},{"name":"FlashProxy","fullName":"Ext.FlashProxy","summary":"","package":"Ext","definedIn":"widgets\\chart\\EventProxy.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Fx","fullName":"Ext.Fx","summary":"<p>A class to provide basic animation and visual effects support.  <b>Note:</b> This class is automatically applied\r\nto the {@link Ext.Element} interface when included, so all effects calls should be performed via {@link Ext.Element}.\r\nConversely, since the effects are not actually defined in {@link Ext.Element}, Ext.Fx <b>must</b> be\r\n{@link Ext#enableFx included} in order for the Element effects to work.</p><br/>\r\n\r\n<p><b><u>Method Chaining</u></b></p>\r\n<p>It is important to note that although the Fx methods and many non-Fx Element methods support \"method chaining\" in that\r\nthey return the Element object itself as the method return value, it is not always possible to mix the two in a single\r\nmethod chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.\r\nNon-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,\r\nwhile it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the\r\nexpected results and should be done with care.  Also see <tt>{@link #callback}</tt>.</p><br/>\r\n\r\n<p><b><u>Anchor Options for Motion Effects</u></b></p>\r\n<p>Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element\r\nthat will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:</p>\r\n<pre>\r\nValue  Description\r\n-----  -----------------------------\r\ntl     The top left corner\r\nt      The center of the top edge\r\ntr     The top right corner\r\nl      The center of the left edge\r\nr      The center of the right edge\r\nbl     The bottom left corner\r\nb      The center of the bottom edge\r\nbr     The bottom right corner\r\n</pre>\r\n<b>Note</b>: some Fx methods accept specific custom config parameters.  The options shown in the Config Options\r\nsection below are common options that can be passed to any Fx method unless otherwise noted.</b>\r\n\r\n@cfg {Function} callback A function called when the effect is finished.  Note that effects are queued internally by the\r\nFx class, so a callback is not required to specify another effect -- effects can simply be chained together\r\nand called in sequence (see note for <b><u>Method Chaining</u></b> above), for example:<pre><code>\r\nel.slideIn().highlight();\r\n</code></pre>\r\nThe callback is intended for any additional code that should run once a particular effect has completed. The Element\r\nbeing operated upon is passed as the first parameter.\r\n\r\n@cfg {Object} scope The scope of the <tt>{@link #callback}</tt> function\r\n\r\n@cfg {String} easing A valid Ext.lib.Easing value for the effect:</p><div class=\"mdetail-params\"><ul>\r\n<li><b><tt>backBoth</tt></b></li>\r\n<li><b><tt>backIn</tt></b></li>\r\n<li><b><tt>backOut</tt></b></li>\r\n<li><b><tt>bounceBoth</tt></b></li>\r\n<li><b><tt>bounceIn</tt></b></li>\r\n<li><b><tt>bounceOut</tt></b></li>\r\n<li><b><tt>easeBoth</tt></b></li>\r\n<li><b><tt>easeBothStrong</tt></b></li>\r\n<li><b><tt>easeIn</tt></b></li>\r\n<li><b><tt>easeInStrong</tt></b></li>\r\n<li><b><tt>easeNone</tt></b></li>\r\n<li><b><tt>easeOut</tt></b></li>\r\n<li><b><tt>easeOutStrong</tt></b></li>\r\n<li><b><tt>elasticBoth</tt></b></li>\r\n<li><b><tt>elasticIn</tt></b></li>\r\n<li><b><tt>elasticOut</tt></b></li>\r\n</ul></div>\r\n\r\n@cfg {String} afterCls A css class to apply after the effect\r\n@cfg {Number} duration The length of time (in seconds) that the effect should last\r\n\r\n@cfg {Number} endOpacity Only applicable for {@link #fadeIn} or {@link #fadeOut}, a number between\r\n<tt>0</tt> and <tt>1</tt> inclusive to configure the ending opacity value.\r\n\r\n@cfg {Boolean} remove Whether the Element should be removed from the DOM and destroyed after the effect finishes\r\n@cfg {Boolean} useDisplay Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to\r\neffects that end with the element being visually hidden, ignored otherwise)\r\n@cfg {String/Object/Function} afterStyle A style specification string, e.g. <tt>\"width:100px\"</tt>, or an object\r\nin the form <tt>{width:\"100px\"}</tt>, or a function which returns such a specification that will be applied to the\r\nElement after the effect finishes.\r\n@cfg {Boolean} block Whether the effect should block other effects from queueing while it runs\r\n@cfg {Boolean} concurrent Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence\r\n@cfg {Boolean} stopFx Whether preceding effects should be stopped and removed before running current effect (only applies to non blocking effects)\r\n\r\n<p>A class to provide basic animation and visual effects support.  <b>Note:</b> This class is automatically applied\r\nto the {@link Ext.Element} interface when included, so all effects calls should be performed via {@link Ext.Element}.\r\nConversely, since the effects are not actually defined in {@link Ext.Element}, Ext.Fx <b>must</b> be\r\n{@link Ext#enableFx included} in order for the Element effects to work.</p><br/>\r\n\r\n<p><b><u>Method Chaining</u></b></p>\r\n<p>It is important to note that although the Fx methods and many non-Fx Element methods support \"method chaining\" in that\r\nthey return the Element object itself as the method return value, it is not always possible to mix the two in a single\r\nmethod chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.\r\nNon-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,\r\nwhile it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the\r\nexpected results and should be done with care.  Also see <tt>{@link #callback}</tt>.</p><br/>\r\n\r\n<p><b><u>Anchor Options for Motion Effects</u></b></p>\r\n<p>Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element\r\nthat will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:</p>\r\n<pre>\r\nValue  Description\r\n-----  -----------------------------\r\ntl     The top left corner\r\nt      The center of the top edge\r\ntr     The top right corner\r\nl      The center of the left edge\r\nr      The center of the right edge\r\nbl     The bottom left corner\r\nb      The center of the bottom edge\r\nbr     The bottom right corner\r\n</pre>\r\n<b>Note</b>: some Fx methods accept specific custom config parameters.  The options shown in the Config Options\r\nsection below are common options that can be passed to any Fx method unless otherwise noted.</b>\r\n\r\n@cfg {Function} callback A function called when the effect is finished.  Note that effects are queued internally by the\r\nFx class, so a callback is not required to specify another effect -- effects can simply be chained together\r\nand called in sequence (see note for <b><u>Method Chaining</u></b> above), for example:<pre><code>\r\nel.slideIn().highlight();\r\n</code></pre>\r\nThe callback is intended for any additional code that should run once a particular effect has completed. The Element\r\nbeing operated upon is passed as the first parameter.\r\n\r\n@cfg {Object} scope The scope of the <tt>{@link #callback}</tt> function\r\n\r\n@cfg {String} easing A valid Ext.lib.Easing value for the effect:</p><div class=\"mdetail-params\"><ul>\r\n<li><b><tt>backBoth</tt></b></li>\r\n<li><b><tt>backIn</tt></b></li>\r\n<li><b><tt>backOut</tt></b></li>\r\n<li><b><tt>bounceBoth</tt></b></li>\r\n<li><b><tt>bounceIn</tt></b></li>\r\n<li><b><tt>bounceOut</tt></b></li>\r\n<li><b><tt>easeBoth</tt></b></li>\r\n<li><b><tt>easeBothStrong</tt></b></li>\r\n<li><b><tt>easeIn</tt></b></li>\r\n<li><b><tt>easeInStrong</tt></b></li>\r\n<li><b><tt>easeNone</tt></b></li>\r\n<li><b><tt>easeOut</tt></b></li>\r\n<li><b><tt>easeOutStrong</tt></b></li>\r\n<li><b><tt>elasticBoth</tt></b></li>\r\n<li><b><tt>elasticIn</tt></b></li>\r\n<li><b><tt>elasticOut</tt></b></li>\r\n</ul></div>\r\n\r\n@cfg {String} afterCls A css class to apply after the effect\r\n@cfg {Number} duration The length of time (in seconds) that the effect should last\r\n\r\n@cfg {Number} endOpacity Only applicable for {@link #fadeIn} or {@link #fadeOut}, a number between\r\n<tt>0</tt> and <tt>1</tt> inclusive to configure the ending opacity value.\r\n\r\n@cfg {Boolean} remove Whether the Element should be removed from the DOM and destroyed after the effect finishes\r\n@cfg {Boolean} useDisplay Whether to use the <i>display</i> CSS property instead of <i>visibility</i> when hiding Elements (only applies to\r\neffects that end with the element being visually hidden, ignored otherwise)\r\n@cfg {String/Object/Function} afterStyle A style specification string, e.g. <tt>\"width:100px\"</tt>, or an object\r\nin the form <tt>{width:\"100px\"}</tt>, or a function which returns such a specification that will be applied to the\r\nElement after the effect finishes.\r\n@cfg {Boolean} block Whether the effect should block other effects from queueing while it runs\r\n@cfg {Boolean} concurrent Whether to allow subsequently-queued effects to run at the same time as the current effect, or to ensure that they run in sequence\r\n@cfg {Boolean} stopFx Whether preceding effects should be stopped and removed before running current effect (only applies to non blocking effects)\r\n","package":"Ext","definedIn":"core\\core\\Fx.js,core\\Fx.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"fadeIn","summary":"Fade an element in (from transparent to opaque).  The ending opacity can be specified\r\nusing the <tt>{@link #endOpacity}</tt> config option.\r\nUsage:\r\n<pre><code>\r\n// default: fade in from opacity 0 to 100%\r\nel.fadeIn();\r\n\r\n// custom: fade in from opacity 0 to 75% over 2 seconds\r\nel.fadeIn({ endOpacity: .75, duration: 2});\r\n\r\n// common config options shown with default values\r\nel.fadeIn({\r\n    endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)\r\n    easing: 'easeOut',\r\n    duration: .5\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"fadeOut","summary":"Fade an element out (from opaque to transparent).  The ending opacity can be specified\r\nusing the <tt>{@link #endOpacity}</tt> config option.  Note that IE may require\r\n<tt>{@link #useDisplay}:true</tt> in order to redisplay correctly.\r\nUsage:\r\n<pre><code>\r\n// default: fade out from the element's current opacity to 0\r\nel.fadeOut();\r\n\r\n// custom: fade out from the element's current opacity to 25% over 2 seconds\r\nel.fadeOut({ endOpacity: .25, duration: 2});\r\n\r\n// common config options shown with default values\r\nel.fadeOut({\r\n    endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)\r\n    easing: 'easeOut',\r\n    duration: .5,\r\n    remove: false,\r\n    useDisplay: false\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":true,"name":"color","summary":"The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: 'C3DAF9')."},{"type":"Number","optional":true,"name":"count","summary":"The number of ripples to display (defaults to 1)"},{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"frame","summary":"Shows a ripple of exploding, attenuating borders to draw attention to an Element.\r\nUsage:\r\n<pre><code>\r\n// default: a single light blue ripple\r\nel.frame();\r\n\r\n// custom: 3 red ripples lasting 3 seconds total\r\nel.frame(\"ff0000\", 3, { duration: 3 });\r\n\r\n// common config options shown with default values\r\nel.frame(\"C3DAF9\", 1, {\r\n    duration: 1 //duration of each individual ripple.\r\n    // Note: Easing is not configurable and will be ignored if included\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":true,"name":"anchor","summary":"One of the valid Fx anchor positions (defaults to bottom: 'b')"},{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"ghost","summary":"Slides the element while fading it out of view.  An anchor point can be optionally passed to set the\r\nending point of the effect.\r\nUsage:\r\n<pre><code>\r\n// default: slide the element downward while fading out\r\nel.ghost();\r\n\r\n// custom: slide the element out to the right with a 2-second duration\r\nel.ghost('r', { duration: 2 });\r\n\r\n// common config options shown with default values\r\nel.ghost('b', {\r\n    easing: 'easeOut',\r\n    duration: .5,\r\n    remove: false,\r\n    useDisplay: false\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if element has active effects, else false"},"hide":false,"private":false,"name":"hasActiveFx","summary":"Returns true if the element has any effects actively running or queued, else returns false.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if blocking, else false"},"hide":false,"private":false,"name":"hasFxBlock","summary":"Returns true if the element is currently blocking so that no other effect can be queued\r\nuntil this effect is finished, else returns false if blocking is not set.  This is commonly\r\nused to ensure that an effect initiated by a user action runs to completion prior to the\r\nsame effect being restarted (e.g., firing only one effect even if the user clicks several times).\r\n"},{"parameters":[{"type":"String","optional":true,"name":"color","summary":"The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: 'ffff9c')"},{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"highlight","summary":"Highlights the Element by setting a color (applies to the background-color by default, but can be\r\nchanged using the \"attr\" config option) and then fading back to the original color. If no original\r\ncolor is available, you should provide the \"endColor\" config option which will be cleared after the animation.\r\nUsage:\r\n<pre><code>\r\n// default: highlight background to yellow\r\nel.highlight();\r\n\r\n// custom: highlight foreground text to blue for 2 seconds\r\nel.highlight(\"0000ff\", { attr: 'color', duration: 2 });\r\n\r\n// common config options shown with default values\r\nel.highlight(\"ffff9c\", {\r\n    attr: \"background-color\", //can be any valid CSS property (attribute) that supports a color value\r\n    endColor: (current color) or \"ffffff\",\r\n    easing: 'easeIn',\r\n    duration: 1\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"seconds","summary":"The length of time to pause (in seconds)"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"pause","summary":"Creates a pause before any subsequent queued effects begin.  If there are\r\nno effects queued after the pause it will have no effect.\r\nUsage:\r\n<pre><code>\r\nel.pause(1);\r\n</code></pre>\r\n"},{"parameters":[{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"puff","summary":"Fades the element out while slowly expanding it in all directions.  When the effect is completed, the\r\nelement will be hidden (visibility = 'hidden') but block elements will still take up space in the document.\r\nThe element must be removed from the DOM using the 'remove' config option if desired.\r\nUsage:\r\n<pre><code>\r\n// default\r\nel.puff();\r\n\r\n// common config options shown with default values\r\nel.puff({\r\n    easing: 'easeOut',\r\n    duration: .5,\r\n    remove: false,\r\n    useDisplay: false\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"width","summary":"The new width (pass undefined to keep the original width)"},{"type":"Number","optional":false,"name":"height","summary":"The new height (pass undefined to keep the original height)"},{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"scale","summary":"Animates the transition of an element's dimensions from a starting height/width\r\nto an ending height/width.  This method is a convenience implementation of {@link shift}.\r\nUsage:\r\n<pre><code>\r\n// change height and width to 100x100 pixels\r\nel.scale(100, 100);\r\n\r\n// common config options shown with default values.  The height and width will default to\r\n// the element&#39;s existing values if passed as null.\r\nel.scale(\r\n    [element&#39;s width],\r\n    [element&#39;s height], {\r\n        easing: 'easeOut',\r\n        duration: .35\r\n    }\r\n);\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"sequenceFx","summary":"Ensures that all effects queued after sequenceFx is called on the element are\r\nrun in sequence.  This is the opposite of {@link #syncFx}.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"shift","summary":"Animates the transition of any combination of an element's dimensions, xy position and/or opacity.\r\nAny of these properties not specified in the config object will not be changed.  This effect\r\nrequires that at least one new dimension, position or opacity setting must be passed in on\r\nthe config object in order for the function to have any effect.\r\nUsage:\r\n<pre><code>\r\n// slide the element horizontally to x position 200 while changing the height and opacity\r\nel.shift({ x: 200, height: 50, opacity: .8 });\r\n\r\n// common config options shown with default values.\r\nel.shift({\r\n    width: [element&#39;s width],\r\n    height: [element&#39;s height],\r\n    x: [element&#39;s x position],\r\n    y: [element&#39;s y position],\r\n    opacity: [element&#39;s opacity],\r\n    easing: 'easeOut',\r\n    duration: .35\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":true,"name":"anchor","summary":"One of the valid Fx anchor positions (defaults to top: 't')"},{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"slideIn","summary":"Slides the element into view.  An anchor point can be optionally passed to set the point of\r\norigin for the slide effect.  This function automatically handles wrapping the element with\r\na fixed-size container if needed.  See the Fx class overview for valid anchor point options.\r\nUsage:\r\n<pre><code>\r\n// default: slide the element in from the top\r\nel.slideIn();\r\n\r\n// custom: slide the element in from the right with a 2-second duration\r\nel.slideIn('r', { duration: 2 });\r\n\r\n// common config options shown with default values\r\nel.slideIn('t', {\r\n    easing: 'easeOut',\r\n    duration: .5\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":true,"name":"anchor","summary":"One of the valid Fx anchor positions (defaults to top: 't')"},{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"slideOut","summary":"Slides the element out of view.  An anchor point can be optionally passed to set the end point\r\nfor the slide effect.  When the effect is completed, the element will be hidden (visibility =\r\n'hidden') but block elements will still take up space in the document.  The element must be removed\r\nfrom the DOM using the 'remove' config option if desired.  This function automatically handles\r\nwrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.\r\nUsage:\r\n<pre><code>\r\n// default: slide the element out to the top\r\nel.slideOut();\r\n\r\n// custom: slide the element out to the right with a 2-second duration\r\nel.slideOut('r', { duration: 2 });\r\n\r\n// common config options shown with default values\r\nel.slideOut('t', {\r\n    easing: 'easeOut',\r\n    duration: .5,\r\n    remove: false,\r\n    useDisplay: false\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"stopFx","summary":"Stops any running effects and clears the element's internal effects queue if it contains\r\nany additional effects that haven't started yet.\r\n"},{"parameters":[{"type":"Object","optional":true,"name":"options","summary":"Object literal with any of the Fx config options"}],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"switchOff","summary":"Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).\r\nWhen the effect is completed, the element will be hidden (visibility = 'hidden') but block elements will still\r\ntake up space in the document. The element must be removed from the DOM using the 'remove' config option if desired.\r\nUsage:\r\n<pre><code>\r\n// default\r\nel.switchOff();\r\n\r\n// all config options shown with default values\r\nel.switchOff({\r\n    easing: 'easeIn',\r\n    duration: .3,\r\n    remove: false,\r\n    useDisplay: false\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The Element"},"hide":false,"private":false,"name":"syncFx","summary":"Ensures that all effects queued after syncFx is called on the element are\r\nrun concurrently.  This is the opposite of {@link #sequenceFx}.\r\n"}],"events":[]},{"name":"History","fullName":"Ext.History","summary":"History management component that allows you to register arbitrary tokens that signify application\r\nhistory state on navigation actions.  You can then handle the history {@link #change} event in order\r\nto reset your application UI to the appropriate state when the user navigates forward or backward through\r\nthe browser history stack.\r\n","package":"Ext","definedIn":"util\\History.js","xtype":null,"extends":"Ext.util.Observable","singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"fieldId","summary":"The id of the hidden field required for storing the current history token.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"iframeId","summary":"The id of the iframe required by IE to manage the history stack.\r\n"}],"methods":[{"parameters":[{"type":"String","optional":false,"name":"token","summary":"The value that defines a particular application-specific history state"},{"type":"Boolean","optional":false,"name":"preventDuplicates","summary":"When true, if the passed token matches the current token\r\nit will not save a new history step. Set to false if the same state can be saved more than once\r\nat the same history stack location (defaults to true)."}],"return":null,"hide":false,"private":false,"name":"add","summary":"Add a new token to the history stack. This can be any arbitrary value, although it would\r\ncommonly be the concatenation of a component id and another id marking the specifc history\r\nstate of that component.  Example usage:\r\n<pre><code>\r\n// Handle tab changes on a TabStrip\r\ntabPanel.on('tabchange', function (tabPanel, tab) {\r\n    Ext.History.add(tabPanel.id + ':' + tab.id);\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"back","summary":"Programmatically steps back one step in browser history (equivalent to the user pressing the Back button).\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"forward","summary":"Programmatically steps forward one step in browser history (equivalent to the user pressing the Forward button).\r\n"},{"parameters":[],"return":{"type":"String","summary":"The token"},"hide":false,"private":false,"name":"getToken","summary":"Retrieves the currently-active history token.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"onReady","summary":"A callback function that will be called once the history\r\ncomponent is fully initialized."},{"type":"Object","optional":true,"name":"scope","summary":"The callback scope"}],"return":null,"hide":false,"private":false,"name":"init","summary":"Initialize the global History instance.\r\n"}],"events":[]},{"name":"KeyMap","fullName":"Ext.KeyMap","summary":"Handles mapping keys to actions for an element. One key map can be used for multiple actions.\r\nThe constructor accepts the same config object as defined by {@link #addBinding}.\r\nIf you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key\r\ncombination it will call the function with this signature (if the match is a multi-key\r\ncombination the callback will still be called only once): (String key, Ext.EventObject e)\r\nA KeyMap can also handle a string representation of keys.<br />\r\nUsage:\r\n <pre><code>\r\n// map one key by key code\r\nvar map = new Ext.KeyMap(\"my-element\", {\r\n    key: 13, // or Ext.EventObject.ENTER\r\n    fn: myHandler,\r\n    scope: myObject\r\n});\r\n\r\n// map multiple keys to one action by string\r\nvar map = new Ext.KeyMap(\"my-element\", {\r\n    key: \"a\\r\\n\\t\",\r\n    fn: myHandler,\r\n    scope: myObject\r\n});\r\n\r\n// map multiple keys to multiple actions by strings and array of codes\r\nvar map = new Ext.KeyMap(\"my-element\", [\r\n   {\r\n        key: [10,13],\r\n        fn: function () { alert(\"Return was pressed\"); }\r\n    }, {\r\n        key: \"abc\",\r\n        fn: function () { alert('a, b or c was pressed'); }\r\n    }, {\r\n        key: \"\\t\",\r\n        ctrl:true,\r\n        shift:true,\r\n        fn: function () { alert('Control + shift + tab was pressed.'); }\r\n    }\r\n]);\r\n</code></pre>\r\n<b>Note: A KeyMap starts enabled</b>\r\n","package":"Ext","definedIn":"util\\KeyMap.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to bind to"},{"type":"Object","optional":false,"name":"config","summary":"The config (see {@link #addBinding})"},{"type":"String","optional":true,"name":"eventName","summary":"The event to bind to (defaults to \"keydown\")"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Object/Array","optional":false,"name":"config","summary":"A single KeyMap config or an array of configs"}],"return":null,"hide":false,"private":false,"name":"addBinding","summary":"Add a new binding to this KeyMap. The following config object properties are supported:\r\n<pre>\r\nProperty    Type             Description\r\n----------  ---------------  ----------------------------------------------------------------------\r\nkey         String/Array     A single keycode or an array of keycodes to handle\r\nshift       Boolean          True to handle key only when shift is pressed, False to handle the key only when shift is not pressed (defaults to undefined)\r\nctrl        Boolean          True to handle key only when ctrl is pressed, False to handle the key only when ctrl is not pressed (defaults to undefined)\r\nalt         Boolean          True to handle key only when alt is pressed, False to handle the key only when alt is not pressed (defaults to undefined)\r\nhandler     Function         The function to call when KeyMap finds the expected key combination\r\nfn          Function         Alias of handler (for backwards-compatibility)\r\nscope       Object           The scope of the callback function\r\nstopEvent   Boolean          True to stop the event from bubbling and prevent the default browser action if the key was handled by the KeyMap (defaults to false)\r\n</pre>\r\n\r\nUsage:\r\n<pre><code>\r\n// Create a KeyMap\r\nvar map = new Ext.KeyMap(document, {\r\n    key: Ext.EventObject.ENTER,\r\n    fn: handleKey,\r\n    scope: this\r\n});\r\n\r\n//Add a new binding to the existing KeyMap later\r\nmap.addBinding({\r\n    key: 'abc',\r\n    shift: true,\r\n    fn: handleKey,\r\n    scope: this\r\n});\r\n</code></pre>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"disable","summary":"Disable this KeyMap\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"enable","summary":"Enables this KeyMap\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isEnabled","summary":"Returns true if this KeyMap is enabled\r\n"},{"parameters":[{"type":"Number/Array/Object","optional":false,"name":"key","summary":"Either the numeric key code, array of key codes or an object with the\r\nfollowing options:\r\n{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}"},{"type":"Function","optional":false,"name":"fn","summary":"The function to call"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the function"}],"return":null,"hide":false,"private":false,"name":"on","summary":"Shorthand for adding a single key listener\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"disabled","summary":""}],"return":null,"hide":false,"private":false,"name":"setDisabled","summary":"Convenience function for setting disabled/enabled by boolean.\r\n"}],"events":[]},{"name":"KeyNav","fullName":"Ext.KeyNav","summary":"<p>Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind\r\nnavigation keys to function calls that will get called when the keys are pressed, providing an easy\r\nway to implement custom navigation schemes for any UI component.</p>\r\n<p>The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,\r\npageUp, pageDown, del, home, end.  Usage:</p>\r\n <pre><code>\r\nvar nav = new Ext.KeyNav(\"my-element\", {\r\n    \"left\" : function (e) {\r\n        this.moveLeft(e.ctrlKey);\r\n    },\r\n    \"right\" : function (e) {\r\n        this.moveRight(e.ctrlKey);\r\n    },\r\n    \"enter\" : function (e) {\r\n        this.save();\r\n    },\r\n    scope : this\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"util\\KeyNav.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to bind to"},{"type":"Object","optional":false,"name":"config","summary":"The config"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"defaultEventAction","summary":"The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are\r\n{@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and\r\n{@link Ext.EventObject#stopPropagation} (defaults to 'stopEvent')\r\n"},{"type":"Boolean","optional":false,"name":"disabled","summary":"True to disable this KeyNav instance (defaults to false)\r\n"},{"type":"Boolean","optional":false,"name":"forceKeyDown","summary":"Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since\r\nIE does not propagate special keys on keypress, but setting this to true will force other browsers to also\r\nhandle keydown instead of keypress.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"disable","summary":"Disable this KeyNav\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"enable","summary":"Enable this KeyNav\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"disabled","summary":""}],"return":null,"hide":false,"private":false,"name":"setDisabled","summary":"Convenience function for setting disabled/enabled by boolean.\r\n"}],"events":[]},{"name":"Layer","fullName":"Ext.Layer","summary":"An extended {@link Ext.Element} object that supports a shadow and shim, constrain to viewport and\r\nautomatic maintaining of shadow/shim positions.\r\n@cfg {Boolean} shim False to disable the iframe shim in browsers which need one (defaults to true)\r\n@cfg {String/Boolean} shadow True to automatically create an {@link Ext.Shadow}, or a string indicating the\r\nshadow's display {@link Ext.Shadow#mode}. False to disable the shadow. (defaults to false)\r\n@cfg {Object} dh DomHelper object config to create element with (defaults to {tag: 'div', cls: 'x-layer'}).\r\n@cfg {Boolean} constrain False to disable constrain to viewport (defaults to true)\r\n@cfg {String} cls CSS class to add to the element\r\n@cfg {Number} zindex Starting z-index (defaults to 11000)\r\n@cfg {Number} shadowOffset Number of pixels to offset the shadow (defaults to 4)\r\n@cfg {Boolean} useDisplay\r\nDefaults to use css offsets to hide the Layer. Specify <tt>true</tt>\r\nto use css style <tt>'display:none;'</tt> to hide the Layer.\r\n","package":"Ext","definedIn":"widgets\\Layer.js","xtype":null,"extends":"Ext.Element","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"An object with config options."},{"type":"String/HTMLElement","optional":true,"name":"existingEl","summary":"Uses an existing DOM element. If the element is not found it creates it."}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Number","optional":false,"name":"zindex","summary":"The new z-index to set"}],"return":{"type":"this","summary":"The Layer"},"hide":false,"private":false,"name":"setZIndex","summary":"Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically\r\nincremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow\r\nelement, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index).\r\n"}],"events":[]},{"name":"ListView","fullName":"Ext.ListView","summary":"<p>Ext.ListView is a fast and light-weight implentation of a\r\n{@link Ext.grid.GridPanel Grid} like view with the following characteristics:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li>resizable columns</li>\r\n<li>selectable</li>\r\n<li>column widths are initially proportioned by percentage based on the container\r\nwidth and number of columns</li>\r\n<li>uses templates to render the data in any required format</li>\r\n<li>no horizontal scrolling</li>\r\n<li>no editing</li>\r\n</ul></div>\r\n<p>Example usage:</p>\r\n<pre><code>\r\n// consume JSON of this form:\r\n{\r\n   \"images\":[\r\n     {\r\n         \"name\":\"dance_fever.jpg\",\r\n         \"size\":2067,\r\n         \"lastmod\":1236974993000,\r\n         \"url\":\"images\\/thumbs\\/dance_fever.jpg\"\r\n      },\r\n     {\r\n         \"name\":\"zack_sink.jpg\",\r\n         \"size\":2303,\r\n         \"lastmod\":1236974993000,\r\n         \"url\":\"images\\/thumbs\\/zack_sink.jpg\"\r\n      }\r\n   ]\r\n} \r\nvar store = new Ext.data.JsonStore({\r\n    url: 'get-images.php',\r\n    root: 'images',\r\n    fields: [\r\n        'name', 'url',\r\n       {name:'size', type: 'float'},\r\n       {name:'lastmod', type:'date', dateFormat:'timestamp'}\r\n    ]\r\n});\r\nstore.load();\r\n\r\nvar listView = new Ext.ListView({\r\n    store: store,\r\n    multiSelect: true,\r\n    emptyText: 'No images to display',\r\n    reserveScrollOffset: true,\r\n    columns: [{\r\n        header: 'File',\r\n        width: .5,\r\n        dataIndex: 'name'\r\n    },{\r\n        header: 'Last Modified',\r\n        width: .35, \r\n        dataIndex: 'lastmod',\r\n        tpl: '{lastmod:date(\"m-d h:i a\")}'\r\n    },{\r\n        header: 'Size',\r\n        dataIndex: 'size',\r\n        tpl: '{size:fileSize}', // format using Ext.util.Format.fileSize()\r\n        align: 'right'\r\n    }]\r\n});\r\n\r\n// put it in a Panel so it looks pretty\r\nvar panel = new Ext.Panel({\r\n    id:'images-view',\r\n    width:425,\r\n    height:250,\r\n    collapsible:true,\r\n    layout:'fit',\r\n    title:'Simple ListView <i>(0 items selected)</i>',\r\n    items: listView\r\n});\r\npanel.render(document.body);\r\n\r\n// little bit of feedback\r\nlistView.on('selectionchange', function (view, nodes) {\r\n    var l = nodes.length;\r\n    var s = l != 1 ? 's' : '';\r\n    panel.setTitle('Simple ListView <i>('+l+' item'+s+' selected)</i>');\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\list\\ListView.js","xtype":"listview","extends":"Ext.DataView","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Boolean/Object","optional":false,"name":"columnResize","summary":"Specify <tt>true</tt> or specify a configuration object for {@link Ext.ListView.ColumnResizer}\r\nto enable the columns to be resizable (defaults to <tt>true</tt>).\r\n"},{"type":"Array","optional":false,"name":"columns","summary":"<pre><code>\r\n{\r\n    align: 'right',\r\n    dataIndex: 'size',\r\n    header: 'Size',\r\n    tpl: '{size:fileSize}',\r\n    width: .35\r\n}\r\n</code></pre>\r\nAcceptable properties for each column configuration object are:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>align</tt></b> : String<div class=\"sub-desc\">Set the CSS text-align property\r\nof the column. Defaults to <tt>'left'</tt>.</div></li>\r\n<li><b><tt>dataIndex</tt></b> : String<div class=\"sub-desc\">See {@link Ext.grid.Column}.\r\n{@link Ext.grid.Column#dataIndex dataIndex} for details.</div></li>\r\n<li><b><tt>header</tt></b> : String<div class=\"sub-desc\">See {@link Ext.grid.Column}.\r\n{@link Ext.grid.Column#header header} for details.</div></li>\r\n<li><b><tt>tpl</tt></b> : String<div class=\"sub-desc\">Specify a string to pass as the\r\nconfiguration string for {@link Ext.XTemplate}.  By default an {@link Ext.XTemplate}\r\nwill be implicitly created using the <tt>dataIndex</tt>.</div></li>\r\n<li><b><tt>width</tt></b> : Number<div class=\"sub-desc\">Percentage of the container width\r\nthis column should be allocated.  Columns that have no width specified will be\r\nallocated with an equal percentage to fill 100% of the container width.  To easily take\r\nadvantage of the full container width, leave the width of at least one column undefined.\r\nNote that if you do not want to take up the full width of the container, the width of\r\nevery column needs to be explicitly defined.</div></li>\r\n</ul></div>\r\n"},{"type":"Boolean/Object","optional":false,"name":"columnSort","summary":"Specify <tt>true</tt> or specify a configuration object for {@link Ext.ListView.Sorter}\r\nto enable the columns to be sortable (defaults to <tt>true</tt>).\r\n"},{"type":"Boolean","optional":false,"name":"hideHeaders","summary":"<tt>true</tt> to hide the {@link #internalTpl header row} (defaults to <tt>false</tt> so\r\nthe {@link #internalTpl header row} will be shown).\r\n"},{"type":"String/Array","optional":false,"name":"internalTpl","summary":"The template to be used for the header row.  See {@link #tpl} for more details.\r\n"},{"type":"String","optional":false,"name":"itemSelector","summary":"Defaults to <tt>'dl'</tt> to work with the preconfigured <b><tt>{@link Ext.DataView#tpl tpl}</tt></b>.\r\nThis setting specifies the CSS selector (e.g. <tt>div.some-class</tt> or <tt>span:first-child</tt>)\r\nthat will be used to determine what nodes the ListView will be working with.\r\n"},{"type":"String","optional":false,"name":"overClass","summary":"<tt>'x-list-over'</tt>). An example overriding the default styling:\r\n    <pre><code>\r\n    .x-list-over {background-color: orange;}\r\n    </code></pre>\r\n@type String\r\n"},{"type":"Boolean","optional":false,"name":"reserveScrollOffset","summary":"By default will defer accounting for the configured <b><tt>{@link #scrollOffset}</tt></b>\r\nfor 10 milliseconds.  Specify <tt>true</tt> to account for the configured\r\n<b><tt>{@link #scrollOffset}</tt></b> immediately.\r\n"},{"type":"Number","optional":false,"name":"scrollOffset","summary":"<tt>undefined</tt>). If an explicit value isn't specified, this will be automatically\r\ncalculated.\r\n"},{"type":"String","optional":false,"name":"selectedClass","summary":"<tt>'x-list-selected'</tt>). An example overriding the default styling:\r\n    <pre><code>\r\n    .x-list-selected {background-color: yellow;}\r\n    </code></pre>\r\n@type String\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"disableHeaders","summary":"Set this property to <tt>true</tt> to disable the header click handler disabling sort\r\n(defaults to <tt>false</tt>).\r\n"}],"methods":[{"parameters":[{"type":"Array","optional":false,"name":"records","summary":"An Array of {@link Ext.data.Record}s to be rendered into the DataView."},{"type":"Number","optional":false,"name":"startIndex","summary":"the index number of the Record being prepared for rendering.\r\nXTemplate as described above."}],"return":{"type":"Object","summary":"A data object containing properties to be processed by a repeating"},"hide":false,"private":false,"name":"collectData","summary":"<p>Function which can be overridden which returns the data object passed to this\r\nview's {@link #tpl template} to render the whole ListView. The returned object\r\nshall contain the following properties:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>columns</b> : String<div class=\"sub-desc\">See <tt>{@link #columns}</tt></div></li>\r\n<li><b>rows</b> : String<div class=\"sub-desc\">See\r\n<tt>{@link Ext.DataView}.{@link Ext.DataView#collectData collectData}</div></li>\r\n</ul></div>\r\n"}],"events":[]},{"name":"ListView.ColumnResizer","fullName":"Ext.ListView.ColumnResizer","summary":"<p>Supporting Class for Ext.ListView.</p>\r\n","package":"Ext","definedIn":"widgets\\list\\ColumnResizer.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Number","optional":false,"name":"minPct","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"ListView.Sorter","fullName":"Ext.ListView.Sorter","summary":"<p>Supporting Class for Ext.ListView.</p>\r\n","package":"Ext","definedIn":"widgets\\list\\Sorter.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Array","optional":false,"name":"sortClasses","summary":"The CSS classes applied to a header when it is sorted. (defaults to <tt>[\"sort-asc\", \"sort-desc\"]</tt>)\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"LoadMask","fullName":"Ext.LoadMask","summary":"A simple utility class for generically masking elements while loading data.  If the {@link #store}\r\nconfig option is specified, the masking will be automatically synchronized with the store's loading\r\nprocess and the mask element will be cached for reuse.  For all other elements, this mask will replace the\r\nelement's Updater load indicator and will be destroyed after the initial load.\r\n<p>Example usage:</p>\r\n<pre><code>\r\n// Basic mask:\r\nvar myMask = new Ext.LoadMask(Ext.getBody(), {msg:\"Please wait...\"});\r\nmyMask.show();\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\LoadMask.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element or DOM node, or its id"},{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new LoadMask."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"msg","summary":"The text to display in a centered loading message box (defaults to 'Loading...')\r\n"},{"type":"String","optional":false,"name":"msgCls","summary":"The CSS class to apply to the loading message element (defaults to \"x-mask-loading\")\r\n"},{"type":"Boolean","optional":false,"name":"removeMask","summary":"True to create a single-use mask that is automatically destroyed after loading (useful for page loads),\r\nFalse to persist the mask element reference for multiple uses (e.g., for paged data widgets).  Defaults to false.\r\n"},{"type":"Ext.data.Store","optional":false,"name":"store","summary":"Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and\r\nhidden on either load sucess, or load fail.\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"disable","summary":"Disables the mask to prevent it from being displayed\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"enable","summary":"Enables the mask so that it can be displayed\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hide this LoadMask.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"show","summary":"Show this LoadMask over the configured Element.\r\n"}],"events":[]},{"name":"MessageBox","fullName":"Ext.MessageBox","summary":"<p>Utility class for generating different styles of message boxes.  The alias Ext.Msg can also be used.<p/>\r\n<p>Note that the MessageBox is asynchronous.  Unlike a regular JavaScript <code>alert</code> (which will halt\r\nbrowser execution), showing a MessageBox will not cause the code to stop.  For this reason, if you have code\r\nthat should only run <em>after</em> some user feedback from the MessageBox, you must use a callback function\r\n(see the <code>function</code> parameter for {@link #show} for more details).</p>\r\n<p>Example usage:</p>\r\n<pre><code>\r\n// Basic alert:\r\nExt.Msg.alert('Status', 'Changes saved successfully.');\r\n\r\n// Prompt for user data and process the result using a callback:\r\nExt.Msg.prompt('Name', 'Please enter your name:', function (btn, text) {\r\n    if (btn == 'ok') {\r\n        // process text value and close...\r\n    }\r\n});\r\n\r\n// Show a dialog using config options:\r\nExt.Msg.show({\r\n   title:'Save Changes?',\r\n   msg: 'You are closing a tab that has unsaved changes. Would you like to save your changes?',\r\n   buttons: Ext.Msg.YESNOCANCEL,\r\n   fn: processResult,\r\n   animEl: 'elId',\r\n   icon: Ext.MessageBox.QUESTION\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\MessageBox.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":null,"static":false,"hide":false,"private":false,"name":"Msg","summary":"Shorthand for {@link Ext.MessageBox}\r\n"}],"methods":[{"parameters":[{"type":"String","optional":false,"name":"title","summary":"The title bar text"},{"type":"String","optional":false,"name":"msg","summary":"The message box body text"},{"type":"Function","optional":true,"name":"fn","summary":"The callback function invoked after the message box is closed"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the callback function"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"alert","summary":"Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).\r\nIf a callback function is passed it will be called after the user clicks the button, and the\r\nid of the button that was clicked will be passed as the only parameter to the callback\r\n(could also be the top-right close button).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"title","summary":"The title bar text"},{"type":"String","optional":false,"name":"msg","summary":"The message box body text"},{"type":"Function","optional":true,"name":"fn","summary":"The callback function invoked after the message box is closed"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the callback function"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"confirm","summary":"Displays a confirmation message box with Yes and No buttons (comparable to JavaScript's confirm).\r\nIf a callback function is passed it will be called after the user clicks either button,\r\nand the id of the button that was clicked will be passed as the only parameter to the callback\r\n(could also be the top-right close button).\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"The window"},"hide":false,"private":false,"name":"getDialog","summary":"Returns a reference to the underlying {@link Ext.Window} element\r\n"},{"parameters":[],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"hide","summary":"Hides the message box if it is displayed\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if the message box is visible, else false"},"hide":false,"private":false,"name":"isVisible","summary":"Returns true if the message box is currently displayed\r\n"},{"parameters":[{"type":"String","optional":false,"name":"title","summary":"The title bar text"},{"type":"String","optional":false,"name":"msg","summary":"The message box body text"},{"type":"String","optional":true,"name":"progressText","summary":"The text to display inside the progress bar (defaults to '')"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"progress","summary":"Displays a message box with a progress bar.  This message box has no buttons and is not closeable by\r\nthe user.  You are responsible for updating the progress bar as needed via {@link Ext.MessageBox#updateProgress}\r\nand closing the message box when the process is complete.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"title","summary":"The title bar text"},{"type":"String","optional":false,"name":"msg","summary":"The message box body text"},{"type":"Function","optional":true,"name":"fn","summary":"The callback function invoked after the message box is closed"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the callback function"},{"type":"Boolean/Number","optional":true,"name":"multiline","summary":"True to create a multiline textbox using the defaultTextHeight\r\nproperty, or the height in pixels to create the textbox (defaults to false / single-line)"},{"type":"String","optional":true,"name":"value","summary":"Default value of the text input element (defaults to '')"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"prompt","summary":"Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript's prompt).\r\nThe prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user\r\nclicks either button, and the id of the button that was clicked (could also be the top-right\r\nclose button) and the text that was entered will be passed as the two parameters to the callback.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"icon","summary":"A CSS classname specifying the icon's background image url, or empty string to clear the icon"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"setIcon","summary":"Adds the specified icon to the dialog.  By default, the class 'ext-mb-icon' is applied for default\r\nstyling, and the class passed in is expected to supply the background image url. Pass in empty string ('')\r\nto clear any existing icon. This method must be called before the MessageBox is shown.\r\nThe following built-in icon classes are supported, but you can also pass in a custom class name:\r\n<pre>\r\nExt.MessageBox.INFO\r\nExt.MessageBox.WARNING\r\nExt.MessageBox.QUESTION\r\nExt.MessageBox.ERROR\r\n</pre>\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The following config options are supported: <ul>\r\n<li><b>animEl</b> : String/Element<div class=\"sub-desc\">An id or Element from which the message box should animate as it\r\nopens and closes (defaults to undefined)</div></li>\r\n<li><b>buttons</b> : Object/Boolean<div class=\"sub-desc\">A button config object (e.g., Ext.MessageBox.OKCANCEL or {ok:'Foo',\r\ncancel:'Bar'}), or false to not show any buttons (defaults to false)</div></li>\r\n<li><b>closable</b> : Boolean<div class=\"sub-desc\">False to hide the top-right close button (defaults to true). Note that\r\nprogress and wait dialogs will ignore this property and always hide the close button as they can only\r\nbe closed programmatically.</div></li>\r\n<li><b>cls</b> : String<div class=\"sub-desc\">A custom CSS class to apply to the message box's container element</div></li>\r\n<li><b>defaultTextHeight</b> : Number<div class=\"sub-desc\">The default height in pixels of the message box's multiline textarea\r\nif displayed (defaults to 75)</div></li>\r\n<li><b>fn</b> : Function<div class=\"sub-desc\">A callback function which is called when the dialog is dismissed either\r\nby clicking on the configured buttons, or on the dialog close button, or by pressing\r\nthe return button to enter input.\r\n<p>Progress and wait dialogs will ignore this option since they do not respond to user\r\nactions and can only be closed programmatically, so any required function should be called\r\nby the same code after it closes the dialog. Parameters passed:<ul>\r\n<li><b>buttonId</b> : String<div class=\"sub-desc\">The ID of the button pressed, one of:<div class=\"sub-desc\"><ul>\r\n<li><tt>ok</tt></li>\r\n<li><tt>yes</tt></li>\r\n<li><tt>no</tt></li>\r\n<li><tt>cancel</tt></li>\r\n</ul></div></div></li>\r\n<li><b>text</b> : String<div class=\"sub-desc\">Value of the input field if either <tt><a href=\"#show-option-prompt\" ext:member=\"show-option-prompt\" ext:cls=\"Ext.MessageBox\">prompt</a></tt>\r\nor <tt><a href=\"#show-option-multiline\" ext:member=\"show-option-multiline\" ext:cls=\"Ext.MessageBox\">multiline</a></tt> is true</div></li>\r\n<li><b>opt</b> : Object<div class=\"sub-desc\">The config object passed to show.</div></li>\r\n</ul></p></div></li>\r\n<li><b>scope</b> : Object<div class=\"sub-desc\">The scope of the callback function</div></li>\r\n<li><b>icon</b> : String<div class=\"sub-desc\">A CSS class that provides a background image to be used as the body icon for the\r\ndialog (e.g. Ext.MessageBox.WARNING or 'custom-class') (defaults to '')</div></li>\r\n<li><b>iconCls</b> : String<div class=\"sub-desc\">The standard {@link Ext.Window#iconCls} to\r\nadd an optional header icon (defaults to '')</div></li>\r\n<li><b>maxWidth</b> : Number<div class=\"sub-desc\">The maximum width in pixels of the message box (defaults to 600)</div></li>\r\n<li><b>minWidth</b> : Number<div class=\"sub-desc\">The minimum width in pixels of the message box (defaults to 100)</div></li>\r\n<li><b>modal</b> : Boolean<div class=\"sub-desc\">False to allow user interaction with the page while the message box is\r\ndisplayed (defaults to true)</div></li>\r\n<li><b>msg</b> : String<div class=\"sub-desc\">A string that will replace the existing message box body text (defaults to the\r\nXHTML-compliant non-breaking space character '&amp;#160;')</div></li>\r\n<li><a id=\"show-option-multiline\"></a><b>multiline</b> : Boolean<div class=\"sub-desc\">\r\nTrue to prompt the user to enter multi-line text (defaults to false)</div></li>\r\n<li><b>progress</b> : Boolean<div class=\"sub-desc\">True to display a progress bar (defaults to false)</div></li>\r\n<li><b>progressText</b> : String<div class=\"sub-desc\">The text to display inside the progress bar if progress = true (defaults to '')</div></li>\r\n<li><a id=\"show-option-prompt\"></a><b>prompt</b> : Boolean<div class=\"sub-desc\">True to prompt the user to enter single-line text (defaults to false)</div></li>\r\n<li><b>proxyDrag</b> : Boolean<div class=\"sub-desc\">True to display a lightweight proxy while dragging (defaults to false)</div></li>\r\n<li><b>title</b> : String<div class=\"sub-desc\">The title text</div></li>\r\n<li><b>value</b> : String<div class=\"sub-desc\">The string value to set into the active textbox element if displayed</div></li>\r\n<li><b>wait</b> : Boolean<div class=\"sub-desc\">True to display a progress bar (defaults to false)</div></li>\r\n<li><b>waitConfig</b> : Object<div class=\"sub-desc\">A {@link Ext.ProgressBar#waitConfig} object (applies only if wait = true)</div></li>\r\n<li><b>width</b> : Number<div class=\"sub-desc\">The width of the dialog in pixels</div></li>\r\n</ul>\r\nExample usage:\r\n<pre><code>\r\nExt.Msg.show({\r\ntitle: 'Address',\r\nmsg: 'Please enter your address:',\r\nwidth: 300,\r\nbuttons: Ext.MessageBox.OKCANCEL,\r\nmultiline: true,\r\nfn: saveAddress,\r\nanimEl: 'addAddressBtn',\r\nicon: Ext.MessageBox.INFO\r\n});\r\n</code></pre>"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"show","summary":"Displays a new message box, or reinitializes an existing message box, based on the config options\r\npassed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,\r\nalthough those calls are basic shortcuts and do not support all of the config options allowed here.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"value","summary":"Any number between 0 and 1 (e.g., .5, defaults to 0)"},{"type":"String","optional":false,"name":"progressText","summary":"The progress text to display inside the progress bar (defaults to '')"},{"type":"String","optional":false,"name":"msg","summary":"The message box's body text is replaced with the specified string (defaults to undefined\r\nso that any existing body text will not get overwritten by default unless a new value is passed in)"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"updateProgress","summary":"Updates a progress-style message box's text and progress bar. Only relevant on message boxes\r\ninitiated via {@link Ext.MessageBox#progress} or {@link Ext.MessageBox#wait},\r\nor by calling {@link Ext.MessageBox#show} with progress: true.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"text","summary":"Replaces the message box element's innerHTML with the specified string (defaults to\r\nthe XHTML-compliant non-breaking space character '&amp;#160;')"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"updateText","summary":"Updates the message box body text\r\n"},{"parameters":[{"type":"String","optional":false,"name":"msg","summary":"The message box body text"},{"type":"String","optional":true,"name":"title","summary":"The title bar text"},{"type":"Object","optional":true,"name":"config","summary":"A {@link Ext.ProgressBar#waitConfig} object"}],"return":{"type":"Ext.MessageBox","summary":"this"},"hide":false,"private":false,"name":"wait","summary":"Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user\r\ninteraction while waiting for a long-running process to complete that does not have defined intervals.\r\nYou are responsible for closing the message box when the process is complete.\r\n"}],"events":[]},{"name":"PagingToolbar","fullName":"Ext.PagingToolbar","summary":"<p>As the amount of records increases, the time required for the browser to render\r\nthem increases. Paging is used to reduce the amount of data exchanged with the client.\r\nNote: if there are more records/rows than can be viewed in the available screen area, vertical\r\nscrollbars will be added.</p>\r\n<p>Paging is typically handled on the server side (see exception below). The client sends\r\nparameters to the server side, which the server needs to interpret and then respond with the\r\napproprate data.</p>\r\n<p><b>Ext.PagingToolbar</b> is a specialized toolbar that is bound to a {@link Ext.data.Store}\r\nand provides automatic paging control. This Component {@link Ext.data.Store#load load}s blocks\r\nof data into the <tt>{@link #store}</tt> by passing {@link Ext.data.Store#paramNames paramNames} used for\r\npaging criteria.</p>\r\n<p>PagingToolbar is typically used as one of the Grid's toolbars:</p>\r\n<pre><code>\r\nExt.QuickTips.init(); // to display button quicktips\r\n\r\nvar myStore = new Ext.data.Store({\r\n    reader: new Ext.data.JsonReader({\r\n       {@link Ext.data.JsonReader#totalProperty totalProperty}: 'results', \r\n        ...\r\n    }),\r\n    ...\r\n});\r\n\r\nvar myPageSize = 25;  // server script should only send back 25 items at a time\r\n\r\nvar grid = new Ext.grid.GridPanel({\r\n    ...\r\n    store: myStore,\r\n    bbar: new Ext.PagingToolbar({\r\n       {@link #store}: myStore,       // grid and PagingToolbar using same store\r\n       {@link #displayInfo}: true,\r\n       {@link #pageSize}: myPageSize,\r\n       {@link #prependButtons}: true,\r\n        items: [\r\n            'text 1'\r\n        ]\r\n    })\r\n});\r\n</code></pre>\r\n\r\n<p>To use paging, pass the paging requirements to the server when the store is first loaded.</p>\r\n<pre><code>\r\nstore.load({\r\n    params: {\r\n        // specify params for the first page load if using paging\r\n        start: 0,          \r\n        limit: myPageSize,\r\n        // other params\r\n        foo:   'bar'\r\n    }\r\n});\r\n</code></pre>\r\n\r\n<p>If using {@link Ext.data.Store#autoLoad store's autoLoad} configuration:</p>\r\n<pre><code>\r\nvar myStore = new Ext.data.Store({\r\n   {@link Ext.data.Store#autoLoad autoLoad}: {params:{start: 0, limit: 25}},\r\n    ...\r\n});\r\n</code></pre>\r\n\r\n<p>The packet sent back from the server would have this form:</p>\r\n<pre><code>\r\n{\r\n    \"success\": true,\r\n    \"results\": 2000, \r\n    \"rows\": [ // <b>*Note:</b> this must be an Array \r\n       { \"id\":  1, \"name\": \"Bill\", \"occupation\": \"Gardener\" },\r\n       { \"id\":  2, \"name\":  \"Ben\", \"occupation\": \"Horticulturalist\" },\r\n        ...\r\n       { \"id\": 25, \"name\":  \"Sue\", \"occupation\": \"Botanist\" }\r\n    ]\r\n}\r\n</code></pre>\r\n<p><u>Paging with Local Data</u></p>\r\n<p>Paging can also be accomplished with local data using extensions:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li><a href=\"http://extjs.com/forum/showthread.php?t=71532\">Ext.ux.data.PagingStore</a></li>\r\n<li>Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)</li>\r\n</ul></div>\r\n","package":"Ext","definedIn":"widgets\\PagingToolbar.js","xtype":"paging","extends":"Ext.Toolbar","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"afterPageText","summary":"Customizable piece of the default paging text (defaults to <tt>'of {0}'</tt>). Note that\r\nthis string is formatted using <tt>{0}</tt> as a token that is replaced by the number of\r\ntotal pages. This token should be preserved when overriding this string if showing the\r\ntotal page count is desired.\r\n"},{"type":"String","optional":false,"name":"beforePageText","summary":"The text displayed before the input item (defaults to <tt>'Page'</tt>).\r\n"},{"type":"Boolean","optional":false,"name":"displayInfo","summary":"<tt>true</tt> to display the displayMsg (defaults to <tt>false</tt>)\r\n"},{"type":"String","optional":false,"name":"displayMsg","summary":"The paging status message to display (defaults to <tt>'Displaying {0} - {1} of {2}'</tt>).\r\nNote that this string is formatted using the braced numbers <tt>{0}-{2}</tt> as tokens\r\nthat are replaced by the values for start, end and total respectively. These tokens should\r\nbe preserved when overriding this string if showing those values is desired.\r\n"},{"type":"String","optional":false,"name":"emptyMsg","summary":"The message to display when no records are found (defaults to 'No data to display')\r\n"},{"type":"String","optional":false,"name":"firstText","summary":"The quicktip text displayed for the first page button (defaults to <tt>'First Page'</tt>).\r\n<b>Note</b>: quick tips must be initialized for the quicktip to show.\r\n"},{"type":"String","optional":false,"name":"lastText","summary":"The quicktip text displayed for the last page button (defaults to <tt>'Last Page'</tt>).\r\n<b>Note</b>: quick tips must be initialized for the quicktip to show.\r\n"},{"type":"String","optional":false,"name":"nextText","summary":"The quicktip text displayed for the next page button (defaults to <tt>'Next Page'</tt>).\r\n<b>Note</b>: quick tips must be initialized for the quicktip to show.\r\n"},{"type":"Number","optional":false,"name":"pageSize","summary":"The number of records to display per page (defaults to <tt>20</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"prependButtons","summary":"<tt>true</tt> to insert any configured <tt>items</tt> <i>before</i> the paging buttons.\r\nDefaults to <tt>false</tt>.\r\n"},{"type":"String","optional":false,"name":"prevText","summary":"The quicktip text displayed for the previous page button (defaults to <tt>'Previous Page'</tt>).\r\n<b>Note</b>: quick tips must be initialized for the quicktip to show.\r\n"},{"type":"String","optional":false,"name":"refreshText","summary":"The quicktip text displayed for the Refresh button (defaults to <tt>'Refresh'</tt>).\r\n<b>Note</b>: quick tips must be initialized for the quicktip to show.\r\n"},{"type":"Ext.data.Store","optional":false,"name":"store","summary":"The {@link Ext.data.Store} the paging toolbar should use as its data source (required).\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"cursor","summary":"Indicator for the record position.  This property might be used to get the active page\r\nnumber for example:<pre><code>\r\n// t is reference to the paging toolbar instance\r\nvar activePage = Math.ceil((t.cursor + t.pageSize) / t.pageSize);\r\n</code></pre>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"pageSize","summary":"The number of records to display per page.  See also <tt>{@link #cursor}</tt>.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"paramNames","summary":"<p><b>Deprecated</b>. <code>paramNames</code> should be set in the <b>data store</b>\r\n(see {@link Ext.data.Store#paramNames}).</p>\r\n<br><p>Object mapping of parameter names used for load calls, initially set to:</p>\r\n<pre>{start: 'start', limit: 'limit'}</pre>\r\n@deprecated\r\n"}],"methods":[{"parameters":[{"type":"Ext.data.Store","optional":false,"name":"store","summary":"The data store to bind"}],"return":null,"hide":false,"private":false,"name":"bind","summary":"Binds the paging toolbar to the specified {@link Ext.data.Store} <b>(deprecated)</b>\r\n"},{"parameters":[{"type":"Store","optional":false,"name":"store","summary":"The store to bind to this toolbar"},{"type":"Boolean","optional":true,"name":"initial","summary":"true to not remove listeners"}],"return":null,"hide":false,"private":false,"name":"bindStore","summary":"Binds the paging toolbar to the specified {@link Ext.data.Store}\r\n"},{"parameters":[{"type":"Integer","optional":false,"name":"page","summary":"The page to display"}],"return":null,"hide":false,"private":false,"name":"changePage","summary":"Change the active page\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"doRefresh","summary":"Refresh the current page, has the same effect as clicking the 'refresh' button.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"moveFirst","summary":"Move to the first page, has the same effect as clicking the 'first' button.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"moveLast","summary":"Move to the last page, has the same effect as clicking the 'last' button.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"moveNext","summary":"Move to the next page, has the same effect as clicking the 'next' button.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"movePrevious","summary":"Move to the previous page, has the same effect as clicking the 'previous' button.\r\n"},{"parameters":[{"type":"Ext.data.Store","optional":false,"name":"store","summary":"The data store to unbind"}],"return":null,"hide":false,"private":false,"name":"unbind","summary":"Unbinds the paging toolbar from the specified {@link Ext.data.Store} <b>(deprecated)</b>\r\n"}],"events":[{"parameters":[{"type":"Ext.PagingToolbar","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"params","summary":"An object hash of the parameters which the PagingToolbar will send when"}],"name":"beforechange","summary":"Fires just before the active page is changed. Return false to prevent the active page from being changed. loading the required page. This will contain:<ul> <li><code>start</code> : Number <div class=\"sub-desc\">The starting row number for the next page of records to be retrieved from the server</div></li> <li><code>limit</code> : Number <div class=\"sub-desc\">The number of records to be retrieved from the server</div></li> </ul> <p>(note: the names of the <b>start</b> and <b>limit</b> properties are determined by the store's {@link Ext.data.Store#paramNames paramNames} property.)</p> <p>Parameters may be added as required in the event handler.</p>."},{"parameters":[{"type":"Ext.PagingToolbar","optional":false,"name":"el","summary":"this"},{"type":"Object","optional":false,"name":"pageData","summary":"An object that has these properties:<ul>"}],"name":"change","summary":"Fires after the active page has been changed. <li><code>total</code> : Number <div class=\"sub-desc\">The total number of records in the dataset as returned by the server</div></li> <li><code>activePage</code> : Number <div class=\"sub-desc\">The current page number</div></li> <li><code>pages</code> : Number <div class=\"sub-desc\">The total number of pages (calculated from the total number of records in the dataset as returned by the server and the current {@link #pageSize})</div></li> </ul>."}]},{"name":"Panel","fullName":"Ext.Panel","summary":"<p>Panel is a container that has specific functionality and structural components that make\r\nit the perfect building block for application-oriented user interfaces.</p>\r\n<p>Panels are, by virtue of their inheritance from {@link Ext.Container}, capable\r\nof being configured with a {@link Ext.Container#layout layout}, and containing child Components.</p>\r\n<p>When either specifying child {@link Ext.Component#items items} of a Panel, or dynamically {@link Ext.Container#add adding} Components\r\nto a Panel, remember to consider how you wish the Panel to arrange those child elements, and whether\r\nthose child elements need to be sized using one of Ext's built-in <code><b>{@link Ext.Container#layout layout}</b></code> schemes. By\r\ndefault, Panels use the {@link Ext.layout.ContainerLayout ContainerLayout} scheme. This simply renders\r\nchild components, appending them one after the other inside the Container, and <b>does not apply any sizing</b>\r\nat all.</p>\r\n<p>A Panel may also contain {@link #bbar bottom} and {@link #tbar top} toolbars, along with separate\r\n{@link #header}, {@link #footer} and {@link #body} sections (see {@link #frame} for additional\r\ninformation).</p>\r\n<p>Panel also provides built-in {@link #collapsible expandable and collapsible behavior}, along with\r\na variety of {@link #tools prebuilt tool buttons} that can be wired up to provide other customized\r\nbehavior.  Panels can be easily dropped into any {@link Ext.Container Container} or layout, and the\r\nlayout and rendering pipeline is {@link Ext.Container#add completely managed by the framework}.</p>\r\n","package":"Ext","definedIn":"widgets\\Panel.js","xtype":"panel","extends":"Ext.Container","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"Ext.form.FieldSet,Ext.form.FormPanel,Ext.grid.GridPanel,Ext.tree.TreePanel,Ext.ButtonGroup,Ext.TabStrip,Ext.Tip,Ext.Window","configOptions":[{"type":"Boolean","optional":false,"name":"animCollapse","summary":"<code>true</code> to animate the transition when the panel is collapsed, <code>false</code> to skip the\r\nanimation (defaults to <code>true</code> if the {@link Ext.Fx} class is available, otherwise <code>false</code>).\r\n"},{"type":"Mixed","optional":false,"name":"applyTo","summary":"<p>The id of the node, a DOM node or an existing Element corresponding to a DIV that is already present in\r\nthe document that specifies some panel-specific structural markup.  When <code>applyTo</code> is used,\r\nconstituent parts of the panel can be specified by CSS class name within the main element, and the panel\r\nwill automatically create those components from that markup. Any required components not specified in the\r\nmarkup will be autogenerated if necessary.</p>\r\n<p>The following class names are supported (baseCls will be replaced by {@link #baseCls}):</p>\r\n<ul><li>baseCls + '-header'</li>\r\n<li>baseCls + '-header-text'</li>\r\n<li>baseCls + '-bwrap'</li>\r\n<li>baseCls + '-tbar'</li>\r\n<li>baseCls + '-body'</li>\r\n<li>baseCls + '-bbar'</li>\r\n<li>baseCls + '-footer'</li></ul>\r\n<p>Using this config, a call to render() is not required.  If applyTo is specified, any value passed for\r\n{@link #renderTo} will be ignored and the target element's parent node will automatically be used as the\r\npanel's container.</p>\r\n"},{"type":"String","optional":false,"name":"autoEl","summary":""},{"type":"Boolean","optional":false,"name":"autoHeight","summary":"<code>true</code> to use height:'auto', <code>false</code> to use fixed height (defaults to <code>false</code>).\r\n<b>Note</b>: Setting <code>autoHeight: true</code> means that the browser will manage the panel's height\r\nbased on its contents, and that Ext will not manage it at all. If the panel is within a layout that\r\nmanages dimensions (<code>fit</code>, <code>border</code>, etc.) then setting <code>autoHeight: true</code>\r\ncan cause issues with scrolling and will not generally work as expected since the panel will take\r\non the height of its contents rather than the height required by the Ext layout.\r\n"},{"type":"Object/String/Function","optional":false,"name":"autoLoad","summary":"A valid url spec according to the Updater {@link Ext.Updater#update} method.\r\nIf autoLoad is not null, the panel will attempt to load its contents\r\nimmediately upon render.<p>\r\nThe URL will become the default URL for this panel's {@link #body} element,\r\nso it may be {@link Ext.Element#refresh refresh}ed at any time.</p>\r\n"},{"type":"Boolean","optional":false,"name":"autoScroll","summary":"<code>true</code> to use overflow:'auto' on the panel's body element and show scroll bars automatically when\r\nnecessary, <code>false</code> to clip any overflowing content (defaults to <code>false</code>).\r\n"},{"type":"String","optional":false,"name":"baseCls","summary":"The base CSS class to apply to this panel's element (defaults to <code>'x-panel'</code>).\r\n<p>Another option available by default is to specify <code>'x-plain'</code> which strips all styling\r\nexcept for required attributes for Ext layouts to function (e.g. overflow:hidden).\r\nSee <code>{@link #unstyled}</code> also.</p>\r\n"},{"type":"Object/Array","optional":false,"name":"bbar","summary":"<p>The bottom toolbar of the panel. This can be a {@link Ext.Toolbar} object, a toolbar config, or an array of\r\nbuttons/button configs to be added to the toolbar.  Note that this is not available as a property after render.\r\nTo access the bottom toolbar after render, use {@link #getBottomToolbar}.</p>\r\n<p><b>Note:</b> Although a Toolbar may contain Field components, these will <b>not</b> be updated by a load\r\nof an ancestor FormPanel. A Panel's toolbars are not part of the standard Container->Component hierarchy, and\r\nso are not scanned to collect form items. However, the values <b>will</b> be submitted because form\r\nsubmission parameters are collected from the DOM tree.</p>\r\n"},{"type":"Object","optional":false,"name":"bbarCfg","summary":"<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure\r\nof this Panel's {@link #bbar} Element.  See <code>{@link #bodyCfg}</code> also.</p>\r\n"},{"type":"Boolean","optional":false,"name":"bodyBorder","summary":"True to display an interior border on the body element of the panel, false to hide it (defaults to true).\r\nThis only applies when {@link #border} == true.  If border == true and bodyBorder == false, the border will display\r\nas a 1px wide inset border, giving the entire body element an inset appearance.\r\n"},{"type":"Object","optional":false,"name":"bodyCfg","summary":"<p>A {@link Ext.DomHelper DomHelper} element specification object may be specified for any\r\nPanel Element.</p>\r\n<p>By default, the Default element in the table below will be used for the html markup to\r\ncreate a child element with the commensurate Default class name (<code>baseCls</code> will be\r\nreplaced by <code>{@link #baseCls}</code>):</p>\r\n<pre>\r\nPanel      Default  Default             Custom      Additional       Additional\r\nElement    element  class               element     class            style\r\n========   ==========================   =========   ==============   ===========\r\n{@link #header}     div     {@link #baseCls}+'-header'  {@link #headerCfg}   headerCssClass   headerStyle\r\n{@link #bwrap}      div     {@link #baseCls}+'-bwrap'    {@link #bwrapCfg}    bwrapCssClass    bwrapStyle\r\n+ tbar     div     {@link #baseCls}+'-tbar'      {@link #tbarCfg}     tbarCssClass     tbarStyle\r\n+ {@link #body}     div     {@link #baseCls}+'-body'      {@link #bodyCfg}    {@link #bodyCssClass}    {@link #bodyStyle}\r\n+ bbar     div     {@link #baseCls}+'-bbar'      {@link #bbarCfg}     bbarCssClass     bbarStyle\r\n+ {@link #footer}   div     {@link #baseCls}+'-footer'  {@link #footerCfg}   footerCssClass   footerStyle\r\n</pre>\r\n<p>Configuring a Custom element may be used, for example, to force the {@link #body} Element\r\nto use a different form of markup than is created by default. An example of this might be\r\nto {@link Ext.Element#createChild create a child} Panel containing a custom content, such as\r\na header, or forcing centering of all Panel content by having the body be a &lt;center&gt;\r\nelement:</p>\r\n<pre><code>\r\nnew Ext.Panel({\r\n    title: 'Message Title',\r\n    renderTo: Ext.getBody(),\r\n    width: 200, height: 130,\r\n    <b>bodyCfg</b>: {\r\n        tag: 'center',\r\n        cls: 'x-panel-body',  // Default class not applied if Custom element specified\r\n        html: 'Message'\r\n    },\r\n    footerCfg: {\r\n        tag: 'h2',\r\n        cls: 'x-panel-footer'        // same as the Default class\r\n        html: 'footer html'\r\n    },\r\n    footerCssClass: 'custom-footer', // additional css class, see {@link Ext.element#addClass addClass}\r\n    footerStyle:    'background-color:red' // see {@link #bodyStyle}\r\n});\r\n</code></pre>\r\n<p>The example above also explicitly creates a <code>{@link #footer}</code> with custom markup and\r\nstyling applied.</p>\r\n"},{"type":"String/Object/Function","optional":false,"name":"bodyCssClass","summary":"Additional css class selector to be applied to the {@link #body} element in the format expected by\r\n{@link Ext.Element#addClass} (defaults to null). See {@link #bodyCfg}.\r\n"},{"type":"String/Object/Function","optional":false,"name":"bodyStyle","summary":"Custom CSS styles to be applied to the {@link #body} element in the format expected by\r\n{@link Ext.Element#applyStyles} (defaults to null). See {@link #bodyCfg}.\r\n"},{"type":"Boolean","optional":false,"name":"border","summary":"True to display the borders of the panel's body element, false to hide them (defaults to true).  By default,\r\nthe border is a 2px wide inset border, but this can be further altered by setting {@link #bodyBorder} to false.\r\n"},{"type":"String","optional":false,"name":"buttonAlign","summary":"The alignment of any {@link #buttons} added to this panel.  Valid values are <code>'right'</code>,\r\n<code>'left'</code> and <code>'center'</code> (defaults to <code>'right'</code>).\r\n"},{"type":"Array","optional":false,"name":"buttons","summary":"<code>buttons</code> will be used as <code>{@link Ext.Container#items items}</code> for the toolbar in\r\nthe footer (<code>{@link #fbar}</code>). Typically the value of this configuration property will be\r\nan array of {@link Ext.Button}s or {@link Ext.Button} configuration objects.\r\nIf an item is configured with <code>minWidth</code> or the Panel is configured with <code>minButtonWidth</code>,\r\nthat width will be applied to the item.\r\n"},{"type":"Object","optional":false,"name":"bwrapCfg","summary":"<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure\r\nof this Panel's {@link #bwrap} Element.  See <code>{@link #bodyCfg}</code> also.</p>\r\n"},{"type":"Boolean","optional":false,"name":"closable","summary":"Panels themselves do not directly support being closed, but some Panel subclasses do (like\r\n{@link Ext.Window}) or a Panel Class within an {@link Ext.TabStrip}.  Specify <code>true</code>\r\nto enable closing in such situations. Defaults to <code>false</code>.\r\n"},{"type":"Boolean","optional":false,"name":"collapsed","summary":"<code>true</code> to render the panel collapsed, <code>false</code> to render it expanded (defaults to\r\n<code>false</code>).\r\n"},{"type":"String","optional":false,"name":"collapsedCls","summary":"A CSS class to add to the panel's element after it has been collapsed (defaults to\r\n<code>'x-panel-collapsed'</code>).\r\n"},{"type":"Boolean","optional":false,"name":"collapseFirst","summary":"<code>true</code> to make sure the collapse/expand toggle button always renders first (to the left of)\r\nany other tools in the panel's title bar, <code>false</code> to render it last (defaults to <code>true</code>).\r\n"},{"type":"Boolean","optional":false,"name":"collapsible","summary":"True to make the panel collapsible and have the expand/collapse toggle button automatically rendered into\r\nthe header tool button area, false to keep the panel statically sized with no button (defaults to false).\r\n"},{"type":"String","optional":false,"name":"contentEl","summary":"<p>Optional. Specify an existing HTML element, or the <code>id</code> of an existing HTML element to use as this Panel's\r\n<code><b>{@link #body}</b></code> content.</p>\r\n<ul>\r\n<li><b>Description</b> :\r\n<div class=\"sub-desc\">This config option is used to take an existing HTML element and place it in the body\r\nof a new panel (it simply moves the specified DOM element into the body element of the Panel\r\n<i>after the Panel is rendered</i> to use as the content (it is not going to be the actual panel itself).</div></li>\r\n<li><b>Notes</b> :\r\n<div class=\"sub-desc\">The specified HTML element is appended to the Panel's {@link #body} Element by the\r\nPanel's <code>afterRender</code> method <i>after any configured {@link #html HTML} has\r\nbeen inserted</i>, and so the document will not contain this element at the time the\r\n{@link #render} event is fired.</div>\r\n<div class=\"sub-desc\">The specified HTML element used will not participate in any <code><b>{@link Ext.Container#layout layout}</b></code>\r\nscheme that the Panel may use. It is just HTML. Layouts operate on child <code><b>{@link Ext.Container#items items}</b></code>.</div>\r\n<div class=\"sub-desc\">Add either the <code>x-hidden</code> or the <code>x-hide-display</code> CSS class to\r\nprevent a brief flicker of the content before it is rendered to the panel.</div></li>\r\n</ul>\r\n"},{"type":"Boolean","optional":false,"name":"disabled","summary":"Render this panel disabled (default is <code>false</code>). An important note when using the disabled\r\nconfig on panels is that IE will often fail to initialize the disabled mask element correectly if\r\nthe panel's layout has not yet completed by the time the Panel is disabled during the render process.\r\nIf you experience this issue, you may need to instead use the {@link #afterlayout} event to initialize\r\nthe disabled state:\r\n<pre><code>\r\nnew Ext.Panel({\r\n    ...\r\n    listeners: {\r\n        'afterlayout': {\r\n            fn: function (p) {\r\n                p.disable();\r\n            },\r\n            single: true // important, as many layouts can occur\r\n        }\r\n    }\r\n});\r\n</code></pre>\r\n"},{"type":"Boolean/Object","optional":false,"name":"draggable","summary":"<p><code>true</code> to enable dragging of this Panel (defaults to <code>false</code>).</p>\r\n<p>For custom drag/drop implementations, an <b>Ext.Panel.DD</b> config could also be passed\r\nin this config instead of <code>true</code>. Ext.Panel.DD is an internal, undocumented class which\r\nmoves a proxy Element around in place of the Panel's element, but provides no other behaviour\r\nduring dragging or on drop. It is a subclass of {@link Ext.dd.DragSource}, so behaviour may be\r\nadded by implementing the interface methods of {@link Ext.dd.DragDrop} e.g.:\r\n<pre><code>\r\nnew Ext.Panel({\r\n    title: 'Drag me',\r\n    x: 100,\r\n    y: 100,\r\n    renderTo: Ext.getBody(),\r\n    floating: true,\r\n    frame: true,\r\n    width: 400,\r\n    height: 200,\r\n    draggable: {\r\n//      Config option of Ext.Panel.DD class.\r\n//      It&#39;s a floating Panel, so do not show a placeholder proxy in the original position.\r\n        insertProxy: false,\r\n\r\n//      Called for each mousemove event while dragging the DD object.\r\n        onDrag : function (e) {\r\n//          Record the x,y position of the drag proxy so that we can\r\n//          position the Panel at end of drag.\r\n            var pel = this.proxy.getEl();\r\n            this.x = pel.getLeft(true);\r\n            this.y = pel.getTop(true);\r\n\r\n//          Keep the Shadow aligned if there is one.\r\n            var s = this.panel.getEl().shadow;\r\n            if (s) {\r\n                s.realign(this.x, this.y, pel.getWidth(), pel.getHeight());\r\n            }\r\n        },\r\n\r\n//      Called on the mouseup event.\r\n        endDrag : function (e) {\r\n            this.panel.setPosition(this.x, this.y);\r\n        }\r\n    }\r\n}).show();\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"elements","summary":"A comma-delimited list of panel elements to initialize when the panel is rendered.  Normally, this list will be\r\ngenerated automatically based on the items added to the panel at config time, but sometimes it might be useful to\r\nmake sure a structural element is rendered even if not specified at config time (for example, you may want\r\nto add a button or toolbar dynamically after the panel has been rendered).  Adding those elements to this\r\nlist will allocate the required placeholders in the panel when it is rendered.  Valid values are<div class=\"mdetail-params\"><ul>\r\n<li><code>header</code></li>\r\n<li><code>tbar</code> (top bar)</li>\r\n<li><code>body</code></li>\r\n<li><code>bbar</code> (bottom bar)</li>\r\n<li><code>footer</code></li>\r\n</ul></div>\r\nDefaults to '<code>body</code>'.\r\n"},{"type":"Mixed","optional":false,"name":"floating","summary":"<p>This property is used to configure the underlying {@link Ext.Layer}. Acceptable values for this\r\nconfiguration property are:</p><div class=\"mdetail-params\"><ul>\r\n<li><b><code>false</code></b> : <b>Default.</b><div class=\"sub-desc\">Display the panel inline where it is\r\nrendered.</div></li>\r\n<li><b><code>true</code></b> : <div class=\"sub-desc\">Float the panel (absolute position it with automatic\r\nshimming and shadow).<ul>\r\n<div class=\"sub-desc\">Setting floating to true will create an Ext.Layer for this panel and display the\r\npanel at negative offsets so that it is hidden.</div>\r\n<div class=\"sub-desc\">Since the panel will be absolute positioned, the position must be set explicitly\r\n<i>after</i> render (e.g., <code>myPanel.setPosition(100,100);</code>).</div>\r\n<div class=\"sub-desc\"><b>Note</b>: when floating a panel you should always assign a fixed width,\r\notherwise it will be auto width and will expand to fill to the right edge of the viewport.</div>\r\n</ul></div></li>\r\n<li><b><code>{@link Ext.Layer object}</code></b> : <div class=\"sub-desc\">The specified object will be used\r\nas the configuration object for the {@link Ext.Layer} that will be created.</div></li>\r\n</ul></div>\r\n"},{"type":"Boolean","optional":false,"name":"footer","summary":"<code>true</code> to create the footer element explicitly, false to skip creating it. The footer\r\nwill be created automatically if <code>{@link #buttons}</code> or a <code>{@link #fbar}</code> have\r\nbeen configured.  See <code>{@link #bodyCfg}</code> for an example.\r\n"},{"type":"Object","optional":false,"name":"footerCfg","summary":"<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure\r\nof this Panel's {@link #footer} Element.  See <code>{@link #bodyCfg}</code> also.</p>\r\n"},{"type":"Boolean","optional":false,"name":"frame","summary":"<code>false</code> by default to render with plain 1px square borders. <code>true</code> to render with\r\n9 elements, complete with custom rounded corners (also see {@link Ext.Element#boxWrap}).\r\n<p>The template generated for each condition is depicted below:</p><pre><code>\r\n\r\n// frame = false\r\n&lt;div id=\"developer-specified-id-goes-here\" class=\"x-panel\">\r\n\r\n    &lt;div class=\"x-panel-header\">&lt;span class=\"x-panel-header-text\">Title: (frame:false)&lt;/span>&lt;/div>\r\n\r\n    &lt;div class=\"x-panel-bwrap\">\r\n        &lt;div class=\"x-panel-body\">&lt;p>html value goes here&lt;/p>&lt;/div>\r\n    &lt;/div>\r\n&lt;/div>\r\n\r\n// frame = true (create 9 elements)\r\n&lt;div id=\"developer-specified-id-goes-here\" class=\"x-panel\">\r\n    &lt;div class=\"x-panel-tl\">&lt;div class=\"x-panel-tr\">&lt;div class=\"x-panel-tc\">\r\n        &lt;div class=\"x-panel-header\">&lt;span class=\"x-panel-header-text\">Title: (frame:true)&lt;/span>&lt;/div>\r\n    &lt;/div>&lt;/div>&lt;/div>\r\n\r\n    &lt;div class=\"x-panel-bwrap\">\r\n        &lt;div class=\"x-panel-ml\">&lt;div class=\"x-panel-mr\">&lt;div class=\"x-panel-mc\">\r\n            &lt;div class=\"x-panel-body\">&lt;p>html value goes here&lt;/p>&lt;/div>\r\n        &lt;/div>&lt;/div>&lt;/div>\r\n\r\n        &lt;div class=\"x-panel-bl\">&lt;div class=\"x-panel-br\">&lt;div class=\"x-panel-bc\"/>\r\n        &lt;/div>&lt;/div>&lt;/div>\r\n&lt;/div>\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"header","summary":"<code>true</code> to create the Panel's header element explicitly, <code>false</code> to skip creating\r\nit.  If a <code>{@link #title}</code> is set the header will be created automatically, otherwise it will not.\r\nIf a <code>{@link #title}</code> is set but <code>header</code> is explicitly set to <code>false</code>, the header\r\nwill not be rendered.\r\n"},{"type":"Boolean","optional":false,"name":"headerAsText","summary":"<code>true</code> to display the panel <code>{@link #title}</code> in the <code>{@link #header}</code>,\r\n<code>false</code> to hide it (defaults to <code>true</code>).\r\n"},{"type":"Object","optional":false,"name":"headerCfg","summary":"<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure\r\nof this Panel's {@link #header} Element.  See <code>{@link #bodyCfg}</code> also.</p>\r\n"},{"type":"Boolean","optional":false,"name":"hideCollapseTool","summary":"<code>true</code> to hide the expand/collapse toggle button when <code>{@link #collapsible} == true</code>,\r\n<code>false</code> to display it (defaults to <code>false</code>).\r\n"},{"type":"String/Object","optional":false,"name":"html","summary":"An HTML fragment, or a {@link Ext.DomHelper DomHelper} specification to use as the panel's body\r\ncontent (defaults to ''). The HTML content is added by the Panel's {@link #afterRender} method,\r\nand so the document will not contain this HTML at the time the {@link #render} event is fired.\r\nThis content is inserted into the body <i>before</i> any configured {@link #contentEl} is appended.\r\n"},{"type":"String","optional":false,"name":"iconCls","summary":"The CSS class selector that specifies a background image to be used as the header icon (defaults to '').\r\n<p>An example of specifying a custom icon class would be something like:\r\n</p><pre><code>\r\n// specify the property in the config for the class:\r\n     ...\r\n     iconCls: 'my-icon'\r\n\r\n// css class that specifies background image to be used as the icon image:\r\n.my-icon { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }\r\n</code></pre>\r\n"},{"type":"Object/Array","optional":false,"name":"keys","summary":"A {@link Ext.KeyMap} config object (in the format expected by {@link Ext.KeyMap#addBinding}\r\nused to assign custom key handling to this panel (defaults to <code>null</code>).\r\n"},{"type":"Boolean","optional":false,"name":"maskDisabled","summary":"<code>true</code> to mask the panel when it is {@link #disabled}, <code>false</code> to not mask it (defaults\r\nto <code>true</code>).  Either way, the panel will always tell its contained elements to disable themselves\r\nwhen it is disabled, but masking the panel can provide an additional visual cue that the panel is\r\ndisabled.\r\n"},{"type":"Number","optional":false,"name":"minButtonWidth","summary":"Minimum width in pixels of all {@link #buttons} in this panel (defaults to <code>75</code>)\r\n"},{"type":"Boolean","optional":false,"name":"preventBodyReset","summary":"Defaults to <code>false</code>.  When set to <code>true</code>, an extra css class <code>'x-panel-normal'</code>\r\nwill be added to the panel's element, effectively applying css styles suggested by the W3C\r\n(see http://www.w3.org/TR/CSS21/sample.html) to the Panel's <b>body</b> element (not the header,\r\nfooter, etc.).\r\n"},{"type":"Boolean/String","optional":false,"name":"shadow","summary":"<code>true</code> (or a valid Ext.Shadow {@link Ext.Shadow#mode} value) to display a shadow behind the\r\npanel, <code>false</code> to display no shadow (defaults to <code>'sides'</code>).  Note that this option\r\nonly applies when <code>{@link #floating} = true</code>.\r\n"},{"type":"Number","optional":false,"name":"shadowOffset","summary":"The number of pixels to offset the shadow if displayed (defaults to <code>4</code>). Note that this\r\noption only applies when <code>{@link #floating} = true</code>.\r\n"},{"type":"Boolean","optional":false,"name":"shim","summary":"<code>false</code> to disable the iframe shim in browsers which need one (defaults to <code>true</code>).\r\nNote that this option only applies when <code>{@link #floating} = true</code>.\r\n"},{"type":"String","optional":false,"name":"tabTip","summary":"A string to be used as innerHTML (html tags are accepted) to show in a tooltip when mousing over\r\nthe tab of a Ext.Panel which is an item of a {@link Ext.TabStrip}. {@link Ext.QuickTips}.init()\r\nmust be called in order for the tips to render.\r\n"},{"type":"Object/Array","optional":false,"name":"tbar","summary":"<p>The top toolbar of the panel. This can be a {@link Ext.Toolbar} object, a toolbar config, or an array of\r\nbuttons/button configs to be added to the toolbar.  Note that this is not available as a property after render.\r\nTo access the top toolbar after render, use {@link #getTopToolbar}.</p>\r\n<p><b>Note:</b> Although a Toolbar may contain Field components, these will <b>not</b> be updated by a load\r\nof an ancestor FormPanel. A Panel's toolbars are not part of the standard Container->Component hierarchy, and\r\nso are not scanned to collect form items. However, the values <b>will</b> be submitted because form\r\nsubmission parameters are collected from the DOM tree.</p>\r\n"},{"type":"Object","optional":false,"name":"tbarCfg","summary":"<p>A {@link Ext.DomHelper DomHelper} element specification object specifying the element structure\r\nof this Panel's {@link #tbar} Element.  See <code>{@link #bodyCfg}</code> also.</p>\r\n"},{"type":"String","optional":false,"name":"title","summary":"The title text to be used as innerHTML (html tags are accepted) to display in the panel\r\n<code>{@link #header}</code> (defaults to ''). When a <code>title</code> is specified the\r\n<code>{@link #header}</code> element will automatically be created and displayed unless\r\n{@link #header} is explicitly set to <code>false</code>.  If you do not want to specify a\r\n<code>title</code> at config time, but you may want one later, you must either specify a non-empty\r\n<code>title</code> (a blank space ' ' will do) or <code>header:true</code> so that the container\r\nelement will get created.\r\n"},{"type":"Boolean","optional":false,"name":"titleCollapse","summary":"<code>true</code> to allow expanding and collapsing the panel (when <code>{@link #collapsible} = true</code>)\r\nby clicking anywhere in the header bar, <code>false</code>) to allow it only by clicking to tool button\r\n(defaults to <code>false</code>)). If this panel is a child item of a border layout also see the\r\n{@link Ext.layout.BorderLayout.Region BorderLayout.Region}\r\n<code>{@link Ext.layout.BorderLayout.Region#floatable floatable}</code> config option.\r\n"},{"type":"Array","optional":false,"name":"tools","summary":"An array of tool button configs to be added to the header tool area. When rendered, each tool is\r\nstored as an {@link Ext.Element Element} referenced by a public property called <code><b></b>tools.<i>&lt;tool-type&gt;</i></code>\r\n<p>Each tool config may contain the following properties:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>id</b> : String<div class=\"sub-desc\"><b>Required.</b> The type\r\nof tool to create. By default, this assigns a CSS class of the form <code>x-tool-<i>&lt;tool-type&gt;</i></code> to the\r\nresulting tool Element. Ext provides CSS rules, and an icon sprite containing images for the tool types listed below.\r\nThe developer may implement custom tools by supplying alternate CSS rules and background images:\r\n<ul>\r\n<div class=\"x-tool x-tool-toggle\" style=\"float:left; margin-right:5;\"> </div><div><code> toggle</code> (Created by default when {@link #collapsible} is <code>true</code>)</div>\r\n<div class=\"x-tool x-tool-close\" style=\"float:left; margin-right:5;\"> </div><div><code> close</code></div>\r\n<div class=\"x-tool x-tool-minimize\" style=\"float:left; margin-right:5;\"> </div><div><code> minimize</code></div>\r\n<div class=\"x-tool x-tool-maximize\" style=\"float:left; margin-right:5;\"> </div><div><code> maximize</code></div>\r\n<div class=\"x-tool x-tool-restore\" style=\"float:left; margin-right:5;\"> </div><div><code> restore</code></div>\r\n<div class=\"x-tool x-tool-gear\" style=\"float:left; margin-right:5;\"> </div><div><code> gear</code></div>\r\n<div class=\"x-tool x-tool-pin\" style=\"float:left; margin-right:5;\"> </div><div><code> pin</code></div>\r\n<div class=\"x-tool x-tool-unpin\" style=\"float:left; margin-right:5;\"> </div><div><code> unpin</code></div>\r\n<div class=\"x-tool x-tool-right\" style=\"float:left; margin-right:5;\"> </div><div><code> right</code></div>\r\n<div class=\"x-tool x-tool-left\" style=\"float:left; margin-right:5;\"> </div><div><code> left</code></div>\r\n<div class=\"x-tool x-tool-up\" style=\"float:left; margin-right:5;\"> </div><div><code> up</code></div>\r\n<div class=\"x-tool x-tool-down\" style=\"float:left; margin-right:5;\"> </div><div><code> down</code></div>\r\n<div class=\"x-tool x-tool-refresh\" style=\"float:left; margin-right:5;\"> </div><div><code> refresh</code></div>\r\n<div class=\"x-tool x-tool-minus\" style=\"float:left; margin-right:5;\"> </div><div><code> minus</code></div>\r\n<div class=\"x-tool x-tool-plus\" style=\"float:left; margin-right:5;\"> </div><div><code> plus</code></div>\r\n<div class=\"x-tool x-tool-help\" style=\"float:left; margin-right:5;\"> </div><div><code> help</code></div>\r\n<div class=\"x-tool x-tool-search\" style=\"float:left; margin-right:5;\"> </div><div><code> search</code></div>\r\n<div class=\"x-tool x-tool-save\" style=\"float:left; margin-right:5;\"> </div><div><code> save</code></div>\r\n<div class=\"x-tool x-tool-print\" style=\"float:left; margin-right:5;\"> </div><div><code> print</code></div>\r\n</ul></div></li>\r\n<li><b>handler</b> : Function<div class=\"sub-desc\"><b>Required.</b> The function to\r\ncall when clicked. Arguments passed are:<ul>\r\n<li><b>event</b> : Ext.EventObject<div class=\"sub-desc\">The click event.</div></li>\r\n<li><b>toolEl</b> : Ext.Element<div class=\"sub-desc\">The tool Element.</div></li>\r\n<li><b>panel</b> : Ext.Panel<div class=\"sub-desc\">The host Panel</div></li>\r\n<li><b>tc</b> : Ext.Panel<div class=\"sub-desc\">The tool configuration object</div></li>\r\n</ul></div></li>\r\n<li><b>stopEvent</b> : Boolean<div class=\"sub-desc\">Defaults to true. Specify as false to allow click event to propagate.</div></li>\r\n<li><b>scope</b> : Object<div class=\"sub-desc\">The scope in which to call the handler.</div></li>\r\n<li><b>qtip</b> : String/Object<div class=\"sub-desc\">A tip string, or\r\na config argument to {@link Ext.QuickTip#register}</div></li>\r\n<li><b>hidden</b> : Boolean<div class=\"sub-desc\">True to initially render hidden.</div></li>\r\n<li><b>on</b> : Object<div class=\"sub-desc\">A listener config object specifiying\r\nevent listeners in the format of an argument to {@link #addListener}</div></li>\r\n</ul></div>\r\n<p>Note that, apart from the toggle tool which is provided when a panel is collapsible, these\r\ntools only provide the visual button. Any required functionality must be provided by adding\r\nhandlers that implement the necessary behavior.</p>\r\n<p>Example usage:</p>\r\n<pre><code>\r\ntools:[{\r\n    id:'refresh',\r\n    qtip: 'Refresh form Data',\r\n    // hidden:true,\r\n    handler: function (event, toolEl, panel) {\r\n        // refresh logic\r\n    }\r\n},\r\n{\r\n    id:'help',\r\n    qtip: 'Get Help',\r\n    handler: function (event, toolEl, panel) {\r\n        // whatever\r\n    }\r\n}]\r\n</code></pre>\r\n<p>For the custom id of <code>'help'</code> define two relevant css classes with a link to\r\na 15x15 image:</p>\r\n<pre><code>\r\n.x-tool-help {background-image: url(images/help.png);}\r\n.x-tool-help-over {background-image: url(images/help_over.png);}\r\n// if using an image sprite:\r\n.x-tool-help {background-image: url(images/help.png) no-repeat 0 0;}\r\n.x-tool-help-over {background-position:-15px 0;}\r\n</code></pre>\r\n"},{"type":"Ext.Template/Ext.XTemplate","optional":false,"name":"toolTemplate","summary":"<p>A Template used to create {@link #tools} in the {@link #header} Element. Defaults to:</p><pre><code>\r\nnew Ext.Template('&lt;div class=\"x-tool x-tool-{id}\">&amp;#160;&lt;/div>')</code></pre>\r\n<p>This may may be overridden to provide a custom DOM structure for tools based upon a more\r\ncomplex XTemplate. The template's data is a single tool configuration object (Not the entire Array)\r\nas specified in {@link #tools}.  In the following example an &lt;a> tag is used to provide a\r\nvisual indication when hovering over the tool:</p><pre><code>\r\nvar win = new Ext.Window({\r\n    tools: [{\r\n        id: 'download',\r\n        href: '/MyPdfDoc.pdf'\r\n    }],\r\n    toolTemplate: new Ext.XTemplate(\r\n        '&lt;tpl if=\"id==\\'download\\'\">',\r\n            '&lt;a class=\"x-tool x-tool-pdf\" href=\"{href}\">&lt;/a>',\r\n        '&lt;/tpl>',\r\n        '&lt;tpl if=\"id!=\\'download\\'\">',\r\n            '&lt;div class=\"x-tool x-tool-{id}\">&amp;#160;&lt;/div>',\r\n        '&lt;/tpl>'\r\n    ),\r\n    width:500,\r\n    height:300,\r\n    closeAction:'hide'\r\n});</code></pre>\r\n<p>Note that the CSS class 'x-tool-pdf' should have an associated style rule which provides an\r\nappropriate background image, something like:</p>\r\n    <pre><code>\r\n    a.x-tool-pdf {background-image: url(../shared/extjs/images/pdf.gif)!important;}\r\n    </code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"unstyled","summary":"Overrides the <code>{@link #baseCls}</code> setting to <code>{@link #baseCls} = 'x-plain'</code> which renders\r\nthe panel unstyled except for required attributes for Ext layouts to function (e.g. overflow:hidden).\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"body","summary":"The Panel's body {@link Ext.Element Element} which may be used to contain HTML content.\r\nThe content may be specified in the {@link #html} config, or it may be loaded using the\r\n{@link autoLoad} config, or through the Panel's {@link #getUpdater Updater}. Read-only.\r\n<p>If this is used to load visible HTML elements in either way, then\r\nthe Panel may not be used as a Layout for hosting nested Panels.</p>\r\n<p>If this Panel is intended to be used as the host of a Layout (See {@link #layout}\r\nthen the body Element must not be loaded or changed - it is under the control\r\nof the Panel's Layout.\r\n<br><p><b>Note</b>: see the Note for <code>{@link Ext.Component#el el}</code> also.</p>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"buttons","summary":"This Panel's Array of buttons as created from the <code>{@link #buttons}</code>\r\nconfig property. Read only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"bwrap","summary":"The Panel's bwrap {@link Ext.Element Element} used to contain other Panel elements\r\n(tbar, body, bbar, footer). See {@link #bodyCfg}. Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"collapsed","summary":"True if this panel is collapsed. Read-only.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"dd","summary":"<p>If this Panel is configured {@link #draggable}, this property will contain\r\nan instance of {@link Ext.dd.DragSource} which handles dragging the Panel.</p>\r\nThe developer must provide implementations of the abstract methods of {@link Ext.dd.DragSource}\r\nin order to supply behaviour for each stage of the drag/drop process. See {@link #draggable}.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"footer","summary":"The Panel's footer {@link Ext.Element Element}. Read-only.\r\n<p>This Element is used to house the Panel's <code>{@link #buttons}</code> or <code>{@link #fbar}</code>.</p>\r\n<br><p><b>Note</b>: see the Note for <code>{@link Ext.Component#el el}</code> also.</p>\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"header","summary":"The Panel's header {@link Ext.Element Element}. Read-only.\r\n<p>This Element is used to house the {@link #title} and {@link #tools}</p>\r\n<br><p><b>Note</b>: see the Note for <code>{@link Ext.Component#el el}</code> also.</p>\r\n"}],"methods":[{"parameters":[{"type":"String/Object","optional":false,"name":"config","summary":"A valid {@link Ext.Button} config.  A string will become the text for a default\r\nbutton config, an object will be treated as a button config object."},{"type":"Function","optional":false,"name":"handler","summary":"The function to be called on button {@link Ext.Button#click}"},{"type":"Object","optional":false,"name":"scope","summary":"The scope to use for the button handler function"}],"return":{"type":"Ext.Button","summary":"The button that was added"},"hide":false,"private":false,"name":"addButton","summary":"Adds a button to this panel.  Note that this method must be called prior to rendering.  The preferred\r\napproach is to add buttons via the {@link #buttons} config.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"animate","summary":"True to animate the transition, else false (defaults to the value of the\r\n{@link #animCollapse} panel config)"}],"return":{"type":"Ext.Panel","summary":"this"},"hide":false,"private":false,"name":"collapse","summary":"Collapses the panel body so that it becomes hidden.  Fires the {@link #beforecollapse} event which will\r\ncancel the collapse action if it returns false.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"animate","summary":"True to animate the transition, else false (defaults to the value of the\r\n{@link #animCollapse} panel config)"}],"return":{"type":"Ext.Panel","summary":"this"},"hide":false,"private":false,"name":"expand","summary":"Expands the panel body so that it becomes visible.  Fires the {@link #beforeexpand} event which will\r\ncancel the expand action if it returns false.\r\n"},{"parameters":[],"return":{"type":"Ext.Toolbar","summary":"The toolbar"},"hide":false,"private":false,"name":"getBottomToolbar","summary":"Returns the {@link Ext.Toolbar toolbar} from the bottom (<code>{@link #bbar}</code>) section of the panel.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The frame height"},"hide":false,"private":false,"name":"getFrameHeight","summary":"Returns the height in pixels of the framing elements of this panel (including any top and bottom bars and\r\nheader and footer elements, but not including the body height).  To retrieve the body height see {@link #getInnerHeight}.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The frame width"},"hide":false,"private":false,"name":"getFrameWidth","summary":"Returns the width in pixels of the framing elements of this panel (not including the body width).  To\r\nretrieve the body width see {@link #getInnerWidth}.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The body height"},"hide":false,"private":false,"name":"getInnerHeight","summary":"Returns the height in pixels of the body element (not including the height of any framing elements).\r\nFor the frame height see {@link #getFrameHeight}.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The body width"},"hide":false,"private":false,"name":"getInnerWidth","summary":"Returns the width in pixels of the body element (not including the width of any framing elements).\r\nFor the frame width see {@link #getFrameWidth}.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":""}],"return":{"type":"Object","summary":"tool"},"hide":false,"private":false,"name":"getTool","summary":"Retrieve a tool by id.\r\n"},{"parameters":[],"return":{"type":"Ext.Toolbar","summary":"The toolbar"},"hide":false,"private":false,"name":"getTopToolbar","summary":"Returns the {@link Ext.Toolbar toolbar} from the top (<code>{@link #tbar}</code>) section of the panel.\r\n"},{"parameters":[],"return":{"type":"Ext.Updater","summary":"The Updater"},"hide":false,"private":false,"name":"getUpdater","summary":"Get the {@link Ext.Updater} for this panel. Enables you to perform Ajax updates of this panel's body.\r\n"},{"parameters":[{"type":"Object/String/Function","optional":false,"name":"config","summary":"A config object containing any of the following options:\r\n<pre><code>\r\npanel.load({\r\nurl: 'your-url.php',\r\nparams: {param1: 'foo', param2: 'bar'}, // or a URL encoded string\r\ncallback: yourFunction,\r\nscope: yourObject, // optional scope for the callback\r\ndiscardUrl: false,\r\nnocache: false,\r\ntext: 'Loading...',\r\ntimeout: 30,\r\nscripts: false\r\n});\r\n</code></pre>\r\nThe only required property is url. The optional properties nocache, text and scripts\r\nare shorthand for disableCaching, indicatorText and loadScripts and are used to set their\r\nassociated property on this panel Updater instance."}],"return":{"type":"Ext.Panel","summary":"this"},"hide":false,"private":false,"name":"load","summary":"Loads this content panel immediately with content returned from an XHR call.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"cls","summary":"The new CSS class name"}],"return":null,"hide":false,"private":false,"name":"setIconClass","summary":"Sets the CSS class that provides the icon image for this panel.  This method will replace any existing\r\nicon class if one has already been set and fire the {@link #iconchange} event after completion.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"title","summary":"The title text to set"},{"type":"String","optional":true,"name":"iconCls","summary":"{@link #iconCls iconCls} A user-defined CSS class that provides the icon image for this panel"}],"return":null,"hide":false,"private":false,"name":"setTitle","summary":"<p>Sets the title text for the panel and optionally the {@link #iconCls icon class}.</p>\r\n<p>In order to be able to set the title, a header element must have been created\r\nfor the Panel. This is triggered either by configuring the Panel with a non-blank <code>{@link #title}</code>,\r\nor configuring it with <code><b>{@link #header}: true</b></code>.</p>\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"animate","summary":"True to animate the transition, else false (defaults to the value of the\r\n{@link #animCollapse} panel config)"}],"return":{"type":"Ext.Panel","summary":"this"},"hide":false,"private":false,"name":"toggleCollapse","summary":"Shortcut for performing an {@link #expand} or {@link #collapse} based on the current state of the panel.\r\n"}],"events":[{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"The Panel that has been activated."}],"name":"activate","summary":"Fires after the Panel has been visually activated. Note that Panels do not directly support being activated, but some Panel subclasses do (like {@link Ext.Window}). Panels which are child Components of a TabStrip fire the activate and deactivate events under the control of the TabStrip."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"The Panel being closed."}],"name":"beforeclose","summary":"Fires before the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like {@link Ext.Window}) or a Panel within a Ext.TabStrip. This event only applies to such subclasses. A handler can return false to cancel the close."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"the Panel being collapsed."},{"type":"Boolean","optional":false,"name":"animate","summary":"True if the collapse is animated, else false."}],"name":"beforecollapse","summary":"Fires before the Panel is collapsed. A handler can return false to cancel the collapse."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"The Panel being expanded."},{"type":"Boolean","optional":false,"name":"animate","summary":"True if the expand is animated, else false."}],"name":"beforeexpand","summary":"Fires before the Panel is expanded. A handler can return false to cancel the expand."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"the Panel which has been resized."},{"type":"Number","optional":false,"name":"width","summary":"The Panel's new width."},{"type":"Number","optional":false,"name":"height","summary":"The Panel's new height."}],"name":"bodyresize","summary":"Fires after the Panel has been resized."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"The Panel that has been closed."}],"name":"close","summary":"Fires after the Panel is closed. Note that Panels do not directly support being closed, but some Panel subclasses do (like {@link Ext.Window}) or a Panel within a Ext.TabStrip."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"the Panel that has been collapsed."}],"name":"collapse","summary":"Fires after the Panel has been collapsed."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"The Panel that has been deactivated."}],"name":"deactivate","summary":"Fires after the Panel has been visually deactivated. Note that Panels do not directly support being deactivated, but some Panel subclasses do (like {@link Ext.Window}). Panels which are child Components of a TabStrip fire the activate and deactivate events under the control of the TabStrip."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"The Panel that has been expanded."}],"name":"expand","summary":"Fires after the Panel has been expanded."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"the Panel which has had its {@link #iconCls icon class} changed."}],"name":"iconchange","summary":"Fires after the Panel icon class has been {@link #iconCls set} or {@link #setIconClass changed}."},{"parameters":[{"type":"Ext.Panel","optional":false,"name":"p","summary":"the Panel which has had its title changed."}],"name":"titlechange","summary":"Fires after the Panel title has been {@link #title set} or {@link #setTitle changed}."}]},{"name":"ProgressBar","fullName":"Ext.ProgressBar","summary":"<p>An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.</p>\r\n<p>In manual mode, you are responsible for showing, updating (via {@link #updateProgress}) and clearing the\r\nprogress bar as needed from your own code.  This method is most appropriate when you want to show progress\r\nthroughout an operation that has predictable points of interest at which you can update the control.</p>\r\n<p>In automatic mode, you simply call {@link #wait} and let the progress bar run indefinitely, only clearing it\r\nonce the operation is complete.  You can optionally have the progress bar wait for a specific amount of time\r\nand then clear itself.  Automatic mode is most appropriate for timed operations or asynchronous operations in\r\nwhich you have no need for indicating intermediate progress.</p>\r\n@cfg {Float} value A floating point value between 0 and 1 (e.g., .5, defaults to 0)\r\n@cfg {String} text The progress bar text (defaults to '')\r\n@cfg {Mixed} textEl The element to render the progress text to (defaults to the progress\r\nbar's internal text element)\r\n@cfg {String} id The progress bar element's id (defaults to an auto-generated id)\r\n","package":"Ext","definedIn":"widgets\\ProgressBar.js","xtype":"progress","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"animate","summary":"True to animate the progress bar during transitions (defaults to false)\r\n"},{"type":"String","optional":false,"name":"baseCls","summary":"The base CSS class to apply to the progress bar's wrapper element (defaults to 'x-progress')\r\n"}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Boolean","summary":"True if waiting, else false"},"hide":false,"private":false,"name":"isWaiting","summary":"Returns true if the progress bar is currently in a {@link #wait} operation\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"hide","summary":"True to hide the progress bar (defaults to false)"}],"return":{"type":"Ext.ProgressBar","summary":"this"},"hide":false,"private":false,"name":"reset","summary":"Resets the progress bar value to 0 and text to empty string.  If hide = true, the progress\r\nbar will also be hidden (using the {@link #hideMode} property internally).\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"width","summary":"The new width in pixels"},{"type":"Number","optional":false,"name":"height","summary":"The new height in pixels"}],"return":{"type":"Ext.ProgressBar","summary":"this"},"hide":false,"private":false,"name":"setSize","summary":"Sets the size of the progress bar.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"syncProgressBar","summary":"Synchronizes the inner bar width to the proper proportion of the total componet width based\r\non the current progress {@link #value}.  This will be called automatically when the ProgressBar\r\nis resized by a layout, but if it is rendered auto width, this method can be called from\r\nanother resize handler to sync the ProgressBar if necessary.\r\n"},{"parameters":[{"type":"Float","optional":true,"name":"value","summary":"A floating point value between 0 and 1 (e.g., .5, defaults to 0)"},{"type":"String","optional":true,"name":"text","summary":"The string to display in the progress text element (defaults to '')"},{"type":"Boolean","optional":true,"name":"animate","summary":"Whether to animate the transition of the progress bar. If this value is\r\nnot specified, the default for the class is used (default to false)"}],"return":{"type":"Ext.ProgressBar","summary":"this"},"hide":false,"private":false,"name":"updateProgress","summary":"Updates the progress bar value, and optionally its text.  If the text argument is not specified,\r\nany existing text value will be unchanged.  To blank out existing text, pass ''.  Note that even\r\nif the progress bar value exceeds 1, it will never automatically reset -- you are responsible for\r\ndetermining when the progress is complete and calling {@link #reset} to clear and/or hide the control.\r\n"},{"parameters":[{"type":"String","optional":true,"name":"text","summary":"The string to display in the progress text element (defaults to '')"}],"return":{"type":"Ext.ProgressBar","summary":"this"},"hide":false,"private":false,"name":"updateText","summary":"Updates the progress bar text.  If specified, textEl will be updated, otherwise the progress\r\nbar itself will display the updated text.\r\n"},{"parameters":[{"type":"Object","optional":true,"name":"config","summary":"Configuration options"}],"return":{"type":"Ext.ProgressBar","summary":"this"},"hide":false,"private":false,"name":"wait","summary":"Initiates an auto-updating progress bar.  A duration can be specified, in which case the progress\r\nbar will automatically reset after a fixed amount of time and optionally call a callback function\r\nif specified.  If no duration is passed in, then the progress bar will run indefinitely and must\r\nbe manually cleared by calling {@link #reset}.  The wait method accepts a config object with\r\nthe following properties:\r\n<pre>\r\nProperty   Type          Description\r\n---------- ------------  ----------------------------------------------------------------------\r\nduration   Number        The length of time in milliseconds that the progress bar should\r\n                         run before resetting itself (defaults to undefined, in which case it\r\n                         will run indefinitely until reset is called)\r\ninterval   Number        The length of time in milliseconds between each progress update\r\n                         (defaults to 1000 ms)\r\nanimate    Boolean       Whether to animate the transition of the progress bar. If this value is\r\n                         not specified, the default for the class is used.                                                   \r\nincrement  Number        The number of progress update segments to display within the progress\r\n                         bar (defaults to 10).  If the bar reaches the end and is still\r\n                         updating, it will automatically wrap back to the beginning.\r\ntext       String        Optional text to display in the progress bar element (defaults to '').\r\nfn         Function      A callback function to execute after the progress bar finishes auto-\r\n                         updating.  The function will be called with no arguments.  This function\r\n                         will be ignored if duration is not specified since in that case the\r\n                         progress bar can only be stopped programmatically, so any required function\r\n                         should be called by the same code after it resets the progress bar.\r\nscope      Object        The scope that is passed to the callback function (only applies when\r\n                         duration and fn are both passed).\r\n</pre>\r\n\r\nExample usage:\r\n<pre><code>\r\nvar p = new Ext.ProgressBar({\r\n   renderTo: 'my-el'\r\n});\r\n\r\n//Wait for 5 seconds, then update the status el (progress bar will auto-reset)\r\np.wait({\r\n   interval: 100, //bar will move fast!\r\n   duration: 5000,\r\n   increment: 15,\r\n   text: 'Updating...',\r\n   scope: this,\r\n   fn: function () {\r\n      Ext.fly('status').update('Done!');\r\n   }\r\n});\r\n\r\n//Or update indefinitely until some async action completes, then reset manually\r\np.wait();\r\nmyAction.on('complete', function () {\r\n    p.reset();\r\n    Ext.fly('status').update('Done!');\r\n});\r\n</code></pre>\r\n"}],"events":[{"parameters":[{"type":"Ext.ProgressBar","optional":false,"name":"el","summary":"this"}],"name":"update","summary":"Fires after each update interval."}]},{"name":"QuickTip","fullName":"Ext.QuickTip","summary":"A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global\r\n{@link Ext.QuickTips} instance.  See the QuickTips class header for additional usage details and examples.\r\n","package":"Ext","definedIn":"widgets\\tips\\QuickTip.js","xtype":"quicktip","extends":"Ext.ToolTip","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Tip."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"interceptTitles","summary":""},{"type":"Mixed","optional":false,"name":"target","summary":""}],"properties":[],"methods":[{"parameters":[{"type":"String/HTMLElement/Element","optional":false,"name":"el","summary":"The element that is the target of the tip."}],"return":null,"hide":false,"private":false,"name":"cancelShow","summary":"Hides a visible tip or cancels an impending show for a particular element.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":"register","summary":"Configures a new quick tip instance and assigns it to a target element.  The following config values are\r\nsupported (for example usage, see the {@link Ext.QuickTips} class header):\r\n<div class=\"mdetail-params\"><ul>\r\n<li>autoHide</li>\r\n<li>cls</li>\r\n<li>dismissDelay (overrides the singleton value)</li>\r\n<li>target (required)</li>\r\n<li>text (required)</li>\r\n<li>title</li>\r\n<li>width</li></ul></div>\r\n"},{"parameters":[{"type":"String/HTMLElement/Element","optional":false,"name":"el","summary":"The element from which the quick tip is to be removed."}],"return":null,"hide":false,"private":false,"name":"unregister","summary":"Removes this quick tip from its element and destroys it.\r\n"}],"events":[]},{"name":"QuickTips","fullName":"Ext.QuickTips","summary":"<p>Provides attractive and customizable tooltips for any element. The QuickTips\r\nsingleton is used to configure and manage tooltips globally for multiple elements\r\nin a generic manner.  To create individual tooltips with maximum customizability,\r\nyou should consider either {@link Ext.Tip} or {@link Ext.ToolTip}.</p>\r\n<p>Quicktips can be configured via tag attributes directly in markup, or by\r\nregistering quick tips programmatically via the {@link #register} method.</p>\r\n<p>The singleton's instance of {@link Ext.QuickTip} is available via\r\n{@link #getQuickTip}, and supports all the methods, and all the all the\r\nconfiguration properties of Ext.QuickTip. These settings will apply to all\r\ntooltips shown by the singleton.</p>\r\n<p>Below is the summary of the configuration properties which can be used.\r\nFor detailed descriptions see {@link #getQuickTip}</p>\r\n<p><b>QuickTips singleton configs (all are optional)</b></p>\r\n<div class=\"mdetail-params\"><ul><li>dismissDelay</li>\r\n<li>hideDelay</li>\r\n<li>maxWidth</li>\r\n<li>minWidth</li>\r\n<li>showDelay</li>\r\n<li>trackMouse</li></ul></div>\r\n<p><b>Target element configs (optional unless otherwise noted)</b></p>\r\n<div class=\"mdetail-params\"><ul><li>autoHide</li>\r\n<li>cls</li>\r\n<li>dismissDelay (overrides singleton value)</li>\r\n<li>target (required)</li>\r\n<li>text (required)</li>\r\n<li>title</li>\r\n<li>width</li></ul></div>\r\n<p>Here is an example showing how some of these config options could be used:</p>\r\n<pre><code>\r\n// Init the singleton.  Any tag-based quick tips will start working.\r\nExt.QuickTips.init();\r\n\r\n// Apply a set of config properties to the singleton\r\nExt.apply(Ext.QuickTips.getQuickTip(), {\r\n    maxWidth: 200,\r\n    minWidth: 100,\r\n    showDelay: 50,\r\n    trackMouse: true\r\n});\r\n\r\n// Manually register a quick tip for a specific element\r\nExt.QuickTips.register({\r\n    target: 'my-div',\r\n    title: 'My Tooltip',\r\n    text: 'This tooltip was added in code',\r\n    width: 100,\r\n    dismissDelay: 20\r\n});\r\n</code></pre>\r\n<p>To register a quick tip in markup, you simply add one or more of the valid QuickTip attributes prefixed with\r\nthe <b>ext:</b> namespace.  The HTML element itself is automatically set as the quick tip target. Here is the summary\r\nof supported attributes (optional unless otherwise noted):</p>\r\n<ul><li><b>hide</b>: Specifying \"user\" is equivalent to setting autoHide = false.  Any other value will be the\r\nsame as autoHide = true.</li>\r\n<li><b>qclass</b>: A CSS class to be applied to the quick tip (equivalent to the 'cls' target element config).</li>\r\n<li><b>qtip (required)</b>: The quick tip text (equivalent to the 'text' target element config).</li>\r\n<li><b>qtitle</b>: The quick tip title (equivalent to the 'title' target element config).</li>\r\n<li><b>qwidth</b>: The quick tip width (equivalent to the 'width' target element config).</li></ul>\r\n<p>Here is an example of configuring an HTML element to display a tooltip from markup:</p>\r\n<pre><code>\r\n// Add a quick tip to an HTML button\r\n&lt;input type=\"button\" value=\"OK\" ext:qtitle=\"OK Button\" ext:qwidth=\"100\"\r\n     ext:qtip=\"This is a quick tip from markup!\">&lt;/input>\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\tips\\QuickTips.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"disable","summary":"Disable quick tips globally.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"enable","summary":"Enable quick tips globally.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getQuickTip","summary":"Gets the global QuickTips instance.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"autoRender","summary":"True to render the QuickTips container immediately to preload images. (Defaults to true)"}],"return":null,"hide":false,"private":false,"name":"init","summary":"Initialize the global QuickTips instance and prepare any quick tips.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isEnabled","summary":"Returns true if quick tips are enabled, else false.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":"register","summary":"Configures a new quick tip instance and assigns it to a target element.  See\r\n{@link Ext.QuickTip#register} for details.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":"tips","summary":"Alias of {@link #register}.\r\n"},{"parameters":[{"type":"String/HTMLElement/Element","optional":false,"name":"el","summary":"The element from which the quick tip is to be removed."}],"return":null,"hide":false,"private":false,"name":"unregister","summary":"Removes any registered quick tip from the target element and destroys it.\r\n"}],"events":[]},{"name":"Resizable","fullName":"Ext.Resizable","summary":"<p>Applies drag handles to an element to make it resizable. The drag handles are inserted into the element\r\nand positioned absolute. Some elements, such as a textarea or image, don't support this. To overcome that, you can wrap\r\nthe textarea in a div and set 'resizeChild' to true (or to the id of the element), <b>or</b> set wrap:true in your config and\r\nthe element will be wrapped for you automatically.</p>\r\n<p>Here is the list of valid resize handles:</p>\r\n<pre>\r\nValue   Description\r\n------  -------------------\r\n 'n'     north\r\n 's'     south\r\n 'e'     east\r\n 'w'     west\r\n 'nw'    northwest\r\n 'sw'    southwest\r\n 'se'    southeast\r\n 'ne'    northeast\r\n 'all'   all\r\n</pre>\r\n<p>Here's an example showing the creation of a typical Resizable:</p>\r\n<pre><code>\r\nvar resizer = new Ext.Resizable('element-id', {\r\n    handles: 'all',\r\n    minWidth: 200,\r\n    minHeight: 100,\r\n    maxWidth: 500,\r\n    maxHeight: 400,\r\n    pinned: true\r\n});\r\nresizer.on('resize', myHandler);\r\n</code></pre>\r\n<p>To hide a particular handle, set its display to none in CSS, or through script:<br>\r\nresizer.east.setDisplayed(false);</p>\r\n","package":"Ext","definedIn":"widgets\\Resizable.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The id or element to resize"},{"type":"Object","optional":false,"name":"config","summary":"configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new resizable component."},"subclasses":"","configOptions":[{"type":"Array/String","optional":false,"name":"adjustments","summary":"resize operation's new size (defaults to <tt>[0, 0]</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"animate","summary":""},{"type":"Mixed","optional":false,"name":"constrainTo","summary":""},{"type":"Boolean","optional":false,"name":"disableTrackOver","summary":""},{"type":"Boolean","optional":false,"name":"draggable","summary":""},{"type":"Number","optional":false,"name":"duration","summary":""},{"type":"Boolean","optional":false,"name":"dynamic","summary":""},{"type":"String","optional":false,"name":"easing","summary":""},{"type":"Boolean","optional":false,"name":"enabled","summary":""},{"type":"String","optional":false,"name":"handles","summary":"Specify either <tt>'all'</tt> or any of <tt>'n s e w ne nw se sw'</tt>.\r\n"},{"type":"Number","optional":false,"name":"height","summary":""},{"type":"Number","optional":false,"name":"heightIncrement","summary":"(only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.\r\n"},{"type":"Number","optional":false,"name":"maxHeight","summary":""},{"type":"Number","optional":false,"name":"maxWidth","summary":""},{"type":"Number","optional":false,"name":"minHeight","summary":""},{"type":"Number","optional":false,"name":"minWidth","summary":""},{"type":"Number","optional":false,"name":"minX","summary":""},{"type":"Number","optional":false,"name":"minY","summary":""},{"type":"Boolean","optional":false,"name":"multiDirectional","summary":""},{"type":"Boolean","optional":false,"name":"pinned","summary":"user mouses over the resizable borders. This is only applied at config time. (defaults to false)\r\n"},{"type":"Boolean","optional":false,"name":"preserveRatio","summary":"and width during resize (defaults to false)\r\n"},{"type":"Boolean/String/Element","optional":false,"name":"resizeChild","summary":""},{"type":"Ext.lib.Region","optional":false,"name":"resizeRegion","summary":""},{"type":"Boolean","optional":false,"name":"transparent","summary":""},{"type":"Number","optional":false,"name":"width","summary":""},{"type":"Number","optional":false,"name":"widthIncrement","summary":"(only applies if <code>{@link #dynamic}==true</code>). Defaults to <tt>0</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"wrap","summary":"in favor of the handles config option (defaults to false)\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"enabled Writable. False if resizing is disabled.","summary":""},{"type":"","static":false,"hide":false,"private":false,"name":"proxy","summary":"The proxy Element that is resized in place of the real Element during the resize operation.\r\nThis may be queried using {@link Ext.Element#getBox} to provide the new area to resize to.\r\nRead only.\r\n"}],"methods":[{"parameters":[{"type":"Boolean","optional":true,"name":"removeEl","summary":"true to remove the element from the DOM"}],"return":null,"hide":false,"private":false,"name":"destroy","summary":"Destroys this resizable. If the element was wrapped and\r\nremoveEl is not true then the element remains.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":""},"hide":false,"private":false,"name":"getEl","summary":"Returns the element this component is bound to.\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":""},"hide":false,"private":false,"name":"getResizeChild","summary":"Returns the resizeChild element (or null).\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"resizeElement","summary":"<p>Performs resizing of the associated Element. This method is called internally by this\r\nclass, and should not be called by user code.</p>\r\n<p>If a Resizable is being used to resize an Element which encapsulates a more complex UI\r\ncomponent such as a Panel, this method may be overridden by specifying an implementation\r\nas a config option to provide appropriate behaviour at the end of the resize operation on\r\nmouseup, for example resizing the Panel, and relaying the Panel's content.</p>\r\n<p>The new area to be resized to is available by examining the state of the {@link #proxy}\r\nElement. Example:\r\n<pre><code>\r\nnew Ext.Panel({\r\n    title: 'Resize me',\r\n    x: 100,\r\n    y: 100,\r\n    renderTo: Ext.getBody(),\r\n    floating: true,\r\n    frame: true,\r\n    width: 400,\r\n    height: 200,\r\n    listeners: {\r\n        render: function (p) {\r\n            new Ext.Resizable(p.getEl(), {\r\n                handles: 'all',\r\n                pinned: true,\r\n                transparent: true,\r\n                resizeElement: function () {\r\n                    var box = this.proxy.getBox();\r\n                    p.updateBox(box);\r\n                    if (p.layout) {\r\n                        p.doLayout();\r\n                    }\r\n                    return box;\r\n                }\r\n           });\r\n       }\r\n    }\r\n}).show();\r\n</code></pre>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"width","summary":""},{"type":"Number","optional":false,"name":"height","summary":""}],"return":null,"hide":false,"private":false,"name":"resizeTo","summary":"Perform a manual resize and fires the 'resize' event.\r\n"}],"events":[{"parameters":[{"type":"Ext.Resizable","optional":false,"name":"el","summary":"this"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The mousedown event"}],"name":"beforeresize","summary":"Fired before resize is allowed. Set {@link #enabled} to false to cancel resize."},{"parameters":[{"type":"Ext.Resizable","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"width","summary":"The new width"},{"type":"Number","optional":false,"name":"height","summary":"The new height"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The mouseup event"}],"name":"resize","summary":"Fired after a resize."}]},{"name":"Shadow","fullName":"Ext.Shadow","summary":"Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,\r\nand the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced\r\nfunctionality that can also provide the same shadow effect, see the {@link Ext.Layer} class.\r\n","package":"Ext","definedIn":"widgets\\Shadow.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Shadow."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"mode","summary":"The shadow display mode.  Supports the following options:<div class=\"mdetail-params\"><ul>\r\n<li><b><tt>sides</tt></b> : Shadow displays on both sides and bottom only</li>\r\n<li><b><tt>frame</tt></b> : Shadow displays equally on all four sides</li>\r\n<li><b><tt>drop</tt></b> : Traditional bottom-right drop shadow</li>\r\n</ul></div>\r\n"},{"type":"String","optional":false,"name":"offset","summary":"The number of pixels to offset the shadow from the element (defaults to <tt>4</tt>)\r\n"}],"properties":[],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hides this shadow\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isVisible","summary":"Returns true if the shadow is visible, else false\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"left","summary":"The target element left position"},{"type":"Number","optional":false,"name":"top","summary":"The target element top position"},{"type":"Number","optional":false,"name":"width","summary":"The target element width"},{"type":"Number","optional":false,"name":"height","summary":"The target element height"}],"return":null,"hide":false,"private":false,"name":"realign","summary":"Direct alignment when values are already available. Show must be called at least once before\r\ncalling this method to ensure it is initialized.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"zindex","summary":"The new z-index"}],"return":null,"hide":false,"private":false,"name":"setZIndex","summary":"Adjust the z-index of this shadow\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"targetEl","summary":"The id or element under which the shadow should display"}],"return":null,"hide":false,"private":false,"name":"show","summary":"Displays the shadow under the target element\r\n"}],"events":[]},{"name":"Slider","fullName":"Ext.Slider","summary":"Slider which supports vertical or horizontal orientation, keyboard adjustments,\r\nconfigurable snapping, axis clicking and animation. Can be added as an item to\r\nany container. Example usage:\r\n<pre><code>\r\nnew Ext.Slider({\r\n    renderTo: Ext.getBody(),\r\n    width: 200,\r\n    value: 50,\r\n    increment: 10,\r\n    minValue: 0,\r\n    maxValue: 100\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Slider.js","xtype":null,"extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"animate","summary":""},{"type":"Boolean","optional":false,"name":"clickToChange","summary":""},{"type":"Number/Boolean","optional":false,"name":"decimalPrecision.","summary":"<p>The number of decimal places to which to round the Slider's value. Defaults to 0.</p>\r\n<p>To disable rounding, configure as <tt><b>false</b></tt>.</p>\r\n"},{"type":"Number","optional":false,"name":"increment","summary":""},{"type":"Number","optional":false,"name":"keyIncrement","summary":""},{"type":"Number","optional":false,"name":"maxValue","summary":""},{"type":"Number","optional":false,"name":"minValue","summary":""},{"type":"Number","optional":false,"name":"value","summary":""},{"type":"Boolean","optional":false,"name":"vertical","summary":""}],"properties":[],"methods":[{"parameters":[],"return":{"type":"Number","summary":"The current value of the slider"},"hide":false,"private":false,"name":"getValue","summary":"Returns the current value of the slider\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"value","summary":"The value to set the slider to. (This will be constrained within minValue and maxValue)"},{"type":"Boolean","optional":false,"name":"animate","summary":"Turn on or off animation, defaults to true"}],"return":null,"hide":false,"private":false,"name":"setValue","summary":"Programmatically sets the value of the Slider. Ensures that the value is constrained within\r\nthe minValue and maxValue.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"syncThumb","summary":"Synchronizes the thumb position to the proper proportion of the total component width based\r\non the current slider {@link #value}.  This will be called automatically when the Slider\r\nis resized by a layout, but if it is rendered auto width, this method can be called from\r\nanother resize handler to sync the Slider if necessary.\r\n"}],"events":[{"parameters":[{"type":"Ext.Slider","optional":false,"name":"slider","summary":"The slider"},{"type":"Number","optional":false,"name":"newValue","summary":"The new value which the slider is being changed to."},{"type":"Number","optional":false,"name":"oldValue","summary":"The old value which the slider was previously."}],"name":"beforechange","summary":"Fires before the slider value is changed. By returning false from an event handler, you can cancel the event and prevent the slider from changing."},{"parameters":[{"type":"Ext.Slider","optional":false,"name":"slider","summary":"The slider"},{"type":"Number","optional":false,"name":"newValue","summary":"The new value which the slider has been changed to."}],"name":"change","summary":"Fires when the slider value is changed."},{"parameters":[{"type":"Ext.Slider","optional":false,"name":"slider","summary":"The slider"},{"type":"Number","optional":false,"name":"newValue","summary":"The new value which the slider has been changed to."}],"name":"changecomplete","summary":"Fires when the slider value is changed by the user and any drag operations have completed."},{"parameters":[{"type":"Ext.Slider","optional":false,"name":"slider","summary":"The slider"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event fired from Ext.dd.DragTracker"}],"name":"drag","summary":"Fires continuously during the drag operation while the mouse is moving."},{"parameters":[{"type":"Ext.Slider","optional":false,"name":"slider","summary":"The slider"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event fired from Ext.dd.DragTracker"}],"name":"dragend","summary":"Fires after the drag operation has completed."},{"parameters":[{"type":"Ext.Slider","optional":false,"name":"slider","summary":"The slider"},{"type":"Ext.EventObject","optional":false,"name":"e","summary":"The event fired from Ext.dd.DragTracker"}],"name":"dragstart","summary":"Fires after a drag operation has started."}]},{"name":"Spacer","fullName":"Ext.Spacer","summary":"<p>Used to provide a sizable space in a layout.</p>\r\n","package":"Ext","definedIn":"widgets\\BoxComponent.js","xtype":null,"extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"SplitBar","fullName":"Ext.SplitBar","summary":"Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).\r\n<br><br>\r\nUsage:\r\n<pre><code>\r\nvar split = new Ext.SplitBar(\"elementToDrag\", \"elementToSize\",\r\n                   Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);\r\nsplit.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter(\"container\"));\r\nsplit.minSize = 100;\r\nsplit.maxSize = 600;\r\nsplit.animate = true;\r\nsplit.on('moved', splitterMoved);\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\SplitBar.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"dragElement","summary":"The element to be dragged and act as the SplitBar."},{"type":"Mixed","optional":false,"name":"resizingElement","summary":"The element to be resized based on where the SplitBar element is dragged"},{"type":"Number","optional":true,"name":"orientation","summary":"Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)"},{"type":"Number","optional":true,"name":"placement","summary":"Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial position of the SplitBar)."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new SplitBar."},"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"SplitBar.AbsoluteLayoutAdapter","fullName":"Ext.SplitBar.AbsoluteLayoutAdapter","summary":"Adapter that  moves the splitter element to align with the resized sizing element.\r\nUsed with an absolute positioned SplitBar.\r\ndocument.body, make sure you assign an id to the body element.\r\n","package":"Ext","definedIn":"widgets\\SplitBar.js","xtype":null,"extends":"Ext.SplitBar.BasicLayoutAdapter","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"container","summary":"The container that wraps around the absolute positioned content. If it's"}],"return":null,"hide":false,"private":false,"name":null,"summary":null},"subclasses":"","configOptions":[],"properties":[{"type":"","static":true,"hide":false,"private":false,"name":"BOTTOM","summary":"Placement constant - The resizing element is positioned under splitter element\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"HORIZONTAL","summary":"Orientation constant - Create a horizontal SplitBar\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"LEFT","summary":"Placement constant - The resizing element is to the left of the splitter element\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"RIGHT","summary":"Placement constant - The resizing element is to the right of the splitter element\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"TOP","summary":"Placement constant - The resizing element is positioned above the splitter element\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"VERTICAL","summary":"Orientation constant - Create a vertical SplitBar\r\n"}],"methods":[],"events":[]},{"name":"SplitBar.BasicLayoutAdapter","fullName":"Ext.SplitBar.BasicLayoutAdapter","summary":"Default Adapter. It assumes the splitter and resizing element are not positioned\r\nelements and only gets/sets the width of the element. Generally used for table based layouts.\r\n","package":"Ext","definedIn":"widgets\\SplitBar.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.SplitBar.AbsoluteLayoutAdapter","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Ext.SplitBar","optional":false,"name":"s","summary":"The SplitBar using this adapter"}],"return":null,"hide":false,"private":false,"name":"getElementSize","summary":"Called before drag operations to get the current size of the resizing element.\r\n"},{"parameters":[{"type":"Ext.SplitBar","optional":false,"name":"s","summary":"The SplitBar using this adapter"},{"type":"Number","optional":false,"name":"newSize","summary":"The new size to set"},{"type":"Function","optional":false,"name":"onComplete","summary":"A function to be invoked when resizing is complete"}],"return":null,"hide":false,"private":false,"name":"setElementSize","summary":"Called after drag operations to set the size of the resizing element.\r\n"}],"events":[]},{"name":"SplitButton","fullName":"Ext.SplitButton","summary":"A split button that provides a built-in dropdown arrow that can fire an event separately from the default\r\nclick event of the button.  Typically this would be used to display a dropdown menu that provides additional\r\noptions to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:\r\n<pre><code>\r\n// display a dropdown menu:\r\nnew Ext.SplitButton({\r\n\trenderTo: 'button-ct', // the container id\r\n   \ttext: 'Options',\r\n   \thandler: optionsHandler, // handle a click on the button itself\r\n   \tmenu: new Ext.menu.Menu({\r\n        items: [\r\n        \t// these items will render as dropdown menu items when the arrow is clicked:\r\n\t       {text: 'Item 1', handler: item1Handler},\r\n\t       {text: 'Item 2', handler: item2Handler}\r\n        ]\r\n   \t})\r\n});\r\n\r\n// Instead of showing a menu, you provide any type of custom\r\n// functionality you want when the dropdown arrow is clicked:\r\nnew Ext.SplitButton({\r\n\trenderTo: 'button-ct',\r\n   \ttext: 'Options',\r\n   \thandler: optionsHandler,\r\n   \tarrowHandler: myCustomHandler\r\n});\r\n</code></pre>\r\n@cfg {Function} arrowHandler A function called when the arrow button is clicked (can be used instead of click event)\r\n@cfg {String} arrowTooltip The title attribute of the arrow\r\n","package":"Ext","definedIn":"widgets\\SplitButton.js","xtype":"splitbutton","extends":"Ext.Button","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new menu button."},"subclasses":"Ext.CycleButton","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Function","optional":false,"name":"handler","summary":"The function to call when the arrow is clicked"},{"type":"Object","optional":true,"name":"scope","summary":"Scope for the function passed above"}],"return":null,"hide":false,"private":false,"name":"setArrowHandler","summary":"Sets this button's arrow click handler.\r\n"}],"events":[{"parameters":[{"type":"MenuButton","optional":false,"name":"el","summary":"this"},{"type":"EventObject","optional":false,"name":"e","summary":"The click event"}],"name":"arrowclick","summary":"Fires when this button's arrow is clicked."}]},{"name":"StoreMgr","fullName":"Ext.StoreMgr","summary":"The default global group of stores.\r\n","package":"Ext","definedIn":"data\\StoreMgr.js","xtype":null,"extends":"Ext.util.MixedCollection","singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[{"type":"Object","optional":false,"name":"listeners","summary":""}],"properties":[],"methods":[{"parameters":[{"type":"String/Object","optional":false,"name":"id","summary":"The id of the Store, or a Store instance"}],"return":{"type":"Ext.data.Store","summary":""},"hide":false,"private":false,"name":"lookup","summary":"Gets a registered Store by id\r\n"},{"parameters":[{"type":"Ext.data.Store","optional":false,"name":"store1","summary":"A Store instance"},{"type":"Ext.data.Store","optional":true,"name":"store2","summary":""},{"type":"Ext.data.Store","optional":true,"name":"etc...","summary":""}],"return":null,"hide":false,"private":false,"name":"register","summary":"Registers one or more Stores with the StoreMgr. You do not normally need to register stores\r\nmanually.  Any store initialized with a {@link Ext.data.Store#storeId} will be auto-registered.\r\n"},{"parameters":[{"type":"String/Object","optional":false,"name":"id1","summary":"The id of the Store, or a Store instance"},{"type":"String/Object","optional":true,"name":"id2","summary":""},{"type":"String/Object","optional":true,"name":"etc...","summary":""}],"return":null,"hide":false,"private":false,"name":"unregister","summary":"Unregisters one or more Stores with the StoreMgr\r\n"}],"events":[]},{"name":"TabStrip","fullName":"Ext.TabStrip","summary":"<p>A basic tab container. TabStrips can be used exactly like a standard {@link Ext.Panel}\r\nfor layout purposes, but also have special support for containing child Components\r\n(<tt>{@link Ext.Container#items items}</tt>) that are managed using a\r\n{@link Ext.layout.CardLayout CardLayout layout manager}, and displayed as separate tabs.</p>\r\n\r\n<b>Note:</b> By default, a tab's close tool <i>destroys</i> the child tab Component\r\nand all its descendants. This makes the child tab Component, and all its descendants <b>unusable</b>. To enable\r\nre-use of a tab, configure the TabStrip with <b><code>{@link #autoDestroy autoDestroy: false}</code></b>.\r\n\r\n<p><b><u>TabStrip header/footer elements</u></b></p>\r\n<p>TabStrips use their {@link Ext.Panel#header header} or {@link Ext.Panel#footer footer} element\r\n(depending on the {@link #tabPosition} configuration) to accommodate the tab selector buttons.\r\nThis means that a TabStrip will not display any configured title, and will not display any\r\nconfigured header {@link Ext.Panel#tools tools}.</p>\r\n<p>To display a header, embed the TabStrip in a {@link Ext.Panel Panel} which uses\r\n<b><tt>{@link Ext.Container#layout layout:'fit'}</tt></b>.</p>\r\n\r\n<p><b><u>Tab Events</u></b></p>\r\n<p>There is no actual tab class &mdash; each tab is simply a {@link Ext.BoxComponent Component}\r\nsuch as a {@link Ext.Panel Panel}. However, when rendered in a TabStrip, each child Component\r\ncan fire additional events that only exist for tabs and are not available from other Components.\r\nThese events are:</p>\r\n<div><ul class=\"mdetail-params\">\r\n<li><tt><b>{@link Ext.Panel#activate activate}</b></tt> : Fires when this Component becomes\r\nthe active tab.</li>\r\n<li><tt><b>{@link Ext.Panel#deactivate deactivate}</b></tt> : Fires when the Component that\r\nwas the active tab becomes deactivated.</li>\r\n</ul></div>\r\n<p><b><u>Creating TabStrips from Code</u></b></p>\r\n<p>TabStrips can be created and rendered completely in code, as in this example:</p>\r\n<pre><code>\r\nvar tabs = new Ext.TabStrip({\r\n    renderTo: Ext.getBody(),\r\n    activeTab: 0,\r\n    items: [{\r\n        title: 'Tab 1',\r\n        html: 'A simple tab'\r\n    },{\r\n        title: 'Tab 2',\r\n        html: 'Another one'\r\n    }]\r\n});\r\n</code></pre>\r\n<p><b><u>Creating TabStrips from Existing Markup</u></b></p>\r\n<p>TabStrips can also be rendered from pre-existing markup in a couple of ways.</p>\r\n<div><ul class=\"mdetail-params\">\r\n\r\n<li>Pre-Structured Markup</li>\r\n<div class=\"sub-desc\">\r\n<p>A container div with one or more nested tab divs with class <tt>'x-tab'</tt> can be rendered entirely\r\nfrom existing markup (See the {@link #autoTabs} example).</p>\r\n</div>\r\n\r\n<li>Un-Structured Markup</li>\r\n<div class=\"sub-desc\">\r\n<p>A TabStrip can also be rendered from markup that is not strictly structured by simply specifying by id\r\nwhich elements should be the container and the tabs. Using this method tab content can be pulled from different\r\nelements within the page by id regardless of page structure. For example:</p>\r\n<pre><code>\r\nvar tabs = new Ext.TabStrip({\r\n    renderTo: 'my-tabs',\r\n    activeTab: 0,\r\n    items:[\r\n       {contentEl:'tab1', title:'Tab 1'},\r\n       {contentEl:'tab2', title:'Tab 2'}\r\n    ]\r\n});\r\n\r\n// Note that the tabs do not have to be nested within the container (although they can be)\r\n&lt;div id=\"my-tabs\">&lt;/div>\r\n&lt;div id=\"tab1\" class=\"x-hide-display\">A simple tab&lt;/div>\r\n&lt;div id=\"tab2\" class=\"x-hide-display\">Another one&lt;/div>\r\n</code></pre>\r\nNote that the tab divs in this example contain the class <tt>'x-hide-display'</tt> so that they can be rendered\r\ndeferred without displaying outside the tabs. You could alternately set <tt>{@link #deferredRender} = false </tt>\r\nto render all content tabs on page load.\r\n</div>\r\n\r\n</ul></div>\r\n\r\n","package":"Ext","definedIn":"widgets\\TabStrip.js","xtype":"tabpanel","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"layoutOnTabChange","summary":"Set to true to force a layout of the active tab when the tab is changed. Defaults to false.\r\nSee {@link Ext.layout.CardLayout}.<code>{@link Ext.layout.CardLayout#layoutOnCardChange layoutOnCardChange}</code>.\r\n"},{"type":"String","optional":false,"name":"tabCls","summary":"class name applied to the tab strip item representing the child Component, allowing special\r\nstyling to be applied.\r\n"},{"type":"Boolean","optional":false,"name":"monitorResize","summary":"browser resize (defaults to true).\r\n"},{"type":"Boolean","optional":false,"name":"deferredRender","summary":"<p><tt>true</tt> by default to defer the rendering of child <tt>{@link Ext.Container#items items}</tt>\r\nto the browsers DOM until a tab is activated. <tt>false</tt> will render all contained\r\n<tt>{@link Ext.Container#items items}</tt> as soon as the {@link Ext.layout.CardLayout layout}\r\nis rendered. If there is a significant amount of content or a lot of heavy controls being\r\nrendered into panels that are not displayed by default, setting this to <tt>true</tt> might\r\nimprove performance.</p>\r\n<br><p>The <tt>deferredRender</tt> property is internally passed to the layout manager for\r\nTabStrips ({@link Ext.layout.CardLayout}) as its {@link Ext.layout.CardLayout#deferredRender}\r\nconfiguration value.</p>\r\n<br><p><b>Note</b>: leaving <tt>deferredRender</tt> as <tt>true</tt> means that the content\r\nwithin an unactivated tab will not be available. For example, this means that if the TabStrip\r\nis within a {@link Ext.form.FormPanel form}, then until a tab is activated, any Fields within\r\nunactivated tabs will not be rendered, and will therefore not be submitted and will not be\r\navailable to either {@link Ext.form.BasicForm#getValues getValues} or\r\n{@link Ext.form.BasicForm#setValues setValues}.</p>\r\n"},{"type":"Number","optional":false,"name":"tabWidth","summary":""},{"type":"Number","optional":false,"name":"minTabWidth","summary":""},{"type":"Boolean","optional":false,"name":"resizeTabs","summary":"tab strip (defaults to false).  Setting this to true may cause specific widths that might be set per tab to\r\nbe overridden in order to fit them all into view (although {@link #minTabWidth} will always be honored).\r\n"},{"type":"Boolean","optional":false,"name":"enableTabScroll","summary":"overall TabStrip width. Only available with tabPosition:'top' (defaults to false).\r\n"},{"type":"Number","optional":false,"name":"scrollIncrement","summary":"(defaults to <tt>100</tt>, or if <tt>{@link #resizeTabs} = true</tt>, the calculated tab width).  Only\r\napplies when <tt>{@link #enableTabScroll} = true</tt>.\r\n"},{"type":"Number","optional":false,"name":"scrollRepeatInterval","summary":"continuously pressed (defaults to <tt>400</tt>).\r\n"},{"type":"Float","optional":false,"name":"scrollDuration","summary":"to <tt>.35</tt>). Only applies when <tt>{@link #animScroll} = true</tt>.\r\n"},{"type":"Boolean","optional":false,"name":"animScroll","summary":"to <tt>true</tt>).  Only applies when <tt>{@link #enableTabScroll} = true</tt>.\r\n"},{"type":"String","optional":false,"name":"tabPosition","summary":"The only other supported value is <tt>'bottom'</tt>.  <b>Note</b>: tab scrolling is only supported for\r\n<tt>tabPosition: 'top'</tt>.\r\n"},{"type":"String","optional":false,"name":"baseCls","summary":""},{"type":"Boolean","optional":false,"name":"autoTabs","summary":"<p><tt>true</tt> to query the DOM for any divs with a class of 'x-tab' to be automatically converted\r\nto tabs and added to this panel (defaults to <tt>false</tt>).  Note that the query will be executed within\r\nthe scope of the container element only (so that multiple tab panels from markup can be supported via this\r\nmethod).</p>\r\n<p>This method is only possible when the markup is structured correctly as a container with nested divs\r\ncontaining the class <tt>'x-tab'</tt>. To create TabStrips without these limitations, or to pull tab content\r\nfrom other elements on the page, see the example at the top of the class for generating tabs from markup.</p>\r\n<p>There are a couple of things to note when using this method:<ul>\r\n<li>When using the <tt>autoTabs</tt> config (as opposed to passing individual tab configs in the TabStrip's\r\n{@link #items} collection), you must use <tt>{@link #applyTo}</tt> to correctly use the specified <tt>id</tt>\r\nas the tab container. The <tt>autoTabs</tt> method <em>replaces</em> existing content with the TabStrip\r\ncomponents.</li>\r\n<li>Make sure that you set <tt>{@link #deferredRender}: false</tt> so that the content elements for each\r\ntab will be rendered into the TabStrip immediately upon page load, otherwise they will not be transformed\r\nuntil each tab is activated and will be visible outside the TabStrip.</li>\r\n</ul>Example usage:</p>\r\n<pre><code>\r\nvar tabs = new Ext.TabStrip({\r\n    applyTo: 'my-tabs',\r\n    activeTab: 0,\r\n    deferredRender: false,\r\n    autoTabs: true\r\n});\r\n\r\n// This markup will be converted to a TabStrip from the code above\r\n&lt;div id=\"my-tabs\">\r\n    &lt;div class=\"x-tab\" title=\"Tab 1\">A simple tab&lt;/div>\r\n    &lt;div class=\"x-tab\" title=\"Tab 2\">Another one&lt;/div>\r\n&lt;/div>\r\n</code></pre>\r\n"},{"type":"String","optional":false,"name":"autoTabSelector","summary":"<tt>{@link #autoTabs} = true</tt> (defaults to <tt>'div.x-tab'</tt>).  This can be any valid selector\r\nsupported by {@link Ext.DomQuery#select}. Note that the query will be executed within the scope of this\r\ntab panel only (so that multiple tab panels from markup can be supported on a page).\r\n"},{"type":"String/Number","optional":false,"name":"activeTab","summary":"activated on render (defaults to none).\r\n"},{"type":"Number","optional":false,"name":"tabMargin","summary":"tabs. If you change the margin in CSS, you will need to update this value so calculations are correct\r\nwith either <tt>{@link #resizeTabs}</tt> or scrolling tabs. (defaults to <tt>2</tt>)\r\n"},{"type":"Boolean","optional":false,"name":"plain","summary":"(defaults to <tt>false</tt>).\r\n"},{"type":"Number","optional":false,"name":"wheelIncrement","summary":"scrolling (defaults to <tt>20</tt>).\r\n"},{"type":"Object","optional":false,"name":"layoutConfig","summary":"TabStrip implicitly uses {@link Ext.layout.CardLayout} as its layout manager.\r\n<code>layoutConfig</code> may be used to configure this layout manager.\r\n<code>{@link #deferredRender}</code> and <code>{@link #layoutOnTabChange}</code>\r\nconfigured on the TabStrip will be applied as configs to the layout manager.\r\n"},{"type":"Template/XTemplate","optional":false,"name":"itemTpl","summary":"{@link Ext.XTemplate XTemplate} which may be provided to process the data object returned from\r\n<tt>{@link #getTemplateArgs}</tt> to produce a clickable selector element in the tab strip.</p>\r\n<p>The main element created should be a <tt>&lt;li></tt> element. In order for a click event on\r\na selector element to be connected to its item, it must take its <i>id</i> from the TabStrip's\r\nnative <tt>{@link #getTemplateArgs}</tt>.</p>\r\n<p>The child element which contains the title text must be marked by the CSS class\r\n<tt>x-tab-strip-inner</tt>.</p>\r\n<p>To enable closability, the created element should contain an element marked by the CSS class\r\n<tt>x-tab-strip-close</tt>.</p>\r\n<p>If a custom <tt>itemTpl</tt> is supplied, it is the developer's responsibility to create CSS\r\nstyle rules to create the desired appearance.</p>\r\nBelow is an example of how to create customized tab selector items:<pre><code>\r\nnew Ext.TabStrip({\r\n    renderTo: document.body,\r\n    minTabWidth: 115,\r\n    tabWidth: 135,\r\n    enableTabScroll: true,\r\n    width: 600,\r\n    height: 250,\r\n    defaults: {autoScroll:true},\r\n    itemTpl: new Ext.XTemplate(\r\n    '&lt;li class=\"{cls}\" id=\"{id}\" style=\"overflow:hidden\">',\r\n         '&lt;tpl if=\"closable\">',\r\n            '&lt;a class=\"x-tab-strip-close\" onclick=\"return false;\">&lt;/a>',\r\n         '&lt;/tpl>',\r\n         '&lt;a class=\"x-tab-right\" href=\"#\" onclick=\"return false;\" style=\"padding-left:6px\">',\r\n            '&lt;em class=\"x-tab-left\">',\r\n                '&lt;span class=\"x-tab-strip-inner\">',\r\n                    '&lt;img src=\"{src}\" style=\"float:left;margin:3px 3px 0 0\">',\r\n                    '&lt;span style=\"margin-left:20px\" class=\"x-tab-strip-text {iconCls}\">{text} {extra}&lt;/span>',\r\n                '&lt;/span>',\r\n            '&lt;/em>',\r\n        '&lt;/a>',\r\n    '&lt;/li>'\r\n    ),\r\n    getTemplateArgs: function (item) {\r\n//      Call the native method to collect the base data. Like the ID!\r\n        var result = Ext.TabStrip.prototype.getTemplateArgs.call(this, item);\r\n\r\n//      Add stuff used in our template\r\n        return Ext.apply(result, {\r\n            closable: item.closable,\r\n            src: item.iconSrc,\r\n            extra: item.extraText || ''\r\n        });\r\n    },\r\n    items: [{\r\n        title: 'New Tab 1',\r\n        iconSrc: '../shared/icons/fam/grid.png',\r\n        html: 'Tab Body 1',\r\n        closable: true\r\n    }, {\r\n        title: 'New Tab 2',\r\n        iconSrc: '../shared/icons/fam/grid.png',\r\n        html: 'Tab Body 2',\r\n        extraText: 'Extra stuff in the tab button'\r\n    }]\r\n});\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"collapsible","summary":"@hide\r\n"},{"type":"String","optional":false,"name":"header","summary":"@hide\r\n"},{"type":"Boolean","optional":false,"name":"headerAsText","summary":"@hide\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Boolean","optional":false,"name":"removeExisting","summary":"True to remove existing tabs"}],"return":null,"hide":false,"private":false,"name":"readTabs","summary":"True to scan the markup in this tab panel for <tt>{@link #autoTabs}</tt> using the\r\n<tt>{@link #autoTabSelector}</tt>\r\n"},{"parameters":[{"type":"BoxComponent","optional":false,"name":"item","summary":"The {@link Ext.BoxComponent BoxComponent} for which to create a selector element in the tab strip."}],"return":{"type":"Object","summary":"An object hash containing the properties required to render the selector element."},"hide":false,"private":false,"name":"getTemplateArgs","summary":"<p>Provides template arguments for rendering a tab selector item in the tab strip.</p>\r\n<p>This method returns an object hash containing properties used by the TabStrip's <tt>{@link #itemTpl}</tt>\r\nto create a formatted, clickable tab selector element. The properties which must be returned\r\nare:</p><div class=\"mdetail-params\"><ul>\r\n<li><b>id</b> : String<div class=\"sub-desc\">A unique identifier which links to the item</div></li>\r\n<li><b>text</b> : String<div class=\"sub-desc\">The text to display</div></li>\r\n<li><b>cls</b> : String<div class=\"sub-desc\">The CSS class name</div></li>\r\n<li><b>iconCls</b> : String<div class=\"sub-desc\">A CSS class to provide appearance for an icon.</div></li>\r\n</ul></div>\r\n"},{"parameters":[{"type":"Panel/Number/String","optional":false,"name":"tab","summary":"The tab component, or the tab's index, or the tabs id or itemId."}],"return":{"type":"HTMLElement","summary":"The DOM node"},"hide":false,"private":false,"name":"getTabEl","summary":"Gets the DOM element for the tab strip item which activates the child panel with the specified\r\nID. Access this to change the visual treatment of the item, for example by changing the CSS class name.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"beginUpdate","summary":"Suspends any internal calculations or scrolling while doing a bulk operation. See {@link #endUpdate}\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"endUpdate","summary":"Resumes calculations and scrolling at the end of a bulk operation. See {@link #beginUpdate}\r\n"},{"parameters":[{"type":"Number/String/Panel","optional":false,"name":"item","summary":"The tab index, id or item"}],"return":null,"hide":false,"private":false,"name":"hideTabStripItem","summary":"Hides the tab strip item for the passed tab\r\n"},{"parameters":[{"type":"Number/String/Panel","optional":false,"name":"item","summary":"The tab index, id or item"}],"return":null,"hide":false,"private":false,"name":"unhideTabStripItem","summary":"Unhides the tab strip item for the passed tab\r\n"},{"parameters":[{"type":"String/Number","optional":false,"name":"item","summary":"\r\nThe id or tab Panel to activate. This parameter may be any of the following:\r\n<div><ul class=\"mdetail-params\">\r\n<li>a <b><tt>String</tt></b> : representing the <code>{@link Ext.Component#itemId itemId}</code>\r\nor <code>{@link Ext.Component#id id}</code> of the child component </li>\r\n<li>a <b><tt>Number</tt></b> : representing the position of the child component\r\nwithin the <code>{@link Ext.Container#items items}</code> <b>property</b></li>\r\n</ul></div>\r\n<p>For additional information see {@link Ext.util.MixedCollection#get}."}],"return":null,"hide":false,"private":false,"name":"setActiveTab","summary":"Sets the specified tab as the active tab. This method fires the {@link #beforetabchange} event which\r\ncan <tt>return false</tt> to cancel the tab change.\r\n"},{"parameters":[],"return":{"type":"Panel","summary":"The active tab"},"hide":false,"private":false,"name":"getActiveTab","summary":"Gets the currently active tab.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The tab id"}],"return":{"type":"Panel","summary":"The tab"},"hide":false,"private":false,"name":"getItem","summary":"Gets the specified tab by id.\r\n"}],"events":[{"parameters":[{"type":"TabStrip","optional":false,"name":"el","summary":"this"},{"type":"Panel","optional":false,"name":"newTab","summary":"The tab being activated"},{"type":"Panel","optional":false,"name":"currentTab","summary":"The current active tab"}],"name":"beforetabchange","summary":"Fires before the active tab changes. Handlers can <tt>return false</tt> to cancel the tab change."},{"parameters":[{"type":"TabStrip","optional":false,"name":"el","summary":"this"},{"type":"Panel","optional":false,"name":"tab","summary":"The new active tab"}],"name":"tabchange","summary":"Fires after the active tab has changed."},{"parameters":[{"type":"TabStrip","optional":false,"name":"el","summary":"this"},{"type":"Panel","optional":false,"name":"tab","summary":"The target tab"},{"type":"EventObject","optional":false,"name":"e","summary":""}],"name":"contextmenu","summary":"Relays the contextmenu event from a tab selector element in the tab strip."}]},{"name":"TaskMgr","fullName":"Ext.TaskMgr","summary":"A static {@link Ext.util.TaskRunner} instance that can be used to start and stop arbitrary tasks.  See\r\n{@link Ext.util.TaskRunner} for supported methods and task config properties.\r\n<pre><code>\r\n// Start a simple clock task that updates a div once per second\r\nvar task = {\r\n    run: function () {\r\n        Ext.fly('clock').update(new Date().format('g:i:s A'));\r\n    },\r\n    interval: 1000 //1 second\r\n}\r\nExt.TaskMgr.start(task);\r\n</code></pre>\r\n","package":"Ext","definedIn":"util\\core\\TaskMgr.js","xtype":null,"extends":"Ext.util.TaskRunner","singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Template","fullName":"Ext.Template","summary":"<p>Represents an HTML fragment template. Templates may be {@link #compile precompiled}\r\nfor greater performance.</p>\r\n<p>For example usage {@link #Template see the constructor}.</p>\r\n\r\n\r\n","package":"Ext","definedIn":"core\\core\\Template.js,core\\Template-more.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":"An instance of this class may be created by passing to the constructor either\r\na single argument, or multiple arguments:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b>single argument</b> : String/Array\r\n<div class=\"sub-desc\">\r\nThe single argument may be either a String or an Array:<ul>\r\n<li><tt>String</tt> : </li><pre><code>\r\nvar t = new Ext.Template(\"&lt;div>Hello {0}.&lt;/div>\");\r\nt.{@link #append}('some-element', ['foo']);\r\n</code></pre>\r\n<li><tt>Array</tt> : </li>\r\nAn Array will be combined with <code>join('')</code>.\r\n<pre><code>\r\nvar t = new Ext.Template([\r\n  '&lt;div name=\"{id}\"&gt;',\r\n    '&lt;span class=\"{cls}\"&gt;{name:trim} {value:ellipsis(10)}&lt;/span&gt;',\r\n  '&lt;/div&gt;',\r\n]);\r\nt.{@link #compile}();\r\nt.{@link #append}('some-element', {id: 'myid', cls: 'myclass', name: 'foo', value: 'bar'});\r\n</code></pre>\r\n</ul></div></li>\r\n<li><b>multiple arguments</b> : String, Object, Array, ...\r\n<div class=\"sub-desc\">\r\nMultiple arguments will be combined with <code>join('')</code>.\r\n<pre><code>\r\nvar t = new Ext.Template(\r\n  '&lt;div name=\"{id}\"&gt;',\r\n    '&lt;span class=\"{cls}\"&gt;{name} {value}&lt;/span&gt;',\r\n  '&lt;/div&gt;',\r\n  // a configuration object:\r\n {\r\n    compiled: true,   // {@link #compile} immediately\r\n    disableFormats: true // See Notes below.\r\n  } \r\n);\r\n</code></pre>\r\n<p><b>Notes</b>:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li>Formatting and <code>disableFormats</code> are not applicable for Ext Core.</li>\r\n<li>For a list of available format functions, see {@link Ext.util.Format}.</li>\r\n<li><code>disableFormats</code> reduces <code>{@link #apply}</code> time\r\nwhen no formatting is required.</li>\r\n</ul></div>\r\n</div></li>\r\n</ul></div>."},"subclasses":"Ext.XTemplate","configOptions":[{"type":"Boolean","optional":false,"name":"compiled","summary":"immediately (see <code>{@link #compile}</code>).\r\nDefaults to <tt>false</tt>.\r\n"},{"type":"RegExp","optional":false,"name":"re","summary":"Defaults to:<pre><code>\r\nre : /\\{([\\w-]+)\\}/g                                     // for Ext Core\r\nre : /\\{([\\w-]+)(?:\\:([\\w\\.]*)(?:\\((.*?)?\\))?)?\\}/g      // for Ext JS\r\n</code></pre>\r\n"},{"type":"Boolean","optional":false,"name":"disableFormats","summary":"functions in the template. If the template does not contain\r\n{@link Ext.util.Format format functions}, setting <code>disableFormats</code>\r\nto true will reduce <code>{@link #apply}</code> time. Defaults to <tt>false</tt>.\r\n<pre><code>\r\nvar t = new Ext.Template(\r\n    '&lt;div name=\"{id}\"&gt;',\r\n        '&lt;span class=\"{cls}\"&gt;{name} {value}&lt;/span&gt;',\r\n    '&lt;/div&gt;',\r\n   {\r\n        compiled: true,      // {@link #compile} immediately\r\n        disableFormats: true // reduce <code>{@link #apply}</code> time since no formatting\r\n    }    \r\n);\r\n</code></pre>\r\nFor a list of available format functions, see {@link Ext.util.Format}.\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"re","summary":"See <code>{@link #re}</code>.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"disableFormats","summary":"See <code>{@link #disableFormats}</code>.\r\n"}],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/Array","optional":false,"name":"values","summary":"\r\nThe template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)\r\nor an object (i.e. <code>{foo: 'bar'}</code>)."},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return an Ext.Element (defaults to undefined)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node or Element"},"hide":false,"private":false,"name":"append","summary":"Applies the supplied <code>values</code> to the template and appends\r\nthe new node(s) to the specified <code>el</code>.\r\n<p>For example usage {@link #Template see the constructor}.</p>\r\n"},{"parameters":[{"type":"Object/Array","optional":false,"name":"values","summary":"\r\nThe template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)\r\nor an object (i.e. <code>{foo: 'bar'}</code>).\r\n@member Ext.Template"}],"return":{"type":"String","summary":"The HTML fragment"},"hide":false,"private":false,"name":"apply","summary":"Alias for {@link #applyTemplate}\r\nReturns an HTML fragment of this template with the specified <code>values</code> applied.\r\n"},{"parameters":[{"type":"Object/Array","optional":false,"name":"values","summary":"\r\nThe template values. Can be an array if the params are numeric (i.e. <code>{0}</code>)\r\nor an object (i.e. <code>{foo: 'bar'}</code>)."}],"return":{"type":"String","summary":"The HTML fragment"},"hide":false,"private":false,"name":"applyTemplate","summary":"Returns an HTML fragment of this template with the specified <code>values</code> applied.\r\n"},{"parameters":[],"return":{"type":"Ext.Template","summary":"this"},"hide":false,"private":false,"name":"compile","summary":"Compiles the template into an internal function, eliminating the RegEx overhead.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"el","summary":"A DOM element or its id"},{"type":"Object","optional":false,"name":"config","summary":"A configuration object\r\n@static"}],"return":{"type":"Ext.Template","summary":"The created template"},"hide":false,"private":false,"name":"from","summary":"Creates a template from the passed element's value (<i>display:none</i> textarea, preferred) or innerHTML.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/Array","optional":false,"name":"values","summary":"The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element (defaults to undefined)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node or Element"},"hide":false,"private":false,"name":"insertAfter","summary":"Applies the supplied values to the template and inserts the new node(s) after el.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/Array","optional":false,"name":"values","summary":"The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element (defaults to undefined)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node or Element"},"hide":false,"private":false,"name":"insertBefore","summary":"Applies the supplied values to the template and inserts the new node(s) before el.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/Array","optional":false,"name":"values","summary":"The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element (defaults to undefined)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node or Element"},"hide":false,"private":false,"name":"insertFirst","summary":"Applies the supplied values to the template and inserts the new node(s) as the first child of el.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The context element"},{"type":"Object/Array","optional":false,"name":"values","summary":"The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"},{"type":"Boolean","optional":true,"name":"returnElement","summary":"true to return a Ext.Element (defaults to undefined)"}],"return":{"type":"HTMLElement/Ext.Element","summary":"The new node or Element"},"hide":false,"private":false,"name":"overwrite","summary":"Applies the supplied values to the template and overwrites the content of el with the new node(s).\r\n"},{"parameters":[{"type":"String","optional":false,"name":"html","summary":""},{"type":"Boolean","optional":true,"name":"compile","summary":"True to compile the template (defaults to undefined)"}],"return":{"type":"Ext.Template","summary":"this"},"hide":false,"private":false,"name":"set","summary":"Sets the HTML used as the template and optionally compiles it.\r\n"}],"events":[]},{"name":"Tip","fullName":"Ext.Tip","summary":"This is the base class for {@link Ext.QuickTip} and {@link Ext.Tooltip} that provides the basic layout and\r\npositioning that all tip-based classes require. This class can be used directly for simple, statically-positioned\r\ntips that are displayed programmatically, or it can be extended to provide custom tip implementations.\r\n","package":"Ext","definedIn":"widgets\\tips\\Tip.js","xtype":"tip","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Tip."},"subclasses":"Ext.ToolTip","configOptions":[{"type":"Boolean","optional":false,"name":"closable","summary":""},{"type":"String","optional":false,"name":"defaultAlign","summary":"for this tip relative to its element of origin (defaults to \"tl-bl?\").\r\n"},{"type":"Number","optional":false,"name":"maxWidth","summary":""},{"type":"Number","optional":false,"name":"minWidth","summary":""},{"type":"Boolean/String","optional":false,"name":"shadow","summary":"for bottom-right shadow (defaults to \"sides\").\r\n"},{"type":"Number","optional":false,"name":"width","summary":"Width in pixels of the tip (defaults to auto).  Width will be ignored if it exceeds the bounds of\r\n{@link #minWidth} or {@link #maxWidth}.  The maximum supported value is 500.\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Array","optional":false,"name":"xy","summary":"An array containing the x and y coordinates"}],"return":null,"hide":false,"private":false,"name":"showAt","summary":"Shows this tip at the specified XY position.  Example usage:\r\n<pre><code>\r\n// Show the tip at x:50 and y:100\r\ntip.showAt([50,100]);\r\n</code></pre>\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"An HTMLElement, Ext.Element or string id of the target element to align to"},{"type":"String","optional":true,"name":"position","summary":"A valid {@link Ext.Element#alignTo} anchor position (defaults to 'tl-br?' or\r\n{@link #defaultAlign} if specified)."}],"return":null,"hide":false,"private":false,"name":"showBy","summary":"<b>Experimental</b>. Shows this tip at a position relative to another element using a standard {@link Ext.Element#alignTo}\r\netanchor position value.  Example usage:\r\n<pre><code>\r\n// Show the tip at the default position ('tl-br?')\r\ntip.showBy('my-el');\r\n\r\n// Show the tip's top-left corner anchored to the element's top-right corner\r\ntip.showBy('my-el', 'tl-tr');\r\n</code></pre>\r\n"}],"events":[]},{"name":"Toolbar","fullName":"Ext.Toolbar","summary":"<p>Basic Toolbar class. Although the <tt>{@link Ext.Container#defaultType defaultType}</tt> for Toolbar\r\nis <tt>{@link Ext.Button button}</tt>, Toolbar elements (child items for the Toolbar container) may\r\nbe virtually any type of Component. Toolbar elements can be created explicitly via their constructors,\r\nor implicitly via their xtypes, and can be <tt>{@link #add}</tt>ed dynamically.</p>\r\n<p>Some items have shortcut strings for creation:</p>\r\n<pre>\r\n<u>Shortcut</u>  <u>xtype</u>          <u>Class</u>                  <u>Description</u>\r\n'->'      'tbfill'      {@link Ext.Toolbar.Fill}       begin using the right-justified button container\r\n'-'       'tbseparator' {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items\r\n' '       'tbspacer'    {@link Ext.Toolbar.Spacer}     add horiztonal space between elements\r\n</pre>\r\n\r\nExample usage of various elements:\r\n<pre><code>\r\nvar tb = new Ext.Toolbar({\r\n    renderTo: document.body,\r\n    width: 600,\r\n    height: 100,\r\n    items: [\r\n       {\r\n            // xtype: 'button', // default for Toolbars, same as 'tbbutton'\r\n            text: 'Button'\r\n        },\r\n       {\r\n            xtype: 'splitbutton', // same as 'tbsplitbutton'\r\n            text: 'Split Button'\r\n        },\r\n        // begin using the right-justified button container\r\n        '->', // same as {xtype: 'tbfill'}, // Ext.Toolbar.Fill\r\n       {\r\n            xtype: 'textfield',\r\n            name: 'field1',\r\n            emptyText: 'enter search term'\r\n        },\r\n        // add a vertical separator bar between toolbar items\r\n        '-', // same as {xtype: 'tbseparator'} to create Ext.Toolbar.Separator\r\n        'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.Toolbar.TextItem\r\n       {xtype: 'tbspacer'},// same as ' ' to create Ext.Toolbar.Spacer\r\n        'text 2',\r\n       {xtype: 'tbspacer', width: 50}, // add a 50px space\r\n        'text 3'\r\n    ]\r\n});\r\n</code></pre>\r\nExample adding a ComboBox within a menu of a button:\r\n<pre><code>\r\n// ComboBox creation\r\nvar combo = new Ext.form.ComboBox({\r\n    store: new Ext.data.ArrayStore({\r\n        autoDestroy: true,\r\n        fields: ['initials', 'fullname'],\r\n        data : [\r\n            ['FF', 'Fred Flintstone'],\r\n            ['BR', 'Barney Rubble']\r\n        ]\r\n    }),\r\n    displayField: 'fullname',\r\n    typeAhead: true,\r\n    mode: 'local',\r\n    forceSelection: true,\r\n    triggerAction: 'all',\r\n    emptyText: 'Select a name...',\r\n    selectOnFocus: true,\r\n    width: 135,\r\n    getListParent: function () {\r\n        return this.el.up('.x-menu');\r\n    },\r\n    iconCls: 'no-icon' //use iconCls if placing within menu to shift to right side of menu\r\n});\r\n\r\n// put ComboBox in a Menu\r\nvar menu = new Ext.menu.Menu({\r\n    id: 'mainMenu',\r\n    items: [\r\n        combo // A Field in a Menu\r\n    ]\r\n});\r\n\r\n// add a Button with the menu\r\ntb.add({\r\n        text:'Button w/ Menu',\r\n        menu: menu  // assign menu by instance\r\n    });\r\ntb.doLayout();\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Toolbar.js","xtype":"toolbar","extends":"Ext.Container","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object/Array","optional":false,"name":"config","summary":"A config object or an array of buttons to <tt>{@link #add}</tt>"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Toolbar."},"subclasses":"Ext.PagingToolbar","configOptions":[{"type":"String/Object","optional":false,"name":"layout","summary":"This class assigns a default layout (<code>layout:'<b>toolbar</b>'</code>).\r\nDevelopers <i>may</i> override this configuration option if another layout\r\nis required (the constructor must be passed a configuration object in this\r\ncase instead of an array).\r\nSee {@link Ext.Container#layout} for additional information.\r\n"}],"properties":[],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"arg1","summary":"The following types of arguments are all valid:<br />\r\n<ul>\r\n<li>{@link Ext.Button} config: A valid button config object (equivalent to {@link #addButton})</li>\r\n<li>HtmlElement: Any standard HTML element (equivalent to {@link #addElement})</li>\r\n<li>Field: Any form field (equivalent to {@link #addField})</li>\r\n<li>Item: Any subclass of {@link Ext.Toolbar.Item} (equivalent to {@link #addItem})</li>\r\n<li>String: Any generic string (gets wrapped in a {@link Ext.Toolbar.TextItem}, equivalent to {@link #addText}).\r\nNote that there are a few special strings that are treated differently as explained next.</li>\r\n<li>'-': Creates a separator element (equivalent to {@link #addSeparator})</li>\r\n<li>' ': Creates a spacer element (equivalent to {@link #addSpacer})</li>\r\n<li>'->': Creates a fill element (equivalent to {@link #addFill})</li>\r\n</ul>"},{"type":"Mixed","optional":false,"name":"arg2","summary":""},{"type":"Mixed","optional":false,"name":"etc.","summary":""}],"return":null,"hide":false,"private":false,"name":"add","summary":"<p>Adds element(s) to the toolbar -- this function takes a variable number of\r\narguments of mixed type and adds them to the toolbar.</p>\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[{"type":"Object/Array","optional":false,"name":"config","summary":"A button config or array of configs"}],"return":{"type":"Ext.Button/Array","summary":""},"hide":false,"private":false,"name":"addButton","summary":"Adds a button (or buttons). See {@link Ext.Button} for more info on the config.\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"config","summary":""}],"return":{"type":"Ext.Toolbar.Item","summary":"The element's item"},"hide":false,"private":false,"name":"addDom","summary":"Adds a new element to the toolbar from the passed {@link Ext.DomHelper} config\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element or id of the element to add"}],"return":{"type":"Ext.Toolbar.Item","summary":"The element's item"},"hide":false,"private":false,"name":"addElement","summary":"Adds any standard HTML element to the toolbar\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[{"type":"Ext.form.Field","optional":false,"name":"field","summary":""}],"return":{"type":"Ext.Toolbar.Item","summary":""},"hide":false,"private":false,"name":"addField","summary":"Adds a dynamically rendered Ext.form field (TextField, ComboBox, etc). Note: the field should not have\r\nbeen rendered yet. For a field that has already been rendered, use {@link #addElement}.\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"addFill","summary":"Forces subsequent additions into the float:right toolbar\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[{"type":"Ext.Toolbar.Item","optional":false,"name":"item","summary":""}],"return":{"type":"Ext.Toolbar.Item","summary":"The item"},"hide":false,"private":false,"name":"addItem","summary":"Adds any Toolbar.Item or subclass\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[],"return":{"type":"Ext.Toolbar.Item} The separator {@link Ext.Toolbar.Item item","summary":""},"hide":false,"private":false,"name":"addSeparator","summary":"Adds a separator\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[],"return":{"type":"Ext.Toolbar.Spacer","summary":"The spacer item"},"hide":false,"private":false,"name":"addSpacer","summary":"Adds a spacer element\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"text","summary":"The text to add"}],"return":{"type":"Ext.Toolbar.Item","summary":"The element's item"},"hide":false,"private":false,"name":"addText","summary":"Adds text to the toolbar\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"index","summary":"The index where the item is to be inserted"},{"type":"Object/Ext.Toolbar.Item/Ext.Button/Array","optional":false,"name":"item","summary":"The button, or button config object to be\r\ninserted, or an array of buttons/configs."}],"return":{"type":"Ext.Button/Item","summary":""},"hide":false,"private":false,"name":"insertButton","summary":"Inserts any {@link Ext.Toolbar.Item}/{@link Ext.Button} at the specified index.\r\n<br><p><b>Note</b>: See the notes within {@link Ext.Container#add}.</p>\r\n"}],"events":[{"parameters":[{"type":"Object","optional":false,"name":"c","summary":"The Container"},{"type":"Boolean","optional":false,"name":"lastOverflow","summary":"overflow state"}],"name":"overflowchange","summary":"Fires after the overflow state has changed."}]},{"name":"Toolbar.Fill","fullName":"Ext.Toolbar.Fill","summary":"A non-rendering placeholder item which instructs the Toolbar's Layout to begin using\r\nthe right-justified button container.\r\n<pre><code>\r\nnew Ext.Panel({\r\n    tbar : [\r\n        'Item 1',\r\n       {xtype: 'tbfill'}, // or '->'\r\n        'Item 2'\r\n    ]\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Toolbar.js","xtype":"tbfill","extends":"Ext.Toolbar.Spacer","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Toolbar.Item","fullName":"Ext.Toolbar.Item","summary":"The base class that other non-interacting Toolbar Item classes should extend in order to\r\nget some basic common toolbar item functionality.\r\n","package":"Ext","definedIn":"widgets\\Toolbar.js","xtype":"tbitem","extends":"Ext.BoxComponent","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"HTMLElement","optional":false,"name":"el","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new Item."},"subclasses":"Ext.Toolbar.Separator,Ext.Toolbar.Spacer,Ext.Toolbar.TextItem","configOptions":[{"type":"String","optional":false,"name":"overflowText","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"Toolbar.Separator","fullName":"Ext.Toolbar.Separator","summary":"A simple class that adds a vertical separator bar between toolbar items\r\n(css class:<tt>'xtb-sep'</tt>). Example usage:\r\n<pre><code>\r\nnew Ext.Panel({\r\n    tbar : [\r\n        'Item 1',\r\n       {xtype: 'tbseparator'}, // or '-'\r\n        'Item 2'\r\n    ]\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Toolbar.js","xtype":"tbseparator","extends":"Ext.Toolbar.Item","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"Toolbar.Spacer","fullName":"Ext.Toolbar.Spacer","summary":"A simple element that adds extra horizontal space between items in a toolbar.\r\nBy default a 2px wide space is added via css specification:<pre><code>\r\n.x-toolbar .xtb-spacer {\r\n    width:2px;\r\n}\r\n</code></pre>\r\n<p>Example usage:</p>\r\n<pre><code>\r\nnew Ext.Panel({\r\n    tbar : [\r\n        'Item 1',\r\n       {xtype: 'tbspacer'}, // or ' '\r\n        'Item 2',\r\n        // space width is also configurable via javascript\r\n       {xtype: 'tbspacer', width: 50}, // add a 50px space\r\n        'Item 3'\r\n    ]\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Toolbar.js","xtype":"tbspacer","extends":"Ext.Toolbar.Item","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.Toolbar.Fill","configOptions":[{"type":"Number","optional":false,"name":"width","summary":"The width of the spacer in pixels (defaults to 2px via css style <tt>.x-toolbar .xtb-spacer</tt>).\r\n"}],"properties":[],"methods":[],"events":[]},{"name":"Toolbar.TextItem","fullName":"Ext.Toolbar.TextItem","summary":"A simple class that renders text directly into a toolbar\r\n(with css class:<tt>'xtb-text'</tt>). Example usage:\r\n<pre><code>\r\nnew Ext.Panel({\r\n    tbar : [\r\n       {xtype: 'tbtext', text: 'Item 1'} // or simply 'Item 1'\r\n    ]\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Toolbar.js","xtype":"tbtext","extends":"Ext.Toolbar.Item","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"String/Object","optional":false,"name":"text","summary":"A text string, or a config object containing a <tt>text</tt> property"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Creates a new TextItem."},"subclasses":"","configOptions":[{"type":"String","optional":false,"name":"text","summary":""}],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"t","summary":"The text to display (html accepted)."}],"return":null,"hide":false,"private":false,"name":"setText","summary":"Updates this item's text, setting the text to be used as innerHTML.\r\n"}],"events":[]},{"name":"ToolTip","fullName":"Ext.ToolTip","summary":"A standard tooltip implementation for providing additional information when hovering over a target element.\r\n","package":"Ext","definedIn":"widgets\\tips\\ToolTip.js","xtype":"tooltip","extends":"Ext.Tip","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The configuration options"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Tooltip."},"subclasses":"Ext.QuickTip","configOptions":[{"type":"Number","optional":false,"name":"anchorOffset","summary":"default position of the anchor arrow (defaults to 0).  When the anchor\r\nposition is on the top or bottom of the tooltip, <code>anchorOffset</code>\r\nwill be used as a horizontal offset.  Likewise, when the anchor position\r\nis on the left or right side, <code>anchorOffset</code> will be used as\r\na vertical offset.\r\n"},{"type":"Boolean","optional":false,"name":"anchorToTarget","summary":"element, false to anchor it relative to the mouse coordinates (defaults\r\nto true).  When <code>anchorToTarget</code> is true, use\r\n<code>{@link #defaultAlign}</code> to control tooltip alignment to the\r\ntarget element.  When <code>anchorToTarget</code> is false, use\r\n<code>{@link #anchorPosition}</code> instead to control alignment.\r\n"},{"type":"Boolean","optional":false,"name":"autoHide","summary":"mouse exits the target element or after the <code>{@link #dismissDelay}</code>\r\nhas expired if set (defaults to true).  If <code>{@link closable} = true</code>\r\na close tool button will be rendered into the tooltip header.\r\n"},{"type":"String","optional":false,"name":"delegate","summary":"selector which allows selection of individual elements within the\r\n<code>{@link #target}</code> element to trigger showing and hiding the\r\nToolTip as the mouse moves within the target.</p>\r\n<p>When specified, the child element of the target which caused a show\r\nevent is placed into the <code>{@link #triggerElement}</code> property\r\nbefore the ToolTip is shown.</p>\r\n<p>This may be useful when a Component has regular, repeating elements\r\nin it, each of which need a Tooltip which contains information specific\r\nto that element. For example:</p><pre><code>\r\nvar myGrid = new Ext.grid.gridPanel(gridConfig);\r\nmyGrid.on('render', function (grid) {\r\n    var store = grid.getStore();  // Capture the Store.\r\n    var view = grid.getView();    // Capture the GridView.\r\n    myGrid.tip = new Ext.ToolTip({\r\n        target: view.mainBody,    // The overall target element.\r\n        delegate: '.x-grid3-row', // Each grid row causes its own seperate show and hide.\r\n        trackMouse: true,         // Moving within the row should not hide the tip.\r\n        renderTo: document.body,  // Render immediately so that tip.body can be\r\n                                  //  referenced prior to the first show.\r\n        listeners: {              // Change content dynamically depending on which element\r\n                                  //  triggered the show.\r\n            beforeshow: function updateTipBody(tip) {\r\n                var rowIndex = view.findRowIndex(tip.triggerElement);\r\n                tip.body.dom.innerHTML = 'Over Record ID ' + store.getAt(rowIndex).id;\r\n            }\r\n        }\r\n    });\r\n});\r\n</code></pre>\r\n"},{"type":"Number","optional":false,"name":"dismissDelay","summary":"automatically hides (defaults to 5000). To disable automatic hiding, set\r\ndismissDelay = 0.\r\n"},{"type":"Number","optional":false,"name":"hideDelay","summary":"target element but before the tooltip actually hides (defaults to 200).\r\nSet to 0 for the tooltip to hide immediately.\r\n"},{"type":"Array","optional":false,"name":"mouseOffset","summary":"tooltip should be shown (defaults to [15,18]).\r\n"},{"type":"Number","optional":false,"name":"showDelay","summary":"after the mouse enters the target element (defaults to 500)\r\n"},{"type":"Mixed","optional":false,"name":"target","summary":"for mouseover events to trigger showing this ToolTip.\r\n"},{"type":"Boolean","optional":false,"name":"trackMouse","summary":"moves over the target element (defaults to false).\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"triggerElement","summary":"When a Tooltip is configured with the <code>{@link #delegate}</code>\r\noption to cause selected child elements of the <code>{@link #target}</code>\r\nElement to each trigger a seperate show event, this property is set to\r\nthe DOM element which triggered the show.\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"hide","summary":"Hides this tooltip if visible.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"t","summary":"The Element, HtmlElement, or ID of an element to bind to"}],"return":null,"hide":false,"private":false,"name":"initTarget","summary":"Binds this ToolTip to the specified element. The tooltip will be displayed when the mouse moves over the element.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"show","summary":"Shows this tooltip at the current event target XY position.\r\n"}],"events":[]},{"name":"Updater","fullName":"Ext.Updater","summary":"Provides AJAX-style update capabilities for Element objects.  Updater can be used to {@link #update}\r\nan {@link Ext.Element} once, or you can use {@link #startAutoRefresh} to set up an auto-updating\r\n{@link Ext.Element Element} on a specific interval.<br><br>\r\nUsage:<br>\r\n<pre><code>\r\nvar el = Ext.get(\"foo\"); // Get Ext.Element object\r\nvar mgr = el.getUpdater();\r\nmgr.update({\r\n        url: \"http://myserver.com/index.php\",\r\n        params: {\r\n            param1: \"foo\",\r\n            param2: \"bar\"\r\n        }\r\n});\r\n...\r\nmgr.formUpdate(\"myFormId\", \"http://myserver.com/index.php\");\r\n<br>\r\n// or directly (returns the same Updater instance)\r\nvar mgr = new Ext.Updater(\"myElementId\");\r\nmgr.startAutoRefresh(60, \"http://myserver.com/index.php\");\r\nmgr.on(\"update\", myFcnNeedsToKnow);\r\n<br>\r\n// short handed call directly from the element object\r\nExt.get(\"foo\").load({\r\n        url: \"bar.php\",\r\n        scripts: true,\r\n        params: \"param1=foo&amp;param2=bar\",\r\n        text: \"Loading Foo...\"\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"util\\UpdateManager.js","xtype":null,"extends":"Ext.util.Observable","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to update"},{"type":"Boolean","optional":true,"name":"forceNew","summary":"By default the constructor checks to see if the passed element already has an Updater and if it does it returns the same instance. This will skip that check (useful for extending this class)."}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create new Updater directly."},"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"defaultUrl","summary":"Cached url to use for refreshes. Overwritten every time update() is called unless \"discardUrl\" param is set to true.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"disableCaching","summary":"Whether to append unique parameter on get request to disable caching (defaults to {@link Ext.Updater.defaults#disableCaching}).\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"el","summary":"The Element object\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"indicatorText","summary":"Text for loading indicator (defaults to {@link Ext.Updater.defaults#indicatorText}).\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"loadScripts","summary":"True to process scripts in the output (defaults to {@link Ext.Updater.defaults#loadScripts}).\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"refreshDelegate","summary":"Delegate for refresh() prebound to \"this\", use myUpdater.refreshDelegate.createCallback(arg1, arg2) to bind arguments\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"renderer","summary":"The renderer for this Updater (defaults to {@link Ext.Updater.BasicRenderer}).\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"showLoadIndicator","summary":"Whether to show indicatorText when loading (defaults to {@link Ext.Updater.defaults#showLoadIndicator}).\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"sslBlankUrl","summary":"Blank page URL to use with SSL file uploads (defaults to {@link Ext.Updater.defaults#sslBlankUrl}).\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"timeout","summary":"Timeout for requests or form posts in seconds (defaults to {@link Ext.Updater.defaults#timeout}).\r\n"},{"type":null,"static":false,"hide":false,"private":false,"name":"transaction","summary":"Transaction object of the current executing transaction, or null if there is no active transaction.\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"updateDelegate","summary":"Delegate for update() prebound to \"this\", use myUpdater.updateDelegate.createCallback(arg1, arg2) to bind arguments\r\n"}],"methods":[{"parameters":[],"return":null,"hide":false,"private":false,"name":"abort","summary":"Aborts the currently executing transaction, if any.\r\n"},{"parameters":[{"type":"String/HTMLElement","optional":false,"name":"form","summary":"The form Id or form element"},{"type":"String","optional":true,"name":"url","summary":"The url to pass the form to. If omitted the action attribute on the form will be used."},{"type":"Boolean","optional":true,"name":"reset","summary":"Whether to try to reset the form after the update"},{"type":"Function","optional":true,"name":"callback","summary":"Callback when transaction is complete. The following\r\nparameters are passed:<ul>\r\n<li><b>el</b> : Ext.Element<p class=\"sub-desc\">The Element being updated.</p></li>\r\n<li><b>success</b> : Boolean<p class=\"sub-desc\">True for success, false for failure.</p></li>\r\n<li><b>response</b> : XMLHttpRequest<p class=\"sub-desc\">The XMLHttpRequest which processed the update.</p></li></ul>"}],"return":null,"hide":false,"private":false,"name":"formUpdate","summary":"<p>Performs an async form post, updating this element with the response. If the form has the attribute\r\nenctype=\"<a href=\"http://www.faqs.org/rfcs/rfc2388.html\">multipart/form-data</a>\", it assumes it's a file upload.\r\nUses this.sslBlankUrl for SSL file uploads to prevent IE security warning.</p>\r\n<p>File uploads are not performed using normal \"Ajax\" techniques, that is they are <b>not</b>\r\nperformed using XMLHttpRequests. Instead the form is submitted in the standard manner with the\r\nDOM <tt>&lt;form></tt> element temporarily modified to have its\r\n<a href=\"http://www.w3.org/TR/REC-html40/present/frames.html#adef-target\">target</a> set to refer\r\nto a dynamically generated, hidden <tt>&lt;iframe></tt> which is inserted into the document\r\nbut removed after the return data has been gathered.</p>\r\n<p>Be aware that file upload packets, sent with the content type <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">multipart/form-data</a>\r\nand some server technologies (notably JEE) may require some custom processing in order to\r\nretrieve parameter names and parameter values from the packet content.</p>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"formUpdateDelegate","summary":"Delegate for formUpdate() prebound to \"this\", use myUpdater.formUpdateDelegate.createCallback(arg1, arg2) to bind arguments\r\n@type Function\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getDefaultRenderer","summary":"This is an overrideable method which returns a reference to a default\r\nrenderer class if none is specified when creating the Ext.Updater.\r\nDefaults to {@link Ext.Updater.BasicRenderer}\r\n"},{"parameters":[],"return":{"type":"Ext.Element","summary":"The element"},"hide":false,"private":false,"name":"getEl","summary":"Get the Element this Updater is bound to\r\n"},{"parameters":[],"return":{"type":"Object","summary":""},"hide":false,"private":false,"name":"getRenderer","summary":"Returns the current content renderer for this Updater. See {@link Ext.Updater.BasicRenderer#render} for more details.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"isAutoRefreshing","summary":"Returns true if the Updater is currently set to auto refresh its content (see {@link #startAutoRefresh}), otherwise false.\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isUpdating","summary":"Returns true if an update is in progress, otherwise false.\r\n"},{"parameters":[{"type":"Function","optional":true,"name":"callback","summary":"Callback when transaction is complete - called with signature (oElement, bSuccess)"}],"return":null,"hide":false,"private":false,"name":"refresh","summary":"Refresh the element with the last used url or defaultUrl. If there is no url, it returns immediately\r\n"},{"parameters":[{"type":"String/Function","optional":false,"name":"defaultUrl","summary":"The url or a function to call to get the url"}],"return":null,"hide":false,"private":false,"name":"setDefaultUrl","summary":"Sets the default URL used for updates.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"renderer","summary":"The object implementing the render() method"}],"return":null,"hide":false,"private":false,"name":"setRenderer","summary":"Sets the content renderer for this Updater. See {@link Ext.Updater.BasicRenderer#render} for more details.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"showLoading","summary":"Display the element's \"loading\" state. By default, the element is updated with {@link #indicatorText}. This\r\nmethod may be overridden to perform a custom action while this Updater is actively updating its contents.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"interval","summary":"How often to update (in seconds)."},{"type":"String/Object/Function","optional":true,"name":"url","summary":"The url for this request, a config object in the same format\r\nsupported by {@link #load}, or a function to call to get the url (defaults to the last used url).  Note that while\r\nthe url used in a load call can be reused by this method, other load config options will not be reused and must be\r\nsepcified as part of a config object passed as this paramter if needed."},{"type":"String/Object","optional":true,"name":"params","summary":"The parameters to pass as either a url encoded string\r\n\"&param1=1&param2=2\" or as an object {param1: 1, param2: 2}"},{"type":"Function","optional":true,"name":"callback","summary":"Callback when transaction is complete - called with signature (oElement, bSuccess)"},{"type":"Boolean","optional":true,"name":"refreshNow","summary":"Whether to execute the refresh now, or wait the interval"}],"return":null,"hide":false,"private":false,"name":"startAutoRefresh","summary":"Set this element to auto refresh.  Can be canceled by calling {@link #stopAutoRefresh}.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"stopAutoRefresh","summary":"Stop auto refresh on this element.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"options","summary":"A config object containing any of the following options:<ul>\r\n<li>url : <b>String/Function</b><p class=\"sub-desc\">The URL to request or a function which\r\n<i>returns</i> the URL (defaults to the value of {@link Ext.Ajax#url} if not specified).</p></li>\r\n<li>method : <b>String</b><p class=\"sub-desc\">The HTTP method to\r\nuse. Defaults to POST if the <tt>params</tt> argument is present, otherwise GET.</p></li>\r\n<li>params : <b>String/Object/Function</b><p class=\"sub-desc\">The\r\nparameters to pass to the server (defaults to none). These may be specified as a url-encoded\r\nstring, or as an object containing properties which represent parameters,\r\nor as a function, which returns such an object.</p></li>\r\n<li>scripts : <b>Boolean</b><p class=\"sub-desc\">If <tt>true</tt>\r\nany &lt;script&gt; tags embedded in the response text will be extracted\r\nand executed (defaults to {@link Ext.Updater.defaults#loadScripts}). If this option is specified,\r\nthe callback will be called <i>after</i> the execution of the scripts.</p></li>\r\n<li>callback : <b>Function</b><p class=\"sub-desc\">A function to\r\nbe called when the response from the server arrives. The following\r\nparameters are passed:<ul>\r\n<li><b>el</b> : Ext.Element<p class=\"sub-desc\">The Element being updated.</p></li>\r\n<li><b>success</b> : Boolean<p class=\"sub-desc\">True for success, false for failure.</p></li>\r\n<li><b>response</b> : XMLHttpRequest<p class=\"sub-desc\">The XMLHttpRequest which processed the update.</p></li>\r\n<li><b>options</b> : Object<p class=\"sub-desc\">The config object passed to the update call.</p></li></ul>\r\n</p></li>\r\n<li>scope : <b>Object</b><p class=\"sub-desc\">The scope in which\r\nto execute the callback (The callback's <tt>this</tt> reference.) If the\r\n<tt>params</tt> argument is a function, this scope is used for that function also.</p></li>\r\n<li>discardUrl : <b>Boolean</b><p class=\"sub-desc\">By default, the URL of this request becomes\r\nthe default URL for this Updater object, and will be subsequently used in {@link #refresh}\r\ncalls.  To bypass this behavior, pass <tt>discardUrl:true</tt> (defaults to false).</p></li>\r\n<li>timeout : <b>Number</b><p class=\"sub-desc\">The number of seconds to wait for a response before\r\ntiming out (defaults to {@link Ext.Updater.defaults#timeout}).</p></li>\r\n<li>text : <b>String</b><p class=\"sub-desc\">The text to use as the innerHTML of the\r\n{@link Ext.Updater.defaults#indicatorText} div (defaults to 'Loading...').  To replace the entire div, not\r\njust the text, override {@link Ext.Updater.defaults#indicatorText} directly.</p></li>\r\n<li>nocache : <b>Boolean</b><p class=\"sub-desc\">Only needed for GET\r\nrequests, this option causes an extra, auto-generated parameter to be appended to the request\r\nto defeat caching (defaults to {@link Ext.Updater.defaults#disableCaching}).</p></li></ul>\r\n<p>\r\nFor example:\r\n<pre><code>\r\num.update({\r\nurl: \"your-url.php\",\r\nparams: {param1: \"foo\", param2: \"bar\"}, // or a URL encoded string\r\ncallback: yourFunction,\r\nscope: yourObject, //(optional scope)\r\ndiscardUrl: true,\r\nnocache: true,\r\ntext: \"Loading...\",\r\ntimeout: 60,\r\nscripts: false // Save time by avoiding RegExp execution.\r\n});\r\n</code></pre>"}],"return":null,"hide":false,"private":false,"name":"update","summary":"Performs an <b>asynchronous</b> request, updating this element with the response.\r\nIf params are specified it uses POST, otherwise it uses GET.<br><br>\r\n<b>Note:</b> Due to the asynchronous nature of remote server requests, the Element\r\nwill not have been fully updated when the function returns. To post-process the returned\r\ndata, use the callback option, or an <b><tt>update</tt></b> event handler.\r\n"}],"events":[{"parameters":[{"type":"Ext.Element","optional":false,"name":"el","summary":""},{"type":"String/Object/Function","optional":false,"name":"url","summary":""},{"type":"String/Object","optional":false,"name":"params","summary":""}],"name":"beforeupdate","summary":"Fired before an update is made, return false from your handler and the update is cancelled."},{"parameters":[{"type":"Ext.Element","optional":false,"name":"el","summary":""},{"type":"Object","optional":false,"name":"oResponseObject","summary":"The response Object"}],"name":"failure","summary":"Fired on update failure."},{"parameters":[{"type":"Ext.Element","optional":false,"name":"el","summary":""},{"type":"Object","optional":false,"name":"oResponseObject","summary":"The response Object"}],"name":"update","summary":"Fired after successful update is made."}]},{"name":"Updater.BasicRenderer","fullName":"Ext.Updater.BasicRenderer","summary":"Default Content renderer. Updates the elements innerHTML with the responseText.\r\n","package":"Ext","definedIn":"util\\UpdateManager.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Ext.Element","optional":false,"name":"el","summary":"The element being rendered"},{"type":"Object","optional":false,"name":"response","summary":"The XMLHttpRequest object"},{"type":"Updater","optional":false,"name":"updateManager","summary":"The calling update manager"},{"type":"Function","optional":false,"name":"callback","summary":"A callback that will need to be called if loadScripts is true on the Updater"}],"return":null,"hide":false,"private":false,"name":"render","summary":"This is called when the transaction is completed and it's time to update the element - The BasicRenderer\r\nupdates the elements innerHTML with the responseText - To perform a custom render (i.e. XML or JSON processing),\r\ncreate an object with a \"render(el, response)\" method and pass it to setRenderer on the Updater.\r\n"}],"events":[]},{"name":"Updater.defaults","fullName":"Ext.Updater.defaults","summary":"The defaults collection enables customizing the default properties of Updater\r\n","package":"Ext","definedIn":"util\\UpdateManager.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"indicatorText : '<div class","summary":"Text for loading indicator (defaults to '&lt;div class=\"loading-indicator\"&gt;Loading...&lt;/div&gt;').\r\n"}],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":"The element to update"},{"type":"String","optional":false,"name":"url","summary":"The url"},{"type":"String/Object","optional":true,"name":"params","summary":"Url encoded param string or an object of name/value pairs"},{"type":"Object","optional":true,"name":"options","summary":"A config object with any of the Updater properties you want to set - for\r\nexample: {disableCaching:true, indicatorText: \"Loading data...\"}\r\n@static\r\n@deprecated\r\n@member Ext.Updater"}],"return":null,"hide":false,"private":false,"name":"updateElement","summary":"Static convenience method. <b>This method is deprecated in favor of el.load({url:'foo.php', ...})</b>.\r\nUsage:\r\n<pre><code>Ext.Updater.updateElement(\"my-div\", \"stuff.php\");</code></pre>\r\n"}],"events":[]},{"name":"Viewport","fullName":"Ext.Viewport","summary":"<p>A specialized container representing the viewable application area (the browser viewport).</p>\r\n<p>The Viewport renders itself to the document body, and automatically sizes itself to the size of\r\nthe browser viewport and manages window resizing. There may only be one Viewport created\r\nin a page. Inner layouts are available by virtue of the fact that all {@link Ext.Panel Panel}s\r\nadded to the Viewport, either through its {@link #items}, or through the items, or the {@link #add}\r\nmethod of any of its child Panels may themselves have a layout.</p>\r\n<p>The Viewport does not provide scrolling, so child Panels within the Viewport should provide\r\nfor scrolling if needed using the {@link #autoScroll} config.</p>\r\n<p>An example showing a classic application border layout:</p><pre><code>\r\nnew Ext.Viewport({\r\n    layout: 'border',\r\n    items: [{\r\n        region: 'north',\r\n        html: '&lt;h1 class=\"x-panel-header\">Page Title&lt;/h1>',\r\n        autoHeight: true,\r\n        border: false,\r\n        margins: '0 0 5 0'\r\n    }, {\r\n        region: 'west',\r\n        collapsible: true,\r\n        title: 'Navigation',\r\n        width: 200\r\n        // the west region might typically utilize a {@link Ext.tree.TreePanel TreePanel} or a Panel with {@link Ext.layout.AccordionLayout Accordion layout} \r\n    }, {\r\n        region: 'south',\r\n        title: 'Title for Panel',\r\n        collapsible: true,\r\n        html: 'Information goes here',\r\n        split: true,\r\n        height: 100,\r\n        minHeight: 100\r\n    }, {\r\n        region: 'east',\r\n        title: 'Title for the Grid Panel',\r\n        collapsible: true,\r\n        split: true,\r\n        width: 200,\r\n        xtype: 'grid',\r\n        // remaining grid configuration not shown ...\r\n        // notice that the GridPanel is added directly as the region\r\n        // it is not \"overnested\" inside another Panel\r\n    }, {\r\n        region: 'center',\r\n        xtype: 'tabpanel', // TabStrip itself has no title\r\n        items: {\r\n            title: 'Default Tab',\r\n            html: 'The first tab\\'s content. Others may be added dynamically'\r\n        }\r\n    }]\r\n});\r\n</code></pre>\r\n","package":"Ext","definedIn":"widgets\\Viewport.js","xtype":"viewport","extends":"Ext.Container","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":"Create a new Viewport."},"subclasses":"","configOptions":[{"type":"Boolean","optional":false,"name":"allowDomMove","summary":""},{"type":"Mixed","optional":false,"name":"applyTo","summary":""},{"type":"Boolean","optional":false,"name":"autoHeight","summary":""},{"type":"Boolean","optional":false,"name":"autoWidth","summary":""},{"type":"Boolean","optional":false,"name":"deferHeight","summary":""},{"type":"Number","optional":false,"name":"height","summary":""},{"type":"Boolean","optional":false,"name":"hideParent","summary":""},{"type":"Boolean","optional":false,"name":"monitorResize","summary":""},{"type":"Mixed","optional":false,"name":"renderTo","summary":""},{"type":"Number","optional":false,"name":"width","summary":""}],"properties":[],"methods":[],"events":[]},{"name":"Window","fullName":"Ext.Window","summary":"<p>A specialized panel intended for use as an application window.  Windows are floated, {@link #resizable}, and\r\n{@link #draggable} by default.  Windows can be {@link #maximizable maximized} to fill the viewport,\r\nrestored to their prior size, and can be {@link #minimize}d.</p>\r\n<p>Windows can also be linked to a {@link Ext.WindowGroup} or managed by the {@link Ext.WindowMgr} to provide\r\ngrouping, activation, to front, to back and other application-specific behavior.</p>\r\n<p>By default, Windows will be rendered to document.body. To {@link #constrain} a Window to another element\r\nspecify {@link Ext.Component#renderTo renderTo}.</p>\r\n<p><b>Note:</b> By default, the <code>{@link #closable close}</code> header tool <i>destroys</i> the Window resulting in\r\ndestruction of any child Components. This makes the Window object, and all its descendants <b>unusable</b>. To enable\r\nre-use of a Window, use <b><code>{@link #closeAction closeAction: 'hide'}</code></b>.</p>\r\n","package":"Ext","definedIn":"widgets\\Window.js","xtype":"window","extends":"Ext.Panel","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Object","optional":false,"name":"config","summary":"The config object"}],"return":null,"hide":false,"private":false,"name":null,"summary":""},"subclasses":"","configOptions":[{"type":"String/Element","optional":false,"name":"animateTarget","summary":"Id or element from which the window should animate while opening (defaults to null with no animation).\r\n"},{"type":"Boolean","optional":false,"name":"autoWidth","summary":""},{"type":"String","optional":false,"name":"baseCls","summary":"The base CSS class to apply to this panel's element (defaults to 'x-window').\r\n"},{"type":"Boolean","optional":false,"name":"closable","summary":"<p>True to display the 'close' tool button and allow the user to close the window, false to\r\nhide the button and disallow closing the window (defaults to true).</p>\r\n<p>By default, when close is requested by either clicking the close button in the header\r\nor pressing ESC when the Window has focus, the {@link #close} method will be called. This\r\nwill <i>{@link Ext.Component#destroy destroy}</i> the Window and its content meaning that\r\nit may not be reused.</p>\r\n<p>To make closing a Window <i>hide</i> the Window so that it may be reused, set\r\n{@link #closeAction} to 'hide'.\r\n"},{"type":"String","optional":false,"name":"closeAction","summary":"<p>The action to take when the close header tool is clicked:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><b><code>'{@link #close}'</code></b> : <b>Default</b><div class=\"sub-desc\">\r\n{@link #close remove} the window from the DOM and {@link Ext.Component#destroy destroy}\r\nit and all descendant Components. The window will <b>not</b> be available to be\r\nredisplayed via the {@link #show} method.\r\n</div></li>\r\n<li><b><code>'{@link #hide}'</code></b> : <div class=\"sub-desc\">\r\n{@link #hide} the window by setting visibility to hidden and applying negative offsets.\r\nThe window will be available to be redisplayed via the {@link #show} method.\r\n</div></li>\r\n</ul></div>\r\n<p><b>Note:</b> This setting does not affect the {@link #close} method\r\nwhich will always {@link Ext.Component#destroy destroy} the window. To\r\nprogramatically <i>hide</i> a window, call {@link #hide}.</p>\r\n"},{"type":"Boolean","optional":false,"name":"collapsed","summary":"True to render the window collapsed, false to render it expanded (defaults to false). Note that if\r\n{@link #expandOnShow} is true (the default) it will override the <tt>collapsed</tt> config and the window\r\nwill always be expanded when shown.\r\n"},{"type":"Boolean","optional":false,"name":"constrain","summary":"True to constrain the window within its containing element, false to allow it to fall outside of its\r\ncontaining element. By default the window will be rendered to document.body.  To render and constrain the\r\nwindow within another element specify {@link #renderTo}.\r\n(defaults to false).  Optionally the header only can be constrained using {@link #constrainHeader}.\r\n"},{"type":"Boolean","optional":false,"name":"constrainHeader","summary":"True to constrain the window header within its containing element (allowing the window body to fall outside\r\nof its containing element) or false to allow the header to fall outside its containing element (defaults to\r\nfalse). Optionally the entire window can be constrained using {@link #constrain}.\r\n"},{"type":"String/Number/Button","optional":false,"name":"defaultButton","summary":"The id / index of a button or a button instance to focus when this window received the focus.\r\n"},{"type":"Boolean","optional":false,"name":"draggable","summary":"True to allow the window to be dragged by the header bar, false to disable dragging (defaults to true).  Note\r\nthat by default the window will be centered in the viewport, so if dragging is disabled the window may need\r\nto be positioned programmatically after render (e.g., myWindow.setPosition(100, 100);).\r\n"},{"type":"Boolean","optional":false,"name":"expandOnShow","summary":"True to always expand the window when it is displayed, false to keep it in its current state (which may be\r\n{@link #collapsed}) when displayed (defaults to true).\r\n"},{"type":"Boolean","optional":false,"name":"initHidden","summary":"True to hide the window until show() is explicitly called (defaults to true).\r\n"},{"type":"Ext.WindowGroup","optional":false,"name":"manager","summary":"A reference to the WindowGroup that should manage this window (defaults to {@link Ext.WindowMgr}).\r\n"},{"type":"Boolean","optional":false,"name":"maximizable","summary":"True to display the 'maximize' tool button and allow the user to maximize the window, false to hide the button\r\nand disallow maximizing the window (defaults to false).  Note that when a window is maximized, the tool button\r\nwill automatically change to a 'restore' button with the appropriate behavior already built-in that will\r\nrestore the window to its previous size.\r\n"},{"type":"Boolean","optional":false,"name":"maximized","summary":"True to initially display the window in a maximized state. (Defaults to false).\r\n"},{"type":"Number","optional":false,"name":"minHeight","summary":"The minimum height in pixels allowed for this window (defaults to 100).  Only applies when resizable = true.\r\n"},{"type":"Boolean","optional":false,"name":"minimizable","summary":"True to display the 'minimize' tool button and allow the user to minimize the window, false to hide the button\r\nand disallow minimizing the window (defaults to false).  Note that this button provides no implementation --\r\nthe behavior of minimizing a window is implementation-specific, so the minimize event must be handled and a\r\ncustom minimize behavior implemented for this option to be useful.\r\n"},{"type":"Number","optional":false,"name":"minWidth","summary":"The minimum width in pixels allowed for this window (defaults to 200).  Only applies when resizable = true.\r\n"},{"type":"Boolean","optional":false,"name":"modal","summary":"True to make the window modal and mask everything behind it when displayed, false to display it without\r\nrestricting access to other UI elements (defaults to false).\r\n"},{"type":"Boolean","optional":false,"name":"monitorResize","summary":"This is automatically managed based on the value of constrain and constrainToHeader\r\n"},{"type":"Function","optional":false,"name":"onEsc","summary":"Allows override of the built-in processing for the escape key. Default action\r\nis to close the Window (performing whatever action is specified in {@link #closeAction}.\r\nTo prevent the Window closing when the escape key is pressed, specify this as\r\nExt.emptyFn (See {@link Ext#emptyFn}).\r\n"},{"type":"Boolean","optional":false,"name":"plain","summary":"True to render the window body with a transparent background so that it will blend into the framing\r\nelements, false to add a lighter background color to visually highlight the body element and separate it\r\nmore distinctly from the surrounding frame (defaults to false).\r\n"},{"type":"Boolean","optional":false,"name":"resizable","summary":"True to allow user resizing at each edge and corner of the window, false to disable resizing (defaults to true).\r\n"},{"type":"String","optional":false,"name":"resizeHandles","summary":"A valid {@link Ext.Resizable} handles config string (defaults to 'all').  Only applies when resizable = true.\r\n"},{"type":"Number","optional":false,"name":"x","summary":"The X position of the left edge of the window on initial showing. Defaults to centering the Window within\r\nthe width of the Window's container {@link Ext.Element Element) (The Element that the Window is rendered to).\r\n"},{"type":"Number","optional":false,"name":"y","summary":"The Y position of the top edge of the window on initial showing. Defaults to centering the Window within\r\nthe height of the Window's container {@link Ext.Element Element) (The Element that the Window is rendered to).\r\n"}],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"dd","summary":"If this Window is configured {@link #draggable}, this property will contain\r\nan instance of {@link Ext.dd.DD} which handles dragging the Window's DOM Element.\r\n"}],"methods":[{"parameters":[{"type":"Mixed","optional":false,"name":"element","summary":"The element to align to."},{"type":"String","optional":false,"name":"position","summary":"The position to align to (see {@link Ext.Element#alignTo} for more details)."},{"type":"Array","optional":true,"name":"offsets","summary":"Offset the positioning by [x, y]"}],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"alignTo","summary":"Aligns the window to the specified element\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"element","summary":"The element to align to."},{"type":"String","optional":false,"name":"position","summary":"The position to align to (see {@link Ext.Element#alignTo} for more details)"},{"type":"Array","optional":true,"name":"offsets","summary":"Offset the positioning by [x, y]"},{"type":"Boolean/Number","optional":true,"name":"monitorScroll","summary":"true to monitor body scroll and reposition. If this parameter\r\nis a number, it is used as the buffer delay (defaults to 50ms)."}],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"anchorTo","summary":"Anchors this window to another element and realigns it when the window is resized or scrolled.\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"center","summary":"Centers this window in the viewport\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"close","summary":"<p>Closes the Window, removes it from the DOM, {@link Ext.Component#destroy destroy}s\r\nthe Window object and all its descendant Components. The {@link Ext.Panel#beforeclose beforeclose}\r\nevent is fired before the close happens and will cancel the close action if it returns false.<p>\r\n<p><b>Note:</b> This method is not affected by the {@link #closeAction} setting which\r\nonly affects the action triggered when clicking the {@link #closable 'close' tool in the header}.\r\nTo hide the Window without destroying it, call {@link #hide}.</p>\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"focus","summary":"Focuses the window.  If a defaultButton is set, it will receive focus, otherwise the\r\nwindow itself will receive focus.\r\n"},{"parameters":[{"type":"String/Element","optional":true,"name":"animateTarget","summary":"The target element or id to which the window should\r\nanimate while hiding (defaults to null with no animation)"},{"type":"Function","optional":true,"name":"callback","summary":"A callback function to call after the window is hidden"},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the callback"}],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"hide","summary":"Hides the window, setting it to invisible and applying negative offsets.\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"maximize","summary":"Fits the window within its current container and automatically replaces\r\nthe {@link #maximizable 'maximize' tool button} with the 'restore' tool button.\r\nAlso see {@link #toggleMaximize}.\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"minimize","summary":"Placeholder method for minimizing the window.  By default, this method simply fires the {@link #minimize} event\r\nsince the behavior of minimizing a window is application-specific.  To implement custom minimize behavior,\r\neither the minimize event can be handled or this method can be overridden.\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"restore","summary":"Restores a {@link #maximizable maximized}  window back to its original\r\nsize and position prior to being maximized and also replaces\r\nthe 'restore' tool button with the 'maximize' tool button.\r\nAlso see {@link #toggleMaximize}.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"active","summary":"True to activate the window, false to deactivate it (defaults to false)"}],"return":null,"hide":false,"private":false,"name":"setActive","summary":"Makes this the active window by showing its shadow, or deactivates it by hiding its shadow.  This method also\r\nfires the {@link #activate} or {@link #deactivate} event depending on which action occurred. This method is\r\ncalled internally by {@link Ext.WindowMgr}.\r\n"},{"parameters":[{"type":"String/Element","optional":false,"name":"el","summary":"The target element or id"}],"return":null,"hide":false,"private":false,"name":"setAnimateTarget","summary":"Sets the target element from which the window should animate while opening.\r\n"},{"parameters":[{"type":"String/Element","optional":true,"name":"animateTarget","summary":"The target element or id from which the window should\r\nanimate while opening (defaults to null with no animation)"},{"type":"Function","optional":true,"name":"callback","summary":"A callback function to call after the window is displayed"},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the callback"}],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"show","summary":"Shows the window, rendering it first if necessary, or activates it and brings it to front if hidden.\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"toBack","summary":"Sends this window to the back of (lower z-index than) any other visible windows\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"e","summary":"Specify <tt>false</tt> to prevent the window from being focused."}],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"toFront","summary":"Brings this window to the front of any other visible windows\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"this"},"hide":false,"private":false,"name":"toggleMaximize","summary":"A shortcut method for toggling between {@link #maximize} and {@link #restore} based on the current maximized\r\nstate of the window.\r\n"}],"events":[{"parameters":[{"type":"Ext.Window","optional":false,"name":"el","summary":"this"}],"name":"activate","summary":"Fires after the window has been visually activated via {@link #setActive}."},{"parameters":[{"type":"Ext.Window","optional":false,"name":"el","summary":"this"}],"name":"deactivate","summary":"Fires after the window has been visually deactivated via {@link #setActive}."},{"parameters":[{"type":"Ext.Window","optional":false,"name":"el","summary":"this"}],"name":"maximize","summary":"Fires after the window has been maximized."},{"parameters":[{"type":"Ext.Window","optional":false,"name":"el","summary":"this"}],"name":"minimize","summary":"Fires after the window has been minimized."},{"parameters":[{"type":"Ext.Window","optional":false,"name":"el","summary":"this"},{"type":"Number","optional":false,"name":"width","summary":"The window's new width"},{"type":"Number","optional":false,"name":"height","summary":"The window's new height"}],"name":"resize","summary":"Fires after the window has been resized."},{"parameters":[{"type":"Ext.Window","optional":false,"name":"el","summary":"this"}],"name":"restore","summary":"Fires after the window has been restored to its original size after being maximized."}]},{"name":"WindowGroup","fullName":"Ext.WindowGroup","summary":"An object that represents a group of {@link Ext.Window} instances and provides z-order management\r\nand window activation behavior.\r\n","package":"Ext","definedIn":"widgets\\WindowManager.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"Ext.WindowMgr","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String/Object","optional":false,"name":"win","summary":"The id of the window or a {@link Ext.Window} instance\r\nif it was already in front"}],"return":{"type":"Boolean","summary":"True if the dialog was brought to the front, else false"},"hide":false,"private":false,"name":"bringToFront","summary":"Brings the specified window to the front of any other active windows.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The function to execute for each item"},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the function"}],"return":null,"hide":false,"private":false,"name":"each","summary":"Executes the specified function once for every window in the group, passing each\r\nwindow as the only parameter. Returning false from the function will stop the iteration.\r\n"},{"parameters":[{"type":"String/Object","optional":false,"name":"id","summary":"The id of the window or a {@link Ext.Window} instance"}],"return":{"type":"Ext.Window","summary":""},"hide":false,"private":false,"name":"get","summary":"Gets a registered window by id.\r\n"},{"parameters":[],"return":{"type":"Ext.Window","summary":"The active window"},"hide":false,"private":false,"name":"getActive","summary":"Gets the currently-active window in the group.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fn","summary":"The search function"},{"type":"Object","optional":true,"name":"scope","summary":"The scope in which to execute the function (defaults to the window\r\nthat gets passed to the function if not specified)"}],"return":{"type":"Array","summary":"An array of zero or more matching windows"},"hide":false,"private":false,"name":"getBy","summary":"Returns zero or more windows in the group using the custom search function passed to this method.\r\nThe function should accept a single {@link Ext.Window} reference as its only argument and should\r\nreturn true if the window matches the search criteria, otherwise it should return false.\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"hideAll","summary":"Hides all windows in the group.\r\n"},{"parameters":[{"type":"String/Object","optional":false,"name":"win","summary":"The id of the window or a {@link Ext.Window} instance"}],"return":{"type":"Ext.Window","summary":"The window"},"hide":false,"private":false,"name":"sendToBack","summary":"Sends the specified window to the back of other active windows.\r\n"}],"events":[]},{"name":"WindowMgr","fullName":"Ext.WindowMgr","summary":"The default global window group that is available automatically.  To have more than one group of windows\r\nwith separate z-order stacks, create additional instances of {@link Ext.WindowGroup} as needed.\r\n","package":"Ext","definedIn":"widgets\\WindowManager.js","xtype":null,"extends":"Ext.WindowGroup","singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[],"events":[]},{"name":"XTemplate","fullName":"Ext.XTemplate","summary":"<p>A template class that supports advanced functionality like:<div class=\"mdetail-params\"><ul>\r\n<li>Autofilling arrays using templates and sub-templates</li>\r\n<li>Conditional processing with basic comparison operators</li>\r\n<li>Basic math function support</li>\r\n<li>Execute arbitrary inline code with special built-in template variables</li>\r\n<li>Custom member functions</li>\r\n<li>Many special tags and built-in operators that aren't defined as part of\r\nthe API, but are supported in the templates that can be created</li>\r\n</ul></div></p>\r\n<p>XTemplate provides the templating mechanism built into:<div class=\"mdetail-params\"><ul>\r\n<li>{@link Ext.DataView}</li>\r\n<li>{@link Ext.ListView}</li>\r\n<li>{@link Ext.form.ComboBox}</li>\r\n<li>{@link Ext.grid.TemplateColumn}</li>\r\n<li>{@link Ext.grid.GroupingView}</li>\r\n<li>{@link Ext.menu.Item}</li>\r\n<li>{@link Ext.layout.MenuLayout}</li>\r\n<li>{@link Ext.ColorPalette}</li>\r\n</ul></div></p>\r\n\r\n<p>For example usage {@link #XTemplate see the constructor}.</p>\r\n\r\n","package":"Ext","definedIn":"util\\XTemplate.js","xtype":null,"extends":"Ext.Template","singlton":false,"private":false,"for":null,"deprecated":false,"constructor":{"parameters":[{"type":"Mixed","optional":false,"name":"config","summary":""}],"return":null,"hide":false,"private":false,"name":null,"summary":"The {@link Ext.Template#Template Ext.Template constructor} describes\r\nthe acceptable parameters to pass to the constructor. The following\r\nexamples demonstrate all of the supported features.</p>\r\n\r\n<div class=\"mdetail-params\"><ul>\r\n\r\n<li><b><u>Sample Data</u></b>\r\n<div class=\"sub-desc\">\r\n<p>This is the data object used for reference in each code example:</p>\r\n<pre><code>\r\nvar data = {\r\n  name: 'Jack Slocum',\r\n  title: 'Lead Developer',\r\n  company: 'Ext JS, LLC',\r\n  email: 'jack@extjs.com',\r\n  address: '4 Red Bulls Drive',\r\n  city: 'Cleveland',\r\n  state: 'Ohio',\r\n  zip: '44102',\r\n  drinks: ['Red Bull', 'Coffee', 'Water'],\r\n  kids: [{\r\n    name: 'Sara Grace',\r\n    age:3\r\n  },{\r\n    name: 'Zachary',\r\n    age:2\r\n  },{\r\n    name: 'John James',\r\n    age:0\r\n  }]\r\n};\r\n</code></pre>\r\n</div>\r\n</li>\r\n\r\n\r\n<li><b><u>Auto filling of arrays</u></b>\r\n<div class=\"sub-desc\">\r\n<p>The <b><tt>tpl</tt></b> tag and the <b><tt>for</tt></b> operator are used\r\nto process the provided data object:\r\n<ul>\r\n<li>If the value specified in <tt>for</tt> is an array, it will auto-fill,\r\nrepeating the template block inside the <tt>tpl</tt> tag for each item in the\r\narray.</li>\r\n<li>If <tt>for=\".\"</tt> is specified, the data object provided is examined.</li>\r\n<li>While processing an array, the special variable <tt>{#}</tt>\r\nwill provide the current array index + 1 (starts at 1, not 0).</li>\r\n</ul>\r\n</p>\r\n<pre><code>\r\n&lt;tpl <b>for</b>=\".\">...&lt;/tpl>    // loop through array at root node\r\n&lt;tpl <b>for</b>=\"foo\">...&lt;/tpl>   // loop through array at foo node\r\n&lt;tpl <b>for</b>=\"foo.bar\">...&lt;/tpl> // loop through array at foo.bar node\r\n</code></pre>\r\nUsing the sample data above:\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>Kids: ',\r\n  '&lt;tpl <b>for</b>=\".\">',    // process the data.kids node\r\n    '&lt;p>{#}. {name}&lt;/p>', // use current array index to autonumber\r\n  '&lt;/tpl>&lt;/p>'\r\n);\r\ntpl.overwrite(panel.body, data.kids); // pass the kids property of the data object\r\n</code></pre>\r\n<p>An example illustrating how the <b><tt>for</tt></b> property can be leveraged\r\nto access specified members of the provided data object to populate the template:</p>\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>Name: {name}&lt;/p>',\r\n  '&lt;p>Title: {title}&lt;/p>',\r\n  '&lt;p>Company: {company}&lt;/p>',\r\n  '&lt;p>Kids: ',\r\n  '&lt;tpl <b>for=\"kids\"</b>>',   // interrogate the kids property within the data\r\n    '&lt;p>{name}&lt;/p>',\r\n  '&lt;/tpl>&lt;/p>'\r\n);\r\ntpl.overwrite(panel.body, data); // pass the root node of the data object\r\n</code></pre>\r\n<p>Flat arrays that contain values (and not objects) can be auto-rendered\r\nusing the special <b><tt>{.}</tt></b> variable inside a loop. This variable\r\nwill represent the value of the array at the current index:</p>\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>{name}\\&#39;s favorite beverages:&lt;/p>',\r\n  '&lt;tpl for=\"drinks\">',\r\n    '&lt;div> - {.}&lt;/div>',\r\n  '&lt;/tpl>'\r\n);\r\ntpl.overwrite(panel.body, data);\r\n</code></pre>\r\n<p>When processing a sub-template, for example while looping through a child array,\r\nyou can access the parent object's members via the <b><tt>parent</tt></b> object:</p>\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>Name: {name}&lt;/p>',\r\n  '&lt;p>Kids: ',\r\n  '&lt;tpl for=\"kids\">',\r\n    '&lt;tpl if=\"age > 1\">',\r\n      '&lt;p>{name}&lt;/p>',\r\n      '&lt;p>Dad: {<b>parent</b>.name}&lt;/p>',\r\n    '&lt;/tpl>',\r\n  '&lt;/tpl>&lt;/p>'\r\n);\r\ntpl.overwrite(panel.body, data);\r\n</code></pre>\r\n</div>\r\n</li>\r\n\r\n\r\n<li><b><u>Conditional processing with basic comparison operators</u></b>\r\n<div class=\"sub-desc\">\r\n<p>The <b><tt>tpl</tt></b> tag and the <b><tt>if</tt></b> operator are used\r\nto provide conditional checks for deciding whether or not to render specific\r\nparts of the template. Notes:<div class=\"sub-desc\"><ul>\r\n<li>Double quotes must be encoded if used within the conditional</li>\r\n<li>There is no <tt>else</tt> operator &mdash; if needed, two opposite\r\n<tt>if</tt> statements should be used.</li>\r\n</ul></div>\r\n<pre><code>\r\n&lt;tpl if=\"age &gt; 1 &amp;&amp; age &lt; 10\">Child&lt;/tpl>\r\n&lt;tpl if=\"age >= 10 && age < 18\">Teenager&lt;/tpl>\r\n&lt;tpl <b>if</b>=\"this.isGirl(name)\">...&lt;/tpl>\r\n&lt;tpl <b>if</b>=\"id==\\'download\\'\">...&lt;/tpl>\r\n&lt;tpl <b>if</b>=\"needsIcon\">&lt;img src=\"{icon}\" class=\"{iconCls}\"/>&lt;/tpl>\r\n// no good:\r\n&lt;tpl if=\"name == \"Jack\"\">Hello&lt;/tpl>\r\n// encode &#34; if it is part of the condition, e.g.\r\n&lt;tpl if=\"name == &#38;quot;Jack&#38;quot;\">Hello&lt;/tpl>\r\n</code></pre>\r\nUsing the sample data above:\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>Name: {name}&lt;/p>',\r\n  '&lt;p>Kids: ',\r\n  '&lt;tpl for=\"kids\">',\r\n    '&lt;tpl if=\"age > 1\">',\r\n      '&lt;p>{name}&lt;/p>',\r\n    '&lt;/tpl>',\r\n  '&lt;/tpl>&lt;/p>'\r\n);\r\ntpl.overwrite(panel.body, data);\r\n</code></pre>\r\n</div>\r\n</li>\r\n\r\n\r\n<li><b><u>Basic math support</u></b>\r\n<div class=\"sub-desc\">\r\n<p>The following basic math operators may be applied directly on numeric\r\ndata values:</p><pre>\r\n+ - * /\r\n</pre>\r\nFor example:\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>Name: {name}&lt;/p>',\r\n  '&lt;p>Kids: ',\r\n  '&lt;tpl for=\"kids\">',\r\n    '&lt;tpl if=\"age &amp;gt; 1\">', // <-- Note that the &gt; is encoded\r\n      '&lt;p>{#}: {name}&lt;/p>', // <-- Auto-number each item\r\n      '&lt;p>In 5 Years: {age+5}&lt;/p>', // <-- Basic math\r\n      '&lt;p>Dad: {parent.name}&lt;/p>',\r\n    '&lt;/tpl>',\r\n  '&lt;/tpl>&lt;/p>'\r\n);\r\ntpl.overwrite(panel.body, data);\r\n</code></pre>\r\n</div>\r\n</li>\r\n\r\n\r\n<li><b><u>Execute arbitrary inline code with special built-in template variables</u></b>\r\n<div class=\"sub-desc\">\r\n<p>Anything between <code>{[ ... ]}</code> is considered code to be executed\r\nin the scope of the template. There are some special variables available in that code:\r\n<ul>\r\n<li><b><tt>values</tt></b>: The values in the current scope. If you are using\r\nscope changing sub-templates, you can change what <tt>values</tt> is.</li>\r\n<li><b><tt>parent</tt></b>: The scope (values) of the ancestor template.</li>\r\n<li><b><tt>xindex</tt></b>: If you are in a looping template, the index of the\r\nloop you are in (1-based).</li>\r\n<li><b><tt>xcount</tt></b>: If you are in a looping template, the total length\r\nof the array you are looping.</li>\r\n<li><b><tt>fm</tt></b>: An alias for <tt>Ext.util.Format</tt>.</li>\r\n</ul>\r\nThis example demonstrates basic row striping using an inline code block and the\r\n<tt>xindex</tt> variable:</p>\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>Name: {name}&lt;/p>',\r\n  '&lt;p>Company: {[values.company.toUpperCase() + \", \" + values.title]}&lt;/p>',\r\n  '&lt;p>Kids: ',\r\n  '&lt;tpl for=\"kids\">',\r\n    '&lt;div class=\"{[xindex % 2 === 0 ? \"even\" : \"odd\"]}\">',\r\n    '{name}',\r\n    '&lt;/div>',\r\n  '&lt;/tpl>&lt;/p>'\r\n);\r\ntpl.overwrite(panel.body, data);\r\n</code></pre>\r\n</div>\r\n</li>\r\n\r\n<li><b><u>Template member functions</u></b>\r\n<div class=\"sub-desc\">\r\n<p>One or more member functions can be specified in a configuration\r\nobject passed into the XTemplate constructor for more complex processing:</p>\r\n<pre><code>\r\nvar tpl = new Ext.XTemplate(\r\n  '&lt;p>Name: {name}&lt;/p>',\r\n  '&lt;p>Kids: ',\r\n  '&lt;tpl for=\"kids\">',\r\n    '&lt;tpl if=\"this.isGirl(name)\">',\r\n      '&lt;p>Girl: {name} - {age}&lt;/p>',\r\n    '&lt;/tpl>',\r\n    // use opposite if statement to simulate 'else' processing:\r\n    '&lt;tpl if=\"this.isGirl(name) == false\">',\r\n      '&lt;p>Boy: {name} - {age}&lt;/p>',\r\n    '&lt;/tpl>',\r\n    '&lt;tpl if=\"this.isBaby(age)\">',\r\n      '&lt;p>{name} is a baby!&lt;/p>',\r\n    '&lt;/tpl>',\r\n  '&lt;/tpl>&lt;/p>',\r\n {\r\n    // XTemplate configuration:\r\n    compiled: true,\r\n    disableFormats: true,\r\n    // member functions:\r\n    isGirl: function (name) {\r\n      return name == 'Sara Grace';\r\n    },\r\n    isBaby: function (age) {\r\n      return age < 1;\r\n    }\r\n  }\r\n);\r\ntpl.overwrite(panel.body, data);\r\n</code></pre>\r\n</div>\r\n</li>\r\n\r\n</ul></div>."},"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"values","summary":"The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: 'bar'})"}],"return":{"type":"String","summary":"The HTML fragment"},"hide":false,"private":false,"name":"applyTemplate","summary":"Returns an HTML fragment of this template with the specified values applied.\r\n"},{"parameters":[],"return":{"type":"Function","summary":"The compiled function"},"hide":false,"private":false,"name":"compile","summary":"Compile the template to a function for optimized performance.  Recommended if the template will be used frequently.\r\n"}],"events":[]}]}],"classes":[{"name":"Array","fullName":"Array","summary":"","package":null,"definedIn":"core\\core\\Ext.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The object to check for"},{"type":"Number","optional":true,"name":"from","summary":"The index at which to begin the search"}],"return":{"type":"Number","summary":"The index of o in the array (or -1 if it is not found)"},"hide":false,"private":false,"name":"indexOf","summary":"Checks whether or not the specified object exists in the array.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The object to remove"}],"return":{"type":"Array","summary":"this array"},"hide":false,"private":false,"name":"remove","summary":"Removes the specified object from the array.  If the object is not found nothing happens.\r\n"}],"events":[]},{"name":"Date","fullName":"Date","summary":"\r\nThe date parsing and formatting syntax contains a subset of\r\n<a href=\"http://www.php.net/date\">PHP's date() function</a>, and the formats that are\r\nsupported will provide results equivalent to their PHP versions.\r\n\r\nThe following is a list of all currently supported formats:\r\n<pre>\r\nFormat  Description                                                               Example returned values\r\n------  -----------------------------------------------------------------------   -----------------------\r\n  d     Day of the month, 2 digits with leading zeros                             01 to 31\r\n  D     A short textual representation of the day of the week                     Mon to Sun\r\n  j     Day of the month without leading zeros                                    1 to 31\r\n  l     A full textual representation of the day of the week                      Sunday to Saturday\r\n  N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)\r\n  S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j\r\n  w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)\r\n  z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)\r\n  W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53\r\n  F     A full textual representation of a month, such as January or March        January to December\r\n  m     Numeric representation of a month, with leading zeros                     01 to 12\r\n  M     A short textual representation of a month                                 Jan to Dec\r\n  n     Numeric representation of a month, without leading zeros                  1 to 12\r\n  t     Number of days in the given month                                         28 to 31\r\n  L     Whether it's a leap year                                                  1 if it is a leap year, 0 otherwise.\r\n  o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004\r\n        belongs to the previous or next year, that year is used instead)\r\n  Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003\r\n  y     A two digit representation of a year                                      Examples: 99 or 03\r\n  a     Lowercase Ante meridiem and Post meridiem                                 am or pm\r\n  A     Uppercase Ante meridiem and Post meridiem                                 AM or PM\r\n  g     12-hour format of an hour without leading zeros                           1 to 12\r\n  G     24-hour format of an hour without leading zeros                           0 to 23\r\n  h     12-hour format of an hour with leading zeros                              01 to 12\r\n  H     24-hour format of an hour with leading zeros                              00 to 23\r\n  i     Minutes, with leading zeros                                               00 to 59\r\n  s     Seconds, with leading zeros                                               00 to 59\r\n  u     Decimal fraction of a second                                              Examples:\r\n        (minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or\r\n                                                                                  100 (i.e. 0.100s) or\r\n                                                                                  999 (i.e. 0.999s) or\r\n                                                                                  999876543210 (i.e. 0.999876543210s)\r\n  O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030\r\n  P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00\r\n  T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...\r\n  Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400\r\n  c     ISO 8601 date\r\n        Notes:                                                                    Examples:\r\n        1) If unspecified, the month / day defaults to the current month / day,   1991 or\r\n           the time defaults to midnight, while the timezone defaults to the      1992-10 or\r\n           browser's timezone. If a time is specified, it must include both hours 1993-09-20 or\r\n           and minutes. The \"T\" delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or\r\n           are optional.                                                          1995-07-18T17:21:28-02:00 or\r\n        2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or\r\n           least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or\r\n           of digits allowed), and may be delimited by either a '.' or a ','      1998-04-15T20:24:31.2468Z or\r\n        Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or\r\n        date-time granularity which are supported, or see                         2000-02-13T21:25:33\r\n        http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34\r\n  U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463\r\n  M$    Microsoft AJAX serialized dates                                           \\/Date(1238606590509)\\/ (i.e. UTC milliseconds since epoch) or\r\n                                                                                  \\/Date(1238606590509+0800)\\/\r\n</pre>\r\n\r\nExample usage (note that you must escape format specifiers with '\\\\' to render them as character literals):\r\n<pre><code>\r\n// Sample date:\r\n// 'Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)'\r\n\r\nvar dt = new Date('1/10/2007 03:05:01 PM GMT-0600');\r\ndocument.write(dt.format('Y-m-d'));                           // 2007-01-10\r\ndocument.write(dt.format('F j, Y, g:i a'));                   // January 10, 2007, 3:05 pm\r\ndocument.write(dt.format('l, \\\\t\\\\he jS \\\\of F Y h:i:s A'));  // Wednesday, the 10th of January 2007 03:05:01 PM\r\n</code></pre>\r\n\r\nHere are some standard date/time patterns that you might find helpful.  They\r\nare not part of the source of Date.js, but to use them you can simply copy this\r\nblock of code into any script that is included after Date.js and they will also become\r\nglobally available on the Date object.  Feel free to add or remove patterns as needed in your code.\r\n<pre><code>\r\nDate.patterns = {\r\n    ISO8601Long:\"Y-m-d H:i:s\",\r\n    ISO8601Short:\"Y-m-d\",\r\n    ShortDate: \"n/j/Y\",\r\n    LongDate: \"l, F d, Y\",\r\n    FullDateTime: \"l, F d, Y g:i:s A\",\r\n    MonthDay: \"F d\",\r\n    ShortTime: \"g:i A\",\r\n    LongTime: \"g:i:s A\",\r\n    SortableDateTime: \"Y-m-d\\\\TH:i:s\",\r\n    UniversalSortableDateTime: \"Y-m-d H:i:sO\",\r\n    YearMonth: \"F, Y\"\r\n};\r\n</code></pre>\r\n\r\nExample usage:\r\n<pre><code>\r\nvar dt = new Date();\r\ndocument.write(dt.format(Date.patterns.ShortDate));\r\n</code></pre>\r\n<p>Developer-written, custom formats may be used by supplying both a formatting and a parsing function\r\nwhich perform to specialized requirements. The functions are stored in {@link #parseFunctions} and {@link #formatFunctions}.</p>\r\n","package":null,"definedIn":"util\\Date.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":true,"hide":false,"private":false,"name":"defaults","summary":"<p>An object hash containing default date values used during date parsing.</p>\r\n<p>The following properties are available:<div class=\"mdetail-params\"><ul>\r\n<li><code>y</code> : Number<div class=\"sub-desc\">The default year value. (defaults to undefined)</div></li>\r\n<li><code>m</code> : Number<div class=\"sub-desc\">The default 1-based month value. (defaults to undefined)</div></li>\r\n<li><code>d</code> : Number<div class=\"sub-desc\">The default day value. (defaults to undefined)</div></li>\r\n<li><code>h</code> : Number<div class=\"sub-desc\">The default hour value. (defaults to undefined)</div></li>\r\n<li><code>i</code> : Number<div class=\"sub-desc\">The default minute value. (defaults to undefined)</div></li>\r\n<li><code>s</code> : Number<div class=\"sub-desc\">The default second value. (defaults to undefined)</div></li>\r\n<li><code>ms</code> : Number<div class=\"sub-desc\">The default millisecond value. (defaults to undefined)</div></li>\r\n</ul></div></p>\r\n<p>Override these properties to customize the default date values used by the {@link #parseDate} method.</p>\r\n<p><b>Note: In countries which experience Daylight Saving Time (i.e. DST), the <tt>h</tt>, <tt>i</tt>, <tt>s</tt>\r\nand <tt>ms</tt> properties may coincide with the exact time in which DST takes effect.\r\nIt is the responsiblity of the developer to account for this.</b></p>\r\nExample Usage:\r\n<pre><code>\r\n// set default day value to the first day of the month\r\nDate.defaults.d = 1;\r\n\r\n// parse a February date string containing only year and month values.\r\n// setting the default day value to 1 prevents weird date rollover issues\r\n// when attempting to parse the following date string on, for example, March 31st 2009.\r\nDate.parseDate('2009-02', 'Y-m'); // returns a Date object representing February 1st 2009\r\n</code></pre>\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"formatFunctions","summary":"<p>An object hash in which each property is a date formatting function. The property name is the\r\nformat string which corresponds to the produced formatted date string.</p>\r\n<p>This object is automatically populated with date formatting functions as\r\ndate formats are requested for Ext standard formatting strings.</p>\r\n<p>Custom formatting functions may be inserted into this object, keyed by a name which from then on\r\nmay be used as a format string to {@link #format}. Example:</p><pre><code>\r\nDate.formatFunctions['x-date-format'] = myDateFormatter;\r\n</code></pre>\r\n<p>A formatting function should return a string repesentation of the passed Date object:<div class=\"mdetail-params\"><ul>\r\n<li><code>date</code> : Date<div class=\"sub-desc\">The Date to format.</div></li>\r\n</ul></div></p>\r\n<p>To enable date strings to also be <i>parsed</i> according to that format, a corresponding\r\nparsing function must be placed into the {@link #parseFunctions} property.\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"parseFunctions","summary":"<p>An object hash in which each property is a date parsing function. The property name is the\r\nformat string which that function parses.</p>\r\n<p>This object is automatically populated with date parsing functions as\r\ndate formats are requested for Ext standard formatting strings.</p>\r\n<p>Custom parsing functions may be inserted into this object, keyed by a name which from then on\r\nmay be used as a format string to {@link #parseDate}.<p>\r\n<p>Example:</p><pre><code>\r\nDate.parseFunctions['x-date-format'] = myDateParser;\r\n</code></pre>\r\n<p>A parsing function should return a Date object, and is passed the following parameters:<div class=\"mdetail-params\"><ul>\r\n<li><code>date</code> : String<div class=\"sub-desc\">The date string to parse.</div></li>\r\n<li><code>strict</code> : Boolean<div class=\"sub-desc\">True to validate date strings while parsing\r\n(i.e. prevent javascript Date \"rollover\") (The default must be false).\r\nInvalid date strings should return null when parsed.</div></li>\r\n</ul></div></p>\r\n<p>To enable Dates to also be <i>formatted</i> according to that format, a corresponding\r\nformatting function must be placed into the {@link #formatFunctions} property.\r\n"},{"type":"","static":true,"hide":false,"private":false,"name":"useStrict","summary":"Global flag which determines if strict date parsing should be used.\r\nStrict date parsing will not roll-over invalid dates, which is the\r\ndefault behaviour of javascript Date objects.\r\n(see {@link #parseDate} for more information)\r\nDefaults to <tt>false</tt>.\r\n"}],"methods":[{"parameters":[{"type":"String","optional":false,"name":"interval","summary":"A valid date interval enum value."},{"type":"Number","optional":false,"name":"value","summary":"The amount to add to the current date."}],"return":{"type":"Date","summary":"The new Date instance."},"hide":false,"private":false,"name":"add","summary":"Provides a convenient method for performing basic date arithmetic. This method\r\ndoes not modify the Date instance being called - it creates and returns\r\na new Date instance containing the resulting date value.\r\n\r\nExamples:\r\n<pre><code>\r\n// Basic usage:\r\nvar dt = new Date('10/29/2006').add(Date.DAY, 5);\r\ndocument.write(dt); //returns 'Fri Nov 03 2006 00:00:00'\r\n\r\n// Negative values will be subtracted:\r\nvar dt2 = new Date('10/1/2006').add(Date.DAY, -5);\r\ndocument.write(dt2); //returns 'Tue Sep 26 2006 00:00:00'\r\n\r\n// You can even chain several calls together in one line:\r\nvar dt3 = new Date('10/1/2006').add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);\r\ndocument.write(dt3); //returns 'Fri Oct 06 2006 07:30:00'\r\n</code></pre>\r\n\r\n"},{"parameters":[{"type":"Date","optional":false,"name":"start","summary":"Start date"},{"type":"Date","optional":false,"name":"end","summary":"End date"}],"return":{"type":"Boolean","summary":"true if this date falls on or between the given start and end dates."},"hide":false,"private":false,"name":"between","summary":"Checks if this date falls on or between the given start and end dates.\r\n"},{"parameters":[{"type":"Boolean","optional":false,"name":"clone","summary":"true to create a clone of this date, clear the time and return it (defaults to false)."}],"return":{"type":"Date","summary":"this or the clone."},"hide":false,"private":false,"name":"clearTime","summary":"Attempts to clear all time information from this Date by setting the time to midnight of the same day,\r\nautomatically adjusting for Daylight Saving Time (DST) where applicable.\r\n(note: DST timezone information for the browser's host operating system is assumed to be up-to-date)\r\n"},{"parameters":[],"return":{"type":"Date","summary":"The new Date instance."},"hide":false,"private":false,"name":"clone","summary":"Creates and returns a new Date instance with the exact same date value as the called instance.\r\nDates are copied and passed by reference, so if a copied date variable is modified later, the original\r\nvariable will also be changed.  When the intention is to create a new variable that will not\r\nmodify the original instance, you should create a clone.\r\n\r\nExample of correctly cloning a date:\r\n<pre><code>\r\n//wrong way:\r\nvar orig = new Date('10/1/2006');\r\nvar copy = orig;\r\ncopy.setDate(5);\r\ndocument.write(orig);  //returns 'Thu Oct 05 2006'!\r\n\r\n//correct way:\r\nvar orig = new Date('10/1/2006');\r\nvar copy = orig.clone();\r\ncopy.setDate(5);\r\ndocument.write(orig);  //returns 'Thu Oct 01 2006'\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"format","summary":"The format string."}],"return":{"type":"String","summary":"The formatted date."},"hide":false,"private":false,"name":"format","summary":"Formats a date given the supplied format string.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"0 to 364 (365 in leap years)."},"hide":false,"private":false,"name":"getDayOfYear","summary":"Get the numeric day number of the year, adjusted for leap year.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The number of days in the month."},"hide":false,"private":false,"name":"getDaysInMonth","summary":"Get the number of days in the current month, adjusted for leap year.\r\n"},{"parameters":[],"return":{"type":"Date","summary":""},"hide":false,"private":false,"name":"getFirstDateOfMonth","summary":"Get the date of the first day of the month in which this date resides.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The day number (0-6)."},"hide":false,"private":false,"name":"getFirstDayOfMonth","summary":"Get the first day of the current month, adjusted for leap year.  The returned value\r\nis the numeric day index within the week (0-6) which can be used in conjunction with\r\nthe {@link #monthNames} array to retrieve the textual day name.\r\nExample:\r\n<pre><code>\r\nvar dt = new Date('1/10/2007');\r\ndocument.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: 'Monday'\r\n</code></pre>\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"colon","summary":"true to separate the hours and minutes with a colon (defaults to false)."}],"return":{"type":"String","summary":"The 4-character offset string prefixed with + or - (e.g. '-0600')."},"hide":false,"private":false,"name":"getGMTOffset","summary":"Get the offset from GMT of the current date (equivalent to the format specifier 'O').\r\n"},{"parameters":[],"return":{"type":"Date","summary":""},"hide":false,"private":false,"name":"getLastDateOfMonth","summary":"Get the date of the last day of the month in which this date resides.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"The day number (0-6)."},"hide":false,"private":false,"name":"getLastDayOfMonth","summary":"Get the last day of the current month, adjusted for leap year.  The returned value\r\nis the numeric day index within the week (0-6) which can be used in conjunction with\r\nthe {@link #monthNames} array to retrieve the textual day name.\r\nExample:\r\n<pre><code>\r\nvar dt = new Date('1/10/2007');\r\ndocument.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: 'Wednesday'\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"name","summary":"The short/full month name.\r\n@static"}],"return":{"type":"Number","summary":"The zero-based javascript month number."},"hide":false,"private":false,"name":"getMonthNumber","summary":"Get the zero-based javascript month number for the given short/full month name.\r\nOverride this function for international dates.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"day","summary":"A zero-based javascript day number.\r\n@static"}],"return":{"type":"String","summary":"The short day name."},"hide":false,"private":false,"name":"getShortDayName","summary":"Get the short day name for the given day number.\r\nOverride this function for international dates.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"month","summary":"A zero-based javascript month number.\r\n@static"}],"return":{"type":"String","summary":"The short month name."},"hide":false,"private":false,"name":"getShortMonthName","summary":"Get the short month name for the given month number.\r\nOverride this function for international dates.\r\n"},{"parameters":[],"return":{"type":"String","summary":"'st, 'nd', 'rd' or 'th'."},"hide":false,"private":false,"name":"getSuffix","summary":"Get the English ordinal suffix of the current day (equivalent to the format specifier 'S').\r\n"},{"parameters":[],"return":{"type":"String","summary":"The abbreviated timezone name (e.g. 'CST', 'PDT', 'EDT', 'MPST' ...)."},"hide":false,"private":false,"name":"getTimezone","summary":"Get the timezone abbreviation of the current date (equivalent to the format specifier 'T').\r\n\r\nNote: The date string returned by the javascript Date object's toString() method varies\r\nbetween browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).\r\nFor a given date string e.g. \"Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)\",\r\ngetTimezone() first tries to get the timezone abbreviation from between a pair of parentheses\r\n(which may or may not be present), failing which it proceeds to get the timezone abbreviation\r\nfrom the GMT offset portion of the date string.\r\n"},{"parameters":[],"return":{"type":"Number","summary":"1 to 53"},"hide":false,"private":false,"name":"getWeekOfYear","summary":"Get the numeric ISO-8601 week number of the year.\r\n(equivalent to the format specifier 'W', but without a leading zero).\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if the current date is affected by DST."},"hide":false,"private":false,"name":"isDST","summary":"Checks if the current date is affected by Daylight Saving Time (DST).\r\n"},{"parameters":[],"return":{"type":"Boolean","summary":"True if the current date falls within a leap year, false otherwise."},"hide":false,"private":false,"name":"isLeapYear","summary":"Checks if the current date falls within a leap year.\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"year","summary":"4-digit year"},{"type":"Number","optional":false,"name":"month","summary":"1-based month-of-year"},{"type":"Number","optional":false,"name":"day","summary":"Day of month"},{"type":"Number","optional":true,"name":"hour","summary":"Hour"},{"type":"Number","optional":true,"name":"minute","summary":"Minute"},{"type":"Number","optional":true,"name":"second","summary":"Second"},{"type":"Number","optional":true,"name":"millisecond","summary":"Millisecond\r\n@static"}],"return":{"type":"Boolean","summary":"true if the passed parameters do not cause a Date \"rollover\", false otherwise."},"hide":false,"private":false,"name":"isValid","summary":"Checks if the passed Date parameters will cause a javascript Date \"rollover\".\r\n"},{"parameters":[{"type":"String","optional":false,"name":"input","summary":"The raw date string."},{"type":"String","optional":false,"name":"format","summary":"The expected date string format."},{"type":"Boolean","optional":true,"name":"strict","summary":"True to validate date strings while parsing (i.e. prevents javascript Date \"rollover\")\r\n(defaults to false). Invalid date strings will return null when parsed.\r\n@static"}],"return":{"type":"Date","summary":"The parsed Date."},"hide":false,"private":false,"name":"parseDate","summary":"Parses the passed string using the specified date format.\r\nNote that this function expects normal calendar dates, meaning that months are 1-based (i.e. 1 = January).\r\nThe {@link #defaults} hash will be used for any date value (i.e. year, month, day, hour, minute, second or millisecond)\r\nwhich cannot be found in the passed string. If a corresponding default date value has not been specified in the {@link #defaults} hash,\r\nthe current date's year, month, day or DST-adjusted zero-hour time value will be used instead.\r\nKeep in mind that the input date string must precisely match the specified format string\r\nin order for the parse operation to be successful (failed parse operations return a null value).\r\n<p>Example:</p><pre><code>\r\n//dt = Fri May 25 2007 (current date)\r\nvar dt = new Date();\r\n\r\n//dt = Thu May 25 2006 (today&#39;s month/day in 2006)\r\ndt = Date.parseDate(\"2006\", \"Y\");\r\n\r\n//dt = Sun Jan 15 2006 (all date parts specified)\r\ndt = Date.parseDate(\"2006-01-15\", \"Y-m-d\");\r\n\r\n//dt = Sun Jan 15 2006 15:20:01\r\ndt = Date.parseDate(\"2006-01-15 3:20:01 PM\", \"Y-m-d g:i:s A\");\r\n\r\n// attempt to parse Sun Feb 29 2006 03:20:01 in strict mode\r\ndt = Date.parseDate(\"2006-02-29 03:20:01\", \"Y-m-d H:i:s\", true); // returns null\r\n</code></pre>\r\n"}],"events":[]},{"name":"Ext","fullName":"Ext","summary":"Ext core utilities and functions.\r\n\r\n","package":null,"definedIn":"core\\core\\Ext.js,core\\Ext-more.js","xtype":null,"extends":null,"singlton":true,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[{"type":"","static":false,"hide":false,"private":false,"name":"enableFx","summary":"True if the {@link Ext.Fx} Class is available\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"emptyFn","summary":"A reusable empty function\r\n"},{"type":"","static":false,"hide":false,"private":false,"name":"ux","summary":"Namespace alloted for extensions to the framework.\r\n"}],"methods":[{"parameters":[{"type":"Object","optional":false,"name":"obj","summary":"The receiver of the properties"},{"type":"Object","optional":false,"name":"config","summary":"The source of the properties"},{"type":"Object","optional":false,"name":"defaults","summary":"A different object that will also be applied for default values\r\n@member Ext apply"}],"return":{"type":"Object","summary":"returns obj"},"hide":false,"private":false,"name":"apply","summary":"Copies all the properties of config to obj.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"obj","summary":"The receiver of the properties"},{"type":"Object","optional":false,"name":"config","summary":"The source of the properties"}],"return":{"type":"Object","summary":"returns obj"},"hide":false,"private":false,"name":"applyIf","summary":"Copies all the properties of config to obj if they don't already exist.\r\n"},{"parameters":[{"type":"Array/NodeList/Mixed","optional":false,"name":"array","summary":"The array to be iterated. If this\r\nargument is not really an array, the supplied function is called once."},{"type":"Function","optional":false,"name":"fn","summary":"The function to be called with each item. If the\r\nsupplied function returns false, iteration stops and this method returns\r\nthe current <code>index</code>. This function is called with\r\nthe following arguments:\r\n<div class=\"mdetail-params\"><ul>\r\n<li><code>item</code> : <i>Mixed</i>\r\n<div class=\"sub-desc\">The item at the current <code>index</code>\r\nin the passed <code>array</code></div></li>\r\n<li><code>index</code> : <i>Number</i>\r\n<div class=\"sub-desc\">The current index within the array</div></li>\r\n<li><code>allItems</code> : <i>Array</i>\r\n<div class=\"sub-desc\">The <code>array</code> passed as the first\r\nargument to <code>Ext.each</code>.</div></li>\r\n</ul></div>"},{"type":"Object","optional":false,"name":"scope","summary":"The scope to call the specified function.\r\nDefaults to the <code>item</code> at the current <code>index</code>\r\nwithin the passed <code>array</code>."}],"return":null,"hide":false,"private":false,"name":"each","summary":"Iterates an array calling the supplied function.\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"subclass","summary":"The constructor of class being extended."},{"type":"Object","optional":false,"name":"overrides","summary":"<p>A literal with members which are copied into the subclass's\r\nprototype, and are therefore shared between all instances of the new class.</p>\r\n<p>This may contain a special member named <tt><b>constructor</b></tt>. This is used\r\nto define the constructor of the new class, and is returned. If this property is\r\n<i>not</i> specified, a constructor is generated and returned which just calls the\r\nsuperclass's constructor passing on its parameters.</p>\r\n<p><b>It is essential that you call the superclass constructor in any provided constructor. See example code.</b></p>"}],"return":{"type":"Function","summary":"The subclass constructor."},"hide":false,"private":false,"name":"extend","summary":"<p>Extends one class to create a subclass and optionally overrides members with the passed literal. This method\r\nalso adds the function \"override()\" to the subclass that can be used to override members of the class.</p>\r\nFor example, to create a subclass of Ext GridPanel:\r\n<pre><code>\r\nMyGridPanel = Ext.extend(Ext.grid.GridPanel, {\r\n    constructor: function (config) {\r\n\r\n//      Create configuration for this Grid.\r\n        var store = new Ext.data.Store({...});\r\n        var colModel = new Ext.grid.ColumnModel({...});\r\n\r\n//      Create a new config object containing our computed properties\r\n//      *plus* whatever was in the config parameter.\r\n        config = Ext.apply({\r\n            store: store,\r\n            colModel: colModel\r\n        }, config);\r\n\r\n        MyGridPanel.superclass.constructor.call(this, config);\r\n\r\n//      Your postprocessing here\r\n    },\r\n\r\n    yourMethod: function () {\r\n        // etc.\r\n    }\r\n});\r\n</code></pre>\r\n\r\n<p>This function also supports a 3-argument call in which the subclass's constructor is\r\npassed as an argument. In this form, the parameters are as follows:</p>\r\n<div class=\"mdetail-params\"><ul>\r\n<li><code>subclass</code> : Function <div class=\"sub-desc\">The subclass constructor.</div></li>\r\n<li><code>superclass</code> : Function <div class=\"sub-desc\">The constructor of class being extended</div></li>\r\n<li><code>overrides</code> : Object <div class=\"sub-desc\">A literal with members which are copied into the subclass's\r\nprototype, and are therefore shared among all instances of the new class.</div></li>\r\n</ul></div>\r\n\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getBody","summary":"Returns the current document body as an {@link Ext.Element}.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"el","summary":""}],"return":null,"hide":false,"private":false,"name":"getDom","summary":"Return the dom node for the passed String (id), dom node, or Ext.Element.\r\nHere are some examples:\r\n<pre><code>\r\n// gets dom node based on id\r\nvar elDom = Ext.getDom('elId');\r\n// gets dom node based on the dom node\r\nvar elDom1 = Ext.getDom(elDom);\r\n\r\n// If we don&#39;t know if we are working with an\r\n// Ext.Element or a dom node use Ext.getDom\r\nfunction(el) {\r\n    var dom = Ext.getDom(el);\r\n    // do something with the dom node\r\n}\r\n</code></pre>\r\n<b>Note</b>: the dom node to be found actually needs to exist (be rendered, etc)\r\nwhen this method is called to be successful.\r\n"},{"parameters":[{"type":"Mixed","optional":true,"name":"el","summary":"The element to generate an id for"},{"type":"String","optional":true,"name":"prefix","summary":"Id prefix (defaults \"ext-gen\")"}],"return":{"type":"String","summary":"The generated Id."},"hide":false,"private":false,"name":"id","summary":"Generates unique ids. If the element already has an id, it is unchanged\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isArray","summary":"Returns true if the passed value is a JavaScript array, otherwise false.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isBoolean","summary":"Returns true if the passed value is a boolean.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"object","summary":"The object to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isDate","summary":"Returns true if the passed object is a JavaScript date object, otherwise false.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isDefined","summary":"Returns true if the passed value is not undefined.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"},{"type":"Boolean","optional":true,"name":"allowBlank","summary":"true to allow empty strings (defaults to false)"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isEmpty","summary":"<p>Returns true if the passed value is empty.</p>\r\n<p>The value is deemed to be empty if it is<div class=\"mdetail-params\"><ul>\r\n<li>null</li>\r\n<li>undefined</li>\r\n<li>an empty array</li>\r\n<li>a zero length string (Unless the <tt>allowBlank</tt> parameter is <tt>true</tt>)</li>\r\n</ul></div>\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isFunction","summary":"Returns true if the passed value is a JavaScript Function, otherwise false.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isNumber","summary":"Returns true if the passed value is a number. Returns false for non-finite numbers.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isObject","summary":"Returns true if the passed value is a JavaScript Object, otherwise false.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isPrimitive","summary":"Returns true if the passed value is a JavaScript 'primitive', a string, number or boolean.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"}],"return":{"type":"Boolean","summary":""},"hide":false,"private":false,"name":"isString","summary":"Returns true if the passed value is a string.\r\n"},{"parameters":[{"type":"Object/Array","optional":false,"name":"object","summary":"The object or array to be iterated"},{"type":"Function","optional":false,"name":"fn","summary":"The function to be called for each iteration.\r\nThe iteration will stop if the supplied function returns false, or\r\nall array elements / object properties have been covered. The signature\r\nvaries depending on the type of object being interated:\r\n<div class=\"mdetail-params\"><ul>\r\n<li>Arrays : <tt>(Object item, Number index, Array allItems)</tt>\r\n<div class=\"sub-desc\">\r\nWhen iterating an array, the supplied function is called with each item.</div></li>\r\n<li>Objects : <tt>(String key, Object value)</tt>\r\n<div class=\"sub-desc\">\r\nWhen iterating an object, the supplied function is called with each key-value pair in\r\nthe object.</div></li>\r\n</ul></div>"},{"type":"Object","optional":false,"name":"scope","summary":"The scope to call the supplied function with, defaults to\r\nthe specified <tt>object</tt>"}],"return":null,"hide":false,"private":false,"name":"iterate","summary":"Iterates either the elements in an array, or each of the properties in an object.\r\n<b>Note</b>: If you are only iterating arrays, it is better to call {@link #each}.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"namespace1","summary":""},{"type":"String","optional":false,"name":"namespace2","summary":""},{"type":"String","optional":false,"name":"etc","summary":""}],"return":{"type":"Object","summary":"The namespace object. (If multiple arguments are passed, this will be the last namespace created)"},"hide":false,"private":false,"name":"namespace","summary":"Creates namespaces to be used for scoping variables and classes so that they are not global.\r\nSpecifying the last node of a namespace implicitly creates all other nodes. Usage:\r\n<pre><code>\r\nExt.namespace('Company', 'Company.data');\r\nExt.namespace('Company.data'); // equivalent and preferable to above syntax\r\nCompany.Widget = function () { ... }\r\nCompany.data.CustomStore = function (config) { ... }\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"namespace1","summary":""},{"type":"String","optional":false,"name":"namespace2","summary":""},{"type":"String","optional":false,"name":"etc","summary":""}],"return":{"type":"Object","summary":"The namespace object. (If multiple arguments are passed, this will be the last namespace created)"},"hide":false,"private":false,"name":"ns","summary":"Creates namespaces to be used for scoping variables and classes so that they are not global.\r\nSpecifying the last node of a namespace implicitly creates all other nodes. Usage:\r\n<pre><code>\r\nExt.namespace('Company', 'Company.data');\r\nExt.namespace('Company.data'); // equivalent and preferable to above syntax\r\nCompany.Widget = function () { ... }\r\nCompany.data.CustomStore = function (config) { ... }\r\n</code></pre>\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"origclass","summary":"The class to override"},{"type":"Object","optional":false,"name":"overrides","summary":"The list of functions to add to origClass.  This should be specified as an object literal\r\ncontaining one or more methods."}],"return":null,"hide":false,"private":false,"name":"override","summary":"Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.\r\nUsage:<pre><code>\r\nExt.override(MyClass, {\r\n    newMethod1: function () {\r\n        // etc.\r\n    },\r\n    newMethod2: function (foo) {\r\n        // etc.\r\n    }\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"HTMLElement","optional":false,"name":"node","summary":"The node to remove"}],"return":null,"hide":false,"private":false,"name":"removeNode","summary":"Removes a DOM node from the document.  The body node will be ignored if passed in.\r\n"},{"parameters":[{"type":"Iterable","optional":false,"name":"the","summary":"iterable object to be turned into a true Array."}],"return":null,"hide":false,"private":false,"name":"toArray","summary":"Converts any iterable (numeric indices and a length property) into a true array\r\nDon't use this on strings. IE doesn't support \"abc\"[0] which this implementation depends on.\r\nFor strings, use this instead: \"abc\".match(/./g) => [a,b,c];\r\n"},{"parameters":[{"type":"String","optional":false,"name":"url","summary":"The url to append to.\r\n@@param {String} s The content to append to the url."}],"return":null,"hide":false,"private":false,"name":"urlAppend","summary":"Appends content to the query string of a URL, which handles logic for whether to place\r\na question mark or ampersand.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"string","summary":""},{"type":"Boolean","optional":true,"name":"overwrite","summary":"Items of the same name will overwrite previous values instead of creating an an array (Defaults to false)."}],"return":{"type":"Object","summary":"A literal with members"},"hide":false,"private":false,"name":"urlDecode","summary":"Takes an encoded URL and and converts it to an object. Example: <pre><code>\r\nExt.urlDecode(\"foo=1&bar=2\"); // returns {foo: \"1\", bar: \"2\"}\r\nExt.urlDecode(\"foo=1&bar=2&bar=3&bar=4\", false); // returns {foo: \"1\", bar: [\"2\", \"3\", \"4\"]}\r\n</code></pre>\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":""},{"type":"String","optional":true,"name":"pre","summary":"A prefix to add to the url encoded string"}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"urlEncode","summary":"Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return \"foo=1&bar=2\".  Optionally, property values can be arrays, instead of keys and the resulting string that's returned will contain a name/value pair for each array value.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"obj","summary":"The list of behaviors to apply"}],"return":null,"hide":false,"private":false,"name":"addBehaviors","summary":"Applies event listeners to elements by selectors when the document is ready.\r\nThe event name is specified with an <tt>&#64;</tt> suffix.\r\n<pre><code>\r\nExt.addBehaviors({\r\n    // add a listener for click on all anchors in element with id foo\r\n    '#foo a&#64;click' : function (e, t) {\r\n        // do something\r\n    },\r\n    \r\n    // add the same listener to multiple selectors (separated by comma BEFORE the &#64;)\r\n    '#foo a, #bar span.some-class&#64;mouseover' : function () {\r\n        // do something\r\n    }\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Array/NodeList","optional":false,"name":"arr","summary":"The Array from which to remove falsy values."}],"return":{"type":"Array","summary":"The new, compressed Array."},"hide":false,"private":false,"name":"clean","summary":"Creates a copy of the passed Array with falsy values removed.\r\n"},{"parameters":[],"return":{"type":"Object","summary":"The modified object."},"hide":false,"private":false,"name":"copyTo","summary":"Copies a set of named properties fom the source object to the destination object.\r\n<p>example:<pre><code>\r\nImageComponent = Ext.extend(Ext.BoxComponent, {\r\n    initComponent: function () {\r\n        this.autoEl = { tag: 'img' };\r\n        MyComponent.superclass.initComponent.apply(this, arguments);\r\n        this.initialBox = Ext.copyTo({}, this.initialConfig, 'x,y,width,height');\r\n    }\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"arg1","summary":"An {@link Ext.Element}, {@link Ext.Component}, or an Array of either of these to destroy"},{"type":"Mixed","optional":true,"name":"arg2","summary":""},{"type":"Mixed","optional":true,"name":"etc...","summary":""}],"return":null,"hide":false,"private":false,"name":"destroy","summary":"Attempts to destroy any objects passed to it by removing all event listeners, removing them from the\r\nDOM (if applicable) and calling their destroy functions (if available).  This method is primarily\r\nintended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of\r\n{@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be\r\npassed into this function in a single call as separate arguments.\r\n"},{"parameters":[{"type":"Object","optional":false,"name":"o","summary":"The object (most likely a Component) who's properties you wish to destroy."},{"type":"Mixed","optional":false,"name":"arg1","summary":"The name of the property to destroy and remove from the object."},{"type":"Mixed","optional":false,"name":"etc...","summary":"More property names to destroy and remove."}],"return":null,"hide":false,"private":false,"name":"destroyMembers","summary":"Attempts to destroy and then remove a set of named properties of the passed object.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"str","summary":""}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"escapeRe","summary":"Escapes the passed string for use in a regular expression\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"arr","summary":"The array to flatten"}],"return":{"type":"Array","summary":"The new, flattened array."},"hide":false,"private":false,"name":"flatten","summary":"Recursively flattens into 1-d Array. Injects Arrays inline.\r\n"},{"parameters":[{"type":"String","optional":false,"name":"id","summary":"The component {@link Ext.Component#id id}\r\nClass was found."}],"return":null,"hide":false,"private":false,"name":"getCmp","summary":"This is shorthand reference to {@link Ext.ComponentMgr#get}.\r\nLooks up an existing {@link Ext.Component Component} by {@link Ext.Component#id id}\r\n"},{"parameters":[],"return":null,"hide":false,"private":false,"name":"getDoc","summary":"Returns the current HTML document object as an {@link Ext.Element}.\r\n"},{"parameters":[{"type":"Boolean","optional":true,"name":"force","summary":"true to force a recalculation of the value."}],"return":{"type":"Number","summary":"The width of the scrollbar."},"hide":false,"private":false,"name":"getScrollBarWidth","summary":"Utility method for getting the width of the browser scrollbar. This can differ depending on\r\noperating system settings, such as the theme or font size.\r\n"},{"parameters":[{"type":"Array|NodeList","optional":false,"name":"arr","summary":"The Array of items to invoke the method on."},{"type":"String","optional":false,"name":"methodName","summary":"The method name to invoke."},{"type":"Anything","optional":false,"name":"...","summary":"Arguments to send into the method invocation."}],"return":{"type":"Array","summary":"The results of invoking the method on each item in the array."},"hide":false,"private":false,"name":"invoke","summary":"Invokes a method on each item in an Array.\r\n<pre><code>\r\n// Example:\r\nExt.invoke(Ext.query(\"p\"), \"getAttribute\", \"id\");\r\n// [el1.getAttribute(\"id\"), el2.getAttribute(\"id\"), ..., elN.getAttribute(\"id\")]\r\n</code></pre>\r\n"},{"parameters":[{"type":"Array|NodeList","optional":false,"name":"arr","summary":"The Array from which to select the maximum value."},{"type":"Function","optional":true,"name":"comp","summary":"a function to perform the comparision which determines maximization.\r\nIf omitted the \">\" operator will be used. Note: gt = 1; eq = 0; lt = -1"}],"return":{"type":"Object","summary":"The maximum value in the Array."},"hide":false,"private":false,"name":"max","summary":"Returns the maximum value in the Array\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"arr","summary":"The Array to calculate the mean value of."}],"return":{"type":"Number","summary":"The mean."},"hide":false,"private":false,"name":"mean","summary":"Calculates the mean of the Array\r\n"},{"parameters":[{"type":"Array|NodeList","optional":false,"name":"arr","summary":"The Array from which to select the minimum value."},{"type":"Function","optional":true,"name":"comp","summary":"a function to perform the comparision which determines minimization.\r\nIf omitted the \"<\" operator will be used. Note: gt = 1; eq = 0; lt = -1"}],"return":{"type":"Object","summary":"The minimum value in the Array."},"hide":false,"private":false,"name":"min","summary":"Returns the minimum value in the Array.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"Should be a number, but any type will be handled appropriately"},{"type":"Number","optional":false,"name":"defaultValue","summary":"The value to return if the original value is non-numeric"}],"return":{"type":"Number","summary":"Value, if numeric, else defaultValue"},"hide":false,"private":false,"name":"num","summary":"Utility method for validating that a value is numeric, returning the specified default value if it is not.\r\n"},{"parameters":[{"type":"Array|NodeList","optional":false,"name":"arr","summary":"The array to partition"},{"type":"Function","optional":true,"name":"truth","summary":"a function to determine truth.  If this is omitted the element\r\nitself must be able to be evaluated for its truthfulness."}],"return":{"type":"Array","summary":"[true<Array>,false<Array>]"},"hide":false,"private":false,"name":"partition","summary":"Partitions the set into two sets: a true set and a false set.\r\nExample:\r\nExample2:\r\n<pre><code>\r\n// Example 1:\r\nExt.partition([true, false, true, true, false]); // [[true, true, true], [false, false]]\r\n\r\n// Example 2:\r\nExt.partition(\r\n    Ext.query(\"p\"),\r\n    function (val) {\r\n        return val.className == \"class1\"\r\n    }\r\n);\r\n// true are those paragraph elements with a className of \"class1\",\r\n// false set are those that do not have that className.\r\n</code></pre>\r\n"},{"parameters":[{"type":"Array|NodeList","optional":false,"name":"arr","summary":"The Array of items to pluck the value from."},{"type":"String","optional":false,"name":"prop","summary":"The property name to pluck from each element."}],"return":{"type":"Array","summary":"The value from each item in the Array."},"hide":false,"private":false,"name":"pluck","summary":"Plucks the value of a property from each item in the Array\r\n<pre><code>\r\n// Example:\r\nExt.pluck(Ext.query(\"p\"), \"className\"); // [el1.className, el2.className, ..., elN.className]\r\n</code></pre>\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"arr","summary":"The Array to calculate the sum value of."}],"return":{"type":"Number","summary":"The sum."},"hide":false,"private":false,"name":"sum","summary":"Calculates the sum of the Array\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"object","summary":""}],"return":{"type":"String","summary":""},"hide":false,"private":false,"name":"type","summary":"Returns the type of object that is passed in. If the object passed in is null or undefined it\r\nreturn false otherwise it returns one of the following values:<div class=\"mdetail-params\"><ul>\r\n<li><b>string</b>: If the object passed is a string</li>\r\n<li><b>number</b>: If the object passed is a number</li>\r\n<li><b>boolean</b>: If the object passed is a boolean value</li>\r\n<li><b>date</b>: If the object passed is a Date object</li>\r\n<li><b>function</b>: If the object passed is a function reference</li>\r\n<li><b>object</b>: If the object passed is an object</li>\r\n<li><b>array</b>: If the object passed is an array</li>\r\n<li><b>regexp</b>: If the object passed is a regular expression</li>\r\n<li><b>element</b>: If the object passed is a DOM Element</li>\r\n<li><b>nodelist</b>: If the object passed is a DOM NodeList</li>\r\n<li><b>textnode</b>: If the object passed is a DOM text node and contains something other than whitespace</li>\r\n<li><b>whitespace</b>: If the object passed is a DOM text node and contains only whitespace</li>\r\n</ul></div>\r\n"},{"parameters":[{"type":"Array","optional":false,"name":"arr","summary":"The Array to filter"}],"return":{"type":"Array","summary":"The new Array containing unique values."},"hide":false,"private":false,"name":"unique","summary":"Creates a copy of the passed Array, filtered to contain only unique values.\r\n"},{"parameters":[{"type":"Mixed","optional":false,"name":"value","summary":"The value to test"},{"type":"Mixed","optional":false,"name":"defaultValue","summary":"The value to return if the original value is empty"},{"type":"Boolean","optional":true,"name":"allowBlank","summary":"true to allow zero length strings to qualify as non-empty (defaults to false)"}],"return":{"type":"Mixed","summary":"value, if non-empty, else defaultValue"},"hide":false,"private":false,"name":"value","summary":"<p>Utility method for returning a default value if the passed value is empty.</p>\r\n<p>The value is deemed to be empty if it is<div class=\"mdetail-params\"><ul>\r\n<li>null</li>\r\n<li>undefined</li>\r\n<li>an empty array</li>\r\n<li>a zero length string (Unless the <tt>allowBlank</tt> parameter is <tt>true</tt>)</li>\r\n</ul></div>\r\n"},{"parameters":[{"type":"Arrays|NodeLists","optional":false,"name":"arr","summary":"This argument may be repeated. Array(s) to contribute values."},{"type":"Function","optional":true,"name":"zipper","summary":"The last item in the argument list. This will drive how the items are zipped together."}],"return":{"type":"Array","summary":"The zipped set."},"hide":false,"private":false,"name":"zip","summary":"<p>Zips N sets together.</p>\r\n<pre><code>\r\n// Example 1:\r\nExt.zip([1,2,3],[4,5,6]); // [[1,4],[2,5],[3,6]]\r\n// Example 2:\r\nExt.zip(\r\n    [ \"+\", \"-\", \"+\"],\r\n    [  12,  10,  22],\r\n    [  43,  15,  96],\r\n    function (a, b, c) {\r\n        return \"$\" + a + \"\" + b + \".\" + c\r\n    }\r\n); // [\"$+12.43\", \"$-10.15\", \"$+22.96\"]\r\n</code></pre>\r\n"}],"events":[]},{"name":"Function","fullName":"Function","summary":"These functions are available on every Function object (any JavaScript function).\r\n\r\nThese functions are available on every Function object (any JavaScript function).\r\n","package":null,"definedIn":"core\\core\\Ext.js,core\\Ext-more.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[],"return":{"type":"Function","summary":"The new function"},"hide":false,"private":false,"name":"createCallback","summary":"Creates a callback that passes arguments[0], arguments[1], arguments[2], ...\r\nCall directly on any function. Example: <code>myFunction.createCallback(arg1, arg2)</code>\r\nWill create a function that is bound to those 2 args. <b>If a specific scope is required in the\r\ncallback, use {@link #createDelegate} instead.</b> The function returned by createCallback always\r\nexecutes in the window scope.\r\n<p>This method is required when you want to pass arguments to a callback function.  If no arguments\r\nare needed, you can simply pass a reference to the function as a callback (e.g., callback: myFn).\r\nHowever, if you tried to pass a function with arguments (e.g., callback: myFn(arg1, arg2)) the function\r\nwould simply execute immediately when the code is parsed. Example usage:\r\n<pre><code>\r\nvar sayHi = function (name) {\r\n    alert('Hi, ' + name);\r\n}\r\n\r\n// clicking the button alerts \"Hi, Fred\"\r\nnew Ext.Button({\r\n    text: 'Say Hi',\r\n    renderTo: Ext.getBody(),\r\n    handler: sayHi.createCallback('Fred')\r\n});\r\n</code></pre>\r\n"},{"parameters":[{"type":"Object","optional":true,"name":"obj","summary":"The object for which the scope is set"},{"type":"Array","optional":true,"name":"args","summary":"Overrides arguments for the call. (Defaults to the arguments passed by the caller)"},{"type":"Boolean/Number","optional":true,"name":"appendArgs","summary":"if True args are appended to call args instead of overriding,\r\nif a number the args are inserted at the specified position"}],"return":{"type":"Function","summary":"The new function"},"hide":false,"private":false,"name":"createDelegate","summary":"Creates a delegate (callback) that sets the scope to obj.\r\nCall directly on any function. Example: <code>this.myFunction.createDelegate(this, [arg1, arg2])</code>\r\nWill create a function that is automatically scoped to obj so that the <tt>this</tt> variable inside the\r\ncallback points to obj. Example usage:\r\n<pre><code>\r\nvar sayHi = function (name) {\r\n    // Note this use of \"this.text\" here.  This function expects to\r\n    // execute within a scope that contains a text property.  In this\r\n    // example, the \"this\" variable is pointing to the btn object that\r\n    // was passed in createDelegate below.\r\n    alert('Hi, ' + name + '. You clicked the \"' + this.text + '\" button.');\r\n}\r\n\r\nvar btn = new Ext.Button({\r\n    text: 'Say Hi',\r\n    renderTo: Ext.getBody()\r\n});\r\n\r\n// This callback will execute in the scope of the\r\n// button instance. Clicking the button alerts\r\n// \"Hi, Fred. You clicked the \"Say Hi\" button.\"\r\nbtn.on('click', sayHi.createDelegate(btn, ['Fred']));\r\n</code></pre>\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fcn","summary":"The function to call before the original"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the passed fcn (Defaults to scope of original function or window)"}],"return":{"type":"Function","summary":"The new function"},"hide":false,"private":false,"name":"createInterceptor","summary":"Creates an interceptor function. The passed fcn is called before the original one. If it returns false,\r\nthe original one is not called. The resulting function returns the results of the original function.\r\nThe passed fcn is called with the parameters of the original function. Example usage:\r\n<pre><code>\r\nvar sayHi = function (name) {\r\n    alert('Hi, ' + name);\r\n}\r\n\r\nsayHi('Fred'); // alerts \"Hi, Fred\"\r\n\r\n// create a new function that validates input without\r\n// directly modifying the original function:\r\nvar sayHiToFriend = sayHi.createInterceptor(function (name) {\r\n    return name == 'Brian';\r\n});\r\n\r\nsayHiToFriend('Fred');  // no alert\r\nsayHiToFriend('Brian'); // alerts \"Hi, Brian\"\r\n</code></pre>\r\n"},{"parameters":[{"type":"Number","optional":false,"name":"millis","summary":"The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)"},{"type":"Object","optional":true,"name":"obj","summary":"The object for which the scope is set"},{"type":"Array","optional":true,"name":"args","summary":"Overrides arguments for the call. (Defaults to the arguments passed by the caller)"},{"type":"Boolean/Number","optional":true,"name":"appendArgs","summary":"if True args are appended to call args instead of overriding,\r\nif a number the args are inserted at the specified position"}],"return":{"type":"Number","summary":"The timeout id that can be used with clearTimeout"},"hide":false,"private":false,"name":"defer","summary":"Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:\r\n<pre><code>\r\nvar sayHi = function (name) {\r\n    alert('Hi, ' + name);\r\n}\r\n\r\n// executes immediately:\r\nsayHi('Fred');\r\n\r\n// executes after 2 seconds:\r\nsayHi.defer(2000, this, ['Fred']);\r\n\r\n// this syntax is sometimes useful for deferring\r\n// execution of an anonymous function:\r\n(function () {\r\n    alert('Anonymous');\r\n}).defer(100);\r\n</code></pre>\r\n"},{"parameters":[{"type":"Function","optional":false,"name":"fcn","summary":"The function to sequence"},{"type":"Object","optional":true,"name":"scope","summary":"The scope of the passed fcn (Defaults to scope of original function or window)"}],"return":{"type":"Function","summary":"The new function"},"hide":false,"private":false,"name":"createSequence","summary":"Create a combined function call sequence of the original function + the passed function.\r\nThe resulting function returns the results of the original function.\r\nThe passed fcn is called with the parameters of the original function. Example usage:\r\n<pre><code>\r\nvar sayHi = function (name) {\r\n    alert('Hi, ' + name);\r\n}\r\n\r\nsayHi('Fred'); // alerts \"Hi, Fred\"\r\n\r\nvar sayGoodbye = sayHi.createSequence(function (name) {\r\n    alert('Bye, ' + name);\r\n});\r\n\r\nsayGoodbye('Fred'); // both alerts show\r\n</code></pre>\r\n"}],"events":[]},{"name":"Number","fullName":"Number","summary":"","package":null,"definedIn":"core\\Ext-more.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"Number","optional":false,"name":"min","summary":"The minimum number in the range"},{"type":"Number","optional":false,"name":"max","summary":"The maximum number in the range"}],"return":{"type":"Number","summary":"The constrained value if outside the range, otherwise the current value"},"hide":false,"private":false,"name":"constrain","summary":"Checks whether or not the current number is within a desired range.  If the number is already within the\r\nrange it is returned, otherwise the min or max value is returned depending on which side of the range is\r\nexceeded.  Note that this method returns the constrained value but does not change the current number.\r\n"}],"events":[]},{"name":"String","fullName":"String","summary":"These functions are available on every String object.\r\n\r\nThese functions are available as static methods on the JavaScript String object.\r\n","package":null,"definedIn":"core\\core\\Ext.js,core\\Ext-more.js","xtype":null,"extends":null,"singlton":false,"private":false,"for":null,"deprecated":false,"constructor":null,"subclasses":"","configOptions":[],"properties":[],"methods":[{"parameters":[{"type":"String","optional":false,"name":"string","summary":"The tokenized string to be formatted"},{"type":"String","optional":false,"name":"value1","summary":"The value to replace token {0}"},{"type":"String","optional":false,"name":"value2","summary":"Etc...\r\n@static"}],"return":{"type":"String","summary":"The formatted string"},"hide":false,"private":false,"name":"format","summary":"Allows you to define a tokenized string and pass an arbitrary number of arguments to replace the tokens.  Each\r\ntoken must be unique, and must increment in the format {0}, {1}, etc.  Example usage:\r\n<pre><code>\r\nvar cls = 'my-class', text = 'Some text';\r\nvar s = String.format('&lt;div class=\"{0}\">{1}&lt;/div>', cls, text);\r\n// s now contains the string: '&lt;div class=\"my-class\">Some text&lt;/div>'\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"string","summary":"The string to escape\r\n@static"}],"return":{"type":"String","summary":"The escaped string"},"hide":false,"private":false,"name":"escape","summary":"Escapes the passed string for ' and \\\r\n"},{"parameters":[{"type":"Date","optional":true,"name":"date","summary":"Defaults to now\r\n@member Date getElapsed"}],"return":{"type":"Number","summary":"The diff in milliseconds"},"hide":false,"private":false,"name":"getElapsed","summary":" Returns the number of milliseconds between this date and date\r\n"},{"parameters":[{"type":"String","optional":false,"name":"string","summary":"The original string"},{"type":"Number","optional":false,"name":"size","summary":"The total length of the output string"},{"type":"String","optional":true,"name":"char","summary":"The character with which to pad the original string (defaults to empty string \" \")\r\n@static"}],"return":{"type":"String","summary":"The padded string"},"hide":false,"private":false,"name":"leftPad","summary":"Pads the left side of a string with a specified character.  This is especially useful\r\nfor normalizing number and date strings.  Example usage:\r\n<pre><code>\r\nvar s = String.leftPad('123', 5, '0');\r\n// s now contains the string: '00123'\r\n</code></pre>\r\n"},{"parameters":[{"type":"String","optional":false,"name":"value","summary":"The value to compare to the current string"},{"type":"String","optional":false,"name":"other","summary":"The new value to use if the string already equals the first value passed in"}],"return":{"type":"String","summary":"The new value"},"hide":false,"private":false,"name":"toggle","summary":"Utility function that allows you to easily switch a string between two alternating values.  The passed value\r\nis compared to the current string, and if they are equal, the other value that was passed in is returned.  If\r\nthey are already different, the first value passed in is returned.  Note that this method returns the new value\r\nbut does not change the current string.\r\n<pre><code>\r\n// alternate sort directions\r\nsort = sort.toggle('ASC', 'DESC');\r\n\r\n// instead of conditional logic:\r\nsort = (sort == 'ASC' ? 'DESC' : 'ASC');\r\n</code></pre>\r\n"},{"parameters":[],"return":{"type":"String","summary":"The trimmed string"},"hide":false,"private":false,"name":"trim","summary":"Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:\r\n<pre><code>\r\nvar s = '  foo bar  ';\r\nalert('-' + s + '-');         //alerts \"- foo bar -\"\r\nalert('-' + s.trim() + '-');  //alerts \"-foo bar-\"\r\n</code></pre>\r\n"}],"events":[]}]}
